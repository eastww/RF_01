
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a0  080068a0  00020154  2**0
                  CONTENTS
  4 .ARM          00000000  080068a0  080068a0  00020154  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a0  080068a0  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  080068a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000154  080069fc  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  080069fc  00020948  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126c5  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d04  00000000  00000000  00032884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00036588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ead  00000000  00000000  000378f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161fd  00000000  00000000  000387a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001caff  00000000  00000000  0004e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006be46  00000000  00000000  0006b4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000488c  00000000  00000000  000d72e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000dbb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000154 	.word	0x20000154
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006660 	.word	0x08006660

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000158 	.word	0x20000158
 8000104:	08006660 	.word	0x08006660

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <rfUartGetMessage>:
 * @param event 
 * @param newStateData 
 */
void rfUartGetMessage( void *oldStateData, struct event *event,
      void *newStateData )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	led2Toggle();
 800022c:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <rfUartGetMessage+0x78>)
 800022e:	2201      	movs	r2, #1
 8000230:	2120      	movs	r1, #32
 8000232:	0018      	movs	r0, r3
 8000234:	f002 ffc9 	bl	80031ca <HAL_GPIO_WritePin>
 8000238:	2032      	movs	r0, #50	; 0x32
 800023a:	f001 fb25 	bl	8001888 <Delay_Ms>
 800023e:	4b16      	ldr	r3, [pc, #88]	; (8000298 <rfUartGetMessage+0x78>)
 8000240:	2200      	movs	r2, #0
 8000242:	2120      	movs	r1, #32
 8000244:	0018      	movs	r0, r3
 8000246:	f002 ffc0 	bl	80031ca <HAL_GPIO_WritePin>
    bufferSize = uartGetData(BSP_TTL_CHANNEL1, txBuffer + 1, 256);
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <rfUartGetMessage+0x7c>)
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	0052      	lsls	r2, r2, #1
 8000250:	0019      	movs	r1, r3
 8000252:	2000      	movs	r0, #0
 8000254:	f001 fd08 	bl	8001c68 <uartGetData>
 8000258:	0002      	movs	r2, r0
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <rfUartGetMessage+0x80>)
 800025c:	601a      	str	r2, [r3, #0]
	if (bufferSize)
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <rfUartGetMessage+0x80>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d013      	beq.n	800028e <rfUartGetMessage+0x6e>
	{
		/* send the buffer data to uart1 */
        uartSendData(BSP_TTL_CHANNEL1, txBuffer, bufferSize);
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <rfUartGetMessage+0x80>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	b29a      	uxth	r2, r3
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <rfUartGetMessage+0x84>)
 800026e:	0019      	movs	r1, r3
 8000270:	2000      	movs	r0, #0
 8000272:	f001 fc9b 	bl	8001bac <uartSendData>
        // HAL_Delay_nMs(1000);

		/* reset the value */
		// bufferSize = 0;
        txBuffer[0] = bufferSize + 1;
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <rfUartGetMessage+0x80>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	3301      	adds	r3, #1
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <rfUartGetMessage+0x84>)
 8000282:	701a      	strb	r2, [r3, #0]
        uartResetData(BSP_TTL_CHANNEL1);
 8000284:	2000      	movs	r0, #0
 8000286:	f001 fd1d 	bl	8001cc4 <uartResetData>
        // RF_StartTx(txBuffer, txBuffer[0] , INFINITE);
        rfEntryTx();
 800028a:	f000 f8e7 	bl	800045c <rfEntryTx>
	}
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b004      	add	sp, #16
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	48000400 	.word	0x48000400
 800029c:	20000271 	.word	0x20000271
 80002a0:	20000370 	.word	0x20000370
 80002a4:	20000270 	.word	0x20000270

080002a8 <checkGroupStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void checkGroupStateEnter( void *stateData, struct event *event )
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
    // RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
    // rfTimerEnable();
}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b002      	add	sp, #8
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <checkGroupStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void checkGroupStateExit( void *stateData, struct event *event )
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
    // rfTimerDisable();
    rfEntryRx();
 80002c6:	f000 f8af 	bl	8000428 <rfEntryRx>
    bufferSize = 0;
 80002ca:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <checkGroupStateExit+0x1c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b002      	add	sp, #8
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000370 	.word	0x20000370

080002dc <errorStateHandler>:
 * 
 * @param stateData 
 * @param event 
 */
void errorStateHandler(void *stateData, struct event *event )
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
   puts( "ENTERED ERROR STATE!" );
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <errorStateHandler+0x1c>)
 80002e8:	0018      	movs	r0, r3
 80002ea:	f005 fe95 	bl	8006018 <puts>
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b002      	add	sp, #8
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	08006678 	.word	0x08006678

080002fc <rfRecvStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 80002fc:	b5b0      	push	{r4, r5, r7, lr}
 80002fe:	b0c4      	sub	sp, #272	; 0x110
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
    rfExitRx();
 8000308:	f000 f8a0 	bl	800044c <rfExitRx>
    uint8_t user_rxBuffer[RF_PACKET_SIZE] = { 0 };
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <rfRecvStateAction+0x5c>)
 800030e:	2488      	movs	r4, #136	; 0x88
 8000310:	0064      	lsls	r4, r4, #1
 8000312:	191b      	adds	r3, r3, r4
 8000314:	19db      	adds	r3, r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	3304      	adds	r3, #4
 800031c:	22fc      	movs	r2, #252	; 0xfc
 800031e:	2100      	movs	r1, #0
 8000320:	0018      	movs	r0, r3
 8000322:	f005 ff75 	bl	8006210 <memset>
    memcpy(user_rxBuffer, g_rxBuffer, g_rxBuffer[0]);
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <rfRecvStateAction+0x60>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	001a      	movs	r2, r3
 800032c:	490b      	ldr	r1, [pc, #44]	; (800035c <rfRecvStateAction+0x60>)
 800032e:	2510      	movs	r5, #16
 8000330:	197b      	adds	r3, r7, r5
 8000332:	0018      	movs	r0, r3
 8000334:	f006 f801 	bl	800633a <memcpy>
    uartSendData(BSP_TTL_CHANNEL1, user_rxBuffer, user_rxBuffer[0]);
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <rfRecvStateAction+0x5c>)
 800033a:	191b      	adds	r3, r3, r4
 800033c:	19db      	adds	r3, r3, r7
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	197b      	adds	r3, r7, r5
 8000344:	0019      	movs	r1, r3
 8000346:	2000      	movs	r0, #0
 8000348:	f001 fc30 	bl	8001bac <uartSendData>
//    led2Toggle();
    
    rfEntryRx();
 800034c:	f000 f86c 	bl	8000428 <rfEntryRx>
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b044      	add	sp, #272	; 0x110
 8000356:	bdb0      	pop	{r4, r5, r7, pc}
 8000358:	ffffff00 	.word	0xffffff00
 800035c:	20000170 	.word	0x20000170

08000360 <rfRecvEnableRecv>:
 * @param event 
 * @param newStateData 
 */
void rfRecvEnableRecv( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 800036c:	2301      	movs	r3, #1
 800036e:	425a      	negs	r2, r3
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	0059      	lsls	r1, r3, #1
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <rfRecvEnableRecv+0x24>)
 8000376:	0018      	movs	r0, r3
 8000378:	f001 f8e4 	bl	8001544 <RF_StartRx>
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b004      	add	sp, #16
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000170 	.word	0x20000170

08000388 <rfRecvStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateEnter( void *stateData, struct event *event )
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 8000392:	2301      	movs	r3, #1
 8000394:	425a      	negs	r2, r3
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	0059      	lsls	r1, r3, #1
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <rfRecvStateEnter+0x24>)
 800039c:	0018      	movs	r0, r3
 800039e:	f001 f8d1 	bl	8001544 <RF_StartRx>
    // rfTimerEnable();
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b002      	add	sp, #8
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	20000170 	.word	0x20000170

080003b0 <rfRecvStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateExit( void *stateData, struct event *event )
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
    rfExitRx();
 80003ba:	f000 f847 	bl	800044c <rfExitRx>
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <rfSendStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
    
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b004      	add	sp, #16
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <rfSendStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateEnter( void *stateData, struct event *event )
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
   led1Toggle();
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <rfSendStateEnter+0x30>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	2110      	movs	r1, #16
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 feec 	bl	80031ca <HAL_GPIO_WritePin>
 80003f2:	2032      	movs	r0, #50	; 0x32
 80003f4:	f001 fa48 	bl	8001888 <Delay_Ms>
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <rfSendStateEnter+0x30>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2110      	movs	r1, #16
 80003fe:	0018      	movs	r0, r3
 8000400:	f002 fee3 	bl	80031ca <HAL_GPIO_WritePin>
//    rfTimerDisable();
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}
 800040c:	48000400 	.word	0x48000400

08000410 <rfSendStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateExit( void *stateData, struct event *event )
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
//    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
//    rfTimerEnable();
   rfEntryRx();
 800041a:	f000 f805 	bl	8000428 <rfEntryRx>
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <rfEntryRx>:
/**
 * @brief rf entry rx status
 * 
 */
void rfEntryRx(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 800042c:	2301      	movs	r3, #1
 800042e:	425a      	negs	r2, r3
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	0059      	lsls	r1, r3, #1
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <rfEntryRx+0x20>)
 8000436:	0018      	movs	r0, r3
 8000438:	f001 f884 	bl	8001544 <RF_StartRx>
    rfTimerEnable();
 800043c:	f001 fac6 	bl	80019cc <rfTimerEnable>
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	20000170 	.word	0x20000170

0800044c <rfExitRx>:
/**
 * @brief rf exit rx status
 * 
 */
void rfExitRx(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    rfTimerDisable();
 8000450:	f001 fac8 	bl	80019e4 <rfTimerDisable>
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <rfEntryTx>:
/**
 * @brief rf entry tx status
 * 
 */
void rfEntryTx(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
    RF_StartTx(txBuffer, txBuffer[0] , INFINITE);
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <rfEntryTx+0x20>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b299      	uxth	r1, r3
 8000466:	2301      	movs	r3, #1
 8000468:	425a      	negs	r2, r3
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <rfEntryTx+0x20>)
 800046c:	0018      	movs	r0, r3
 800046e:	f001 f893 	bl	8001598 <RF_StartTx>
    rfTimerEnable();
 8000472:	f001 faab 	bl	80019cc <rfTimerEnable>
}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000270 	.word	0x20000270

08000480 <stateActuator>:
 * 
 * @param None
 * @retval None
 */
void stateActuator(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
   struct msg *msg;
   stateM_init(&m, &rfRecvState, &errorState);
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <stateActuator+0x40>)
 8000488:	490e      	ldr	r1, [pc, #56]	; (80004c4 <stateActuator+0x44>)
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <stateActuator+0x48>)
 800048c:	0018      	movs	r0, r3
 800048e:	f005 fad4 	bl	8005a3a <stateM_init>
   mq_init(&mq);
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <stateActuator+0x4c>)
 8000494:	0018      	movs	r0, r3
 8000496:	f005 fa2a 	bl	80058ee <mq_init>

   //  /* triggle state machine */
   //  mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
   
   /* rf default state: rx state */
   rfEntryRx();
 800049a:	f7ff ffc5 	bl	8000428 <rfEntryRx>

   while ( 1 )
   {
      if ((msg = mq_pop( &mq )) != NULL)
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <stateActuator+0x4c>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f005 fa9a 	bl	80059da <mq_pop>
 80004a6:	0003      	movs	r3, r0
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f6      	beq.n	800049e <stateActuator+0x1e>
      {
         stateM_handleEvent(&m, (struct event *)msg);
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <stateActuator+0x48>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f005 fad6 	bl	8005a68 <stateM_handleEvent>
      if ((msg = mq_pop( &mq )) != NULL)
 80004bc:	e7ef      	b.n	800049e <stateActuator+0x1e>
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	200000b8 	.word	0x200000b8
 80004c4:	2000006c 	.word	0x2000006c
 80004c8:	20000374 	.word	0x20000374
 80004cc:	20000380 	.word	0x20000380

080004d0 <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 80004d4:	21ff      	movs	r1, #255	; 0xff
 80004d6:	207f      	movs	r0, #127	; 0x7f
 80004d8:	f000 fce8 	bl	8000eac <Cmt2300_WriteReg>
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 80004e6:	2061      	movs	r0, #97	; 0x61
 80004e8:	f000 fcc9 	bl	8000e7e <Cmt2300_ReadReg>
 80004ec:	0003      	movs	r3, r0
 80004ee:	001a      	movs	r2, r3
 80004f0:	230f      	movs	r3, #15
 80004f2:	4013      	ands	r3, r2
 80004f4:	b2db      	uxtb	r3, r3
}
 80004f6:	0018      	movs	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 8000508:	230f      	movs	r3, #15
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	e013      	b.n	800053a <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 8000512:	250e      	movs	r5, #14
 8000514:	197c      	adds	r4, r7, r5
 8000516:	f7ff ffe4 	bl	80004e2 <Cmt2300_GetChipStatus>
 800051a:	0003      	movs	r3, r0
 800051c:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 800051e:	1dfa      	adds	r2, r7, #7
 8000520:	197b      	adds	r3, r7, r5
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	d101      	bne.n	800052e <Cmt2300_WaitChipStatus+0x32>
            return true;
 800052a:	2301      	movs	r3, #1
 800052c:	e00b      	b.n	8000546 <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 800052e:	210f      	movs	r1, #15
 8000530:	187b      	adds	r3, r7, r1
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	187b      	adds	r3, r7, r1
 8000536:	3201      	adds	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	230f      	movs	r3, #15
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b31      	cmp	r3, #49	; 0x31
 8000542:	d9e6      	bls.n	8000512 <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 8000544:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bdb0      	pop	{r4, r5, r7, pc}

0800054e <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b084      	sub	sp, #16
 8000552:	af00      	add	r7, sp, #0
 8000554:	0002      	movs	r2, r0
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 800055a:	2045      	movs	r0, #69	; 0x45
 800055c:	f000 fc8f 	bl	8000e7e <Cmt2300_ReadReg>
 8000560:	0003      	movs	r3, r0
 8000562:	0019      	movs	r1, r3
 8000564:	200f      	movs	r0, #15
 8000566:	183b      	adds	r3, r7, r0
 8000568:	2201      	movs	r2, #1
 800056a:	4391      	bics	r1, r2
 800056c:	000a      	movs	r2, r1
 800056e:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 8000570:	183a      	adds	r2, r7, r0
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4313      	orrs	r3, r2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	0019      	movs	r1, r3
 800057e:	2045      	movs	r0, #69	; 0x45
 8000580:	f000 fc94 	bl	8000eac <Cmt2300_WriteReg>
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}

0800058c <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 8000590:	2110      	movs	r1, #16
 8000592:	2060      	movs	r0, #96	; 0x60
 8000594:	f000 fc8a 	bl	8000eac <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff ffaf 	bl	80004fc <Cmt2300_WaitChipStatus>
 800059e:	0003      	movs	r3, r0
}
 80005a0:	0018      	movs	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 80005aa:	2102      	movs	r1, #2
 80005ac:	2060      	movs	r0, #96	; 0x60
 80005ae:	f000 fc7d 	bl	8000eac <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 80005b2:	2002      	movs	r0, #2
 80005b4:	f7ff ffa2 	bl	80004fc <Cmt2300_WaitChipStatus>
 80005b8:	0003      	movs	r3, r0
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Cmt2300_GoTx>:
* @name    Cmt2300_GoTx
* @desc    Entry Tx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoTx(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_TX);
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	2060      	movs	r0, #96	; 0x60
 80005c8:	f000 fc70 	bl	8000eac <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_TX);
 80005cc:	2006      	movs	r0, #6
 80005ce:	f7ff ff95 	bl	80004fc <Cmt2300_WaitChipStatus>
 80005d2:	0003      	movs	r3, r0
}
 80005d4:	0018      	movs	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <Cmt2300_GoRx>:
* @name    Cmt2300_GoRx
* @desc    Entry Rx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoRx(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_RX);
 80005de:	2108      	movs	r1, #8
 80005e0:	2060      	movs	r0, #96	; 0x60
 80005e2:	f000 fc63 	bl	8000eac <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_RX);
 80005e6:	2005      	movs	r0, #5
 80005e8:	f7ff ff88 	bl	80004fc <Cmt2300_WaitChipStatus>
 80005ec:	0003      	movs	r3, r0
}
 80005ee:	0018      	movs	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	0002      	movs	r2, r0
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	0019      	movs	r1, r3
 8000606:	2065      	movs	r0, #101	; 0x65
 8000608:	f000 fc50 	bl	8000eac <Cmt2300_WriteReg>
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b002      	add	sp, #8
 8000612:	bd80      	pop	{r7, pc}

08000614 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	1c0a      	adds	r2, r1, #0
 8000624:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	1dfa      	adds	r2, r7, #7
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	211f      	movs	r1, #31
 800062e:	400a      	ands	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000632:	2066      	movs	r0, #102	; 0x66
 8000634:	f000 fc23 	bl	8000e7e <Cmt2300_ReadReg>
 8000638:	0003      	movs	r3, r0
 800063a:	001a      	movs	r2, r3
 800063c:	231f      	movs	r3, #31
 800063e:	439a      	bics	r2, r3
 8000640:	0013      	movs	r3, r2
 8000642:	b25a      	sxtb	r2, r3
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b25a      	sxtb	r2, r3
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	0019      	movs	r1, r3
 8000658:	2066      	movs	r0, #102	; 0x66
 800065a:	f000 fc27 	bl	8000eac <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 800065e:	1dbb      	adds	r3, r7, #6
 8000660:	1dba      	adds	r2, r7, #6
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	211f      	movs	r1, #31
 8000666:	400a      	ands	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 800066a:	2067      	movs	r0, #103	; 0x67
 800066c:	f000 fc07 	bl	8000e7e <Cmt2300_ReadReg>
 8000670:	0003      	movs	r3, r0
 8000672:	001a      	movs	r2, r3
 8000674:	231f      	movs	r3, #31
 8000676:	439a      	bics	r2, r3
 8000678:	0013      	movs	r3, r2
 800067a:	b25a      	sxtb	r2, r3
 800067c:	1dbb      	adds	r3, r7, #6
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b25b      	sxtb	r3, r3
 8000682:	4313      	orrs	r3, r2
 8000684:	b25a      	sxtb	r2, r3
 8000686:	1dbb      	adds	r3, r7, #6
 8000688:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 800068a:	1dbb      	adds	r3, r7, #6
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	0019      	movs	r1, r3
 8000690:	2067      	movs	r0, #103	; 0x67
 8000692:	f000 fc0b 	bl	8000eac <Cmt2300_WriteReg>
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}

0800069e <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 800069e:	b5b0      	push	{r4, r5, r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	0002      	movs	r2, r0
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 80006aa:	250f      	movs	r5, #15
 80006ac:	197c      	adds	r4, r7, r5
 80006ae:	2066      	movs	r0, #102	; 0x66
 80006b0:	f000 fbe5 	bl	8000e7e <Cmt2300_ReadReg>
 80006b4:	0003      	movs	r3, r0
 80006b6:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10d      	bne.n	80006dc <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 80006c0:	197b      	adds	r3, r7, r5
 80006c2:	197a      	adds	r2, r7, r5
 80006c4:	7812      	ldrb	r2, [r2, #0]
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	4249      	negs	r1, r1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 80006ce:	197b      	adds	r3, r7, r5
 80006d0:	197a      	adds	r2, r7, r5
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	438a      	bics	r2, r1
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e010      	b.n	80006fe <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d10c      	bne.n	80006fe <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 80006e4:	200f      	movs	r0, #15
 80006e6:	183b      	adds	r3, r7, r0
 80006e8:	183a      	adds	r2, r7, r0
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	217f      	movs	r1, #127	; 0x7f
 80006ee:	400a      	ands	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 80006f2:	183b      	adds	r3, r7, r0
 80006f4:	183a      	adds	r2, r7, r0
 80006f6:	7812      	ldrb	r2, [r2, #0]
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	430a      	orrs	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 80006fe:	230f      	movs	r3, #15
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	0019      	movs	r1, r3
 8000706:	2066      	movs	r0, #102	; 0x66
 8000708:	f000 fbd0 	bl	8000eac <Cmt2300_WriteReg>
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bdb0      	pop	{r4, r5, r7, pc}

08000714 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	0019      	movs	r1, r3
 8000726:	2068      	movs	r0, #104	; 0x68
 8000728:	f000 fbc0 	bl	8000eac <Cmt2300_WriteReg>
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}

08000734 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	0002      	movs	r2, r0
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 8000740:	250f      	movs	r5, #15
 8000742:	197c      	adds	r4, r7, r5
 8000744:	2069      	movs	r0, #105	; 0x69
 8000746:	f000 fb9a 	bl	8000e7e <Cmt2300_ReadReg>
 800074a:	0003      	movs	r3, r0
 800074c:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d006      	beq.n	8000764 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 8000756:	197b      	adds	r3, r7, r5
 8000758:	197a      	adds	r2, r7, r5
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	2102      	movs	r1, #2
 800075e:	430a      	orrs	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	e006      	b.n	8000772 <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 8000764:	220f      	movs	r2, #15
 8000766:	18bb      	adds	r3, r7, r2
 8000768:	18ba      	adds	r2, r7, r2
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	2102      	movs	r1, #2
 800076e:	438a      	bics	r2, r1
 8000770:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 8000772:	230f      	movs	r3, #15
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	0019      	movs	r1, r3
 800077a:	2069      	movs	r0, #105	; 0x69
 800077c:	f000 fb96 	bl	8000eac <Cmt2300_WriteReg>
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b004      	add	sp, #16
 8000786:	bdb0      	pop	{r4, r5, r7, pc}

08000788 <Cmt2300_EnableReadFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableReadFifo
* @desc    Enable SPI to read the FIFO.
* *********************************************************/
void Cmt2300_EnableReadFifo(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 800078e:	1dfc      	adds	r4, r7, #7
 8000790:	2069      	movs	r0, #105	; 0x69
 8000792:	f000 fb74 	bl	8000e7e <Cmt2300_ReadReg>
 8000796:	0003      	movs	r3, r0
 8000798:	7023      	strb	r3, [r4, #0]
    tmp &= ~CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	1dfa      	adds	r2, r7, #7
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	2101      	movs	r1, #1
 80007a2:	438a      	bics	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_FIFO_RX_TX_SEL;
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	1dfa      	adds	r2, r7, #7
 80007aa:	7812      	ldrb	r2, [r2, #0]
 80007ac:	2104      	movs	r1, #4
 80007ae:	438a      	bics	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	0019      	movs	r1, r3
 80007b8:	2069      	movs	r0, #105	; 0x69
 80007ba:	f000 fb77 	bl	8000eac <Cmt2300_WriteReg>
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b003      	add	sp, #12
 80007c4:	bd90      	pop	{r4, r7, pc}

080007c6 <Cmt2300_EnableWriteFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableWriteFifo
* @desc    Enable SPI to write the FIFO.
* *********************************************************/
void Cmt2300_EnableWriteFifo(void)
{
 80007c6:	b590      	push	{r4, r7, lr}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 80007cc:	1dfc      	adds	r4, r7, #7
 80007ce:	2069      	movs	r0, #105	; 0x69
 80007d0:	f000 fb55 	bl	8000e7e <Cmt2300_ReadReg>
 80007d4:	0003      	movs	r3, r0
 80007d6:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	1dfa      	adds	r2, r7, #7
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	430a      	orrs	r2, r1
 80007e2:	701a      	strb	r2, [r3, #0]
    tmp |= CMT2300_MASK_FIFO_RX_TX_SEL;
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	2104      	movs	r1, #4
 80007ec:	430a      	orrs	r2, r1
 80007ee:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	0019      	movs	r1, r3
 80007f6:	2069      	movs	r0, #105	; 0x69
 80007f8:	f000 fb58 	bl	8000eac <Cmt2300_WriteReg>
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b003      	add	sp, #12
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <Cmt2300_ClearFifo>:
*            CMT2300_MASK_TX_FIFO_FULL_FLG |
*            CMT2300_MASK_TX_FIFO_NMTY_FLG |
*            CMT2300_MASK_TX_FIFO_TH_FLG
* *********************************************************/
uint8_t Cmt2300_ClearFifo(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CLR);
 800080a:	1dfc      	adds	r4, r7, #7
 800080c:	206c      	movs	r0, #108	; 0x6c
 800080e:	f000 fb36 	bl	8000e7e <Cmt2300_ReadReg>
 8000812:	0003      	movs	r3, r0
 8000814:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CLR, CMT2300_MASK_FIFO_CLR_RX | CMT2300_MASK_FIFO_CLR_TX);
 8000816:	2103      	movs	r1, #3
 8000818:	206c      	movs	r0, #108	; 0x6c
 800081a:	f000 fb47 	bl	8000eac <Cmt2300_WriteReg>
    return tmp;
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
}
 8000822:	0018      	movs	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	b003      	add	sp, #12
 8000828:	bd90      	pop	{r4, r7, pc}

0800082a <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 800082a:	b590      	push	{r4, r7, lr}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 8000830:	1d7b      	adds	r3, r7, #5
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 800083c:	1cfb      	adds	r3, r7, #3
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000842:	1cbc      	adds	r4, r7, #2
 8000844:	2066      	movs	r0, #102	; 0x66
 8000846:	f000 fb1a 	bl	8000e7e <Cmt2300_ReadReg>
 800084a:	0003      	movs	r3, r0
 800084c:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 800084e:	1cbb      	adds	r3, r7, #2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	115b      	asrs	r3, r3, #5
 8000854:	b2da      	uxtb	r2, r3
 8000856:	1cbb      	adds	r3, r7, #2
 8000858:	2101      	movs	r1, #1
 800085a:	400a      	ands	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 800085e:	1dfc      	adds	r4, r7, #7
 8000860:	206d      	movs	r0, #109	; 0x6d
 8000862:	f000 fb0c 	bl	8000e7e <Cmt2300_ReadReg>
 8000866:	0003      	movs	r3, r0
 8000868:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 800086a:	1dbc      	adds	r4, r7, #6
 800086c:	206a      	movs	r0, #106	; 0x6a
 800086e:	f000 fb06 	bl	8000e7e <Cmt2300_ReadReg>
 8000872:	0003      	movs	r3, r0
 8000874:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 8000876:	1cbb      	adds	r3, r7, #2
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d009      	beq.n	8000892 <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	1dfa      	adds	r2, r7, #7
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	43d2      	mvns	r2, r2
 8000886:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 8000888:	1dbb      	adds	r3, r7, #6
 800088a:	1dba      	adds	r2, r7, #6
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	43d2      	mvns	r2, r2
 8000890:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	da05      	bge.n	80008a8 <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	2120      	movs	r1, #32
 80008a4:	430a      	orrs	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2240      	movs	r2, #64	; 0x40
 80008ae:	4013      	ands	r3, r2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d005      	beq.n	80008c2 <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	1d3a      	adds	r2, r7, #4
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2220      	movs	r2, #32
 80008c8:	4013      	ands	r3, r2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d005      	beq.n	80008dc <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	1d3a      	adds	r2, r7, #4
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	2101      	movs	r1, #1
 80008d8:	430a      	orrs	r2, r1
 80008da:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2210      	movs	r2, #16
 80008e2:	4013      	ands	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00b      	beq.n	8000902 <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	1d3a      	adds	r2, r7, #4
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	2110      	movs	r1, #16
 80008f2:	430a      	orrs	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 80008f6:	1cfb      	adds	r3, r7, #3
 80008f8:	1cfa      	adds	r2, r7, #3
 80008fa:	7812      	ldrb	r2, [r2, #0]
 80008fc:	2110      	movs	r1, #16
 80008fe:	430a      	orrs	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2208      	movs	r2, #8
 8000908:	4013      	ands	r3, r2
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00b      	beq.n	8000928 <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	1d3a      	adds	r2, r7, #4
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	2108      	movs	r1, #8
 8000918:	430a      	orrs	r2, r1
 800091a:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 800091c:	1cfb      	adds	r3, r7, #3
 800091e:	1cfa      	adds	r2, r7, #3
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	2108      	movs	r1, #8
 8000924:	430a      	orrs	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2204      	movs	r2, #4
 800092e:	4013      	ands	r3, r2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00b      	beq.n	800094e <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	1d3a      	adds	r2, r7, #4
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	2104      	movs	r1, #4
 800093e:	430a      	orrs	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 8000942:	1cfb      	adds	r3, r7, #3
 8000944:	1cfa      	adds	r2, r7, #3
 8000946:	7812      	ldrb	r2, [r2, #0]
 8000948:	2104      	movs	r1, #4
 800094a:	430a      	orrs	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2202      	movs	r2, #2
 8000954:	4013      	ands	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00b      	beq.n	8000974 <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	1d3a      	adds	r2, r7, #4
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	2102      	movs	r1, #2
 8000964:	430a      	orrs	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 8000968:	1cfb      	adds	r3, r7, #3
 800096a:	1cfa      	adds	r2, r7, #3
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	2102      	movs	r1, #2
 8000970:	430a      	orrs	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	4013      	ands	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00b      	beq.n	800099a <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	1d3a      	adds	r2, r7, #4
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 800098e:	1cfb      	adds	r3, r7, #3
 8000990:	1cfa      	adds	r2, r7, #3
 8000992:	7812      	ldrb	r2, [r2, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 800099a:	1dbb      	adds	r3, r7, #6
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2220      	movs	r2, #32
 80009a0:	4013      	ands	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00c      	beq.n	80009c2 <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 80009a8:	1d7b      	adds	r3, r7, #5
 80009aa:	1d7a      	adds	r2, r7, #5
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	2102      	movs	r1, #2
 80009b0:	430a      	orrs	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	1cfa      	adds	r2, r7, #3
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	4249      	negs	r1, r1
 80009be:	430a      	orrs	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 80009c2:	1dbb      	adds	r3, r7, #6
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2210      	movs	r2, #16
 80009c8:	4013      	ands	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00b      	beq.n	80009e8 <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 80009d0:	1d7b      	adds	r3, r7, #5
 80009d2:	1d7a      	adds	r2, r7, #5
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	2101      	movs	r1, #1
 80009d8:	430a      	orrs	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 80009dc:	1cfb      	adds	r3, r7, #3
 80009de:	1cfa      	adds	r2, r7, #3
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	430a      	orrs	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2208      	movs	r2, #8
 80009ee:	4013      	ands	r3, r2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00b      	beq.n	8000a0e <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 80009f6:	1d7b      	adds	r3, r7, #5
 80009f8:	1d7a      	adds	r2, r7, #5
 80009fa:	7812      	ldrb	r2, [r2, #0]
 80009fc:	2104      	movs	r1, #4
 80009fe:	430a      	orrs	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 8000a02:	1cfb      	adds	r3, r7, #3
 8000a04:	1cfa      	adds	r2, r7, #3
 8000a06:	7812      	ldrb	r2, [r2, #0]
 8000a08:	2120      	movs	r1, #32
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 8000a0e:	1d7b      	adds	r3, r7, #5
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0019      	movs	r1, r3
 8000a14:	206a      	movs	r0, #106	; 0x6a
 8000a16:	f000 fa49 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	0019      	movs	r1, r3
 8000a20:	206b      	movs	r0, #107	; 0x6b
 8000a22:	f000 fa43 	bl	8000eac <Cmt2300_WriteReg>

    if (nIntPolar)
 8000a26:	1cbb      	adds	r3, r7, #2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d004      	beq.n	8000a38 <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 8000a2e:	1cfb      	adds	r3, r7, #3
 8000a30:	1cfa      	adds	r2, r7, #3
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 8000a38:	1cfb      	adds	r3, r7, #3
 8000a3a:	781b      	ldrb	r3, [r3, #0]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b003      	add	sp, #12
 8000a42:	bd90      	pop	{r4, r7, pc}

08000a44 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 8000a50:	2004      	movs	r0, #4
 8000a52:	f000 fa14 	bl	8000e7e <Cmt2300_ReadReg>
 8000a56:	0003      	movs	r3, r0
 8000a58:	0019      	movs	r1, r3
 8000a5a:	240f      	movs	r4, #15
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	220f      	movs	r2, #15
 8000a60:	400a      	ands	r2, r1
 8000a62:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	0013      	movs	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	189b      	adds	r3, r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4a4d      	ldr	r2, [pc, #308]	; (8000ba8 <Cmt2300_ConfigDataRate+0x164>)
 8000a72:	189b      	adds	r3, r3, r2
 8000a74:	2218      	movs	r2, #24
 8000a76:	0019      	movs	r1, r3
 8000a78:	2020      	movs	r0, #32
 8000a7a:	f000 f9c8 	bl	8000e0e <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	494a      	ldr	r1, [pc, #296]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000a84:	0013      	movs	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	189b      	adds	r3, r3, r2
 8000a8a:	5c5b      	ldrb	r3, [r3, r1]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	220f      	movs	r2, #15
 8000a90:	4393      	bics	r3, r2
 8000a92:	b25a      	sxtb	r2, r3
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	2004      	movs	r0, #4
 8000aa4:	f000 fa02 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	493f      	ldr	r1, [pc, #252]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000aae:	0013      	movs	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	18cb      	adds	r3, r1, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0019      	movs	r1, r3
 8000abc:	2055      	movs	r0, #85	; 0x55
 8000abe:	f000 f9f5 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	4939      	ldr	r1, [pc, #228]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000ac8:	0013      	movs	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	189b      	adds	r3, r3, r2
 8000ace:	18cb      	adds	r3, r1, r3
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	2056      	movs	r0, #86	; 0x56
 8000ad8:	f000 f9e8 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	4932      	ldr	r1, [pc, #200]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	18cb      	adds	r3, r1, r3
 8000aea:	3303      	adds	r3, #3
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	2057      	movs	r0, #87	; 0x57
 8000af2:	f000 f9db 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	492c      	ldr	r1, [pc, #176]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000afc:	0013      	movs	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	18cb      	adds	r3, r1, r3
 8000b04:	3304      	adds	r3, #4
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	0019      	movs	r1, r3
 8000b0a:	2058      	movs	r0, #88	; 0x58
 8000b0c:	f000 f9ce 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4925      	ldr	r1, [pc, #148]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000b16:	0013      	movs	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	18cb      	adds	r3, r1, r3
 8000b1e:	3305      	adds	r3, #5
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0019      	movs	r1, r3
 8000b24:	2059      	movs	r0, #89	; 0x59
 8000b26:	f000 f9c1 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	491f      	ldr	r1, [pc, #124]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000b30:	0013      	movs	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	189b      	adds	r3, r3, r2
 8000b36:	18cb      	adds	r3, r1, r3
 8000b38:	3306      	adds	r3, #6
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	205a      	movs	r0, #90	; 0x5a
 8000b40:	f000 f9b4 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	4918      	ldr	r1, [pc, #96]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	189b      	adds	r3, r3, r2
 8000b50:	18cb      	adds	r3, r1, r3
 8000b52:	3307      	adds	r3, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0019      	movs	r1, r3
 8000b58:	205b      	movs	r0, #91	; 0x5b
 8000b5a:	f000 f9a7 	bl	8000eac <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 8000b5e:	205e      	movs	r0, #94	; 0x5e
 8000b60:	f000 f98d 	bl	8000e7e <Cmt2300_ReadReg>
 8000b64:	0003      	movs	r3, r0
 8000b66:	0019      	movs	r1, r3
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	223f      	movs	r2, #63	; 0x3f
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	490d      	ldr	r1, [pc, #52]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000b76:	0013      	movs	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	189b      	adds	r3, r3, r2
 8000b7c:	18cb      	adds	r3, r1, r3
 8000b7e:	3308      	adds	r3, #8
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	223f      	movs	r2, #63	; 0x3f
 8000b86:	4393      	bics	r3, r2
 8000b88:	b25a      	sxtb	r2, r3
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	0019      	movs	r1, r3
 8000b98:	205e      	movs	r0, #94	; 0x5e
 8000b9a:	f000 f987 	bl	8000eac <Cmt2300_WriteReg>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b005      	add	sp, #20
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	080066b4 	.word	0x080066b4
 8000bac:	08006774 	.word	0x08006774

08000bb0 <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 8000bbc:	2038      	movs	r0, #56	; 0x38
 8000bbe:	f000 f95e 	bl	8000e7e <Cmt2300_ReadReg>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	2203      	movs	r2, #3
 8000bcc:	4391      	bics	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 8000bd2:	183a      	adds	r2, r7, r0
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	0019      	movs	r1, r3
 8000be0:	2038      	movs	r0, #56	; 0x38
 8000be2:	f000 f963 	bl	8000eac <Cmt2300_WriteReg>
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f93e 	bl	8000e7e <Cmt2300_ReadReg>
 8000c02:	0003      	movs	r3, r0
 8000c04:	0019      	movs	r1, r3
 8000c06:	230f      	movs	r3, #15
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4391      	bics	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	d902      	bls.n	8000c20 <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <Cmt2300_ConfigTxPower+0xcc>)
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	5cd3      	ldrb	r3, [r2, r3]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4013      	ands	r3, r2
 8000c30:	b25a      	sxtb	r2, r3
 8000c32:	240f      	movs	r4, #15
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	0019      	movs	r1, r3
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f932 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <Cmt2300_ConfigTxPower+0xcc>)
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	18d3      	adds	r3, r2, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0019      	movs	r1, r3
 8000c58:	205c      	movs	r0, #92	; 0x5c
 8000c5a:	f000 f927 	bl	8000eac <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <Cmt2300_ConfigTxPower+0xcc>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	18d3      	adds	r3, r2, r3
 8000c68:	3302      	adds	r3, #2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	205d      	movs	r0, #93	; 0x5d
 8000c70:	f000 f91c 	bl	8000eac <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 8000c74:	205e      	movs	r0, #94	; 0x5e
 8000c76:	f000 f902 	bl	8000e7e <Cmt2300_ReadReg>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	223f      	movs	r2, #63	; 0x3f
 8000c82:	4391      	bics	r1, r2
 8000c84:	000a      	movs	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <Cmt2300_ConfigTxPower+0xcc>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	3303      	adds	r3, #3
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	223f      	movs	r2, #63	; 0x3f
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	0019      	movs	r1, r3
 8000cac:	205e      	movs	r0, #94	; 0x5e
 8000cae:	f000 f8fd 	bl	8000eac <Cmt2300_WriteReg>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b005      	add	sp, #20
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	080067bc 	.word	0x080067bc

08000cc0 <Cmt2300_SetPayloadLength>:
* @name    Cmt2300_SetPayloadLength
* @desc    Set payload length.
* @param   nLength
* *********************************************************/
void Cmt2300_SetPayloadLength(uint16_t nLength)
{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	1dbb      	adds	r3, r7, #6
 8000cca:	801a      	strh	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14);
 8000ccc:	250f      	movs	r5, #15
 8000cce:	197c      	adds	r4, r7, r5
 8000cd0:	2045      	movs	r0, #69	; 0x45
 8000cd2:	f000 f8d4 	bl	8000e7e <Cmt2300_ReadReg>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	7023      	strb	r3, [r4, #0]

    tmp &= ~CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000cda:	0028      	movs	r0, r5
 8000cdc:	183b      	adds	r3, r7, r0
 8000cde:	183a      	adds	r2, r7, r0
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	2170      	movs	r1, #112	; 0x70
 8000ce4:	438a      	bics	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
    tmp |= (nLength >> 4) & CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000ce8:	1dbb      	adds	r3, r7, #6
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	091b      	lsrs	r3, r3, #4
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	2270      	movs	r2, #112	; 0x70
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	b25a      	sxtb	r2, r3
 8000cf8:	183b      	adds	r3, r7, r0
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b25a      	sxtb	r2, r3
 8000d02:	183b      	adds	r3, r7, r0
 8000d04:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp);
 8000d06:	0004      	movs	r4, r0
 8000d08:	183b      	adds	r3, r7, r0
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	2045      	movs	r0, #69	; 0x45
 8000d10:	f000 f8cc 	bl	8000eac <Cmt2300_WriteReg>

    tmp = nLength & CMT2300_MASK_PAYLOAD_LENG_7_0;
 8000d14:	0020      	movs	r0, r4
 8000d16:	183b      	adds	r3, r7, r0
 8000d18:	1dba      	adds	r2, r7, #6
 8000d1a:	8812      	ldrh	r2, [r2, #0]
 8000d1c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT15, tmp);
 8000d1e:	183b      	adds	r3, r7, r0
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0019      	movs	r1, r3
 8000d24:	2046      	movs	r0, #70	; 0x46
 8000d26:	f000 f8c1 	bl	8000eac <Cmt2300_WriteReg>
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b004      	add	sp, #16
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}

08000d32 <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000d32:	b5b0      	push	{r4, r5, r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	0002      	movs	r2, r0
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000d3e:	250f      	movs	r5, #15
 8000d40:	197c      	adds	r4, r7, r5
 8000d42:	200d      	movs	r0, #13
 8000d44:	f000 f89b 	bl	8000e7e <Cmt2300_ReadReg>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d013      	beq.n	8000d7c <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 8000d54:	197b      	adds	r3, r7, r5
 8000d56:	197a      	adds	r2, r7, r5
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	4249      	negs	r1, r1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 8000d62:	197b      	adds	r3, r7, r5
 8000d64:	197a      	adds	r2, r7, r5
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	2140      	movs	r1, #64	; 0x40
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 8000d6e:	197b      	adds	r3, r7, r5
 8000d70:	197a      	adds	r2, r7, r5
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	2120      	movs	r1, #32
 8000d76:	430a      	orrs	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e012      	b.n	8000da2 <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 8000d7c:	200f      	movs	r0, #15
 8000d7e:	183b      	adds	r3, r7, r0
 8000d80:	183a      	adds	r2, r7, r0
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	217f      	movs	r1, #127	; 0x7f
 8000d86:	400a      	ands	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 8000d8a:	183b      	adds	r3, r7, r0
 8000d8c:	183a      	adds	r2, r7, r0
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	438a      	bics	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 8000d96:	183b      	adds	r3, r7, r0
 8000d98:	183a      	adds	r2, r7, r0
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	438a      	bics	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 8000da2:	230f      	movs	r3, #15
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	0019      	movs	r1, r3
 8000daa:	200d      	movs	r0, #13
 8000dac:	f000 f87e 	bl	8000eac <Cmt2300_WriteReg>
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b004      	add	sp, #16
 8000db6:	bdb0      	pop	{r4, r5, r7, pc}

08000db8 <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000dbe:	f7ff fb87 	bl	80004d0 <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000dc2:	200a      	movs	r0, #10
 8000dc4:	f000 fd60 	bl	8001888 <Delay_Ms>
   
    Cmt2300_GoStby();
 8000dc8:	f7ff fbed 	bl	80005a6 <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000dcc:	1dfc      	adds	r4, r7, #7
 8000dce:	2061      	movs	r0, #97	; 0x61
 8000dd0:	f000 f855 	bl	8000e7e <Cmt2300_ReadReg>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	2110      	movs	r1, #16
 8000de0:	430a      	orrs	r2, r1
 8000de2:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	1dfa      	adds	r2, r7, #7
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	2120      	movs	r1, #32
 8000dec:	438a      	bics	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	0019      	movs	r1, r3
 8000df6:	2061      	movs	r0, #97	; 0x61
 8000df8:	f000 f858 	bl	8000eac <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff ff98 	bl	8000d32 <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000e02:	f7ff fd12 	bl	800082a <Cmt2300_ClearInterruptFlags>
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b003      	add	sp, #12
 8000e0c:	bd90      	pop	{r4, r7, pc}

08000e0e <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000e0e:	b590      	push	{r4, r7, lr}
 8000e10:	b085      	sub	sp, #20
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	0011      	movs	r1, r2
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	1c02      	adds	r2, r0, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	1dbb      	adds	r3, r7, #6
 8000e20:	1c0a      	adds	r2, r1, #0
 8000e22:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e014      	b.n	8000e58 <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000e2e:	210f      	movs	r1, #15
 8000e30:	187a      	adds	r2, r7, r1
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	b2d8      	uxtb	r0, r3
 8000e3c:	000c      	movs	r4, r1
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	18d3      	adds	r3, r2, r3
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	0019      	movs	r1, r3
 8000e4a:	f000 f82f 	bl	8000eac <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	3201      	adds	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	230f      	movs	r3, #15
 8000e5a:	18fa      	adds	r2, r7, r3
 8000e5c:	1dbb      	adds	r3, r7, #6
 8000e5e:	7812      	ldrb	r2, [r2, #0]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3e3      	bcc.n	8000e2e <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b005      	add	sp, #20
 8000e6e:	bd90      	pop	{r4, r7, pc}

08000e70 <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000e74:	f000 f876 	bl	8000f64 <cmt_spi3_init>
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000e7e:	b590      	push	{r4, r7, lr}
 8000e80:	b085      	sub	sp, #20
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	0002      	movs	r2, r0
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000e8a:	240f      	movs	r4, #15
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	22ff      	movs	r2, #255	; 0xff
 8000e90:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000e92:	193a      	adds	r2, r7, r4
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f974 	bl	8001188 <cmt_spi3_read>

    return dat;
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	781b      	ldrb	r3, [r3, #0]
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b005      	add	sp, #20
 8000eaa:	bd90      	pop	{r4, r7, pc}

08000eac <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	1c0a      	adds	r2, r1, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000ebe:	1dbb      	adds	r3, r7, #6
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f000 f8e9 	bl	80010a0 <cmt_spi3_write>
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Cmt2300_ReadFifo>:
* @desc    Reads the contents of the CMT2300 FIFO.
* @param   buf: buffer where to copy the FIFO read data
*          len: number of bytes to be read from the FIFO
* *********************************************************/
void Cmt2300_ReadFifo(uint8_t buf[], uint16_t len)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	000a      	movs	r2, r1
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	801a      	strh	r2, [r3, #0]
    cmt_spi3_read_fifo(buf, len);
 8000ee4:	1cbb      	adds	r3, r7, #2
 8000ee6:	881a      	ldrh	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 fa4b 	bl	8001388 <cmt_spi3_read_fifo>
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <Cmt2300_WriteFifo>:
* @desc    Writes the buffer contents to the CMT2300 FIFO.
* @param   buf: buffer containing data to be put on the FIFO
*          len: number of bytes to be written to the FIFO
* *********************************************************/
void Cmt2300_WriteFifo(const uint8_t buf[], uint16_t len)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	000a      	movs	r2, r1
 8000f04:	1cbb      	adds	r3, r7, #2
 8000f06:	801a      	strh	r2, [r3, #0]
    cmt_spi3_write_fifo(buf, len);
 8000f08:	1cbb      	adds	r3, r7, #2
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 f9af 	bl	8001274 <cmt_spi3_write_fifo>
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000f24:	2308      	movs	r3, #8
 8000f26:	607b      	str	r3, [r7, #4]
    while (n--)
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1e5a      	subs	r2, r3, #1
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1fa      	bne.n	8000f2a <cmt_spi3_delay+0xc>
        ;
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <cmt_spi3_delay_us>:

void cmt_spi3_delay_us(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
    uint16_t n = 8;
 8000f44:	1dbb      	adds	r3, r7, #6
 8000f46:	2208      	movs	r2, #8
 8000f48:	801a      	strh	r2, [r3, #0]
    while (n--)
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	1dbb      	adds	r3, r7, #6
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	1dba      	adds	r2, r7, #6
 8000f52:	1e59      	subs	r1, r3, #1
 8000f54:	8011      	strh	r1, [r2, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f8      	bne.n	8000f4c <cmt_spi3_delay_us+0xe>
        ;
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <cmt_spi3_init>:

void cmt_spi3_init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000f68:	f000 fcb2 	bl	80018d0 <spi_gpio_init>
    cmt_spi3_sda_in();
 8000f6c:	f000 fce8 	bl	8001940 <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000f70:	f7ff ffd5 	bl	8000f1e <cmt_spi3_delay>
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	0002      	movs	r2, r0
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000f86:	230f      	movs	r3, #15
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e034      	b.n	8000ffa <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	0119      	lsls	r1, r3, #4
 8000f94:	2390      	movs	r3, #144	; 0x90
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	2200      	movs	r2, #0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f002 f915 	bl	80031ca <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da08      	bge.n	8000fbc <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	0059      	lsls	r1, r3, #1
 8000fae:	2390      	movs	r3, #144	; 0x90
 8000fb0:	05db      	lsls	r3, r3, #23
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f002 f908 	bl	80031ca <HAL_GPIO_WritePin>
 8000fba:	e007      	b.n	8000fcc <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	0059      	lsls	r1, r3, #1
 8000fc0:	2390      	movs	r3, #144	; 0x90
 8000fc2:	05db      	lsls	r3, r3, #23
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f002 f8ff 	bl	80031ca <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8000fcc:	f7ff ffa7 	bl	8000f1e <cmt_spi3_delay>

        data8 <<= 1;
 8000fd0:	1dfa      	adds	r2, r7, #7
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	18db      	adds	r3, r3, r3
 8000fd8:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	0119      	lsls	r1, r3, #4
 8000fde:	2390      	movs	r3, #144	; 0x90
 8000fe0:	05db      	lsls	r3, r3, #23
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f002 f8f0 	bl	80031ca <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000fea:	f7ff ff98 	bl	8000f1e <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000fee:	210f      	movs	r1, #15
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	3201      	adds	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b07      	cmp	r3, #7
 8001002:	d9c5      	bls.n	8000f90 <cmt_spi3_send+0x16>
    }
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}

0800100e <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 8001014:	1dbb      	adds	r3, r7, #6
 8001016:	22ff      	movs	r2, #255	; 0xff
 8001018:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
 8001020:	e034      	b.n	800108c <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	0119      	lsls	r1, r3, #4
 8001026:	2390      	movs	r3, #144	; 0x90
 8001028:	05db      	lsls	r3, r3, #23
 800102a:	2200      	movs	r2, #0
 800102c:	0018      	movs	r0, r3
 800102e:	f002 f8cc 	bl	80031ca <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8001032:	f7ff ff74 	bl	8000f1e <cmt_spi3_delay>
        data8 <<= 1;
 8001036:	1dba      	adds	r2, r7, #6
 8001038:	1dbb      	adds	r3, r7, #6
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	18db      	adds	r3, r3, r3
 800103e:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	0119      	lsls	r1, r3, #4
 8001044:	2390      	movs	r3, #144	; 0x90
 8001046:	05db      	lsls	r3, r3, #23
 8001048:	2201      	movs	r2, #1
 800104a:	0018      	movs	r0, r3
 800104c:	f002 f8bd 	bl	80031ca <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	005a      	lsls	r2, r3, #1
 8001054:	2390      	movs	r3, #144	; 0x90
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	0011      	movs	r1, r2
 800105a:	0018      	movs	r0, r3
 800105c:	f002 f898 	bl	8003190 <HAL_GPIO_ReadPin>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d006      	beq.n	8001072 <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 8001064:	1dbb      	adds	r3, r7, #6
 8001066:	1dba      	adds	r2, r7, #6
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	2101      	movs	r1, #1
 800106c:	430a      	orrs	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e005      	b.n	800107e <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 8001072:	1dbb      	adds	r3, r7, #6
 8001074:	1dba      	adds	r2, r7, #6
 8001076:	7812      	ldrb	r2, [r2, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	438a      	bics	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 800107e:	f7ff ff4e 	bl	8000f1e <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	3201      	adds	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b07      	cmp	r3, #7
 8001092:	d9c6      	bls.n	8001022 <cmt_spi3_recv+0x14>
    }

    return data8;
 8001094:	1dbb      	adds	r3, r7, #6
 8001096:	781b      	ldrb	r3, [r3, #0]
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	0002      	movs	r2, r0
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	1dbb      	adds	r3, r7, #6
 80010ae:	1c0a      	adds	r2, r1, #0
 80010b0:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 80010b2:	f000 fc13 	bl	80018dc <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	0059      	lsls	r1, r3, #1
 80010ba:	2390      	movs	r3, #144	; 0x90
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	2201      	movs	r2, #1
 80010c0:	0018      	movs	r0, r3
 80010c2:	f002 f882 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	0119      	lsls	r1, r3, #4
 80010ca:	2390      	movs	r3, #144	; 0x90
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	2200      	movs	r2, #0
 80010d0:	0018      	movs	r0, r3
 80010d2:	f002 f87a 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	0119      	lsls	r1, r3, #4
 80010da:	2390      	movs	r3, #144	; 0x90
 80010dc:	05db      	lsls	r3, r3, #23
 80010de:	2200      	movs	r2, #0
 80010e0:	0018      	movs	r0, r3
 80010e2:	f002 f872 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	01db      	lsls	r3, r3, #7
 80010ea:	4826      	ldr	r0, [pc, #152]	; (8001184 <cmt_spi3_write+0xe4>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	0019      	movs	r1, r3
 80010f0:	f002 f86b 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	01db      	lsls	r3, r3, #7
 80010f8:	4822      	ldr	r0, [pc, #136]	; (8001184 <cmt_spi3_write+0xe4>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	0019      	movs	r1, r3
 80010fe:	f002 f864 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <cmt_spi3_write+0xe4>)
 8001108:	2200      	movs	r2, #0
 800110a:	0019      	movs	r1, r3
 800110c:	f002 f85d 	bl	80031ca <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001110:	f7ff ff05 	bl	8000f1e <cmt_spi3_delay>
    cmt_spi3_delay();
 8001114:	f7ff ff03 	bl	8000f1e <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	227f      	movs	r2, #127	; 0x7f
 800111e:	4013      	ands	r3, r2
 8001120:	b2db      	uxtb	r3, r3
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff ff29 	bl	8000f7a <cmt_spi3_send>

    cmt_spi3_send(dat);
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff ff24 	bl	8000f7a <cmt_spi3_send>

    cmt_spi3_scl_0();
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	0119      	lsls	r1, r3, #4
 8001136:	2390      	movs	r3, #144	; 0x90
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	2200      	movs	r2, #0
 800113c:	0018      	movs	r0, r3
 800113e:	f002 f844 	bl	80031ca <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001142:	f7ff feec 	bl	8000f1e <cmt_spi3_delay>
    cmt_spi3_delay();
 8001146:	f7ff feea 	bl	8000f1e <cmt_spi3_delay>

    cmt_spi3_csb_1();
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <cmt_spi3_write+0xe4>)
 8001150:	2201      	movs	r2, #1
 8001152:	0019      	movs	r1, r3
 8001154:	f002 f839 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	0059      	lsls	r1, r3, #1
 800115c:	2390      	movs	r3, #144	; 0x90
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	2201      	movs	r2, #1
 8001162:	0018      	movs	r0, r3
 8001164:	f002 f831 	bl	80031ca <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8001168:	f000 fbea 	bl	8001940 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	01db      	lsls	r3, r3, #7
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <cmt_spi3_write+0xe4>)
 8001172:	2201      	movs	r2, #1
 8001174:	0019      	movs	r1, r3
 8001176:	f002 f828 	bl	80031ca <HAL_GPIO_WritePin>
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	48000400 	.word	0x48000400

08001188 <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8001196:	f000 fba1 	bl	80018dc <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	0059      	lsls	r1, r3, #1
 800119e:	2390      	movs	r3, #144	; 0x90
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	2201      	movs	r2, #1
 80011a4:	0018      	movs	r0, r3
 80011a6:	f002 f810 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	0119      	lsls	r1, r3, #4
 80011ae:	2390      	movs	r3, #144	; 0x90
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	2200      	movs	r2, #0
 80011b4:	0018      	movs	r0, r3
 80011b6:	f002 f808 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	0119      	lsls	r1, r3, #4
 80011be:	2390      	movs	r3, #144	; 0x90
 80011c0:	05db      	lsls	r3, r3, #23
 80011c2:	2200      	movs	r2, #0
 80011c4:	0018      	movs	r0, r3
 80011c6:	f002 f800 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	01db      	lsls	r3, r3, #7
 80011ce:	4828      	ldr	r0, [pc, #160]	; (8001270 <cmt_spi3_read+0xe8>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	0019      	movs	r1, r3
 80011d4:	f001 fff9 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	01db      	lsls	r3, r3, #7
 80011dc:	4824      	ldr	r0, [pc, #144]	; (8001270 <cmt_spi3_read+0xe8>)
 80011de:	2201      	movs	r2, #1
 80011e0:	0019      	movs	r1, r3
 80011e2:	f001 fff2 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <cmt_spi3_read+0xe8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	0019      	movs	r1, r3
 80011f0:	f001 ffeb 	bl	80031ca <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 80011f4:	f7ff fe93 	bl	8000f1e <cmt_spi3_delay>
    cmt_spi3_delay();
 80011f8:	f7ff fe91 	bl	8000f1e <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	4252      	negs	r2, r2
 8001204:	4313      	orrs	r3, r2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff feb6 	bl	8000f7a <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 800120e:	f000 fb97 	bl	8001940 <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 8001212:	f7ff fefc 	bl	800100e <cmt_spi3_recv>
 8001216:	0003      	movs	r3, r0
 8001218:	001a      	movs	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	0119      	lsls	r1, r3, #4
 8001222:	2390      	movs	r3, #144	; 0x90
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	2200      	movs	r2, #0
 8001228:	0018      	movs	r0, r3
 800122a:	f001 ffce 	bl	80031ca <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 800122e:	f7ff fe76 	bl	8000f1e <cmt_spi3_delay>
    cmt_spi3_delay();
 8001232:	f7ff fe74 	bl	8000f1e <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <cmt_spi3_read+0xe8>)
 800123c:	2201      	movs	r2, #1
 800123e:	0019      	movs	r1, r3
 8001240:	f001 ffc3 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	0059      	lsls	r1, r3, #1
 8001248:	2390      	movs	r3, #144	; 0x90
 800124a:	05db      	lsls	r3, r3, #23
 800124c:	2201      	movs	r2, #1
 800124e:	0018      	movs	r0, r3
 8001250:	f001 ffbb 	bl	80031ca <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8001254:	f000 fb74 	bl	8001940 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	01db      	lsls	r3, r3, #7
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <cmt_spi3_read+0xe8>)
 800125e:	2201      	movs	r2, #1
 8001260:	0019      	movs	r1, r3
 8001262:	f001 ffb2 	bl	80031ca <HAL_GPIO_WritePin>
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	48000400 	.word	0x48000400

08001274 <cmt_spi3_write_fifo>:

void cmt_spi3_write_fifo(const uint8_t *p_buf, uint16_t len)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	000a      	movs	r2, r1
 800127e:	1cbb      	adds	r3, r7, #2
 8001280:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	01db      	lsls	r3, r3, #7
 8001286:	483f      	ldr	r0, [pc, #252]	; (8001384 <cmt_spi3_write_fifo+0x110>)
 8001288:	2201      	movs	r2, #1
 800128a:	0019      	movs	r1, r3
 800128c:	f001 ff9d 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	01db      	lsls	r3, r3, #7
 8001294:	483b      	ldr	r0, [pc, #236]	; (8001384 <cmt_spi3_write_fifo+0x110>)
 8001296:	2201      	movs	r2, #1
 8001298:	0019      	movs	r1, r3
 800129a:	f001 ff96 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	4838      	ldr	r0, [pc, #224]	; (8001384 <cmt_spi3_write_fifo+0x110>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	0019      	movs	r1, r3
 80012a8:	f001 ff8f 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	4834      	ldr	r0, [pc, #208]	; (8001384 <cmt_spi3_write_fifo+0x110>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	0019      	movs	r1, r3
 80012b6:	f001 ff88 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	0119      	lsls	r1, r3, #4
 80012be:	2390      	movs	r3, #144	; 0x90
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	2200      	movs	r2, #0
 80012c4:	0018      	movs	r0, r3
 80012c6:	f001 ff80 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	0119      	lsls	r1, r3, #4
 80012ce:	2390      	movs	r3, #144	; 0x90
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	2200      	movs	r2, #0
 80012d4:	0018      	movs	r0, r3
 80012d6:	f001 ff78 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_sda_out();
 80012da:	f000 faff 	bl	80018dc <cmt_spi3_sda_out>

    for (i = 0; i < len; i++)
 80012de:	230e      	movs	r3, #14
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2200      	movs	r2, #0
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	e039      	b.n	800135c <cmt_spi3_write_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	01db      	lsls	r3, r3, #7
 80012ec:	4825      	ldr	r0, [pc, #148]	; (8001384 <cmt_spi3_write_fifo+0x110>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	0019      	movs	r1, r3
 80012f2:	f001 ff6a 	bl	80031ca <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 80012f6:	f7ff fe12 	bl	8000f1e <cmt_spi3_delay>
        cmt_spi3_delay();
 80012fa:	f7ff fe10 	bl	8000f1e <cmt_spi3_delay>

        cmt_spi3_send(p_buf[i]);
 80012fe:	240e      	movs	r4, #14
 8001300:	193b      	adds	r3, r7, r4
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	18d3      	adds	r3, r2, r3
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	0018      	movs	r0, r3
 800130c:	f7ff fe35 	bl	8000f7a <cmt_spi3_send>

        cmt_spi3_scl_0();
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	0119      	lsls	r1, r3, #4
 8001314:	2390      	movs	r3, #144	; 0x90
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	2200      	movs	r2, #0
 800131a:	0018      	movs	r0, r3
 800131c:	f001 ff55 	bl	80031ca <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 8001320:	f7ff fe0d 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001324:	f7ff fe0b 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001328:	f7ff fe09 	bl	8000f3e <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	01db      	lsls	r3, r3, #7
 8001330:	4814      	ldr	r0, [pc, #80]	; (8001384 <cmt_spi3_write_fifo+0x110>)
 8001332:	2201      	movs	r2, #1
 8001334:	0019      	movs	r1, r3
 8001336:	f001 ff48 	bl	80031ca <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 800133a:	f7ff fe00 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800133e:	f7ff fdfe 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001342:	f7ff fdfc 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001346:	f7ff fdfa 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800134a:	f7ff fdf8 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800134e:	f7ff fdf6 	bl	8000f3e <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 8001352:	193b      	adds	r3, r7, r4
 8001354:	881a      	ldrh	r2, [r3, #0]
 8001356:	193b      	adds	r3, r7, r4
 8001358:	3201      	adds	r2, #1
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	230e      	movs	r3, #14
 800135e:	18fa      	adds	r2, r7, r3
 8001360:	1cbb      	adds	r3, r7, #2
 8001362:	8812      	ldrh	r2, [r2, #0]
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3be      	bcc.n	80012e8 <cmt_spi3_write_fifo+0x74>
    }

    cmt_spi3_sda_in();
 800136a:	f000 fae9 	bl	8001940 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	01db      	lsls	r3, r3, #7
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <cmt_spi3_write_fifo+0x110>)
 8001374:	2201      	movs	r2, #1
 8001376:	0019      	movs	r1, r3
 8001378:	f001 ff27 	bl	80031ca <HAL_GPIO_WritePin>
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b005      	add	sp, #20
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	48000400 	.word	0x48000400

08001388 <cmt_spi3_read_fifo>:

void cmt_spi3_read_fifo(uint8_t *p_buf, uint16_t len)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	000a      	movs	r2, r1
 8001392:	1cbb      	adds	r3, r7, #2
 8001394:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	01db      	lsls	r3, r3, #7
 800139a:	483f      	ldr	r0, [pc, #252]	; (8001498 <cmt_spi3_read_fifo+0x110>)
 800139c:	2201      	movs	r2, #1
 800139e:	0019      	movs	r1, r3
 80013a0:	f001 ff13 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	01db      	lsls	r3, r3, #7
 80013a8:	483b      	ldr	r0, [pc, #236]	; (8001498 <cmt_spi3_read_fifo+0x110>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	0019      	movs	r1, r3
 80013ae:	f001 ff0c 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4838      	ldr	r0, [pc, #224]	; (8001498 <cmt_spi3_read_fifo+0x110>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	0019      	movs	r1, r3
 80013bc:	f001 ff05 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4834      	ldr	r0, [pc, #208]	; (8001498 <cmt_spi3_read_fifo+0x110>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	0019      	movs	r1, r3
 80013ca:	f001 fefe 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	0119      	lsls	r1, r3, #4
 80013d2:	2390      	movs	r3, #144	; 0x90
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	2200      	movs	r2, #0
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 fef6 	bl	80031ca <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	0119      	lsls	r1, r3, #4
 80013e2:	2390      	movs	r3, #144	; 0x90
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	2200      	movs	r2, #0
 80013e8:	0018      	movs	r0, r3
 80013ea:	f001 feee 	bl	80031ca <HAL_GPIO_WritePin>

    cmt_spi3_sda_in();
 80013ee:	f000 faa7 	bl	8001940 <cmt_spi3_sda_in>

    for (i = 0; i < len; i++)
 80013f2:	230e      	movs	r3, #14
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	2200      	movs	r2, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	e039      	b.n	8001470 <cmt_spi3_read_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	01db      	lsls	r3, r3, #7
 8001400:	4825      	ldr	r0, [pc, #148]	; (8001498 <cmt_spi3_read_fifo+0x110>)
 8001402:	2200      	movs	r2, #0
 8001404:	0019      	movs	r1, r3
 8001406:	f001 fee0 	bl	80031ca <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 800140a:	f7ff fd88 	bl	8000f1e <cmt_spi3_delay>
        cmt_spi3_delay();
 800140e:	f7ff fd86 	bl	8000f1e <cmt_spi3_delay>

        p_buf[i] = cmt_spi3_recv();
 8001412:	250e      	movs	r5, #14
 8001414:	197b      	adds	r3, r7, r5
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	18d4      	adds	r4, r2, r3
 800141c:	f7ff fdf7 	bl	800100e <cmt_spi3_recv>
 8001420:	0003      	movs	r3, r0
 8001422:	7023      	strb	r3, [r4, #0]

        cmt_spi3_scl_0();
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	0119      	lsls	r1, r3, #4
 8001428:	2390      	movs	r3, #144	; 0x90
 800142a:	05db      	lsls	r3, r3, #23
 800142c:	2200      	movs	r2, #0
 800142e:	0018      	movs	r0, r3
 8001430:	f001 fecb 	bl	80031ca <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 8001434:	f7ff fd83 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001438:	f7ff fd81 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800143c:	f7ff fd7f 	bl	8000f3e <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	01db      	lsls	r3, r3, #7
 8001444:	4814      	ldr	r0, [pc, #80]	; (8001498 <cmt_spi3_read_fifo+0x110>)
 8001446:	2201      	movs	r2, #1
 8001448:	0019      	movs	r1, r3
 800144a:	f001 febe 	bl	80031ca <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 800144e:	f7ff fd76 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001452:	f7ff fd74 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001456:	f7ff fd72 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800145a:	f7ff fd70 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800145e:	f7ff fd6e 	bl	8000f3e <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001462:	f7ff fd6c 	bl	8000f3e <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 8001466:	197b      	adds	r3, r7, r5
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	197b      	adds	r3, r7, r5
 800146c:	3201      	adds	r2, #1
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	230e      	movs	r3, #14
 8001472:	18fa      	adds	r2, r7, r3
 8001474:	1cbb      	adds	r3, r7, #2
 8001476:	8812      	ldrh	r2, [r2, #0]
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d3be      	bcc.n	80013fc <cmt_spi3_read_fifo+0x74>
    }

    cmt_spi3_sda_in();
 800147e:	f000 fa5f 	bl	8001940 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	01db      	lsls	r3, r3, #7
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <cmt_spi3_read_fifo+0x110>)
 8001488:	2201      	movs	r2, #1
 800148a:	0019      	movs	r1, r3
 800148c:	f001 fe9d 	bl	80031ca <HAL_GPIO_WritePin>
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b004      	add	sp, #16
 8001496:	bdb0      	pop	{r4, r5, r7, pc}
 8001498:	48000400 	.word	0x48000400

0800149c <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 80014a0:	f7ff fce6 	bl	8000e70 <Cmt2300_InitGpio>
    Cmt2300_Init();
 80014a4:	f7ff fc88 	bl	8000db8 <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <RF_Init+0x60>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	0019      	movs	r1, r3
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fcad 	bl	8000e0e <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <RF_Init+0x64>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	0019      	movs	r1, r3
 80014ba:	200c      	movs	r0, #12
 80014bc:	f7ff fca7 	bl	8000e0e <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <RF_Init+0x68>)
 80014c2:	2208      	movs	r2, #8
 80014c4:	0019      	movs	r1, r3
 80014c6:	2018      	movs	r0, #24
 80014c8:	f7ff fca1 	bl	8000e0e <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <RF_Init+0x6c>)
 80014ce:	2218      	movs	r2, #24
 80014d0:	0019      	movs	r1, r3
 80014d2:	2020      	movs	r0, #32
 80014d4:	f7ff fc9b 	bl	8000e0e <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <RF_Init+0x70>)
 80014da:	221d      	movs	r2, #29
 80014dc:	0019      	movs	r1, r3
 80014de:	2038      	movs	r0, #56	; 0x38
 80014e0:	f7ff fc95 	bl	8000e0e <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <RF_Init+0x74>)
 80014e6:	220b      	movs	r2, #11
 80014e8:	0019      	movs	r1, r3
 80014ea:	2055      	movs	r0, #85	; 0x55
 80014ec:	f7ff fc8f 	bl	8000e0e <Cmt2300_ConfigRegBank>

    RF_Config();
 80014f0:	f000 f810 	bl	8001514 <RF_Config>
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	080067dc 	.word	0x080067dc
 8001500:	080067e8 	.word	0x080067e8
 8001504:	080067f4 	.word	0x080067f4
 8001508:	080067fc 	.word	0x080067fc
 800150c:	08006814 	.word	0x08006814
 8001510:	08006834 	.word	0x08006834

08001514 <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff f8c0 	bl	800069e <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 800151e:	2020      	movs	r0, #32
 8001520:	f7ff f868 	bl	80005f4 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 8001524:	2107      	movs	r1, #7
 8001526:	200a      	movs	r0, #10
 8001528:	f7ff f874 	bl	8000614 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 800152c:	203f      	movs	r0, #63	; 0x3f
 800152e:	f7ff f8f1 	bl	8000714 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff fbfd 	bl	8000d32 <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 8001538:	f7ff f828 	bl	800058c <Cmt2300_GoSleep>
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <RF_StartRx>:
{
    return g_nInterrutFlags;
}

void RF_StartRx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	200a      	movs	r0, #10
 8001550:	183b      	adds	r3, r7, r0
 8001552:	1c0a      	adds	r2, r1, #0
 8001554:	801a      	strh	r2, [r3, #0]
    g_pRxBuffer = buf;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <RF_StartRx+0x44>)
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	601a      	str	r2, [r3, #0]
    g_nRxLength = len;
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <RF_StartRx+0x48>)
 800155e:	183a      	adds	r2, r7, r0
 8001560:	8812      	ldrh	r2, [r2, #0]
 8001562:	801a      	strh	r2, [r3, #0]
    g_nRxTimeout = timeout;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <RF_StartRx+0x4c>)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]

    memset(g_pRxBuffer, 0, g_nRxLength);
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <RF_StartRx+0x44>)
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <RF_StartRx+0x48>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	001a      	movs	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	f004 fe4b 	bl	8006210 <memset>

    g_nNextRFState = RF_STATE_RX_START;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <RF_StartRx+0x50>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b004      	add	sp, #16
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000414 	.word	0x20000414
 800158c:	2000041c 	.word	0x2000041c
 8001590:	200000d4 	.word	0x200000d4
 8001594:	20000410 	.word	0x20000410

08001598 <RF_StartTx>:

void RF_StartTx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	200a      	movs	r0, #10
 80015a4:	183b      	adds	r3, r7, r0
 80015a6:	1c0a      	adds	r2, r1, #0
 80015a8:	801a      	strh	r2, [r3, #0]
    g_pTxBuffer = buf;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <RF_StartTx+0x34>)
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	601a      	str	r2, [r3, #0]
    g_nTxLength = len;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <RF_StartTx+0x38>)
 80015b2:	183a      	adds	r2, r7, r0
 80015b4:	8812      	ldrh	r2, [r2, #0]
 80015b6:	801a      	strh	r2, [r3, #0]
    g_nTxTimeout = timeout;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <RF_StartTx+0x3c>)
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	601a      	str	r2, [r3, #0]

    g_nNextRFState = RF_STATE_TX_START;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <RF_StartTx+0x40>)
 80015c0:	2205      	movs	r2, #5
 80015c2:	701a      	strb	r2, [r3, #0]
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000418 	.word	0x20000418
 80015d0:	2000041e 	.word	0x2000041e
 80015d4:	200000d8 	.word	0x200000d8
 80015d8:	20000410 	.word	0x20000410

080015dc <RF_Process>:

EnumRFResult RF_Process(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
    EnumRFResult nRes = RF_BUSY;
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]

    switch (g_nNextRFState)
 80015e8:	4b80      	ldr	r3, [pc, #512]	; (80017ec <RF_Process+0x210>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	d900      	bls.n	80015f2 <RF_Process+0x16>
 80015f0:	e0f0      	b.n	80017d4 <RF_Process+0x1f8>
 80015f2:	009a      	lsls	r2, r3, #2
 80015f4:	4b7e      	ldr	r3, [pc, #504]	; (80017f0 <RF_Process+0x214>)
 80015f6:	18d3      	adds	r3, r2, r3
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	469f      	mov	pc, r3
    {
    case RF_STATE_IDLE:
    {
        nRes = RF_IDLE;
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
        break;
 8001602:	e0ec      	b.n	80017de <RF_Process+0x202>
    }

    case RF_STATE_RX_START:
    {
        Cmt2300_GoStby();
 8001604:	f7fe ffcf 	bl	80005a6 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 8001608:	f7ff f90f 	bl	800082a <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableReadFifo();
 800160c:	f7ff f8bc 	bl	8000788 <Cmt2300_EnableReadFifo>
        Cmt2300_ClearFifo();
 8001610:	f7ff f8f8 	bl	8000804 <Cmt2300_ClearFifo>

        if (false == Cmt2300_GoRx())
 8001614:	f7fe ffe1 	bl	80005da <Cmt2300_GoRx>
 8001618:	0003      	movs	r3, r0
 800161a:	001a      	movs	r2, r3
 800161c:	2301      	movs	r3, #1
 800161e:	4053      	eors	r3, r2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <RF_Process+0x52>
        {
            g_nNextRFState = RF_STATE_ERROR;
 8001626:	4b71      	ldr	r3, [pc, #452]	; (80017ec <RF_Process+0x210>)
 8001628:	2209      	movs	r2, #9
 800162a:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;

            g_nRxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 800162c:	e0d7      	b.n	80017de <RF_Process+0x202>
            cmt2300_irq_request=0;
 800162e:	4b71      	ldr	r3, [pc, #452]	; (80017f4 <RF_Process+0x218>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;
 8001634:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <RF_Process+0x210>)
 8001636:	2202      	movs	r2, #2
 8001638:	701a      	strb	r2, [r3, #0]
            g_nRxTimeCount = Cmt2300_GetTickCount();
 800163a:	4b6f      	ldr	r3, [pc, #444]	; (80017f8 <RF_Process+0x21c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <RF_Process+0x220>)
 8001640:	601a      	str	r2, [r3, #0]
        break;
 8001642:	e0cc      	b.n	80017de <RF_Process+0x202>
    case RF_STATE_RX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_PKT_OK_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG)) /* Read PKT_OK flag */
#else
        if (cmt2300_irq_request) /* Read INT2, PKT_OK */
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <RF_Process+0x218>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <RF_Process+0x7e>
#endif
        {
            cmt2300_irq_request=0;
 800164e:	4b69      	ldr	r3, [pc, #420]	; (80017f4 <RF_Process+0x218>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_DONE;
 8001654:	4b65      	ldr	r3, [pc, #404]	; (80017ec <RF_Process+0x210>)
 8001656:	2203      	movs	r2, #3
 8001658:	701a      	strb	r2, [r3, #0]
        }

        if( (INFINITE != g_nRxTimeout) && ((g_nSysTickCount-g_nRxTimeCount) > g_nRxTimeout) )
 800165a:	4b69      	ldr	r3, [pc, #420]	; (8001800 <RF_Process+0x224>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	d100      	bne.n	8001664 <RF_Process+0x88>
 8001662:	e0b9      	b.n	80017d8 <RF_Process+0x1fc>
 8001664:	4b64      	ldr	r3, [pc, #400]	; (80017f8 <RF_Process+0x21c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b64      	ldr	r3, [pc, #400]	; (80017fc <RF_Process+0x220>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	4b64      	ldr	r3, [pc, #400]	; (8001800 <RF_Process+0x224>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d800      	bhi.n	8001678 <RF_Process+0x9c>
 8001676:	e0af      	b.n	80017d8 <RF_Process+0x1fc>
            g_nNextRFState = RF_STATE_RX_TIMEOUT;
 8001678:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <RF_Process+0x210>)
 800167a:	2204      	movs	r2, #4
 800167c:	701a      	strb	r2, [r3, #0]
        
        break;
 800167e:	e0ab      	b.n	80017d8 <RF_Process+0x1fc>
    }

    case RF_STATE_RX_DONE:
    {
        Cmt2300_GoStby();
 8001680:	f7fe ff91 	bl	80005a6 <Cmt2300_GoStby>

        Cmt2300_ReadFifo(g_pRxBuffer, 1);//读取数据长度
 8001684:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <RF_Process+0x228>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff fc23 	bl	8000ed6 <Cmt2300_ReadFifo>
           
        PlayLoadlen=g_pRxBuffer[0];
 8001690:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <RF_Process+0x228>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <RF_Process+0x22c>)
 8001698:	701a      	strb	r2, [r3, #0]
        
        /* The length need be smaller than 32 */
        Cmt2300_ReadFifo(g_pRxBuffer, PlayLoadlen);
 800169a:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <RF_Process+0x228>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <RF_Process+0x22c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	0019      	movs	r1, r3
 80016a6:	0010      	movs	r0, r2
 80016a8:	f7ff fc15 	bl	8000ed6 <Cmt2300_ReadFifo>

        g_nInterrutFlags = Cmt2300_ClearInterruptFlags();
 80016ac:	f7ff f8bd 	bl	800082a <Cmt2300_ClearInterruptFlags>
 80016b0:	0003      	movs	r3, r0
 80016b2:	001a      	movs	r2, r3
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <RF_Process+0x230>)
 80016b6:	701a      	strb	r2, [r3, #0]

        //        Cmt2300_GoSleep();
#ifdef USE_CUBEIDE
        rfRecvDoneCallback();
 80016b8:	f000 fc5e 	bl	8001f78 <rfRecvDoneCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 80016bc:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <RF_Process+0x210>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_DONE;
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	2202      	movs	r2, #2
 80016c6:	701a      	strb	r2, [r3, #0]
        break;
 80016c8:	e089      	b.n	80017de <RF_Process+0x202>
    case RF_STATE_RX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();
        //
#ifdef USE_CUBEIDE
    	rfRecvTimeoutCallback();
 80016ca:	f000 fc81 	bl	8001fd0 <rfRecvTimeoutCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <RF_Process+0x210>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_TIMEOUT;
 80016d4:	1dfb      	adds	r3, r7, #7
 80016d6:	2203      	movs	r2, #3
 80016d8:	701a      	strb	r2, [r3, #0]

        break;
 80016da:	e080      	b.n	80017de <RF_Process+0x202>
    }

    case RF_STATE_TX_START:
    {
        Cmt2300_GoStby();
 80016dc:	f7fe ff63 	bl	80005a6 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 80016e0:	f7ff f8a3 	bl	800082a <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableWriteFifo();
 80016e4:	f7ff f86f 	bl	80007c6 <Cmt2300_EnableWriteFifo>
        Cmt2300_ClearFifo();
 80016e8:	f7ff f88c 	bl	8000804 <Cmt2300_ClearFifo>

        Cmt2300_SetPayloadLength(g_nTxLength); //发射数据长度
 80016ec:	4b48      	ldr	r3, [pc, #288]	; (8001810 <RF_Process+0x234>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff fae5 	bl	8000cc0 <Cmt2300_SetPayloadLength>
      
        Cmt2300_WriteFifo(g_pTxBuffer, g_nTxLength);
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <RF_Process+0x238>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b45      	ldr	r3, [pc, #276]	; (8001810 <RF_Process+0x234>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	0019      	movs	r1, r3
 8001700:	0010      	movs	r0, r2
 8001702:	f7ff fbfa 	bl	8000efa <Cmt2300_WriteFifo>

        if (0 == (CMT2300_MASK_TX_FIFO_NMTY_FLG & Cmt2300_ReadReg(CMT2300_CUS_FIFO_FLAG)))
 8001706:	206e      	movs	r0, #110	; 0x6e
 8001708:	f7ff fbb9 	bl	8000e7e <Cmt2300_ReadReg>
 800170c:	0003      	movs	r3, r0
 800170e:	001a      	movs	r2, r3
 8001710:	2302      	movs	r3, #2
 8001712:	4013      	ands	r3, r2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <RF_Process+0x144>
        {
            g_nNextRFState = RF_STATE_ERROR;
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <RF_Process+0x210>)
 800171c:	2209      	movs	r2, #9
 800171e:	701a      	strb	r2, [r3, #0]
        }

        if (false == Cmt2300_GoTx())
 8001720:	f7fe ff4e 	bl	80005c0 <Cmt2300_GoTx>
 8001724:	0003      	movs	r3, r0
 8001726:	001a      	movs	r2, r3
 8001728:	2301      	movs	r3, #1
 800172a:	4053      	eors	r3, r2
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <RF_Process+0x15e>
        {
            g_nNextRFState = RF_STATE_ERROR;
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <RF_Process+0x210>)
 8001734:	2209      	movs	r2, #9
 8001736:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;

            g_nTxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 8001738:	e051      	b.n	80017de <RF_Process+0x202>
            cmt2300_irq_request=0;
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <RF_Process+0x218>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <RF_Process+0x210>)
 8001742:	2206      	movs	r2, #6
 8001744:	701a      	strb	r2, [r3, #0]
            g_nTxTimeCount = Cmt2300_GetTickCount();
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <RF_Process+0x21c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b33      	ldr	r3, [pc, #204]	; (8001818 <RF_Process+0x23c>)
 800174c:	601a      	str	r2, [r3, #0]
        break;
 800174e:	e046      	b.n	80017de <RF_Process+0x202>
    case RF_STATE_TX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
#else
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
 8001750:	206a      	movs	r0, #106	; 0x6a
 8001752:	f7ff fb94 	bl	8000e7e <Cmt2300_ReadReg>
 8001756:	0003      	movs	r3, r0
 8001758:	001a      	movs	r2, r3
 800175a:	2308      	movs	r3, #8
 800175c:	4013      	ands	r3, r2
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <RF_Process+0x18e>
#endif
        {         
          g_nNextRFState = RF_STATE_TX_DONE;
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <RF_Process+0x210>)
 8001766:	2207      	movs	r2, #7
 8001768:	701a      	strb	r2, [r3, #0]
        }
        
        if( (INFINITE != g_nTxTimeout) && ((g_nSysTickCount-g_nTxTimeCount) > g_nTxTimeout) )
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <RF_Process+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	d034      	beq.n	80017dc <RF_Process+0x200>
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <RF_Process+0x21c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <RF_Process+0x23c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	1ad2      	subs	r2, r2, r3
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <RF_Process+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d92b      	bls.n	80017dc <RF_Process+0x200>
            g_nNextRFState = RF_STATE_TX_TIMEOUT;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <RF_Process+0x210>)
 8001786:	2208      	movs	r2, #8
 8001788:	701a      	strb	r2, [r3, #0]

        break;
 800178a:	e027      	b.n	80017dc <RF_Process+0x200>
    }

    case RF_STATE_TX_DONE:
    {
        Cmt2300_ClearInterruptFlags();
 800178c:	f7ff f84d 	bl	800082a <Cmt2300_ClearInterruptFlags>
        //Cmt2300_GoSleep();
#ifdef USE_CUBEIDE
        rfSendDoneCallback();
 8001790:	f000 fc08 	bl	8001fa4 <rfSendDoneCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <RF_Process+0x210>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_DONE;
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	2204      	movs	r2, #4
 800179e:	701a      	strb	r2, [r3, #0]
        break;
 80017a0:	e01d      	b.n	80017de <RF_Process+0x202>
    }

    case RF_STATE_TX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();      
        g_nNextRFState = RF_STATE_IDLE;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <RF_Process+0x210>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_TIMEOUT;
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	2205      	movs	r2, #5
 80017ac:	701a      	strb	r2, [r3, #0]
        break;
 80017ae:	e016      	b.n	80017de <RF_Process+0x202>
    }

    case RF_STATE_ERROR:
    {
        Cmt2300_SoftReset();
 80017b0:	f7fe fe8e 	bl	80004d0 <Cmt2300_SoftReset>
        Delay_Ms(10);
 80017b4:	200a      	movs	r0, #10
 80017b6:	f000 f867 	bl	8001888 <Delay_Ms>

        Cmt2300_GoStby();
 80017ba:	f7fe fef4 	bl	80005a6 <Cmt2300_GoStby>
        RF_Config();
 80017be:	f7ff fea9 	bl	8001514 <RF_Config>
#ifdef USE_CUBEIDE
        rfRecvErrorCallback();
 80017c2:	f000 fc1b 	bl	8001ffc <rfRecvErrorCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <RF_Process+0x210>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
        nRes = RF_ERROR;
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	2206      	movs	r2, #6
 80017d0:	701a      	strb	r2, [r3, #0]
        break;
 80017d2:	e004      	b.n	80017de <RF_Process+0x202>
    }

    default:
        break;
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	e002      	b.n	80017de <RF_Process+0x202>
        break;
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	e000      	b.n	80017de <RF_Process+0x202>
        break;
 80017dc:	46c0      	nop			; (mov r8, r8)
    }

    return nRes;
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	20000410 	.word	0x20000410
 80017f0:	08006840 	.word	0x08006840
 80017f4:	2000042a 	.word	0x2000042a
 80017f8:	2000042c 	.word	0x2000042c
 80017fc:	20000420 	.word	0x20000420
 8001800:	200000d4 	.word	0x200000d4
 8001804:	20000414 	.word	0x20000414
 8001808:	20000428 	.word	0x20000428
 800180c:	20000429 	.word	0x20000429
 8001810:	2000041e 	.word	0x2000041e
 8001814:	20000418 	.word	0x20000418
 8001818:	20000424 	.word	0x20000424
 800181c:	200000d8 	.word	0x200000d8

08001820 <bspInit>:

/*----------------------------------------------------------------
 *  FUNCTION DEFINITION
 *--------------------------------------------------------------*/
void bspInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
    uartInit(BSP_TTL_CHANNEL1);
 8001824:	2000      	movs	r0, #0
 8001826:	f000 f969 	bl	8001afc <uartInit>
    
    RF_Init();
 800182a:	f7ff fe37 	bl	800149c <RF_Init>
//    {
//        led2On();
//    }

    /* level7: 20dbm */
    Cmt2300_ConfigTxPower(7);
 800182e:	2007      	movs	r0, #7
 8001830:	f7ff f9de 	bl	8000bf0 <Cmt2300_ConfigTxPower>
    /* rate:1.2kbps */
    Cmt2300_ConfigDataRate(rf_rate_1K2);
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff f905 	bl	8000a44 <Cmt2300_ConfigDataRate>
    /* packet type */
    Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 800183a:	2001      	movs	r0, #1
 800183c:	f7fe fe87 	bl	800054e <Cmt2300_ConfigPktLenthType>
    /* packet mode */
    Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff f9b5 	bl	8000bb0 <Cmt2300_ConfigDataMode>
    /* enable fifo */
    Cmt2300_EnableFifoMerge(true);
 8001846:	2001      	movs	r0, #1
 8001848:	f7fe ff74 	bl	8000734 <Cmt2300_EnableFifoMerge>

    /* disable rf time */
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 800184c:	2301      	movs	r3, #1
 800184e:	425a      	negs	r2, r3
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	0059      	lsls	r1, r3, #1
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <bspInit+0x60>)
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff fe74 	bl	8001544 <RF_StartRx>
    rfTimerEnable();
 800185c:	f000 f8b6 	bl	80019cc <rfTimerEnable>
    led2Off();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <bspInit+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	2120      	movs	r1, #32
 8001866:	0018      	movs	r0, r3
 8001868:	f001 fcaf 	bl	80031ca <HAL_GPIO_WritePin>
    led2Off();
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <bspInit+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	2120      	movs	r1, #32
 8001872:	0018      	movs	r0, r3
 8001874:	f001 fca9 	bl	80031ca <HAL_GPIO_WritePin>
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	20000170 	.word	0x20000170
 8001884:	48000400 	.word	0x48000400

08001888 <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e00c      	b.n	80018b8 <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	e002      	b.n	80018aa <Delay_Ms+0x22>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <Delay_Ms+0x44>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d9f8      	bls.n	80018a4 <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3ee      	bcc.n	800189e <Delay_Ms+0x16>
  }
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b004      	add	sp, #16
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	000011bb 	.word	0x000011bb

080018d0 <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	0018      	movs	r0, r3
 80018e6:	2314      	movs	r3, #20
 80018e8:	001a      	movs	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	f004 fc90 	bl	8006210 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <cmt_spi3_sda_out+0x60>)
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <cmt_spi3_sda_out+0x60>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0289      	lsls	r1, r1, #10
 80018fa:	430a      	orrs	r2, r1
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <cmt_spi3_sda_out+0x60>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	029b      	lsls	r3, r3, #10
 8001906:	4013      	ands	r3, r2
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	0052      	lsls	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2201      	movs	r2, #1
 8001918:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2203      	movs	r2, #3
 8001924:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001926:	1d3a      	adds	r2, r7, #4
 8001928:	2390      	movs	r3, #144	; 0x90
 800192a:	05db      	lsls	r3, r3, #23
 800192c:	0011      	movs	r1, r2
 800192e:	0018      	movs	r0, r3
 8001930:	f001 f9ee 	bl	8002d10 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b006      	add	sp, #24
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000

08001940 <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	0018      	movs	r0, r3
 800194a:	2314      	movs	r3, #20
 800194c:	001a      	movs	r2, r3
 800194e:	2100      	movs	r1, #0
 8001950:	f004 fc5e 	bl	8006210 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <cmt_spi3_sda_in+0x5c>)
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <cmt_spi3_sda_in+0x5c>)
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	0289      	lsls	r1, r1, #10
 800195e:	430a      	orrs	r2, r1
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <cmt_spi3_sda_in+0x5c>)
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4013      	ands	r3, r2
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	0052      	lsls	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001984:	1d3a      	adds	r2, r7, #4
 8001986:	2390      	movs	r3, #144	; 0x90
 8001988:	05db      	lsls	r3, r3, #23
 800198a:	0011      	movs	r1, r2
 800198c:	0018      	movs	r0, r3
 800198e:	f001 f9bf 	bl	8002d10 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b006      	add	sp, #24
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_GPIO_EXTI_Callback>:
#endif
}

#ifdef USE_CUBEIDE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	0002      	movs	r2, r0
 80019a8:	1dbb      	adds	r3, r7, #6
 80019aa:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 80019ac:	1dbb      	adds	r3, r7, #6
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	015b      	lsls	r3, r3, #5
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d102      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x1e>
//        else if (ret == RF_STATE_TX_WAIT)
//        {
//            rfSendDoneCallback();
//        }
        
		cmt2300_irq_request = 1;
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x28>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
	}
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	2000042a 	.word	0x2000042a

080019cc <rfTimerEnable>:
/**
 * @brief rf timer enable
 * 
 */
void rfTimerEnable(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim16);
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <rfTimerEnable+0x14>)
 80019d2:	0018      	movs	r0, r3
 80019d4:	f002 f9b0 	bl	8003d38 <HAL_TIM_Base_Start_IT>
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	20000654 	.word	0x20000654

080019e4 <rfTimerDisable>:
/**
 * @brief rf timer disable
 * 
 */
void rfTimerDisable(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim16);
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <rfTimerDisable+0x14>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f002 f9f0 	bl	8003dd0 <HAL_TIM_Base_Stop_IT>
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	20000654 	.word	0x20000654

080019fc <HAL_TIM_PeriodElapsedCallback>:
 * 
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim14.Instance)
    //	{
    //		time10ms_flag = 1;
    //		timer10InterruptHandler();
    //	}
    if(htim->Instance == htim16.Instance)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d101      	bne.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        HAL_Timer16Callback();
 8001a10:	f000 fb0a 	bl	8002028 <HAL_Timer16Callback>
    }
    if (htim->Instance == htim17.Instance) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d103      	bne.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x2c>
        uartTimerIrqHandler(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 fa00 	bl	8001e28 <uartTimerIrqHandler>
    }
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000654 	.word	0x20000654
 8001a34:	2000069c 	.word	0x2000069c

08001a38 <HAL_SysTick_Handler>:
 * 
 * @param None
 * @retval None
 */
void HAL_SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_SysTick_Handler+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <HAL_SysTick_Handler+0x14>)
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000042c 	.word	0x2000042c

08001a50 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]
}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <uartInitRxFifo>:
 * 
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	0002      	movs	r2, r0
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 8001a7c:	1dfb      	adds	r3, r7, #7
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	011a      	lsls	r2, r3, #4
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <uartInitRxFifo+0x34>)
 8001a84:	18d0      	adds	r0, r2, r3
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	025a      	lsls	r2, r3, #9
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <uartInitRxFifo+0x38>)
 8001a8e:	18d3      	adds	r3, r2, r3
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	0019      	movs	r1, r3
 8001a96:	f003 fe62 	bl	800575e <kfifo_init>
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b002      	add	sp, #8
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	20000634 	.word	0x20000634
 8001aa8:	20000434 	.word	0x20000434

08001aac <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2517      	movs	r5, #23
 8001abc:	197b      	adds	r3, r7, r5
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 8001ac2:	197c      	adds	r4, r7, r5
 8001ac4:	1dbb      	adds	r3, r7, #6
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f002 fc9b 	bl	8004408 <HAL_UART_Receive_IT>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8001ad6:	197b      	adds	r3, r7, r5
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2278      	movs	r2, #120	; 0x78
 8001aea:	2100      	movs	r1, #0
 8001aec:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8001aee:	2317      	movs	r3, #23
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	781b      	ldrb	r3, [r3, #0]
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b006      	add	sp, #24
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <uartInit>:
 * 
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	0002      	movs	r2, r0
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff ffaf 	bl	8001a70 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <uartInit+0x60>)
 8001b18:	0052      	lsls	r2, r2, #1
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <uartInit+0x64>)
 8001b24:	0052      	lsls	r2, r2, #1
 8001b26:	2100      	movs	r1, #0
 8001b28:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <uartInit+0x68>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <uartInit+0x6c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <uartInit+0x70>)
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	18d3      	adds	r3, r2, r3
 8001b40:	3304      	adds	r3, #4
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	1dfb      	adds	r3, r7, #7
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <uartInit+0x74>)
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	0019      	movs	r1, r3
 8001b50:	f7ff ffac 	bl	8001aac <UART_Receive_IT>
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000644 	.word	0x20000644
 8001b60:	20000648 	.word	0x20000648
 8001b64:	2000064c 	.word	0x2000064c
 8001b68:	20000650 	.word	0x20000650
 8001b6c:	200000dc 	.word	0x200000dc
 8001b70:	20000430 	.word	0x20000430

08001b74 <uartRecovery>:
 * 
 * @param channel 
 * @retval None
 */
static void uartRecovery(uartChannel_t channel)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 8001b80:	1dfb      	adds	r3, r7, #7
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <uartRecovery+0x34>)
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	18d3      	adds	r3, r2, r3
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f002 fb5c 	bl	800424c <HAL_UART_DeInit>
    uartInit(channel);
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff ffaf 	bl	8001afc <uartInit>
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	200000dc 	.word	0x200000dc

08001bac <uartSendData>:
 * @param data
 * @param length
 * @retval None
 */
void uartSendData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6039      	str	r1, [r7, #0]
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	1c02      	adds	r2, r0, #0
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	1c0a      	adds	r2, r1, #0
 8001bc0:	801a      	strh	r2, [r3, #0]
    uart_tx_status[channel] = BSP_UART_TX_START;
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <uartSendData+0x54>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	54d1      	strb	r1, [r2, r3]
	// if (HAL_UART_Transmit_DMA(uartPara[channel].uart_handle_addr, data, length) != HAL_OK)
	/* use IT mode send data */
	// if (HAL_UART_Transmit_IT( uartPara[channel].uart_handle_addr, data, length ) != HAL_OK)
	/* use poll mode send data */
	if (HAL_UART_Transmit(uartPara[channel].uart_handle_addr, data, length, 0xFFFF) != HAL_OK)
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <uartSendData+0x58>)
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	18d3      	adds	r3, r2, r3
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	4c0b      	ldr	r4, [pc, #44]	; (8001c08 <uartSendData+0x5c>)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	881a      	ldrh	r2, [r3, #0]
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	0023      	movs	r3, r4
 8001be4:	f002 fb70 	bl	80042c8 <HAL_UART_Transmit>
 8001be8:	1e03      	subs	r3, r0, #0
 8001bea:	d004      	beq.n	8001bf6 <uartSendData+0x4a>
    {
        uartRecovery(channel);
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff ffbf 	bl	8001b74 <uartRecovery>
    }
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b003      	add	sp, #12
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	2000064c 	.word	0x2000064c
 8001c04:	200000dc 	.word	0x200000dc
 8001c08:	0000ffff 	.word	0x0000ffff

08001c0c <HAL_UART_TxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001c14:	230f      	movs	r3, #15
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e015      	b.n	8001c4a <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 8001c1e:	210f      	movs	r1, #15
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_UART_TxCpltCallback+0x54>)
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	58d2      	ldr	r2, [r2, r3]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d105      	bne.n	8001c3e <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <HAL_UART_TxCpltCallback+0x58>)
 8001c38:	2102      	movs	r1, #2
 8001c3a:	54d1      	strb	r1, [r2, r3]
            break;
 8001c3c:	e00b      	b.n	8001c56 <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001c3e:	210f      	movs	r1, #15
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	3201      	adds	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0e4      	beq.n	8001c1e <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	200000dc 	.word	0x200000dc
 8001c64:	2000064c 	.word	0x2000064c

08001c68 <uartGetData>:
 * @param data 
 * @param length 
 * @retval uint32_t 
 */
uint32_t uartGetData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6039      	str	r1, [r7, #0]
 8001c70:	0011      	movs	r1, r2
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	1c02      	adds	r2, r0, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	1c0a      	adds	r2, r1, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
    uint32_t ret = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]

    if (BSP_UART_RX_COMPLETED == uart_rx_status[channel]) 
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <uartGetData+0x54>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d10d      	bne.n	8001cac <uartGetData+0x44>
	{
		ret = kfifo_out(&uart_rx_fifo[channel], data, length);
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	011a      	lsls	r2, r3, #4
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <uartGetData+0x58>)
 8001c98:	18d0      	adds	r0, r2, r3
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	f003 fdfd 	bl	80058a0 <kfifo_out>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e001      	b.n	8001cb0 <uartGetData+0x48>
	}    
	else
	{
		ret = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
	}

    return ret;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b004      	add	sp, #16
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	20000650 	.word	0x20000650
 8001cc0:	20000634 	.word	0x20000634

08001cc4 <uartResetData>:
 * 
 * @param channel 
 * @retval None
 */
void uartResetData(uartChannel_t channel)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	0002      	movs	r2, r0
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	701a      	strb	r2, [r3, #0]
    kfifo_reset(&uart_rx_fifo[channel]);
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	011a      	lsls	r2, r3, #4
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <uartResetData+0x3c>)
 8001cd8:	18d3      	adds	r3, r2, r3
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7ff feb8 	bl	8001a50 <kfifo_reset>
    uart_rx_size[channel] = 0;
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <uartResetData+0x40>)
 8001ce6:	0052      	lsls	r2, r2, #1
 8001ce8:	2100      	movs	r1, #0
 8001cea:	52d1      	strh	r1, [r2, r3]
    uart_rx_status[channel] = BSP_UART_IDLE;
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <uartResetData+0x44>)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	54d1      	strb	r1, [r2, r3]
}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	20000634 	.word	0x20000634
 8001d04:	20000648 	.word	0x20000648
 8001d08:	20000650 	.word	0x20000650

08001d0c <HAL_UART_RxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001d14:	230f      	movs	r3, #15
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e072      	b.n	8001e04 <HAL_UART_RxCpltCallback+0xf8>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8001d1e:	240f      	movs	r4, #15
 8001d20:	193b      	adds	r3, r7, r4
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_UART_RxCpltCallback+0x108>)
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	58d2      	ldr	r2, [r2, r3]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d162      	bne.n	8001df8 <HAL_UART_RxCpltCallback+0xec>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 8001d32:	193b      	adds	r3, r7, r4
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <HAL_UART_RxCpltCallback+0x10c>)
 8001d38:	2103      	movs	r1, #3
 8001d3a:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_UART_RxCpltCallback+0x108>)
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	18d3      	adds	r3, r2, r3
 8001d46:	3308      	adds	r3, #8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8001d4e:	193b      	adds	r3, r7, r4
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4a30      	ldr	r2, [pc, #192]	; (8001e14 <HAL_UART_RxCpltCallback+0x108>)
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	18d3      	adds	r3, r2, r3
 8001d58:	3308      	adds	r3, #8
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001d60:	193b      	adds	r3, r7, r4
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_UART_RxCpltCallback+0x108>)
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	18d3      	adds	r3, r2, r3
 8001d6a:	330c      	adds	r3, #12
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f001 ffe2 	bl	8003d38 <HAL_TIM_Base_Start_IT>
            if (uart_rx_counter[i] >= (UART_BUFFER_SIZE-1))
 8001d74:	193b      	adds	r3, r7, r4
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_UART_RxCpltCallback+0x110>)
 8001d7a:	0052      	lsls	r2, r2, #1
 8001d7c:	5ad2      	ldrh	r2, [r2, r3]
 8001d7e:	23ff      	movs	r3, #255	; 0xff
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d90d      	bls.n	8001da2 <HAL_UART_RxCpltCallback+0x96>
            {
            	kfifo_reset(&uart_rx_fifo[i]);
 8001d86:	193b      	adds	r3, r7, r4
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	011a      	lsls	r2, r3, #4
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_UART_RxCpltCallback+0x114>)
 8001d8e:	18d3      	adds	r3, r2, r3
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7ff fe5d 	bl	8001a50 <kfifo_reset>
            	uart_rx_counter[i] = 0;
 8001d96:	193b      	adds	r3, r7, r4
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_UART_RxCpltCallback+0x110>)
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	2100      	movs	r1, #0
 8001da0:	52d1      	strh	r1, [r2, r3]
            }
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 8001da2:	210f      	movs	r1, #15
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	011a      	lsls	r2, r3, #4
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_UART_RxCpltCallback+0x114>)
 8001dac:	18d0      	adds	r0, r2, r3
 8001dae:	000c      	movs	r4, r1
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_UART_RxCpltCallback+0x118>)
 8001db6:	18d3      	adds	r3, r2, r3
 8001db8:	2201      	movs	r2, #1
 8001dba:	0019      	movs	r1, r3
 8001dbc:	f003 fd49 	bl	8005852 <kfifo_in>
            uart_rx_counter[i]++;
 8001dc0:	0020      	movs	r0, r4
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <HAL_UART_RxCpltCallback+0x110>)
 8001dc8:	0059      	lsls	r1, r3, #1
 8001dca:	5a8a      	ldrh	r2, [r1, r2]
 8001dcc:	3201      	adds	r2, #1
 8001dce:	b291      	uxth	r1, r2
 8001dd0:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <HAL_UART_RxCpltCallback+0x110>)
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 8001dd6:	0001      	movs	r1, r0
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_UART_RxCpltCallback+0x108>)
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	3304      	adds	r3, #4
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_UART_RxCpltCallback+0x118>)
 8001dec:	18d3      	adds	r3, r2, r3
 8001dee:	2201      	movs	r2, #1
 8001df0:	0019      	movs	r1, r3
 8001df2:	f7ff fe5b 	bl	8001aac <UART_Receive_IT>
            return;
 8001df6:	e00a      	b.n	8001e0e <HAL_UART_RxCpltCallback+0x102>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001df8:	210f      	movs	r1, #15
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	3201      	adds	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	230f      	movs	r3, #15
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d087      	beq.n	8001d1e <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b005      	add	sp, #20
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	200000dc 	.word	0x200000dc
 8001e18:	20000650 	.word	0x20000650
 8001e1c:	20000644 	.word	0x20000644
 8001e20:	20000634 	.word	0x20000634
 8001e24:	20000430 	.word	0x20000430

08001e28 <uartTimerIrqHandler>:
 * 
 * @param htim 
 * @retval None
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001e30:	230f      	movs	r3, #15
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e060      	b.n	8001efc <uartTimerIrqHandler+0xd4>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4a33      	ldr	r2, [pc, #204]	; (8001f10 <uartTimerIrqHandler+0xe8>)
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	3308      	adds	r3, #8
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d14e      	bne.n	8001ef0 <uartTimerIrqHandler+0xc8>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 8001e52:	000c      	movs	r4, r1
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <uartTimerIrqHandler+0xe8>)
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	18d3      	adds	r3, r2, r3
 8001e5e:	330c      	adds	r3, #12
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f001 ffb4 	bl	8003dd0 <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8001e68:	0020      	movs	r0, r4
 8001e6a:	183b      	adds	r3, r7, r0
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <uartTimerIrqHandler+0xec>)
 8001e70:	2104      	movs	r1, #4
 8001e72:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8001e74:	183b      	adds	r3, r7, r0
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <uartTimerIrqHandler+0xf0>)
 8001e7a:	0052      	lsls	r2, r2, #1
 8001e7c:	5ad1      	ldrh	r1, [r2, r3]
 8001e7e:	183b      	adds	r3, r7, r0
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <uartTimerIrqHandler+0xf4>)
 8001e84:	0052      	lsls	r2, r2, #1
 8001e86:	5ad3      	ldrh	r3, [r2, r3]
 8001e88:	183a      	adds	r2, r7, r0
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	18cb      	adds	r3, r1, r3
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <uartTimerIrqHandler+0xf0>)
 8001e92:	0052      	lsls	r2, r2, #1
 8001e94:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 8001e96:	183b      	adds	r3, r7, r0
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <uartTimerIrqHandler+0xf0>)
 8001e9c:	0052      	lsls	r2, r2, #1
 8001e9e:	5ad2      	ldrh	r2, [r2, r3]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d919      	bls.n	8001edc <uartTimerIrqHandler+0xb4>
            {
            	kfifo_reset(&uart_rx_fifo[i]);
 8001ea8:	0004      	movs	r4, r0
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	011a      	lsls	r2, r3, #4
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <uartTimerIrqHandler+0xf8>)
 8001eb2:	18d3      	adds	r3, r2, r3
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fdcb 	bl	8001a50 <kfifo_reset>
            	uart_rx_size[i] = uart_rx_counter[i];
 8001eba:	0020      	movs	r0, r4
 8001ebc:	183b      	adds	r3, r7, r0
 8001ebe:	7819      	ldrb	r1, [r3, #0]
 8001ec0:	183b      	adds	r3, r7, r0
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <uartTimerIrqHandler+0xf4>)
 8001ec6:	0049      	lsls	r1, r1, #1
 8001ec8:	5ac9      	ldrh	r1, [r1, r3]
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <uartTimerIrqHandler+0xf0>)
 8001ecc:	0052      	lsls	r2, r2, #1
 8001ece:	52d1      	strh	r1, [r2, r3]
            	uart_rx_size[i] = 0;
 8001ed0:	183b      	adds	r3, r7, r0
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <uartTimerIrqHandler+0xf0>)
 8001ed6:	0052      	lsls	r2, r2, #1
 8001ed8:	2100      	movs	r1, #0
 8001eda:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 8001edc:	230f      	movs	r3, #15
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <uartTimerIrqHandler+0xf4>)
 8001ee4:	0052      	lsls	r2, r2, #1
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	52d1      	strh	r1, [r2, r3]

#ifdef USE_CUBEIDE
            uartRecvDoneCallback();
 8001eea:	f000 f8a5 	bl	8002038 <uartRecvDoneCallback>
#endif
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 8001eee:	e00b      	b.n	8001f08 <uartTimerIrqHandler+0xe0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	3201      	adds	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	230f      	movs	r3, #15
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d099      	beq.n	8001e3a <uartTimerIrqHandler+0x12>
        }
    }
}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b005      	add	sp, #20
 8001f0e:	bd90      	pop	{r4, r7, pc}
 8001f10:	200000dc 	.word	0x200000dc
 8001f14:	20000650 	.word	0x20000650
 8001f18:	20000648 	.word	0x20000648
 8001f1c:	20000644 	.word	0x20000644
 8001f20:	20000634 	.word	0x20000634

08001f24 <HAL_UART_ErrorCallback>:
 * 
 * @param huart
 * @retval None 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e014      	b.n	8001f60 <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 8001f36:	210f      	movs	r1, #15
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_UART_ErrorCallback+0x50>)
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	58d2      	ldr	r2, [r2, r3]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d104      	bne.n	8001f54 <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7ff fe10 	bl	8001b74 <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f54:	210f      	movs	r1, #15
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	3201      	adds	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	230f      	movs	r3, #15
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0e5      	beq.n	8001f36 <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200000dc 	.word	0x200000dc

08001f78 <rfRecvDoneCallback>:
/**
 * @brief rf recv done callback
 * 
 */
void rfRecvDoneCallback(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvEvent, NULL});
 8001f7e:	003b      	movs	r3, r7
 8001f80:	2202      	movs	r2, #2
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	003b      	movs	r3, r7
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	003a      	movs	r2, r7
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <rfRecvDoneCallback+0x28>)
 8001f8e:	0011      	movs	r1, r2
 8001f90:	0018      	movs	r0, r3
 8001f92:	f003 fce6 	bl	8005962 <mq_push>
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	20000380 	.word	0x20000380

08001fa4 <rfSendDoneCallback>:
/**
 * @brief rf send done callback
 * 
 */
void rfSendDoneCallback(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfSendEvent, NULL});
 8001faa:	003b      	movs	r3, r7
 8001fac:	2204      	movs	r2, #4
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	003b      	movs	r3, r7
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	003a      	movs	r2, r7
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <rfSendDoneCallback+0x28>)
 8001fba:	0011      	movs	r1, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f003 fcd0 	bl	8005962 <mq_push>
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	20000380 	.word	0x20000380

08001fd0 <rfRecvTimeoutCallback>:
/**
 * @brief 
 * 
 */
void rfRecvTimeoutCallback(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvTimeoutEvent, NULL});
 8001fd6:	003b      	movs	r3, r7
 8001fd8:	2206      	movs	r2, #6
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	003b      	movs	r3, r7
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	003a      	movs	r2, r7
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <rfRecvTimeoutCallback+0x28>)
 8001fe6:	0011      	movs	r1, r2
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f003 fcba 	bl	8005962 <mq_push>
}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	20000380 	.word	0x20000380

08001ffc <rfRecvErrorCallback>:
/**
 * @brief 
 * 
 */
void rfRecvErrorCallback(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvErrorEvent, NULL});
 8002002:	003b      	movs	r3, r7
 8002004:	2205      	movs	r2, #5
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	003b      	movs	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	003a      	movs	r2, r7
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <rfRecvErrorCallback+0x28>)
 8002012:	0011      	movs	r1, r2
 8002014:	0018      	movs	r0, r3
 8002016:	f003 fca4 	bl	8005962 <mq_push>
}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b002      	add	sp, #8
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	20000380 	.word	0x20000380

08002028 <HAL_Timer16Callback>:
/**
 * @brief timer16 callback,10ms
 *
 */
void HAL_Timer16Callback(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	RF_Process();
 800202c:	f7ff fad6 	bl	80015dc <RF_Process>
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <uartRecvDoneCallback>:
/**
 * @brief uart recv done callback
 * 
 */
void uartRecvDoneCallback(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){uartRecvEvent, NULL});
 800203e:	003b      	movs	r3, r7
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	003b      	movs	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	003a      	movs	r2, r7
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <uartRecvDoneCallback+0x28>)
 800204e:	0011      	movs	r1, r2
 8002050:	0018      	movs	r0, r3
 8002052:	f003 fc86 	bl	8005962 <mq_push>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	20000380 	.word	0x20000380

08002064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002068:	f000 fc60 	bl	800292c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206c:	f000 f80f 	bl	800208e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002070:	f000 f91c 	bl	80022ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002074:	f000 f8ba 	bl	80021ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002078:	f000 f8e8 	bl	800224c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800207c:	f000 f88e 	bl	800219c <MX_TIM17_Init>
  MX_TIM16_Init();
 8002080:	f000 f864 	bl	800214c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  bspInit();
 8002084:	f7ff fbcc 	bl	8001820 <bspInit>
  stateActuator();
 8002088:	f7fe f9fa 	bl	8000480 <stateActuator>
//  messageQueueTest();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800208c:	e7fe      	b.n	800208c <main+0x28>

0800208e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208e:	b590      	push	{r4, r7, lr}
 8002090:	b095      	sub	sp, #84	; 0x54
 8002092:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002094:	2420      	movs	r4, #32
 8002096:	193b      	adds	r3, r7, r4
 8002098:	0018      	movs	r0, r3
 800209a:	2330      	movs	r3, #48	; 0x30
 800209c:	001a      	movs	r2, r3
 800209e:	2100      	movs	r1, #0
 80020a0:	f004 f8b6 	bl	8006210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a4:	2310      	movs	r3, #16
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	0018      	movs	r0, r3
 80020aa:	2310      	movs	r3, #16
 80020ac:	001a      	movs	r2, r3
 80020ae:	2100      	movs	r1, #0
 80020b0:	f004 f8ae 	bl	8006210 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b4:	003b      	movs	r3, r7
 80020b6:	0018      	movs	r0, r3
 80020b8:	2310      	movs	r3, #16
 80020ba:	001a      	movs	r2, r3
 80020bc:	2100      	movs	r1, #0
 80020be:	f004 f8a7 	bl	8006210 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020c2:	0021      	movs	r1, r4
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	2201      	movs	r2, #1
 80020ce:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	2202      	movs	r2, #2
 80020d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020d6:	187b      	adds	r3, r7, r1
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	0252      	lsls	r2, r2, #9
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	02d2      	lsls	r2, r2, #11
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	2200      	movs	r2, #0
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	0018      	movs	r0, r3
 80020f0:	f001 f8a4 	bl	800323c <HAL_RCC_OscConfig>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d001      	beq.n	80020fc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80020f8:	f000 f9c6 	bl	8002488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020fc:	2110      	movs	r1, #16
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002104:	187b      	adds	r3, r7, r1
 8002106:	2202      	movs	r2, #2
 8002108:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002110:	187b      	adds	r3, r7, r1
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2101      	movs	r1, #1
 800211a:	0018      	movs	r0, r3
 800211c:	f001 fba8 	bl	8003870 <HAL_RCC_ClockConfig>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d001      	beq.n	8002128 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002124:	f000 f9b0 	bl	8002488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002128:	003b      	movs	r3, r7
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800212e:	003b      	movs	r3, r7
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002134:	003b      	movs	r3, r7
 8002136:	0018      	movs	r0, r3
 8002138:	f001 fce0 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d001      	beq.n	8002144 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002140:	f000 f9a2 	bl	8002488 <Error_Handler>
  }
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b015      	add	sp, #84	; 0x54
 800214a:	bd90      	pop	{r4, r7, pc}

0800214c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_TIM16_Init+0x44>)
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <MX_TIM16_Init+0x48>)
 8002154:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_TIM16_Init+0x44>)
 8002158:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <MX_TIM16_Init+0x4c>)
 800215a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_TIM16_Init+0x44>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50-1;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_TIM16_Init+0x44>)
 8002164:	2231      	movs	r2, #49	; 0x31
 8002166:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_TIM16_Init+0x44>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_TIM16_Init+0x44>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_TIM16_Init+0x44>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <MX_TIM16_Init+0x44>)
 800217c:	0018      	movs	r0, r3
 800217e:	f001 fd8b 	bl	8003c98 <HAL_TIM_Base_Init>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d001      	beq.n	800218a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002186:	f000 f97f 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000654 	.word	0x20000654
 8002194:	40014400 	.word	0x40014400
 8002198:	000012bf 	.word	0x000012bf

0800219c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_TIM17_Init+0x44>)
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <MX_TIM17_Init+0x48>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_TIM17_Init+0x44>)
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <MX_TIM17_Init+0x4c>)
 80021aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_TIM17_Init+0x44>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_TIM17_Init+0x44>)
 80021b4:	2223      	movs	r2, #35	; 0x23
 80021b6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_TIM17_Init+0x44>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_TIM17_Init+0x44>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_TIM17_Init+0x44>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <MX_TIM17_Init+0x44>)
 80021cc:	0018      	movs	r0, r3
 80021ce:	f001 fd63 	bl	8003c98 <HAL_TIM_Base_Init>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80021d6:	f000 f957 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000069c 	.word	0x2000069c
 80021e4:	40014800 	.word	0x40014800
 80021e8:	000012bf 	.word	0x000012bf

080021ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_USART1_UART_Init+0x58>)
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <MX_USART1_UART_Init+0x5c>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_USART1_UART_Init+0x58>)
 80021f8:	22e1      	movs	r2, #225	; 0xe1
 80021fa:	0252      	lsls	r2, r2, #9
 80021fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USART1_UART_Init+0x58>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_USART1_UART_Init+0x58>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USART1_UART_Init+0x58>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USART1_UART_Init+0x58>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USART1_UART_Init+0x58>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USART1_UART_Init+0x58>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USART1_UART_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USART1_UART_Init+0x58>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <MX_USART1_UART_Init+0x58>)
 8002230:	0018      	movs	r0, r3
 8002232:	f001 ffb7 	bl	80041a4 <HAL_UART_Init>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d001      	beq.n	800223e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800223a:	f000 f925 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200006e4 	.word	0x200006e4
 8002248:	40013800 	.word	0x40013800

0800224c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <MX_USART2_UART_Init+0x5c>)
 8002254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 8002258:	22e1      	movs	r2, #225	; 0xe1
 800225a:	0252      	lsls	r2, r2, #9
 800225c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <MX_USART2_UART_Init+0x58>)
 8002290:	0018      	movs	r0, r3
 8002292:	f001 ff87 	bl	80041a4 <HAL_UART_Init>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d001      	beq.n	800229e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800229a:	f000 f8f5 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000076c 	.word	0x2000076c
 80022a8:	40004400 	.word	0x40004400

080022ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	240c      	movs	r4, #12
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	0018      	movs	r0, r3
 80022b8:	2314      	movs	r3, #20
 80022ba:	001a      	movs	r2, r3
 80022bc:	2100      	movs	r1, #0
 80022be:	f003 ffa7 	bl	8006210 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022c2:	4b6e      	ldr	r3, [pc, #440]	; (800247c <MX_GPIO_Init+0x1d0>)
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	4b6d      	ldr	r3, [pc, #436]	; (800247c <MX_GPIO_Init+0x1d0>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	03c9      	lsls	r1, r1, #15
 80022cc:	430a      	orrs	r2, r1
 80022ce:	615a      	str	r2, [r3, #20]
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <MX_GPIO_Init+0x1d0>)
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	03db      	lsls	r3, r3, #15
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b67      	ldr	r3, [pc, #412]	; (800247c <MX_GPIO_Init+0x1d0>)
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	4b66      	ldr	r3, [pc, #408]	; (800247c <MX_GPIO_Init+0x1d0>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0289      	lsls	r1, r1, #10
 80022e8:	430a      	orrs	r2, r1
 80022ea:	615a      	str	r2, [r3, #20]
 80022ec:	4b63      	ldr	r3, [pc, #396]	; (800247c <MX_GPIO_Init+0x1d0>)
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	029b      	lsls	r3, r3, #10
 80022f4:	4013      	ands	r3, r2
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b60      	ldr	r3, [pc, #384]	; (800247c <MX_GPIO_Init+0x1d0>)
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <MX_GPIO_Init+0x1d0>)
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	02c9      	lsls	r1, r1, #11
 8002304:	430a      	orrs	r2, r1
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	4b5c      	ldr	r3, [pc, #368]	; (800247c <MX_GPIO_Init+0x1d0>)
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	02db      	lsls	r3, r3, #11
 8002310:	4013      	ands	r3, r2
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 8002316:	2381      	movs	r3, #129	; 0x81
 8002318:	0119      	lsls	r1, r3, #4
 800231a:	2390      	movs	r3, #144	; 0x90
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	2200      	movs	r2, #0
 8002320:	0018      	movs	r0, r3
 8002322:	f000 ff52 	bl	80031ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 8002326:	4956      	ldr	r1, [pc, #344]	; (8002480 <MX_GPIO_Init+0x1d4>)
 8002328:	4b56      	ldr	r3, [pc, #344]	; (8002484 <MX_GPIO_Init+0x1d8>)
 800232a:	2200      	movs	r2, #0
 800232c:	0018      	movs	r0, r3
 800232e:	f000 ff4c 	bl	80031ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 8002332:	193b      	adds	r3, r7, r4
 8002334:	2210      	movs	r2, #16
 8002336:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	193b      	adds	r3, r7, r4
 800233a:	2201      	movs	r2, #1
 800233c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	193b      	adds	r3, r7, r4
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002344:	193b      	adds	r3, r7, r4
 8002346:	2201      	movs	r2, #1
 8002348:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 800234a:	193a      	adds	r2, r7, r4
 800234c:	2390      	movs	r3, #144	; 0x90
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	0011      	movs	r1, r2
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fcdc 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 8002358:	0021      	movs	r1, r4
 800235a:	187b      	adds	r3, r7, r1
 800235c:	2280      	movs	r2, #128	; 0x80
 800235e:	0152      	lsls	r2, r2, #5
 8002360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002362:	000c      	movs	r4, r1
 8002364:	193b      	adds	r3, r7, r4
 8002366:	2200      	movs	r2, #0
 8002368:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236a:	193b      	adds	r3, r7, r4
 800236c:	2201      	movs	r2, #1
 800236e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8002370:	193b      	adds	r3, r7, r4
 8002372:	4a44      	ldr	r2, [pc, #272]	; (8002484 <MX_GPIO_Init+0x1d8>)
 8002374:	0019      	movs	r1, r3
 8002376:	0010      	movs	r0, r2
 8002378:	f000 fcca 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 800237c:	0021      	movs	r1, r4
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	0192      	lsls	r2, r2, #6
 8002384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002386:	187b      	adds	r3, r7, r1
 8002388:	2288      	movs	r2, #136	; 0x88
 800238a:	0352      	lsls	r2, r2, #13
 800238c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2201      	movs	r2, #1
 8002392:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8002394:	000c      	movs	r4, r1
 8002396:	187b      	adds	r3, r7, r1
 8002398:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <MX_GPIO_Init+0x1d8>)
 800239a:	0019      	movs	r1, r3
 800239c:	0010      	movs	r0, r2
 800239e:	f000 fcb7 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 80023a2:	0021      	movs	r1, r4
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	22c0      	movs	r2, #192	; 0xc0
 80023a8:	0212      	lsls	r2, r2, #8
 80023aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ac:	000c      	movs	r4, r1
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	2201      	movs	r2, #1
 80023b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	2203      	movs	r2, #3
 80023be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	193b      	adds	r3, r7, r4
 80023c2:	4a30      	ldr	r2, [pc, #192]	; (8002484 <MX_GPIO_Init+0x1d8>)
 80023c4:	0019      	movs	r1, r3
 80023c6:	0010      	movs	r0, r2
 80023c8:	f000 fca2 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	0052      	lsls	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d4:	193b      	adds	r3, r7, r4
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	193b      	adds	r3, r7, r4
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 80023e0:	193a      	adds	r2, r7, r4
 80023e2:	2390      	movs	r3, #144	; 0x90
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	0011      	movs	r1, r2
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 fc91 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 80023ee:	0021      	movs	r1, r4
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	000c      	movs	r4, r1
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	2201      	movs	r2, #1
 80023fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	193b      	adds	r3, r7, r4
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002406:	193b      	adds	r3, r7, r4
 8002408:	2203      	movs	r2, #3
 800240a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 800240c:	193a      	adds	r2, r7, r4
 800240e:	2390      	movs	r3, #144	; 0x90
 8002410:	05db      	lsls	r3, r3, #23
 8002412:	0011      	movs	r1, r2
 8002414:	0018      	movs	r0, r3
 8002416:	f000 fc7b 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 800241a:	193b      	adds	r3, r7, r4
 800241c:	2280      	movs	r2, #128	; 0x80
 800241e:	0152      	lsls	r2, r2, #5
 8002420:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2288      	movs	r2, #136	; 0x88
 8002426:	0352      	lsls	r2, r2, #13
 8002428:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242a:	193b      	adds	r3, r7, r4
 800242c:	2201      	movs	r2, #1
 800242e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8002430:	193a      	adds	r2, r7, r4
 8002432:	2390      	movs	r3, #144	; 0x90
 8002434:	05db      	lsls	r3, r3, #23
 8002436:	0011      	movs	r1, r2
 8002438:	0018      	movs	r0, r3
 800243a:	f000 fc69 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 800243e:	0021      	movs	r1, r4
 8002440:	187b      	adds	r3, r7, r1
 8002442:	2230      	movs	r2, #48	; 0x30
 8002444:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	187b      	adds	r3, r7, r1
 8002448:	2201      	movs	r2, #1
 800244a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	187b      	adds	r3, r7, r1
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002452:	187b      	adds	r3, r7, r1
 8002454:	2201      	movs	r2, #1
 8002456:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	187b      	adds	r3, r7, r1
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <MX_GPIO_Init+0x1d8>)
 800245c:	0019      	movs	r1, r3
 800245e:	0010      	movs	r0, r2
 8002460:	f000 fc56 	bl	8002d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2007      	movs	r0, #7
 800246a:	f000 fb91 	bl	8002b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800246e:	2007      	movs	r0, #7
 8002470:	f000 fba3 	bl	8002bba <HAL_NVIC_EnableIRQ>

}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b009      	add	sp, #36	; 0x24
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	0000c030 	.word	0x0000c030
 8002484:	48000400 	.word	0x48000400

08002488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i
}
 800248e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002490:	e7fe      	b.n	8002490 <Error_Handler+0x8>
	...

08002494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_MspInit+0x44>)
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_MspInit+0x44>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	619a      	str	r2, [r3, #24]
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_MspInit+0x44>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2201      	movs	r2, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_MspInit+0x44>)
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_MspInit+0x44>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0549      	lsls	r1, r1, #21
 80024bc:	430a      	orrs	r2, r1
 80024be:	61da      	str	r2, [r3, #28]
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_MspInit+0x44>)
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	055b      	lsls	r3, r3, #21
 80024c8:	4013      	ands	r3, r2
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_TIM_Base_MspInit+0x80>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d116      	bne.n	800251c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <HAL_TIM_Base_MspInit+0x84>)
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_TIM_Base_MspInit+0x84>)
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	0289      	lsls	r1, r1, #10
 80024f8:	430a      	orrs	r2, r1
 80024fa:	619a      	str	r2, [r3, #24]
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_TIM_Base_MspInit+0x84>)
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	2015      	movs	r0, #21
 8002510:	f000 fb3e 	bl	8002b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002514:	2015      	movs	r0, #21
 8002516:	f000 fb50 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800251a:	e01a      	b.n	8002552 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_TIM_Base_MspInit+0x88>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d115      	bne.n	8002552 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_TIM_Base_MspInit+0x84>)
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_TIM_Base_MspInit+0x84>)
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	02c9      	lsls	r1, r1, #11
 8002530:	430a      	orrs	r2, r1
 8002532:	619a      	str	r2, [r3, #24]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_TIM_Base_MspInit+0x84>)
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	02db      	lsls	r3, r3, #11
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2016      	movs	r0, #22
 8002548:	f000 fb22 	bl	8002b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800254c:	2016      	movs	r0, #22
 800254e:	f000 fb34 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b004      	add	sp, #16
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	40014400 	.word	0x40014400
 8002560:	40021000 	.word	0x40021000
 8002564:	40014800 	.word	0x40014800

08002568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b08d      	sub	sp, #52	; 0x34
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	241c      	movs	r4, #28
 8002572:	193b      	adds	r3, r7, r4
 8002574:	0018      	movs	r0, r3
 8002576:	2314      	movs	r3, #20
 8002578:	001a      	movs	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	f003 fe48 	bl	8006210 <memset>
  if(huart->Instance==USART1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3d      	ldr	r2, [pc, #244]	; (800267c <HAL_UART_MspInit+0x114>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d13c      	bne.n	8002604 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800258a:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_UART_MspInit+0x118>)
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_UART_MspInit+0x118>)
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	01c9      	lsls	r1, r1, #7
 8002594:	430a      	orrs	r2, r1
 8002596:	619a      	str	r2, [r3, #24]
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_UART_MspInit+0x118>)
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	01db      	lsls	r3, r3, #7
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_UART_MspInit+0x118>)
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_UART_MspInit+0x118>)
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	0289      	lsls	r1, r1, #10
 80025b0:	430a      	orrs	r2, r1
 80025b2:	615a      	str	r2, [r3, #20]
 80025b4:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_UART_MspInit+0x118>)
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	029b      	lsls	r3, r3, #10
 80025bc:	4013      	ands	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	22c0      	movs	r2, #192	; 0xc0
 80025c6:	00d2      	lsls	r2, r2, #3
 80025c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	0021      	movs	r1, r4
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2202      	movs	r2, #2
 80025d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2203      	movs	r2, #3
 80025dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2201      	movs	r2, #1
 80025e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	187a      	adds	r2, r7, r1
 80025e6:	2390      	movs	r3, #144	; 0x90
 80025e8:	05db      	lsls	r3, r3, #23
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 fb8f 	bl	8002d10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	201b      	movs	r0, #27
 80025f8:	f000 faca 	bl	8002b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025fc:	201b      	movs	r0, #27
 80025fe:	f000 fadc 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002602:	e037      	b.n	8002674 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <HAL_UART_MspInit+0x11c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d132      	bne.n	8002674 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_UART_MspInit+0x118>)
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_UART_MspInit+0x118>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0289      	lsls	r1, r1, #10
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_UART_MspInit+0x118>)
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_UART_MspInit+0x118>)
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_UART_MspInit+0x118>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0289      	lsls	r1, r1, #10
 8002634:	430a      	orrs	r2, r1
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_UART_MspInit+0x118>)
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002646:	211c      	movs	r1, #28
 8002648:	187b      	adds	r3, r7, r1
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2202      	movs	r2, #2
 8002652:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2203      	movs	r2, #3
 800265e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2201      	movs	r2, #1
 8002664:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	187a      	adds	r2, r7, r1
 8002668:	2390      	movs	r3, #144	; 0x90
 800266a:	05db      	lsls	r3, r3, #23
 800266c:	0011      	movs	r1, r2
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fb4e 	bl	8002d10 <HAL_GPIO_Init>
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b00d      	add	sp, #52	; 0x34
 800267a:	bd90      	pop	{r4, r7, pc}
 800267c:	40013800 	.word	0x40013800
 8002680:	40021000 	.word	0x40021000
 8002684:	40004400 	.word	0x40004400

08002688 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_UART_MspDeInit+0x60>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d111      	bne.n	80026be <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_UART_MspDeInit+0x64>)
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_UART_MspDeInit+0x64>)
 80026a0:	4913      	ldr	r1, [pc, #76]	; (80026f0 <HAL_UART_MspDeInit+0x68>)
 80026a2:	400a      	ands	r2, r1
 80026a4:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	00da      	lsls	r2, r3, #3
 80026aa:	2390      	movs	r3, #144	; 0x90
 80026ac:	05db      	lsls	r3, r3, #23
 80026ae:	0011      	movs	r1, r2
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fc9d 	bl	8002ff0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80026b6:	201b      	movs	r0, #27
 80026b8:	f000 fa8f 	bl	8002bda <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80026bc:	e010      	b.n	80026e0 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_UART_MspDeInit+0x6c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d10b      	bne.n	80026e0 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_UART_MspDeInit+0x64>)
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_UART_MspDeInit+0x64>)
 80026ce:	490a      	ldr	r1, [pc, #40]	; (80026f8 <HAL_UART_MspDeInit+0x70>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80026d4:	2390      	movs	r3, #144	; 0x90
 80026d6:	05db      	lsls	r3, r3, #23
 80026d8:	210c      	movs	r1, #12
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fc88 	bl	8002ff0 <HAL_GPIO_DeInit>
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40013800 	.word	0x40013800
 80026ec:	40021000 	.word	0x40021000
 80026f0:	ffffbfff 	.word	0xffffbfff
 80026f4:	40004400 	.word	0x40004400
 80026f8:	fffdffff 	.word	0xfffdffff

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002720:	f000 f94c 	bl	80029bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 8002724:	f7ff f988 	bl	8001a38 <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	015b      	lsls	r3, r3, #5
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fd64 	bl	8003204 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	019b      	lsls	r3, r3, #6
 8002740:	0018      	movs	r0, r3
 8002742:	f000 fd5f 	bl	8003204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <TIM16_IRQHandler+0x14>)
 8002752:	0018      	movs	r0, r3
 8002754:	f001 fb6a 	bl	8003e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	20000654 	.word	0x20000654

08002764 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <TIM17_IRQHandler+0x14>)
 800276a:	0018      	movs	r0, r3
 800276c:	f001 fb5e 	bl	8003e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	2000069c 	.word	0x2000069c

0800277c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <USART1_IRQHandler+0x14>)
 8002782:	0018      	movs	r0, r3
 8002784:	f001 fe98 	bl	80044b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	200006e4 	.word	0x200006e4

08002794 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e00a      	b.n	80027bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027a6:	e000      	b.n	80027aa <_read+0x16>
 80027a8:	bf00      	nop
 80027aa:	0001      	movs	r1, r0
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	60ba      	str	r2, [r7, #8]
 80027b2:	b2ca      	uxtb	r2, r1
 80027b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3301      	adds	r3, #1
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	dbf0      	blt.n	80027a6 <_read+0x12>
	}

return len;
 80027c4:	687b      	ldr	r3, [r7, #4]
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b006      	add	sp, #24
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e009      	b.n	80027f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	60ba      	str	r2, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	0018      	movs	r0, r3
 80027ea:	e000      	b.n	80027ee <_write+0x20>
 80027ec:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbf1      	blt.n	80027e0 <_write+0x12>
	}
	return len;
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b006      	add	sp, #24
 8002804:	bd80      	pop	{r7, pc}

08002806 <_close>:

int _close(int file)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
	return -1;
 800280e:	2301      	movs	r3, #1
 8002810:	425b      	negs	r3, r3
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b002      	add	sp, #8
 8002818:	bd80      	pop	{r7, pc}

0800281a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	0192      	lsls	r2, r2, #6
 800282a:	605a      	str	r2, [r3, #4]
	return 0;
 800282c:	2300      	movs	r3, #0
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b002      	add	sp, #8
 8002834:	bd80      	pop	{r7, pc}

08002836 <_isatty>:

int _isatty(int file)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
	return 1;
 800283e:	2301      	movs	r3, #1
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
	return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <_sbrk+0x5c>)
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <_sbrk+0x60>)
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <_sbrk+0x64>)
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <_sbrk+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	18d3      	adds	r3, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002890:	f003 fd26 	bl	80062e0 <__errno>
 8002894:	0003      	movs	r3, r0
 8002896:	220c      	movs	r2, #12
 8002898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289a:	2301      	movs	r3, #1
 800289c:	425b      	negs	r3, r3
 800289e:	e009      	b.n	80028b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	18d2      	adds	r2, r2, r3
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <_sbrk+0x64>)
 80028b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20002000 	.word	0x20002000
 80028c0:	00000400 	.word	0x00000400
 80028c4:	200007f4 	.word	0x200007f4
 80028c8:	20000948 	.word	0x20000948

080028cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028dc:	f7ff fff6 	bl	80028cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopForever+0x6>)
  ldr r1, =_edata
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <LoopForever+0xe>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <LoopForever+0x16>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002906:	f003 fcf1 	bl	80062ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290a:	f7ff fbab 	bl	8002064 <main>

0800290e <LoopForever>:

LoopForever:
    b LoopForever
 800290e:	e7fe      	b.n	800290e <LoopForever>
  ldr   r0, =_estack
 8002910:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 800291c:	080068a8 	.word	0x080068a8
  ldr r2, =_sbss
 8002920:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8002924:	20000948 	.word	0x20000948

08002928 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_IRQHandler>
	...

0800292c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_Init+0x24>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_Init+0x24>)
 8002936:	2110      	movs	r1, #16
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800293c:	2000      	movs	r0, #0
 800293e:	f000 f809 	bl	8002954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002942:	f7ff fda7 	bl	8002494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40022000 	.word	0x40022000

08002954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <HAL_InitTick+0x5c>)
 800295e:	681c      	ldr	r4, [r3, #0]
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_InitTick+0x60>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	0019      	movs	r1, r3
 8002966:	23fa      	movs	r3, #250	; 0xfa
 8002968:	0098      	lsls	r0, r3, #2
 800296a:	f7fd fbcd 	bl	8000108 <__udivsi3>
 800296e:	0003      	movs	r3, r0
 8002970:	0019      	movs	r1, r3
 8002972:	0020      	movs	r0, r4
 8002974:	f7fd fbc8 	bl	8000108 <__udivsi3>
 8002978:	0003      	movs	r3, r0
 800297a:	0018      	movs	r0, r3
 800297c:	f000 f93d 	bl	8002bfa <HAL_SYSTICK_Config>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e00f      	b.n	80029a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d80b      	bhi.n	80029a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	2301      	movs	r3, #1
 8002992:	425b      	negs	r3, r3
 8002994:	2200      	movs	r2, #0
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f8fa 	bl	8002b90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_InitTick+0x64>)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b003      	add	sp, #12
 80029ae:	bd90      	pop	{r4, r7, pc}
 80029b0:	200000ec 	.word	0x200000ec
 80029b4:	200000f4 	.word	0x200000f4
 80029b8:	200000f0 	.word	0x200000f0

080029bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_IncTick+0x1c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	001a      	movs	r2, r3
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_IncTick+0x20>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	18d2      	adds	r2, r2, r3
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_IncTick+0x20>)
 80029ce:	601a      	str	r2, [r3, #0]
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	200000f4 	.word	0x200000f4
 80029dc:	200007f8 	.word	0x200007f8

080029e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b02      	ldr	r3, [pc, #8]	; (80029f0 <HAL_GetTick+0x10>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	200007f8 	.word	0x200007f8

080029f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	0002      	movs	r2, r0
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	1dfb      	adds	r3, r7, #7
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b7f      	cmp	r3, #127	; 0x7f
 8002a06:	d809      	bhi.n	8002a1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	231f      	movs	r3, #31
 8002a10:	401a      	ands	r2, r3
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <__NVIC_EnableIRQ+0x30>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	4091      	lsls	r1, r2
 8002a18:	000a      	movs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
  }
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	0002      	movs	r2, r0
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b7f      	cmp	r3, #127	; 0x7f
 8002a3a:	d810      	bhi.n	8002a5e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	001a      	movs	r2, r3
 8002a42:	231f      	movs	r3, #31
 8002a44:	4013      	ands	r3, r2
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_DisableIRQ+0x40>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a52:	f3bf 8f4f 	dsb	sy
}
 8002a56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002a58:	f3bf 8f6f 	isb	sy
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	0002      	movs	r2, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a80:	d828      	bhi.n	8002ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a82:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <__NVIC_SetPriority+0xd4>)
 8002a84:	1dfb      	adds	r3, r7, #7
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b25b      	sxtb	r3, r3
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	33c0      	adds	r3, #192	; 0xc0
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	589b      	ldr	r3, [r3, r2]
 8002a92:	1dfa      	adds	r2, r7, #7
 8002a94:	7812      	ldrb	r2, [r2, #0]
 8002a96:	0011      	movs	r1, r2
 8002a98:	2203      	movs	r2, #3
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	00d2      	lsls	r2, r2, #3
 8002a9e:	21ff      	movs	r1, #255	; 0xff
 8002aa0:	4091      	lsls	r1, r2
 8002aa2:	000a      	movs	r2, r1
 8002aa4:	43d2      	mvns	r2, r2
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	22ff      	movs	r2, #255	; 0xff
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	2303      	movs	r3, #3
 8002aba:	4003      	ands	r3, r0
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ac0:	481f      	ldr	r0, [pc, #124]	; (8002b40 <__NVIC_SetPriority+0xd4>)
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	430a      	orrs	r2, r1
 8002acc:	33c0      	adds	r3, #192	; 0xc0
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ad2:	e031      	b.n	8002b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <__NVIC_SetPriority+0xd8>)
 8002ad6:	1dfb      	adds	r3, r7, #7
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	0019      	movs	r1, r3
 8002adc:	230f      	movs	r3, #15
 8002ade:	400b      	ands	r3, r1
 8002ae0:	3b08      	subs	r3, #8
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3306      	adds	r3, #6
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	3304      	adds	r3, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1dfa      	adds	r2, r7, #7
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	0011      	movs	r1, r2
 8002af4:	2203      	movs	r2, #3
 8002af6:	400a      	ands	r2, r1
 8002af8:	00d2      	lsls	r2, r2, #3
 8002afa:	21ff      	movs	r1, #255	; 0xff
 8002afc:	4091      	lsls	r1, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	43d2      	mvns	r2, r2
 8002b02:	401a      	ands	r2, r3
 8002b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	0018      	movs	r0, r3
 8002b14:	2303      	movs	r3, #3
 8002b16:	4003      	ands	r3, r0
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b1c:	4809      	ldr	r0, [pc, #36]	; (8002b44 <__NVIC_SetPriority+0xd8>)
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	001c      	movs	r4, r3
 8002b24:	230f      	movs	r3, #15
 8002b26:	4023      	ands	r3, r4
 8002b28:	3b08      	subs	r3, #8
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	3306      	adds	r3, #6
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	18c3      	adds	r3, r0, r3
 8002b34:	3304      	adds	r3, #4
 8002b36:	601a      	str	r2, [r3, #0]
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b003      	add	sp, #12
 8002b3e:	bd90      	pop	{r4, r7, pc}
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	1e5a      	subs	r2, r3, #1
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	045b      	lsls	r3, r3, #17
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d301      	bcc.n	8002b60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e010      	b.n	8002b82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <SysTick_Config+0x44>)
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	3a01      	subs	r2, #1
 8002b66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b68:	2301      	movs	r3, #1
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	2103      	movs	r1, #3
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7ff ff7c 	bl	8002a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <SysTick_Config+0x44>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SysTick_Config+0x44>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	1c02      	adds	r2, r0, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	0011      	movs	r1, r2
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff ff5d 	bl	8002a6c <__NVIC_SetPriority>
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b004      	add	sp, #16
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff ff11 	bl	80029f4 <__NVIC_EnableIRQ>
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	0002      	movs	r2, r0
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff ff1b 	bl	8002a28 <__NVIC_DisableIRQ>
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b002      	add	sp, #8
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff ff9f 	bl	8002b48 <SysTick_Config>
 8002c0a:	0003      	movs	r3, r0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2221      	movs	r2, #33	; 0x21
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d008      	beq.n	8002c3a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e020      	b.n	8002c7c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	210e      	movs	r1, #14
 8002c46:	438a      	bics	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2101      	movs	r1, #1
 8002c56:	438a      	bics	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	2101      	movs	r1, #1
 8002c64:	4091      	lsls	r1, r2
 8002c66:	000a      	movs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2221      	movs	r2, #33	; 0x21
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	2100      	movs	r1, #0
 8002c78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	210f      	movs	r1, #15
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2221      	movs	r2, #33	; 0x21
 8002c98:	5c9b      	ldrb	r3, [r3, r2]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d006      	beq.n	8002cae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e028      	b.n	8002d00 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	210e      	movs	r1, #14
 8002cba:	438a      	bics	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	438a      	bics	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4091      	lsls	r1, r2
 8002cda:	000a      	movs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2221      	movs	r2, #33	; 0x21
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	0010      	movs	r0, r2
 8002cfe:	4798      	blx	r3
    }
  }
  return status;
 8002d00:	230f      	movs	r3, #15
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	781b      	ldrb	r3, [r3, #0]
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b004      	add	sp, #16
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1e:	e14f      	b.n	8002fc0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4091      	lsls	r1, r2
 8002d2a:	000a      	movs	r2, r1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d100      	bne.n	8002d38 <HAL_GPIO_Init+0x28>
 8002d36:	e140      	b.n	8002fba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d005      	beq.n	8002d50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d130      	bne.n	8002db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	0013      	movs	r3, r2
 8002d60:	43da      	mvns	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	409a      	lsls	r2, r3
 8002d72:	0013      	movs	r3, r2
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d86:	2201      	movs	r2, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	0013      	movs	r3, r2
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
 8002da4:	0013      	movs	r3, r2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2203      	movs	r2, #3
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d017      	beq.n	8002dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	0013      	movs	r3, r2
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	0013      	movs	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2203      	movs	r2, #3
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d123      	bne.n	8002e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	08da      	lsrs	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3208      	adds	r2, #8
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	58d3      	ldr	r3, [r2, r3]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2207      	movs	r2, #7
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	220f      	movs	r2, #15
 8002e12:	409a      	lsls	r2, r3
 8002e14:	0013      	movs	r3, r2
 8002e16:	43da      	mvns	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2107      	movs	r1, #7
 8002e26:	400b      	ands	r3, r1
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	6939      	ldr	r1, [r7, #16]
 8002e40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	0013      	movs	r3, r2
 8002e52:	43da      	mvns	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	401a      	ands	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	409a      	lsls	r2, r3
 8002e68:	0013      	movs	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	23c0      	movs	r3, #192	; 0xc0
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d100      	bne.n	8002e84 <HAL_GPIO_Init+0x174>
 8002e82:	e09a      	b.n	8002fba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e84:	4b54      	ldr	r3, [pc, #336]	; (8002fd8 <HAL_GPIO_Init+0x2c8>)
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	4b53      	ldr	r3, [pc, #332]	; (8002fd8 <HAL_GPIO_Init+0x2c8>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	619a      	str	r2, [r3, #24]
 8002e90:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <HAL_GPIO_Init+0x2c8>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_GPIO_Init+0x2cc>)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	589b      	ldr	r3, [r3, r2]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2203      	movs	r2, #3
 8002eae:	4013      	ands	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	0013      	movs	r3, r2
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	2390      	movs	r3, #144	; 0x90
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x1e2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a44      	ldr	r2, [pc, #272]	; (8002fe0 <HAL_GPIO_Init+0x2d0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x1de>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a43      	ldr	r2, [pc, #268]	; (8002fe4 <HAL_GPIO_Init+0x2d4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x1da>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_GPIO_Init+0x2d8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x1d6>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e006      	b.n	8002ef4 <HAL_GPIO_Init+0x1e4>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e004      	b.n	8002ef4 <HAL_GPIO_Init+0x1e4>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e002      	b.n	8002ef4 <HAL_GPIO_Init+0x1e4>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_GPIO_Init+0x1e4>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	2103      	movs	r1, #3
 8002ef8:	400a      	ands	r2, r1
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	4093      	lsls	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f04:	4935      	ldr	r1, [pc, #212]	; (8002fdc <HAL_GPIO_Init+0x2cc>)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f12:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_GPIO_Init+0x2dc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	035b      	lsls	r3, r3, #13
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f36:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_GPIO_Init+0x2dc>)
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_GPIO_Init+0x2dc>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	43da      	mvns	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	039b      	lsls	r3, r3, #14
 8002f54:	4013      	ands	r3, r2
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_GPIO_Init+0x2dc>)
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002f66:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_GPIO_Init+0x2dc>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	029b      	lsls	r3, r3, #10
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_GPIO_Init+0x2dc>)
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_GPIO_Init+0x2dc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	025b      	lsls	r3, r3, #9
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_GPIO_Init+0x2dc>)
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	40da      	lsrs	r2, r3
 8002fc8:	1e13      	subs	r3, r2, #0
 8002fca:	d000      	beq.n	8002fce <HAL_GPIO_Init+0x2be>
 8002fcc:	e6a8      	b.n	8002d20 <HAL_GPIO_Init+0x10>
  } 
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b006      	add	sp, #24
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	48000400 	.word	0x48000400
 8002fe4:	48000800 	.word	0x48000800
 8002fe8:	48000c00 	.word	0x48000c00
 8002fec:	40010400 	.word	0x40010400

08002ff0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002ffe:	e0b1      	b.n	8003164 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003000:	2201      	movs	r2, #1
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	409a      	lsls	r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d100      	bne.n	8003014 <HAL_GPIO_DeInit+0x24>
 8003012:	e0a4      	b.n	800315e <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003014:	4a59      	ldr	r2, [pc, #356]	; (800317c <HAL_GPIO_DeInit+0x18c>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	589b      	ldr	r3, [r3, r2]
 8003020:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2203      	movs	r2, #3
 8003026:	4013      	ands	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	409a      	lsls	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	2390      	movs	r3, #144	; 0x90
 8003038:	05db      	lsls	r3, r3, #23
 800303a:	429a      	cmp	r2, r3
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_DeInit+0x76>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <HAL_GPIO_DeInit+0x190>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_DeInit+0x72>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4e      	ldr	r2, [pc, #312]	; (8003184 <HAL_GPIO_DeInit+0x194>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <HAL_GPIO_DeInit+0x6e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4d      	ldr	r2, [pc, #308]	; (8003188 <HAL_GPIO_DeInit+0x198>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_GPIO_DeInit+0x6a>
 8003056:	2303      	movs	r3, #3
 8003058:	e006      	b.n	8003068 <HAL_GPIO_DeInit+0x78>
 800305a:	2305      	movs	r3, #5
 800305c:	e004      	b.n	8003068 <HAL_GPIO_DeInit+0x78>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_DeInit+0x78>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_DeInit+0x78>
 8003066:	2300      	movs	r3, #0
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	2103      	movs	r1, #3
 800306c:	400a      	ands	r2, r1
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	429a      	cmp	r2, r3
 8003076:	d132      	bne.n	80030de <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003078:	4b44      	ldr	r3, [pc, #272]	; (800318c <HAL_GPIO_DeInit+0x19c>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43d9      	mvns	r1, r3
 8003080:	4b42      	ldr	r3, [pc, #264]	; (800318c <HAL_GPIO_DeInit+0x19c>)
 8003082:	400a      	ands	r2, r1
 8003084:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003086:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_GPIO_DeInit+0x19c>)
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43d9      	mvns	r1, r3
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <HAL_GPIO_DeInit+0x19c>)
 8003090:	400a      	ands	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003094:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_GPIO_DeInit+0x19c>)
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	43d9      	mvns	r1, r3
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_GPIO_DeInit+0x19c>)
 800309e:	400a      	ands	r2, r1
 80030a0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030a2:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_GPIO_DeInit+0x19c>)
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	43d9      	mvns	r1, r3
 80030aa:	4b38      	ldr	r3, [pc, #224]	; (800318c <HAL_GPIO_DeInit+0x19c>)
 80030ac:	400a      	ands	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2203      	movs	r2, #3
 80030b4:	4013      	ands	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	409a      	lsls	r2, r3
 80030bc:	0013      	movs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80030c0:	4a2e      	ldr	r2, [pc, #184]	; (800317c <HAL_GPIO_DeInit+0x18c>)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	089b      	lsrs	r3, r3, #2
 80030c6:	3302      	adds	r3, #2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	589a      	ldr	r2, [r3, r2]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	482a      	ldr	r0, [pc, #168]	; (800317c <HAL_GPIO_DeInit+0x18c>)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	400a      	ands	r2, r1
 80030d8:	3302      	adds	r3, #2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	0052      	lsls	r2, r2, #1
 80030e6:	2103      	movs	r1, #3
 80030e8:	4091      	lsls	r1, r2
 80030ea:	000a      	movs	r2, r1
 80030ec:	43d2      	mvns	r2, r2
 80030ee:	401a      	ands	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	58d3      	ldr	r3, [r2, r3]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	2107      	movs	r1, #7
 8003104:	400a      	ands	r2, r1
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	210f      	movs	r1, #15
 800310a:	4091      	lsls	r1, r2
 800310c:	000a      	movs	r2, r1
 800310e:	43d1      	mvns	r1, r2
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4019      	ands	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3208      	adds	r2, #8
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	0052      	lsls	r2, r2, #1
 8003126:	2103      	movs	r1, #3
 8003128:	4091      	lsls	r1, r2
 800312a:	000a      	movs	r2, r1
 800312c:	43d2      	mvns	r2, r2
 800312e:	401a      	ands	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2101      	movs	r1, #1
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4091      	lsls	r1, r2
 800313e:	000a      	movs	r2, r1
 8003140:	43d2      	mvns	r2, r2
 8003142:	401a      	ands	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	0052      	lsls	r2, r2, #1
 8003150:	2103      	movs	r1, #3
 8003152:	4091      	lsls	r1, r2
 8003154:	000a      	movs	r2, r1
 8003156:	43d2      	mvns	r2, r2
 8003158:	401a      	ands	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	609a      	str	r2, [r3, #8]

    }

    position++;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3301      	adds	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	40da      	lsrs	r2, r3
 800316a:	1e13      	subs	r3, r2, #0
 800316c:	d000      	beq.n	8003170 <HAL_GPIO_DeInit+0x180>
 800316e:	e747      	b.n	8003000 <HAL_GPIO_DeInit+0x10>
  }
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b006      	add	sp, #24
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40010000 	.word	0x40010000
 8003180:	48000400 	.word	0x48000400
 8003184:	48000800 	.word	0x48000800
 8003188:	48000c00 	.word	0x48000c00
 800318c:	40010400 	.word	0x40010400

08003190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	000a      	movs	r2, r1
 800319a:	1cbb      	adds	r3, r7, #2
 800319c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	1cba      	adds	r2, r7, #2
 80031a4:	8812      	ldrh	r2, [r2, #0]
 80031a6:	4013      	ands	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80031aa:	230f      	movs	r3, #15
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e003      	b.n	80031bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031b4:	230f      	movs	r3, #15
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80031bc:	230f      	movs	r3, #15
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	781b      	ldrb	r3, [r3, #0]
  }
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b004      	add	sp, #16
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	0008      	movs	r0, r1
 80031d4:	0011      	movs	r1, r2
 80031d6:	1cbb      	adds	r3, r7, #2
 80031d8:	1c02      	adds	r2, r0, #0
 80031da:	801a      	strh	r2, [r3, #0]
 80031dc:	1c7b      	adds	r3, r7, #1
 80031de:	1c0a      	adds	r2, r1, #0
 80031e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031e2:	1c7b      	adds	r3, r7, #1
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d004      	beq.n	80031f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ea:	1cbb      	adds	r3, r7, #2
 80031ec:	881a      	ldrh	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f2:	e003      	b.n	80031fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031f4:	1cbb      	adds	r3, r7, #2
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	0002      	movs	r2, r0
 800320c:	1dbb      	adds	r3, r7, #6
 800320e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	1dba      	adds	r2, r7, #6
 8003216:	8812      	ldrh	r2, [r2, #0]
 8003218:	4013      	ands	r3, r2
 800321a:	d008      	beq.n	800322e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800321e:	1dba      	adds	r2, r7, #6
 8003220:	8812      	ldrh	r2, [r2, #0]
 8003222:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003224:	1dbb      	adds	r3, r7, #6
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	0018      	movs	r0, r3
 800322a:	f7fe fbb9 	bl	80019a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b002      	add	sp, #8
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	40010400 	.word	0x40010400

0800323c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e301      	b.n	8003852 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	4013      	ands	r3, r2
 8003256:	d100      	bne.n	800325a <HAL_RCC_OscConfig+0x1e>
 8003258:	e08d      	b.n	8003376 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800325a:	4bc3      	ldr	r3, [pc, #780]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	220c      	movs	r2, #12
 8003260:	4013      	ands	r3, r2
 8003262:	2b04      	cmp	r3, #4
 8003264:	d00e      	beq.n	8003284 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003266:	4bc0      	ldr	r3, [pc, #768]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	220c      	movs	r2, #12
 800326c:	4013      	ands	r3, r2
 800326e:	2b08      	cmp	r3, #8
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x64>
 8003272:	4bbd      	ldr	r3, [pc, #756]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	025b      	lsls	r3, r3, #9
 800327a:	401a      	ands	r2, r3
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	025b      	lsls	r3, r3, #9
 8003280:	429a      	cmp	r2, r3
 8003282:	d10d      	bne.n	80032a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	4bb8      	ldr	r3, [pc, #736]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	4013      	ands	r3, r2
 800328e:	d100      	bne.n	8003292 <HAL_RCC_OscConfig+0x56>
 8003290:	e070      	b.n	8003374 <HAL_RCC_OscConfig+0x138>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d000      	beq.n	800329c <HAL_RCC_OscConfig+0x60>
 800329a:	e06b      	b.n	8003374 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e2d8      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x7c>
 80032a8:	4baf      	ldr	r3, [pc, #700]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4bae      	ldr	r3, [pc, #696]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	0249      	lsls	r1, r1, #9
 80032b2:	430a      	orrs	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e02f      	b.n	8003318 <HAL_RCC_OscConfig+0xdc>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10c      	bne.n	80032da <HAL_RCC_OscConfig+0x9e>
 80032c0:	4ba9      	ldr	r3, [pc, #676]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4ba8      	ldr	r3, [pc, #672]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032c6:	49a9      	ldr	r1, [pc, #676]	; (800356c <HAL_RCC_OscConfig+0x330>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	4ba6      	ldr	r3, [pc, #664]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4ba5      	ldr	r3, [pc, #660]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032d2:	49a7      	ldr	r1, [pc, #668]	; (8003570 <HAL_RCC_OscConfig+0x334>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e01e      	b.n	8003318 <HAL_RCC_OscConfig+0xdc>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d10e      	bne.n	8003300 <HAL_RCC_OscConfig+0xc4>
 80032e2:	4ba1      	ldr	r3, [pc, #644]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4ba0      	ldr	r3, [pc, #640]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	02c9      	lsls	r1, r1, #11
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	4b9d      	ldr	r3, [pc, #628]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b9c      	ldr	r3, [pc, #624]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	0249      	lsls	r1, r1, #9
 80032fa:	430a      	orrs	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0xdc>
 8003300:	4b99      	ldr	r3, [pc, #612]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b98      	ldr	r3, [pc, #608]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003306:	4999      	ldr	r1, [pc, #612]	; (800356c <HAL_RCC_OscConfig+0x330>)
 8003308:	400a      	ands	r2, r1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	4b96      	ldr	r3, [pc, #600]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b95      	ldr	r3, [pc, #596]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003312:	4997      	ldr	r1, [pc, #604]	; (8003570 <HAL_RCC_OscConfig+0x334>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d014      	beq.n	800334a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fb5e 	bl	80029e0 <HAL_GetTick>
 8003324:	0003      	movs	r3, r0
 8003326:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800332a:	f7ff fb59 	bl	80029e0 <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b64      	cmp	r3, #100	; 0x64
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e28a      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333c:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	029b      	lsls	r3, r3, #10
 8003344:	4013      	ands	r3, r2
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0xee>
 8003348:	e015      	b.n	8003376 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7ff fb49 	bl	80029e0 <HAL_GetTick>
 800334e:	0003      	movs	r3, r0
 8003350:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003354:	f7ff fb44 	bl	80029e0 <HAL_GetTick>
 8003358:	0002      	movs	r2, r0
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e275      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	029b      	lsls	r3, r3, #10
 800336e:	4013      	ands	r3, r2
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x118>
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2202      	movs	r2, #2
 800337c:	4013      	ands	r3, r2
 800337e:	d100      	bne.n	8003382 <HAL_RCC_OscConfig+0x146>
 8003380:	e069      	b.n	8003456 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003382:	4b79      	ldr	r3, [pc, #484]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	220c      	movs	r2, #12
 8003388:	4013      	ands	r3, r2
 800338a:	d00b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800338c:	4b76      	ldr	r3, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	220c      	movs	r2, #12
 8003392:	4013      	ands	r3, r2
 8003394:	2b08      	cmp	r3, #8
 8003396:	d11c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x196>
 8003398:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	025b      	lsls	r3, r3, #9
 80033a0:	4013      	ands	r3, r2
 80033a2:	d116      	bne.n	80033d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a4:	4b70      	ldr	r3, [pc, #448]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2202      	movs	r2, #2
 80033aa:	4013      	ands	r3, r2
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x17e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e24b      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b6b      	ldr	r3, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	22f8      	movs	r2, #248	; 0xf8
 80033c0:	4393      	bics	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	00da      	lsls	r2, r3, #3
 80033ca:	4b67      	ldr	r3, [pc, #412]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d0:	e041      	b.n	8003456 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d024      	beq.n	8003424 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4b62      	ldr	r3, [pc, #392]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80033e0:	2101      	movs	r1, #1
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7ff fafb 	bl	80029e0 <HAL_GetTick>
 80033ea:	0003      	movs	r3, r0
 80033ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f0:	f7ff faf6 	bl	80029e0 <HAL_GetTick>
 80033f4:	0002      	movs	r2, r0
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e227      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2202      	movs	r2, #2
 8003408:	4013      	ands	r3, r2
 800340a:	d0f1      	beq.n	80033f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340c:	4b56      	ldr	r3, [pc, #344]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	22f8      	movs	r2, #248	; 0xf8
 8003412:	4393      	bics	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00da      	lsls	r2, r3, #3
 800341c:	4b52      	ldr	r3, [pc, #328]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800341e:	430a      	orrs	r2, r1
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e018      	b.n	8003456 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003424:	4b50      	ldr	r3, [pc, #320]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800342a:	2101      	movs	r1, #1
 800342c:	438a      	bics	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff fad6 	bl	80029e0 <HAL_GetTick>
 8003434:	0003      	movs	r3, r0
 8003436:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7ff fad1 	bl	80029e0 <HAL_GetTick>
 800343e:	0002      	movs	r2, r0
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e202      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344c:	4b46      	ldr	r3, [pc, #280]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2202      	movs	r2, #2
 8003452:	4013      	ands	r3, r2
 8003454:	d1f1      	bne.n	800343a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2208      	movs	r2, #8
 800345c:	4013      	ands	r3, r2
 800345e:	d036      	beq.n	80034ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d019      	beq.n	800349c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003468:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800346a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346c:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800346e:	2101      	movs	r1, #1
 8003470:	430a      	orrs	r2, r1
 8003472:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7ff fab4 	bl	80029e0 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347e:	f7ff faaf 	bl	80029e0 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1e0      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003490:	4b35      	ldr	r3, [pc, #212]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2202      	movs	r2, #2
 8003496:	4013      	ands	r3, r2
 8003498:	d0f1      	beq.n	800347e <HAL_RCC_OscConfig+0x242>
 800349a:	e018      	b.n	80034ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349c:	4b32      	ldr	r3, [pc, #200]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800349e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80034a2:	2101      	movs	r1, #1
 80034a4:	438a      	bics	r2, r1
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a8:	f7ff fa9a 	bl	80029e0 <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b2:	f7ff fa95 	bl	80029e0 <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e1c6      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	4b28      	ldr	r3, [pc, #160]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	2202      	movs	r2, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d1f1      	bne.n	80034b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2204      	movs	r2, #4
 80034d4:	4013      	ands	r3, r2
 80034d6:	d100      	bne.n	80034da <HAL_RCC_OscConfig+0x29e>
 80034d8:	e0b4      	b.n	8003644 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034da:	201f      	movs	r0, #31
 80034dc:	183b      	adds	r3, r7, r0
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e2:	4b21      	ldr	r3, [pc, #132]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	055b      	lsls	r3, r3, #21
 80034ea:	4013      	ands	r3, r2
 80034ec:	d110      	bne.n	8003510 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	0549      	lsls	r1, r1, #21
 80034f8:	430a      	orrs	r2, r1
 80034fa:	61da      	str	r2, [r3, #28]
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	055b      	lsls	r3, r3, #21
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800350a:	183b      	adds	r3, r7, r0
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_RCC_OscConfig+0x338>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4013      	ands	r3, r2
 800351a:	d11a      	bne.n	8003552 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351c:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_RCC_OscConfig+0x338>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b14      	ldr	r3, [pc, #80]	; (8003574 <HAL_RCC_OscConfig+0x338>)
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	0049      	lsls	r1, r1, #1
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352a:	f7ff fa59 	bl	80029e0 <HAL_GetTick>
 800352e:	0003      	movs	r3, r0
 8003530:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7ff fa54 	bl	80029e0 <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e185      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_OscConfig+0x338>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4013      	ands	r3, r2
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10e      	bne.n	8003578 <HAL_RCC_OscConfig+0x33c>
 800355a:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	4b02      	ldr	r3, [pc, #8]	; (8003568 <HAL_RCC_OscConfig+0x32c>)
 8003560:	2101      	movs	r1, #1
 8003562:	430a      	orrs	r2, r1
 8003564:	621a      	str	r2, [r3, #32]
 8003566:	e035      	b.n	80035d4 <HAL_RCC_OscConfig+0x398>
 8003568:	40021000 	.word	0x40021000
 800356c:	fffeffff 	.word	0xfffeffff
 8003570:	fffbffff 	.word	0xfffbffff
 8003574:	40007000 	.word	0x40007000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x35e>
 8003580:	4bb6      	ldr	r3, [pc, #728]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	4bb5      	ldr	r3, [pc, #724]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003586:	2101      	movs	r1, #1
 8003588:	438a      	bics	r2, r1
 800358a:	621a      	str	r2, [r3, #32]
 800358c:	4bb3      	ldr	r3, [pc, #716]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800358e:	6a1a      	ldr	r2, [r3, #32]
 8003590:	4bb2      	ldr	r3, [pc, #712]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003592:	2104      	movs	r1, #4
 8003594:	438a      	bics	r2, r1
 8003596:	621a      	str	r2, [r3, #32]
 8003598:	e01c      	b.n	80035d4 <HAL_RCC_OscConfig+0x398>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x380>
 80035a2:	4bae      	ldr	r3, [pc, #696]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	4bad      	ldr	r3, [pc, #692]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035a8:	2104      	movs	r1, #4
 80035aa:	430a      	orrs	r2, r1
 80035ac:	621a      	str	r2, [r3, #32]
 80035ae:	4bab      	ldr	r3, [pc, #684]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	4baa      	ldr	r3, [pc, #680]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	430a      	orrs	r2, r1
 80035b8:	621a      	str	r2, [r3, #32]
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_OscConfig+0x398>
 80035bc:	4ba7      	ldr	r3, [pc, #668]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	4ba6      	ldr	r3, [pc, #664]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	438a      	bics	r2, r1
 80035c6:	621a      	str	r2, [r3, #32]
 80035c8:	4ba4      	ldr	r3, [pc, #656]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	4ba3      	ldr	r3, [pc, #652]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035ce:	2104      	movs	r1, #4
 80035d0:	438a      	bics	r2, r1
 80035d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d014      	beq.n	8003606 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035dc:	f7ff fa00 	bl	80029e0 <HAL_GetTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	e009      	b.n	80035fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7ff f9fb 	bl	80029e0 <HAL_GetTick>
 80035ea:	0002      	movs	r2, r0
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	4a9b      	ldr	r2, [pc, #620]	; (8003860 <HAL_RCC_OscConfig+0x624>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e12b      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	4b98      	ldr	r3, [pc, #608]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	2202      	movs	r2, #2
 8003600:	4013      	ands	r3, r2
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3aa>
 8003604:	e013      	b.n	800362e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7ff f9eb 	bl	80029e0 <HAL_GetTick>
 800360a:	0003      	movs	r3, r0
 800360c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360e:	e009      	b.n	8003624 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7ff f9e6 	bl	80029e0 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	4a91      	ldr	r2, [pc, #580]	; (8003860 <HAL_RCC_OscConfig+0x624>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e116      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	4b8d      	ldr	r3, [pc, #564]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	2202      	movs	r2, #2
 800362a:	4013      	ands	r3, r2
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800362e:	231f      	movs	r3, #31
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003638:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	4b87      	ldr	r3, [pc, #540]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800363e:	4989      	ldr	r1, [pc, #548]	; (8003864 <HAL_RCC_OscConfig+0x628>)
 8003640:	400a      	ands	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2210      	movs	r2, #16
 800364a:	4013      	ands	r3, r2
 800364c:	d063      	beq.n	8003716 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d12a      	bne.n	80036ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003656:	4b81      	ldr	r3, [pc, #516]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365a:	4b80      	ldr	r3, [pc, #512]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800365c:	2104      	movs	r1, #4
 800365e:	430a      	orrs	r2, r1
 8003660:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003662:	4b7e      	ldr	r3, [pc, #504]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003666:	4b7d      	ldr	r3, [pc, #500]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003668:	2101      	movs	r1, #1
 800366a:	430a      	orrs	r2, r1
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366e:	f7ff f9b7 	bl	80029e0 <HAL_GetTick>
 8003672:	0003      	movs	r3, r0
 8003674:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003678:	f7ff f9b2 	bl	80029e0 <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e0e3      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800368a:	4b74      	ldr	r3, [pc, #464]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	2202      	movs	r2, #2
 8003690:	4013      	ands	r3, r2
 8003692:	d0f1      	beq.n	8003678 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003694:	4b71      	ldr	r3, [pc, #452]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	22f8      	movs	r2, #248	; 0xf8
 800369a:	4393      	bics	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	00da      	lsls	r2, r3, #3
 80036a4:	4b6d      	ldr	r3, [pc, #436]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036a6:	430a      	orrs	r2, r1
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34
 80036aa:	e034      	b.n	8003716 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	3305      	adds	r3, #5
 80036b2:	d111      	bne.n	80036d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80036b4:	4b69      	ldr	r3, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036ba:	2104      	movs	r1, #4
 80036bc:	438a      	bics	r2, r1
 80036be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036c0:	4b66      	ldr	r3, [pc, #408]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c4:	22f8      	movs	r2, #248	; 0xf8
 80036c6:	4393      	bics	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	00da      	lsls	r2, r3, #3
 80036d0:	4b62      	ldr	r3, [pc, #392]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	635a      	str	r2, [r3, #52]	; 0x34
 80036d6:	e01e      	b.n	8003716 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036d8:	4b60      	ldr	r3, [pc, #384]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036dc:	4b5f      	ldr	r3, [pc, #380]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036de:	2104      	movs	r1, #4
 80036e0:	430a      	orrs	r2, r1
 80036e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80036e4:	4b5d      	ldr	r3, [pc, #372]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e8:	4b5c      	ldr	r3, [pc, #368]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80036ea:	2101      	movs	r1, #1
 80036ec:	438a      	bics	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f0:	f7ff f976 	bl	80029e0 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80036fa:	f7ff f971 	bl	80029e0 <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0a2      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800370c:	4b53      	ldr	r3, [pc, #332]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	2202      	movs	r2, #2
 8003712:	4013      	ands	r3, r2
 8003714:	d1f1      	bne.n	80036fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d100      	bne.n	8003720 <HAL_RCC_OscConfig+0x4e4>
 800371e:	e097      	b.n	8003850 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003720:	4b4e      	ldr	r3, [pc, #312]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	220c      	movs	r2, #12
 8003726:	4013      	ands	r3, r2
 8003728:	2b08      	cmp	r3, #8
 800372a:	d100      	bne.n	800372e <HAL_RCC_OscConfig+0x4f2>
 800372c:	e06b      	b.n	8003806 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d14c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	4b49      	ldr	r3, [pc, #292]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b48      	ldr	r3, [pc, #288]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800373c:	494a      	ldr	r1, [pc, #296]	; (8003868 <HAL_RCC_OscConfig+0x62c>)
 800373e:	400a      	ands	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7ff f94d 	bl	80029e0 <HAL_GetTick>
 8003746:	0003      	movs	r3, r0
 8003748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7ff f948 	bl	80029e0 <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e079      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375e:	4b3f      	ldr	r3, [pc, #252]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	049b      	lsls	r3, r3, #18
 8003766:	4013      	ands	r3, r2
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	220f      	movs	r2, #15
 8003770:	4393      	bics	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800377a:	430a      	orrs	r2, r1
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4a3a      	ldr	r2, [pc, #232]	; (800386c <HAL_RCC_OscConfig+0x630>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	431a      	orrs	r2, r3
 8003792:	4b32      	ldr	r3, [pc, #200]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003798:	4b30      	ldr	r3, [pc, #192]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b2f      	ldr	r3, [pc, #188]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800379e:	2180      	movs	r1, #128	; 0x80
 80037a0:	0449      	lsls	r1, r1, #17
 80037a2:	430a      	orrs	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7ff f91b 	bl	80029e0 <HAL_GetTick>
 80037aa:	0003      	movs	r3, r0
 80037ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7ff f916 	bl	80029e0 <HAL_GetTick>
 80037b4:	0002      	movs	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e047      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	049b      	lsls	r3, r3, #18
 80037ca:	4013      	ands	r3, r2
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x574>
 80037ce:	e03f      	b.n	8003850 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80037d6:	4924      	ldr	r1, [pc, #144]	; (8003868 <HAL_RCC_OscConfig+0x62c>)
 80037d8:	400a      	ands	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7ff f900 	bl	80029e0 <HAL_GetTick>
 80037e0:	0003      	movs	r3, r0
 80037e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7ff f8fb 	bl	80029e0 <HAL_GetTick>
 80037ea:	0002      	movs	r2, r0
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e02c      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f8:	4b18      	ldr	r3, [pc, #96]	; (800385c <HAL_RCC_OscConfig+0x620>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	049b      	lsls	r3, r3, #18
 8003800:	4013      	ands	r3, r2
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x5aa>
 8003804:	e024      	b.n	8003850 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e01f      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_OscConfig+0x620>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_OscConfig+0x620>)
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	025b      	lsls	r3, r3, #9
 8003824:	401a      	ands	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	429a      	cmp	r2, r3
 800382c:	d10e      	bne.n	800384c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	220f      	movs	r2, #15
 8003832:	401a      	ands	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	23f0      	movs	r3, #240	; 0xf0
 8003840:	039b      	lsls	r3, r3, #14
 8003842:	401a      	ands	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b008      	add	sp, #32
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	40021000 	.word	0x40021000
 8003860:	00001388 	.word	0x00001388
 8003864:	efffffff 	.word	0xefffffff
 8003868:	feffffff 	.word	0xfeffffff
 800386c:	ffc2ffff 	.word	0xffc2ffff

08003870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0b3      	b.n	80039ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003884:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <HAL_RCC_ClockConfig+0x184>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	4013      	ands	r3, r2
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d911      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b58      	ldr	r3, [pc, #352]	; (80039f4 <HAL_RCC_ClockConfig+0x184>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2201      	movs	r2, #1
 8003898:	4393      	bics	r3, r2
 800389a:	0019      	movs	r1, r3
 800389c:	4b55      	ldr	r3, [pc, #340]	; (80039f4 <HAL_RCC_ClockConfig+0x184>)
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_ClockConfig+0x184>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2201      	movs	r2, #1
 80038aa:	4013      	ands	r3, r2
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e09a      	b.n	80039ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2202      	movs	r2, #2
 80038bc:	4013      	ands	r3, r2
 80038be:	d015      	beq.n	80038ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2204      	movs	r2, #4
 80038c6:	4013      	ands	r3, r2
 80038c8:	d006      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80038ca:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 80038d0:	21e0      	movs	r1, #224	; 0xe0
 80038d2:	00c9      	lsls	r1, r1, #3
 80038d4:	430a      	orrs	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	22f0      	movs	r2, #240	; 0xf0
 80038de:	4393      	bics	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	4b44      	ldr	r3, [pc, #272]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	4013      	ands	r3, r2
 80038f4:	d040      	beq.n	8003978 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	2380      	movs	r3, #128	; 0x80
 8003904:	029b      	lsls	r3, r3, #10
 8003906:	4013      	ands	r3, r2
 8003908:	d114      	bne.n	8003934 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06e      	b.n	80039ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	049b      	lsls	r3, r3, #18
 800391e:	4013      	ands	r3, r2
 8003920:	d108      	bne.n	8003934 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e062      	b.n	80039ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2202      	movs	r2, #2
 800392c:	4013      	ands	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e05b      	b.n	80039ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2203      	movs	r2, #3
 800393a:	4393      	bics	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7ff f84a 	bl	80029e0 <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003950:	e009      	b.n	8003966 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003952:	f7ff f845 	bl	80029e0 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	4a27      	ldr	r2, [pc, #156]	; (80039fc <HAL_RCC_ClockConfig+0x18c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e042      	b.n	80039ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	220c      	movs	r2, #12
 800396c:	401a      	ands	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1ec      	bne.n	8003952 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <HAL_RCC_ClockConfig+0x184>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	4013      	ands	r3, r2
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d211      	bcs.n	80039aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_ClockConfig+0x184>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	4393      	bics	r3, r2
 800398e:	0019      	movs	r1, r3
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_RCC_ClockConfig+0x184>)
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003998:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <HAL_RCC_ClockConfig+0x184>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2201      	movs	r2, #1
 800399e:	4013      	ands	r3, r2
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e020      	b.n	80039ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <HAL_RCC_ClockConfig+0x190>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039c8:	f000 f820 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039cc:	0001      	movs	r1, r0
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_ClockConfig+0x188>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	220f      	movs	r2, #15
 80039d6:	4013      	ands	r3, r2
 80039d8:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <HAL_RCC_ClockConfig+0x194>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	000a      	movs	r2, r1
 80039de:	40da      	lsrs	r2, r3
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x198>)
 80039e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7fe ffb5 	bl	8002954 <HAL_InitTick>
  
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b004      	add	sp, #16
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	00001388 	.word	0x00001388
 8003a00:	fffff8ff 	.word	0xfffff8ff
 8003a04:	08006868 	.word	0x08006868
 8003a08:	200000ec 	.word	0x200000ec

08003a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	220c      	movs	r2, #12
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x30>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x36>
 8003a3a:	e02c      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a3c:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a3e:	613b      	str	r3, [r7, #16]
      break;
 8003a40:	e02c      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	220f      	movs	r2, #15
 8003a48:	4013      	ands	r3, r2
 8003a4a:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a4c:	5cd3      	ldrb	r3, [r2, r3]
 8003a4e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003a50:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	220f      	movs	r2, #15
 8003a56:	4013      	ands	r3, r2
 8003a58:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	025b      	lsls	r3, r3, #9
 8003a64:	4013      	ands	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	4810      	ldr	r0, [pc, #64]	; (8003aac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a6c:	f7fc fb4c 	bl	8000108 <__udivsi3>
 8003a70:	0003      	movs	r3, r0
 8003a72:	001a      	movs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4353      	muls	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e009      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	000a      	movs	r2, r1
 8003a80:	0152      	lsls	r2, r2, #5
 8003a82:	1a52      	subs	r2, r2, r1
 8003a84:	0193      	lsls	r3, r2, #6
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	185b      	adds	r3, r3, r1
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	613b      	str	r3, [r7, #16]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a98:	613b      	str	r3, [r7, #16]
      break;
 8003a9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a9c:	693b      	ldr	r3, [r7, #16]
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b006      	add	sp, #24
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	00f42400 	.word	0x00f42400
 8003ab0:	08006880 	.word	0x08006880
 8003ab4:	08006890 	.word	0x08006890
 8003ab8:	007a1200 	.word	0x007a1200

08003abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac0:	4b02      	ldr	r3, [pc, #8]	; (8003acc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	200000ec 	.word	0x200000ec

08003ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ad4:	f7ff fff2 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003ad8:	0001      	movs	r1, r0
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	40d9      	lsrs	r1, r3
 8003aea:	000b      	movs	r3, r1
}    
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40021000 	.word	0x40021000
 8003af8:	08006878 	.word	0x08006878

08003afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	025b      	lsls	r3, r3, #9
 8003b14:	4013      	ands	r3, r2
 8003b16:	d100      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003b18:	e08e      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2017      	movs	r0, #23
 8003b1c:	183b      	adds	r3, r7, r0
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b57      	ldr	r3, [pc, #348]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	055b      	lsls	r3, r3, #21
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d110      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	4b53      	ldr	r3, [pc, #332]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	0549      	lsls	r1, r1, #21
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
 8003b3c:	4b50      	ldr	r3, [pc, #320]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	055b      	lsls	r3, r3, #21
 8003b44:	4013      	ands	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4a:	183b      	adds	r3, r7, r0
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b4c      	ldr	r3, [pc, #304]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d11a      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5c:	4b49      	ldr	r3, [pc, #292]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b48      	ldr	r3, [pc, #288]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	0049      	lsls	r1, r1, #1
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6a:	f7fe ff39 	bl	80029e0 <HAL_GetTick>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	e008      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7fe ff34 	bl	80029e0 <HAL_GetTick>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e077      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b92:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b94:	6a1a      	ldr	r2, [r3, #32]
 8003b96:	23c0      	movs	r3, #192	; 0xc0
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d034      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	23c0      	movs	r3, #192	; 0xc0
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4013      	ands	r3, r2
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d02c      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4a33      	ldr	r2, [pc, #204]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0249      	lsls	r1, r1, #9
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bcc:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bd2:	492e      	ldr	r1, [pc, #184]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bd8:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	4013      	ands	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe fefb 	bl	80029e0 <HAL_GetTick>
 8003bea:	0003      	movs	r3, r0
 8003bec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	e009      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fe fef6 	bl	80029e0 <HAL_GetTick>
 8003bf4:	0002      	movs	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e038      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c22:	2317      	movs	r3, #23
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c32:	4918      	ldr	r1, [pc, #96]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	2203      	movs	r2, #3
 8003c48:	4393      	bics	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c52:	430a      	orrs	r2, r1
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	2210      	movs	r2, #16
 8003c66:	4393      	bics	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c70:	430a      	orrs	r2, r1
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b006      	add	sp, #24
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40007000 	.word	0x40007000
 8003c88:	fffffcff 	.word	0xfffffcff
 8003c8c:	fffeffff 	.word	0xfffeffff
 8003c90:	00001388 	.word	0x00001388
 8003c94:	efffffff 	.word	0xefffffff

08003c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e042      	b.n	8003d30 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	223d      	movs	r2, #61	; 0x3d
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d107      	bne.n	8003cc6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	223c      	movs	r2, #60	; 0x3c
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f7fe fc0b 	bl	80024dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	223d      	movs	r2, #61	; 0x3d
 8003cca:	2102      	movs	r1, #2
 8003ccc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	0010      	movs	r0, r2
 8003cda:	f000 f9dd 	bl	8004098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2246      	movs	r2, #70	; 0x46
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223e      	movs	r2, #62	; 0x3e
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	223f      	movs	r2, #63	; 0x3f
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	5499      	strb	r1, [r3, r2]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2240      	movs	r2, #64	; 0x40
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2241      	movs	r2, #65	; 0x41
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2242      	movs	r2, #66	; 0x42
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	5499      	strb	r1, [r3, r2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2243      	movs	r2, #67	; 0x43
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2244      	movs	r2, #68	; 0x44
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2245      	movs	r2, #69	; 0x45
 8003d22:	2101      	movs	r1, #1
 8003d24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	223d      	movs	r2, #61	; 0x3d
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	223d      	movs	r2, #61	; 0x3d
 8003d44:	5c9b      	ldrb	r3, [r3, r2]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e035      	b.n	8003dbc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223d      	movs	r2, #61	; 0x3d
 8003d54:	2102      	movs	r1, #2
 8003d56:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a15      	ldr	r2, [pc, #84]	; (8003dc4 <HAL_TIM_Base_Start_IT+0x8c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x4e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <HAL_TIM_Base_Start_IT+0x90>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x4e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <HAL_TIM_Base_Start_IT+0x94>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d111      	bne.n	8003daa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	4013      	ands	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d010      	beq.n	8003dba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da8:	e007      	b.n	8003dba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40014000 	.word	0x40014000

08003dd0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2101      	movs	r1, #1
 8003de4:	438a      	bics	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <HAL_TIM_Base_Stop_IT+0x54>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	d10d      	bne.n	8003e10 <HAL_TIM_Base_Stop_IT+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <HAL_TIM_Base_Stop_IT+0x58>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d107      	bne.n	8003e10 <HAL_TIM_Base_Stop_IT+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	223d      	movs	r2, #61	; 0x3d
 8003e14:	2101      	movs	r1, #1
 8003e16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b002      	add	sp, #8
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	00001111 	.word	0x00001111
 8003e28:	00000444 	.word	0x00000444

08003e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d124      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d11d      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2203      	movs	r2, #3
 8003e56:	4252      	negs	r2, r2
 8003e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2203      	movs	r2, #3
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 f8fa 	bl	8004068 <HAL_TIM_IC_CaptureCallback>
 8003e74:	e007      	b.n	8003e86 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 f8ed 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 f8f9 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2204      	movs	r2, #4
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d125      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d11e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2205      	movs	r2, #5
 8003eae:	4252      	negs	r2, r2
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	23c0      	movs	r3, #192	; 0xc0
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f8cd 	bl	8004068 <HAL_TIM_IC_CaptureCallback>
 8003ece:	e007      	b.n	8003ee0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 f8c0 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 f8cc 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2208      	movs	r2, #8
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d124      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2208      	movs	r2, #8
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d11d      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2209      	movs	r2, #9
 8003f08:	4252      	negs	r2, r2
 8003f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 f8a1 	bl	8004068 <HAL_TIM_IC_CaptureCallback>
 8003f26:	e007      	b.n	8003f38 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f000 f894 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	0018      	movs	r0, r3
 8003f34:	f000 f8a0 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2210      	movs	r2, #16
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d125      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2210      	movs	r2, #16
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d11e      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2211      	movs	r2, #17
 8003f60:	4252      	negs	r2, r2
 8003f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2208      	movs	r2, #8
 8003f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	23c0      	movs	r3, #192	; 0xc0
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 f874 	bl	8004068 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e007      	b.n	8003f92 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 f867 	bl	8004058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 f873 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d108      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	4252      	negs	r2, r2
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7fd fd1b 	bl	80019fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b80      	cmp	r3, #128	; 0x80
 8003fe0:	d108      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2281      	movs	r2, #129	; 0x81
 8003fe8:	4252      	negs	r2, r2
 8003fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 f8d0 	bl	8004194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2240      	movs	r2, #64	; 0x40
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d10f      	bne.n	8004022 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2240      	movs	r2, #64	; 0x40
 800400a:	4013      	ands	r3, r2
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d108      	bne.n	8004022 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2241      	movs	r2, #65	; 0x41
 8004016:	4252      	negs	r2, r2
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 f833 	bl	8004088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2220      	movs	r2, #32
 800402a:	4013      	ands	r3, r2
 800402c:	2b20      	cmp	r3, #32
 800402e:	d10f      	bne.n	8004050 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	4013      	ands	r3, r2
 800403a:	2b20      	cmp	r3, #32
 800403c:	d108      	bne.n	8004050 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2221      	movs	r2, #33	; 0x21
 8004044:	4252      	negs	r2, r2
 8004046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0018      	movs	r0, r3
 800404c:	f000 f89a 	bl	8004184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b002      	add	sp, #8
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}

08004098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <TIM_Base_SetConfig+0xd0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_Base_SetConfig+0x20>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a2e      	ldr	r2, [pc, #184]	; (800416c <TIM_Base_SetConfig+0xd4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d108      	bne.n	80040ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2270      	movs	r2, #112	; 0x70
 80040bc:	4393      	bics	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <TIM_Base_SetConfig+0xd0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a25      	ldr	r2, [pc, #148]	; (800416c <TIM_Base_SetConfig+0xd4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00f      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a24      	ldr	r2, [pc, #144]	; (8004170 <TIM_Base_SetConfig+0xd8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a23      	ldr	r2, [pc, #140]	; (8004174 <TIM_Base_SetConfig+0xdc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a22      	ldr	r2, [pc, #136]	; (8004178 <TIM_Base_SetConfig+0xe0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a21      	ldr	r2, [pc, #132]	; (800417c <TIM_Base_SetConfig+0xe4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d108      	bne.n	800410c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a20      	ldr	r2, [pc, #128]	; (8004180 <TIM_Base_SetConfig+0xe8>)
 80040fe:	4013      	ands	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2280      	movs	r2, #128	; 0x80
 8004110:	4393      	bics	r3, r2
 8004112:	001a      	movs	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <TIM_Base_SetConfig+0xd0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00b      	beq.n	8004152 <TIM_Base_SetConfig+0xba>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <TIM_Base_SetConfig+0xdc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <TIM_Base_SetConfig+0xba>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <TIM_Base_SetConfig+0xe0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_Base_SetConfig+0xba>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a0b      	ldr	r2, [pc, #44]	; (800417c <TIM_Base_SetConfig+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d103      	bne.n	800415a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	615a      	str	r2, [r3, #20]
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b004      	add	sp, #16
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40000400 	.word	0x40000400
 8004170:	40002000 	.word	0x40002000
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800
 8004180:	fffffcff 	.word	0xfffffcff

08004184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b002      	add	sp, #8
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e044      	b.n	8004240 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2278      	movs	r2, #120	; 0x78
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7fe f9cd 	bl	8002568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2224      	movs	r2, #36	; 0x24
 80041d2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2101      	movs	r1, #1
 80041e0:	438a      	bics	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fc3a 	bl	8004a60 <UART_SetConfig>
 80041ec:	0003      	movs	r3, r0
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e024      	b.n	8004240 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0018      	movs	r0, r3
 8004202:	f000 fd6d 	bl	8004ce0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	490d      	ldr	r1, [pc, #52]	; (8004248 <HAL_UART_Init+0xa4>)
 8004212:	400a      	ands	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2108      	movs	r1, #8
 8004222:	438a      	bics	r2, r1
 8004224:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	430a      	orrs	r2, r1
 8004234:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f000 fe05 	bl	8004e48 <UART_CheckIdleState>
 800423e:	0003      	movs	r3, r0
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}
 8004248:	fffff7ff 	.word	0xfffff7ff

0800424c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e030      	b.n	80042c0 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2224      	movs	r2, #36	; 0x24
 8004262:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2101      	movs	r1, #1
 8004270:	438a      	bics	r2, r1
 8004272:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	0018      	movs	r0, r3
 8004290:	f7fe f9fa 	bl	8002688 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2284      	movs	r2, #132	; 0x84
 8004298:	2100      	movs	r1, #0
 800429a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2280      	movs	r2, #128	; 0x80
 80042a6:	2100      	movs	r1, #0
 80042a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2278      	movs	r2, #120	; 0x78
 80042ba:	2100      	movs	r1, #0
 80042bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	1dbb      	adds	r3, r7, #6
 80042d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d000      	beq.n	80042e2 <HAL_UART_Transmit+0x1a>
 80042e0:	e08d      	b.n	80043fe <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_UART_Transmit+0x28>
 80042e8:	1dbb      	adds	r3, r7, #6
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e085      	b.n	8004400 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	015b      	lsls	r3, r3, #5
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d109      	bne.n	8004314 <HAL_UART_Transmit+0x4c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2201      	movs	r2, #1
 800430c:	4013      	ands	r3, r2
 800430e:	d001      	beq.n	8004314 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e075      	b.n	8004400 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2284      	movs	r2, #132	; 0x84
 8004318:	2100      	movs	r1, #0
 800431a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	; 0x21
 8004320:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004322:	f7fe fb5d 	bl	80029e0 <HAL_GetTick>
 8004326:	0003      	movs	r3, r0
 8004328:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1dba      	adds	r2, r7, #6
 800432e:	2150      	movs	r1, #80	; 0x50
 8004330:	8812      	ldrh	r2, [r2, #0]
 8004332:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1dba      	adds	r2, r7, #6
 8004338:	2152      	movs	r1, #82	; 0x52
 800433a:	8812      	ldrh	r2, [r2, #0]
 800433c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	015b      	lsls	r3, r3, #5
 8004346:	429a      	cmp	r2, r3
 8004348:	d108      	bne.n	800435c <HAL_UART_Transmit+0x94>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e003      	b.n	8004364 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004364:	e030      	b.n	80043c8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	0013      	movs	r3, r2
 8004370:	2200      	movs	r2, #0
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	f000 fe10 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d004      	beq.n	8004386 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e03c      	b.n	8004400 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	881a      	ldrh	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	05d2      	lsls	r2, r2, #23
 8004396:	0dd2      	lsrs	r2, r2, #23
 8004398:	b292      	uxth	r2, r2
 800439a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3302      	adds	r3, #2
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e008      	b.n	80043b6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	b292      	uxth	r2, r2
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2252      	movs	r2, #82	; 0x52
 80043ba:	5a9b      	ldrh	r3, [r3, r2]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b299      	uxth	r1, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2252      	movs	r2, #82	; 0x52
 80043c6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2252      	movs	r2, #82	; 0x52
 80043cc:	5a9b      	ldrh	r3, [r3, r2]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1c8      	bne.n	8004366 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	0013      	movs	r3, r2
 80043de:	2200      	movs	r2, #0
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	f000 fdd9 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 80043e6:	1e03      	subs	r3, r0, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e005      	b.n	8004400 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b008      	add	sp, #32
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	1dbb      	adds	r3, r7, #6
 8004414:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2280      	movs	r2, #128	; 0x80
 800441a:	589b      	ldr	r3, [r3, r2]
 800441c:	2b20      	cmp	r3, #32
 800441e:	d145      	bne.n	80044ac <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_UART_Receive_IT+0x26>
 8004426:	1dbb      	adds	r3, r7, #6
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e03d      	b.n	80044ae <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	015b      	lsls	r3, r3, #5
 800443a:	429a      	cmp	r2, r3
 800443c:	d109      	bne.n	8004452 <HAL_UART_Receive_IT+0x4a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2201      	movs	r2, #1
 800444a:	4013      	ands	r3, r2
 800444c:	d001      	beq.n	8004452 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e02d      	b.n	80044ae <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	4013      	ands	r3, r2
 8004464:	d019      	beq.n	800449a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004466:	f3ef 8310 	mrs	r3, PRIMASK
 800446a:	613b      	str	r3, [r7, #16]
  return(result);
 800446c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	2301      	movs	r3, #1
 8004472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f383 8810 	msr	PRIMASK, r3
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2180      	movs	r1, #128	; 0x80
 8004488:	04c9      	lsls	r1, r1, #19
 800448a:	430a      	orrs	r2, r1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f383 8810 	msr	PRIMASK, r3
}
 8004498:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800449a:	1dbb      	adds	r3, r7, #6
 800449c:	881a      	ldrh	r2, [r3, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 fde2 	bl	800506c <UART_Start_Receive_IT>
 80044a8:	0003      	movs	r3, r0
 80044aa:	e000      	b.n	80044ae <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
  }
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b008      	add	sp, #32
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b0ab      	sub	sp, #172	; 0xac
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	22a4      	movs	r2, #164	; 0xa4
 80044c8:	18b9      	adds	r1, r7, r2
 80044ca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	20a0      	movs	r0, #160	; 0xa0
 80044d4:	1839      	adds	r1, r7, r0
 80044d6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	219c      	movs	r1, #156	; 0x9c
 80044e0:	1879      	adds	r1, r7, r1
 80044e2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044e4:	0011      	movs	r1, r2
 80044e6:	18bb      	adds	r3, r7, r2
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a99      	ldr	r2, [pc, #612]	; (8004750 <HAL_UART_IRQHandler+0x298>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	2298      	movs	r2, #152	; 0x98
 80044f0:	18bc      	adds	r4, r7, r2
 80044f2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80044f4:	18bb      	adds	r3, r7, r2
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d114      	bne.n	8004526 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2220      	movs	r2, #32
 8004502:	4013      	ands	r3, r2
 8004504:	d00f      	beq.n	8004526 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004506:	183b      	adds	r3, r7, r0
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2220      	movs	r2, #32
 800450c:	4013      	ands	r3, r2
 800450e:	d00a      	beq.n	8004526 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004514:	2b00      	cmp	r3, #0
 8004516:	d100      	bne.n	800451a <HAL_UART_IRQHandler+0x62>
 8004518:	e286      	b.n	8004a28 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	0010      	movs	r0, r2
 8004522:	4798      	blx	r3
      }
      return;
 8004524:	e280      	b.n	8004a28 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004526:	2398      	movs	r3, #152	; 0x98
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d100      	bne.n	8004532 <HAL_UART_IRQHandler+0x7a>
 8004530:	e114      	b.n	800475c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004532:	239c      	movs	r3, #156	; 0x9c
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	4013      	ands	r3, r2
 800453c:	d106      	bne.n	800454c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800453e:	23a0      	movs	r3, #160	; 0xa0
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a83      	ldr	r2, [pc, #524]	; (8004754 <HAL_UART_IRQHandler+0x29c>)
 8004546:	4013      	ands	r3, r2
 8004548:	d100      	bne.n	800454c <HAL_UART_IRQHandler+0x94>
 800454a:	e107      	b.n	800475c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800454c:	23a4      	movs	r3, #164	; 0xa4
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	4013      	ands	r3, r2
 8004556:	d012      	beq.n	800457e <HAL_UART_IRQHandler+0xc6>
 8004558:	23a0      	movs	r3, #160	; 0xa0
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	4013      	ands	r3, r2
 8004564:	d00b      	beq.n	800457e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2201      	movs	r2, #1
 800456c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2284      	movs	r2, #132	; 0x84
 8004572:	589b      	ldr	r3, [r3, r2]
 8004574:	2201      	movs	r2, #1
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2184      	movs	r1, #132	; 0x84
 800457c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800457e:	23a4      	movs	r3, #164	; 0xa4
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2202      	movs	r2, #2
 8004586:	4013      	ands	r3, r2
 8004588:	d011      	beq.n	80045ae <HAL_UART_IRQHandler+0xf6>
 800458a:	239c      	movs	r3, #156	; 0x9c
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	4013      	ands	r3, r2
 8004594:	d00b      	beq.n	80045ae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2202      	movs	r2, #2
 800459c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2284      	movs	r2, #132	; 0x84
 80045a2:	589b      	ldr	r3, [r3, r2]
 80045a4:	2204      	movs	r2, #4
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2184      	movs	r1, #132	; 0x84
 80045ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045ae:	23a4      	movs	r3, #164	; 0xa4
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2204      	movs	r2, #4
 80045b6:	4013      	ands	r3, r2
 80045b8:	d011      	beq.n	80045de <HAL_UART_IRQHandler+0x126>
 80045ba:	239c      	movs	r3, #156	; 0x9c
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	4013      	ands	r3, r2
 80045c4:	d00b      	beq.n	80045de <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2204      	movs	r2, #4
 80045cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2284      	movs	r2, #132	; 0x84
 80045d2:	589b      	ldr	r3, [r3, r2]
 80045d4:	2202      	movs	r2, #2
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2184      	movs	r1, #132	; 0x84
 80045dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045de:	23a4      	movs	r3, #164	; 0xa4
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2208      	movs	r2, #8
 80045e6:	4013      	ands	r3, r2
 80045e8:	d017      	beq.n	800461a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045ea:	23a0      	movs	r3, #160	; 0xa0
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2220      	movs	r2, #32
 80045f2:	4013      	ands	r3, r2
 80045f4:	d105      	bne.n	8004602 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045f6:	239c      	movs	r3, #156	; 0x9c
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004600:	d00b      	beq.n	800461a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2208      	movs	r2, #8
 8004608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2284      	movs	r2, #132	; 0x84
 800460e:	589b      	ldr	r3, [r3, r2]
 8004610:	2208      	movs	r2, #8
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2184      	movs	r1, #132	; 0x84
 8004618:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800461a:	23a4      	movs	r3, #164	; 0xa4
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	4013      	ands	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_UART_IRQHandler+0x198>
 8004628:	23a0      	movs	r3, #160	; 0xa0
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	04db      	lsls	r3, r3, #19
 8004632:	4013      	ands	r3, r2
 8004634:	d00c      	beq.n	8004650 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2284      	movs	r2, #132	; 0x84
 8004644:	589b      	ldr	r3, [r3, r2]
 8004646:	2220      	movs	r2, #32
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2184      	movs	r1, #132	; 0x84
 800464e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2284      	movs	r2, #132	; 0x84
 8004654:	589b      	ldr	r3, [r3, r2]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d100      	bne.n	800465c <HAL_UART_IRQHandler+0x1a4>
 800465a:	e1e7      	b.n	8004a2c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800465c:	23a4      	movs	r3, #164	; 0xa4
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2220      	movs	r2, #32
 8004664:	4013      	ands	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004668:	23a0      	movs	r3, #160	; 0xa0
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2220      	movs	r2, #32
 8004670:	4013      	ands	r3, r2
 8004672:	d008      	beq.n	8004686 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	0010      	movs	r0, r2
 8004684:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2284      	movs	r2, #132	; 0x84
 800468a:	589b      	ldr	r3, [r3, r2]
 800468c:	2194      	movs	r1, #148	; 0x94
 800468e:	187a      	adds	r2, r7, r1
 8004690:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2240      	movs	r2, #64	; 0x40
 800469a:	4013      	ands	r3, r2
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d004      	beq.n	80046aa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2228      	movs	r2, #40	; 0x28
 80046a6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a8:	d047      	beq.n	800473a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 fd93 	bl	80051d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2240      	movs	r2, #64	; 0x40
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d137      	bne.n	8004730 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c0:	f3ef 8310 	mrs	r3, PRIMASK
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80046c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c8:	2090      	movs	r0, #144	; 0x90
 80046ca:	183a      	adds	r2, r7, r0
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	2301      	movs	r3, #1
 80046d0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	438a      	bics	r2, r1
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	183b      	adds	r3, r7, r0
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046f2:	f383 8810 	msr	PRIMASK, r3
}
 80046f6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <HAL_UART_IRQHandler+0x2a0>)
 8004706:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470c:	0018      	movs	r0, r3
 800470e:	f7fe fab9 	bl	8002c84 <HAL_DMA_Abort_IT>
 8004712:	1e03      	subs	r3, r0, #0
 8004714:	d01a      	beq.n	800474c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004720:	0018      	movs	r0, r3
 8004722:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	e012      	b.n	800474c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f7fd fbfb 	bl	8001f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472e:	e00d      	b.n	800474c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f7fd fbf6 	bl	8001f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e008      	b.n	800474c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f7fd fbf1 	bl	8001f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2284      	movs	r2, #132	; 0x84
 8004746:	2100      	movs	r1, #0
 8004748:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800474a:	e16f      	b.n	8004a2c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	46c0      	nop			; (mov r8, r8)
    return;
 800474e:	e16d      	b.n	8004a2c <HAL_UART_IRQHandler+0x574>
 8004750:	0000080f 	.word	0x0000080f
 8004754:	04000120 	.word	0x04000120
 8004758:	080052a1 	.word	0x080052a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004760:	2b01      	cmp	r3, #1
 8004762:	d000      	beq.n	8004766 <HAL_UART_IRQHandler+0x2ae>
 8004764:	e139      	b.n	80049da <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004766:	23a4      	movs	r3, #164	; 0xa4
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2210      	movs	r2, #16
 800476e:	4013      	ands	r3, r2
 8004770:	d100      	bne.n	8004774 <HAL_UART_IRQHandler+0x2bc>
 8004772:	e132      	b.n	80049da <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004774:	23a0      	movs	r3, #160	; 0xa0
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2210      	movs	r2, #16
 800477c:	4013      	ands	r3, r2
 800477e:	d100      	bne.n	8004782 <HAL_UART_IRQHandler+0x2ca>
 8004780:	e12b      	b.n	80049da <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2210      	movs	r2, #16
 8004788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2240      	movs	r2, #64	; 0x40
 8004792:	4013      	ands	r3, r2
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d000      	beq.n	800479a <HAL_UART_IRQHandler+0x2e2>
 8004798:	e09f      	b.n	80048da <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	217e      	movs	r1, #126	; 0x7e
 80047a4:	187b      	adds	r3, r7, r1
 80047a6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d100      	bne.n	80047b2 <HAL_UART_IRQHandler+0x2fa>
 80047b0:	e13e      	b.n	8004a30 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2258      	movs	r2, #88	; 0x58
 80047b6:	5a9b      	ldrh	r3, [r3, r2]
 80047b8:	187a      	adds	r2, r7, r1
 80047ba:	8812      	ldrh	r2, [r2, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d300      	bcc.n	80047c2 <HAL_UART_IRQHandler+0x30a>
 80047c0:	e136      	b.n	8004a30 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	187a      	adds	r2, r7, r1
 80047c6:	215a      	movs	r1, #90	; 0x5a
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d06f      	beq.n	80048b6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d6:	f3ef 8310 	mrs	r3, PRIMASK
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047de:	67bb      	str	r3, [r7, #120]	; 0x78
 80047e0:	2301      	movs	r3, #1
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4992      	ldr	r1, [pc, #584]	; (8004a40 <HAL_UART_IRQHandler+0x588>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	f383 8810 	msr	PRIMASK, r3
}
 8004806:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004808:	f3ef 8310 	mrs	r3, PRIMASK
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800480e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004810:	677b      	str	r3, [r7, #116]	; 0x74
 8004812:	2301      	movs	r3, #1
 8004814:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004818:	f383 8810 	msr	PRIMASK, r3
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	438a      	bics	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004834:	f383 8810 	msr	PRIMASK, r3
}
 8004838:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483a:	f3ef 8310 	mrs	r3, PRIMASK
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	673b      	str	r3, [r7, #112]	; 0x70
 8004844:	2301      	movs	r3, #1
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484a:	f383 8810 	msr	PRIMASK, r3
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2140      	movs	r1, #64	; 0x40
 800485c:	438a      	bics	r2, r1
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004862:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004866:	f383 8810 	msr	PRIMASK, r3
}
 800486a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	2120      	movs	r1, #32
 8004872:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487a:	f3ef 8310 	mrs	r3, PRIMASK
 800487e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004880:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004884:	2301      	movs	r3, #1
 8004886:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800488a:	f383 8810 	msr	PRIMASK, r3
}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2110      	movs	r1, #16
 800489c:	438a      	bics	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fe f9af 	bl	8002c14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2258      	movs	r2, #88	; 0x58
 80048c0:	5a9a      	ldrh	r2, [r3, r2]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	215a      	movs	r1, #90	; 0x5a
 80048c6:	5a5b      	ldrh	r3, [r3, r1]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	0011      	movs	r1, r2
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 f8b8 	bl	8004a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048d8:	e0aa      	b.n	8004a30 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2258      	movs	r2, #88	; 0x58
 80048de:	5a99      	ldrh	r1, [r3, r2]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	225a      	movs	r2, #90	; 0x5a
 80048e4:	5a9b      	ldrh	r3, [r3, r2]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	208e      	movs	r0, #142	; 0x8e
 80048ea:	183b      	adds	r3, r7, r0
 80048ec:	1a8a      	subs	r2, r1, r2
 80048ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	225a      	movs	r2, #90	; 0x5a
 80048f4:	5a9b      	ldrh	r3, [r3, r2]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d100      	bne.n	80048fe <HAL_UART_IRQHandler+0x446>
 80048fc:	e09a      	b.n	8004a34 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80048fe:	183b      	adds	r3, r7, r0
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d100      	bne.n	8004908 <HAL_UART_IRQHandler+0x450>
 8004906:	e095      	b.n	8004a34 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004908:	f3ef 8310 	mrs	r3, PRIMASK
 800490c:	60fb      	str	r3, [r7, #12]
  return(result);
 800490e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004910:	2488      	movs	r4, #136	; 0x88
 8004912:	193a      	adds	r2, r7, r4
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	2301      	movs	r3, #1
 8004918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f383 8810 	msr	PRIMASK, r3
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4945      	ldr	r1, [pc, #276]	; (8004a44 <HAL_UART_IRQHandler+0x58c>)
 800492e:	400a      	ands	r2, r1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	193b      	adds	r3, r7, r4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004940:	f3ef 8310 	mrs	r3, PRIMASK
 8004944:	61bb      	str	r3, [r7, #24]
  return(result);
 8004946:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	2484      	movs	r4, #132	; 0x84
 800494a:	193a      	adds	r2, r7, r4
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	2301      	movs	r3, #1
 8004950:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f383 8810 	msr	PRIMASK, r3
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2101      	movs	r1, #1
 8004966:	438a      	bics	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	193b      	adds	r3, r7, r4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	f383 8810 	msr	PRIMASK, r3
}
 8004976:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	2120      	movs	r1, #32
 800497e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498c:	f3ef 8310 	mrs	r3, PRIMASK
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004994:	2480      	movs	r4, #128	; 0x80
 8004996:	193a      	adds	r2, r7, r4
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	2301      	movs	r3, #1
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	46c0      	nop			; (mov r8, r8)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2110      	movs	r1, #16
 80049b2:	438a      	bics	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	193b      	adds	r3, r7, r4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ca:	183b      	adds	r3, r7, r0
 80049cc:	881a      	ldrh	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0011      	movs	r1, r2
 80049d2:	0018      	movs	r0, r3
 80049d4:	f000 f838 	bl	8004a48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049d8:	e02c      	b.n	8004a34 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049da:	23a4      	movs	r3, #164	; 0xa4
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2280      	movs	r2, #128	; 0x80
 80049e2:	4013      	ands	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049e6:	23a0      	movs	r3, #160	; 0xa0
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2280      	movs	r2, #128	; 0x80
 80049ee:	4013      	ands	r3, r2
 80049f0:	d009      	beq.n	8004a06 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01e      	beq.n	8004a38 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	0010      	movs	r0, r2
 8004a02:	4798      	blx	r3
    }
    return;
 8004a04:	e018      	b.n	8004a38 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a06:	23a4      	movs	r3, #164	; 0xa4
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2240      	movs	r2, #64	; 0x40
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_UART_IRQHandler+0x582>
 8004a12:	23a0      	movs	r3, #160	; 0xa0
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2240      	movs	r2, #64	; 0x40
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d00d      	beq.n	8004a3a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 fc54 	bl	80052ce <UART_EndTransmit_IT>
    return;
 8004a26:	e008      	b.n	8004a3a <HAL_UART_IRQHandler+0x582>
      return;
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	e006      	b.n	8004a3a <HAL_UART_IRQHandler+0x582>
    return;
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	e004      	b.n	8004a3a <HAL_UART_IRQHandler+0x582>
      return;
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	e002      	b.n	8004a3a <HAL_UART_IRQHandler+0x582>
      return;
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	e000      	b.n	8004a3a <HAL_UART_IRQHandler+0x582>
    return;
 8004a38:	46c0      	nop			; (mov r8, r8)
  }

}
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b02b      	add	sp, #172	; 0xac
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	fffffeff 	.word	0xfffffeff
 8004a44:	fffffedf 	.word	0xfffffedf

08004a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	000a      	movs	r2, r1
 8004a52:	1cbb      	adds	r3, r7, #2
 8004a54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a68:	231e      	movs	r3, #30
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a8d      	ldr	r2, [pc, #564]	; (8004cc4 <UART_SetConfig+0x264>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	0019      	movs	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a88      	ldr	r2, [pc, #544]	; (8004cc8 <UART_SetConfig+0x268>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a7f      	ldr	r2, [pc, #508]	; (8004ccc <UART_SetConfig+0x26c>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7b      	ldr	r2, [pc, #492]	; (8004cd0 <UART_SetConfig+0x270>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d127      	bne.n	8004b36 <UART_SetConfig+0xd6>
 8004ae6:	4b7b      	ldr	r3, [pc, #492]	; (8004cd4 <UART_SetConfig+0x274>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	2203      	movs	r2, #3
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d00d      	beq.n	8004b0e <UART_SetConfig+0xae>
 8004af2:	d81b      	bhi.n	8004b2c <UART_SetConfig+0xcc>
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d014      	beq.n	8004b22 <UART_SetConfig+0xc2>
 8004af8:	d818      	bhi.n	8004b2c <UART_SetConfig+0xcc>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <UART_SetConfig+0xa4>
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d00a      	beq.n	8004b18 <UART_SetConfig+0xb8>
 8004b02:	e013      	b.n	8004b2c <UART_SetConfig+0xcc>
 8004b04:	231f      	movs	r3, #31
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e021      	b.n	8004b52 <UART_SetConfig+0xf2>
 8004b0e:	231f      	movs	r3, #31
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	2202      	movs	r2, #2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e01c      	b.n	8004b52 <UART_SetConfig+0xf2>
 8004b18:	231f      	movs	r3, #31
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e017      	b.n	8004b52 <UART_SetConfig+0xf2>
 8004b22:	231f      	movs	r3, #31
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	2208      	movs	r2, #8
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e012      	b.n	8004b52 <UART_SetConfig+0xf2>
 8004b2c:	231f      	movs	r3, #31
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	2210      	movs	r2, #16
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e00d      	b.n	8004b52 <UART_SetConfig+0xf2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a67      	ldr	r2, [pc, #412]	; (8004cd8 <UART_SetConfig+0x278>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d104      	bne.n	8004b4a <UART_SetConfig+0xea>
 8004b40:	231f      	movs	r3, #31
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e003      	b.n	8004b52 <UART_SetConfig+0xf2>
 8004b4a:	231f      	movs	r3, #31
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	2210      	movs	r2, #16
 8004b50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69da      	ldr	r2, [r3, #28]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d15c      	bne.n	8004c18 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004b5e:	231f      	movs	r3, #31
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d015      	beq.n	8004b94 <UART_SetConfig+0x134>
 8004b68:	dc18      	bgt.n	8004b9c <UART_SetConfig+0x13c>
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d00d      	beq.n	8004b8a <UART_SetConfig+0x12a>
 8004b6e:	dc15      	bgt.n	8004b9c <UART_SetConfig+0x13c>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <UART_SetConfig+0x11a>
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d005      	beq.n	8004b84 <UART_SetConfig+0x124>
 8004b78:	e010      	b.n	8004b9c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7a:	f7fe ffa9 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	61bb      	str	r3, [r7, #24]
        break;
 8004b82:	e012      	b.n	8004baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b84:	4b55      	ldr	r3, [pc, #340]	; (8004cdc <UART_SetConfig+0x27c>)
 8004b86:	61bb      	str	r3, [r7, #24]
        break;
 8004b88:	e00f      	b.n	8004baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7fe ff3f 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	61bb      	str	r3, [r7, #24]
        break;
 8004b92:	e00a      	b.n	8004baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	61bb      	str	r3, [r7, #24]
        break;
 8004b9a:	e006      	b.n	8004baa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba0:	231e      	movs	r3, #30
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
        break;
 8004ba8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d100      	bne.n	8004bb2 <UART_SetConfig+0x152>
 8004bb0:	e07a      	b.n	8004ca8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	005a      	lsls	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	18d2      	adds	r2, r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	0010      	movs	r0, r2
 8004bc6:	f7fb fa9f 	bl	8000108 <__udivsi3>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b0f      	cmp	r3, #15
 8004bd2:	d91c      	bls.n	8004c0e <UART_SetConfig+0x1ae>
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	025b      	lsls	r3, r3, #9
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d217      	bcs.n	8004c0e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	200e      	movs	r0, #14
 8004be4:	183b      	adds	r3, r7, r0
 8004be6:	210f      	movs	r1, #15
 8004be8:	438a      	bics	r2, r1
 8004bea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2207      	movs	r2, #7
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	b299      	uxth	r1, r3
 8004bf8:	183b      	adds	r3, r7, r0
 8004bfa:	183a      	adds	r2, r7, r0
 8004bfc:	8812      	ldrh	r2, [r2, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	183a      	adds	r2, r7, r0
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	e04c      	b.n	8004ca8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004c0e:	231e      	movs	r3, #30
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	2201      	movs	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e047      	b.n	8004ca8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c18:	231f      	movs	r3, #31
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d015      	beq.n	8004c4e <UART_SetConfig+0x1ee>
 8004c22:	dc18      	bgt.n	8004c56 <UART_SetConfig+0x1f6>
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d00d      	beq.n	8004c44 <UART_SetConfig+0x1e4>
 8004c28:	dc15      	bgt.n	8004c56 <UART_SetConfig+0x1f6>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <UART_SetConfig+0x1d4>
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d005      	beq.n	8004c3e <UART_SetConfig+0x1de>
 8004c32:	e010      	b.n	8004c56 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c34:	f7fe ff4c 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61bb      	str	r3, [r7, #24]
        break;
 8004c3c:	e012      	b.n	8004c64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c3e:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <UART_SetConfig+0x27c>)
 8004c40:	61bb      	str	r3, [r7, #24]
        break;
 8004c42:	e00f      	b.n	8004c64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c44:	f7fe fee2 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	61bb      	str	r3, [r7, #24]
        break;
 8004c4c:	e00a      	b.n	8004c64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	61bb      	str	r3, [r7, #24]
        break;
 8004c54:	e006      	b.n	8004c64 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c5a:	231e      	movs	r3, #30
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
        break;
 8004c62:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01e      	beq.n	8004ca8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	085a      	lsrs	r2, r3, #1
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	18d2      	adds	r2, r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	0019      	movs	r1, r3
 8004c7a:	0010      	movs	r0, r2
 8004c7c:	f7fb fa44 	bl	8000108 <__udivsi3>
 8004c80:	0003      	movs	r3, r0
 8004c82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b0f      	cmp	r3, #15
 8004c88:	d90a      	bls.n	8004ca0 <UART_SetConfig+0x240>
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	025b      	lsls	r3, r3, #9
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d205      	bcs.n	8004ca0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e003      	b.n	8004ca8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca0:	231e      	movs	r3, #30
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004cb4:	231e      	movs	r3, #30
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	781b      	ldrb	r3, [r3, #0]
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b008      	add	sp, #32
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	ffff69f3 	.word	0xffff69f3
 8004cc8:	ffffcfff 	.word	0xffffcfff
 8004ccc:	fffff4ff 	.word	0xfffff4ff
 8004cd0:	40013800 	.word	0x40013800
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40004400 	.word	0x40004400
 8004cdc:	007a1200 	.word	0x007a1200

08004ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2201      	movs	r2, #1
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a4a      	ldr	r2, [pc, #296]	; (8004e24 <UART_AdvFeatureConfig+0x144>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2202      	movs	r2, #2
 8004d10:	4013      	ands	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4a43      	ldr	r2, [pc, #268]	; (8004e28 <UART_AdvFeatureConfig+0x148>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	0019      	movs	r1, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2204      	movs	r2, #4
 8004d32:	4013      	ands	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a3b      	ldr	r2, [pc, #236]	; (8004e2c <UART_AdvFeatureConfig+0x14c>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	2208      	movs	r2, #8
 8004d54:	4013      	ands	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4a34      	ldr	r2, [pc, #208]	; (8004e30 <UART_AdvFeatureConfig+0x150>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	0019      	movs	r1, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	2210      	movs	r2, #16
 8004d76:	4013      	ands	r3, r2
 8004d78:	d00b      	beq.n	8004d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a2c      	ldr	r2, [pc, #176]	; (8004e34 <UART_AdvFeatureConfig+0x154>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	0019      	movs	r1, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2220      	movs	r2, #32
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <UART_AdvFeatureConfig+0x158>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	0019      	movs	r1, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2240      	movs	r2, #64	; 0x40
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <UART_AdvFeatureConfig+0x15c>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	0019      	movs	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	035b      	lsls	r3, r3, #13
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d10b      	bne.n	8004dfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <UART_AdvFeatureConfig+0x160>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2280      	movs	r2, #128	; 0x80
 8004e00:	4013      	ands	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4a0e      	ldr	r2, [pc, #56]	; (8004e44 <UART_AdvFeatureConfig+0x164>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	0019      	movs	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }
}
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b002      	add	sp, #8
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	fffdffff 	.word	0xfffdffff
 8004e28:	fffeffff 	.word	0xfffeffff
 8004e2c:	fffbffff 	.word	0xfffbffff
 8004e30:	ffff7fff 	.word	0xffff7fff
 8004e34:	ffffefff 	.word	0xffffefff
 8004e38:	ffffdfff 	.word	0xffffdfff
 8004e3c:	ffefffff 	.word	0xffefffff
 8004e40:	ff9fffff 	.word	0xff9fffff
 8004e44:	fff7ffff 	.word	0xfff7ffff

08004e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b092      	sub	sp, #72	; 0x48
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2284      	movs	r2, #132	; 0x84
 8004e54:	2100      	movs	r1, #0
 8004e56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e58:	f7fd fdc2 	bl	80029e0 <HAL_GetTick>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2208      	movs	r2, #8
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d12c      	bne.n	8004ec8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	0391      	lsls	r1, r2, #14
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4a46      	ldr	r2, [pc, #280]	; (8004f90 <UART_CheckIdleState+0x148>)
 8004e78:	9200      	str	r2, [sp, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f000 f88c 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004e80:	1e03      	subs	r3, r0, #0
 8004e82:	d021      	beq.n	8004ec8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e8e:	2301      	movs	r3, #1
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	438a      	bics	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2278      	movs	r2, #120	; 0x78
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e05f      	b.n	8004f88 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d146      	bne.n	8004f64 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed8:	2280      	movs	r2, #128	; 0x80
 8004eda:	03d1      	lsls	r1, r2, #15
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <UART_CheckIdleState+0x148>)
 8004ee0:	9200      	str	r2, [sp, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f000 f858 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004ee8:	1e03      	subs	r3, r0, #0
 8004eea:	d03b      	beq.n	8004f64 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eec:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f383 8810 	msr	PRIMASK, r3
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4921      	ldr	r1, [pc, #132]	; (8004f94 <UART_CheckIdleState+0x14c>)
 8004f0e:	400a      	ands	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f383 8810 	msr	PRIMASK, r3
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f22:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f24:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30
 8004f28:	2301      	movs	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f383 8810 	msr	PRIMASK, r3
}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2101      	movs	r1, #1
 8004f40:	438a      	bics	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	f383 8810 	msr	PRIMASK, r3
}
 8004f4e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	2120      	movs	r1, #32
 8004f56:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2278      	movs	r2, #120	; 0x78
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e011      	b.n	8004f88 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2280      	movs	r2, #128	; 0x80
 8004f6e:	2120      	movs	r1, #32
 8004f70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2278      	movs	r2, #120	; 0x78
 8004f82:	2100      	movs	r1, #0
 8004f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b010      	add	sp, #64	; 0x40
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	01ffffff 	.word	0x01ffffff
 8004f94:	fffffedf 	.word	0xfffffedf

08004f98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	1dfb      	adds	r3, r7, #7
 8004fa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa8:	e04b      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	3301      	adds	r3, #1
 8004fae:	d048      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb0:	f7fd fd16 	bl	80029e0 <HAL_GetTick>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e04b      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d035      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d111      	bne.n	8005008 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f000 f8f2 	bl	80051d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2284      	movs	r2, #132	; 0x84
 8004ff8:	2108      	movs	r1, #8
 8004ffa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2278      	movs	r2, #120	; 0x78
 8005000:	2100      	movs	r1, #0
 8005002:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e02c      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	401a      	ands	r2, r3
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	429a      	cmp	r2, r3
 800501a:	d112      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2280      	movs	r2, #128	; 0x80
 8005022:	0112      	lsls	r2, r2, #4
 8005024:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	0018      	movs	r0, r3
 800502a:	f000 f8d5 	bl	80051d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2284      	movs	r2, #132	; 0x84
 8005032:	2120      	movs	r1, #32
 8005034:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2278      	movs	r2, #120	; 0x78
 800503a:	2100      	movs	r1, #0
 800503c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e00f      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	4013      	ands	r3, r2
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	425a      	negs	r2, r3
 8005052:	4153      	adcs	r3, r2
 8005054:	b2db      	uxtb	r3, r3
 8005056:	001a      	movs	r2, r3
 8005058:	1dfb      	adds	r3, r7, #7
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d0a4      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	0018      	movs	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	b004      	add	sp, #16
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b090      	sub	sp, #64	; 0x40
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	1dbb      	adds	r3, r7, #6
 8005078:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1dba      	adds	r2, r7, #6
 8005084:	2158      	movs	r1, #88	; 0x58
 8005086:	8812      	ldrh	r2, [r2, #0]
 8005088:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1dba      	adds	r2, r7, #6
 800508e:	215a      	movs	r1, #90	; 0x5a
 8005090:	8812      	ldrh	r2, [r2, #0]
 8005092:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	015b      	lsls	r3, r3, #5
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d10d      	bne.n	80050c2 <UART_Start_Receive_IT+0x56>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <UART_Start_Receive_IT+0x4c>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	225c      	movs	r2, #92	; 0x5c
 80050b2:	4946      	ldr	r1, [pc, #280]	; (80051cc <UART_Start_Receive_IT+0x160>)
 80050b4:	5299      	strh	r1, [r3, r2]
 80050b6:	e01a      	b.n	80050ee <UART_Start_Receive_IT+0x82>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	225c      	movs	r2, #92	; 0x5c
 80050bc:	21ff      	movs	r1, #255	; 0xff
 80050be:	5299      	strh	r1, [r3, r2]
 80050c0:	e015      	b.n	80050ee <UART_Start_Receive_IT+0x82>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10d      	bne.n	80050e6 <UART_Start_Receive_IT+0x7a>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <UART_Start_Receive_IT+0x70>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	225c      	movs	r2, #92	; 0x5c
 80050d6:	21ff      	movs	r1, #255	; 0xff
 80050d8:	5299      	strh	r1, [r3, r2]
 80050da:	e008      	b.n	80050ee <UART_Start_Receive_IT+0x82>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	225c      	movs	r2, #92	; 0x5c
 80050e0:	217f      	movs	r1, #127	; 0x7f
 80050e2:	5299      	strh	r1, [r3, r2]
 80050e4:	e003      	b.n	80050ee <UART_Start_Receive_IT+0x82>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	225c      	movs	r2, #92	; 0x5c
 80050ea:	2100      	movs	r1, #0
 80050ec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2284      	movs	r2, #132	; 0x84
 80050f2:	2100      	movs	r1, #0
 80050f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2280      	movs	r2, #128	; 0x80
 80050fa:	2122      	movs	r1, #34	; 0x22
 80050fc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005108:	2301      	movs	r3, #1
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	f383 8810 	msr	PRIMASK, r3
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2101      	movs	r1, #1
 8005120:	430a      	orrs	r2, r1
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005126:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	f383 8810 	msr	PRIMASK, r3
}
 800512e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	015b      	lsls	r3, r3, #5
 8005138:	429a      	cmp	r2, r3
 800513a:	d107      	bne.n	800514c <UART_Start_Receive_IT+0xe0>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d103      	bne.n	800514c <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <UART_Start_Receive_IT+0x164>)
 8005148:	669a      	str	r2, [r3, #104]	; 0x68
 800514a:	e002      	b.n	8005152 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <UART_Start_Receive_IT+0x168>)
 8005150:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d019      	beq.n	800518e <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515a:	f3ef 8310 	mrs	r3, PRIMASK
 800515e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005160:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
 8005164:	2301      	movs	r3, #1
 8005166:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	f383 8810 	msr	PRIMASK, r3
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2190      	movs	r1, #144	; 0x90
 800517c:	0049      	lsls	r1, r1, #1
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	f383 8810 	msr	PRIMASK, r3
}
 800518c:	e018      	b.n	80051c0 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518e:	f3ef 8310 	mrs	r3, PRIMASK
 8005192:	613b      	str	r3, [r7, #16]
  return(result);
 8005194:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005196:	63bb      	str	r3, [r7, #56]	; 0x38
 8005198:	2301      	movs	r3, #1
 800519a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f383 8810 	msr	PRIMASK, r3
}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2120      	movs	r1, #32
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f383 8810 	msr	PRIMASK, r3
}
 80051be:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	0018      	movs	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b010      	add	sp, #64	; 0x40
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	000001ff 	.word	0x000001ff
 80051d0:	080054dd 	.word	0x080054dd
 80051d4:	08005325 	.word	0x08005325

080051d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08e      	sub	sp, #56	; 0x38
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e0:	f3ef 8310 	mrs	r3, PRIMASK
 80051e4:	617b      	str	r3, [r7, #20]
  return(result);
 80051e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ea:	2301      	movs	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4926      	ldr	r1, [pc, #152]	; (800529c <UART_EndRxTransfer+0xc4>)
 8005202:	400a      	ands	r2, r1
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005208:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f383 8810 	msr	PRIMASK, r3
}
 8005210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005212:	f3ef 8310 	mrs	r3, PRIMASK
 8005216:	623b      	str	r3, [r7, #32]
  return(result);
 8005218:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521a:	633b      	str	r3, [r7, #48]	; 0x30
 800521c:	2301      	movs	r3, #1
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	f383 8810 	msr	PRIMASK, r3
}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2101      	movs	r1, #1
 8005234:	438a      	bics	r2, r1
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	f383 8810 	msr	PRIMASK, r3
}
 8005242:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005248:	2b01      	cmp	r3, #1
 800524a:	d118      	bne.n	800527e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800524c:	f3ef 8310 	mrs	r3, PRIMASK
 8005250:	60bb      	str	r3, [r7, #8]
  return(result);
 8005252:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005256:	2301      	movs	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f383 8810 	msr	PRIMASK, r3
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2110      	movs	r1, #16
 800526e:	438a      	bics	r2, r1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f383 8810 	msr	PRIMASK, r3
}
 800527c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	2120      	movs	r1, #32
 8005284:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b00e      	add	sp, #56	; 0x38
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	fffffedf 	.word	0xfffffedf

080052a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	225a      	movs	r2, #90	; 0x5a
 80052b2:	2100      	movs	r1, #0
 80052b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2252      	movs	r2, #82	; 0x52
 80052ba:	2100      	movs	r1, #0
 80052bc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7fc fe2f 	bl	8001f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b004      	add	sp, #16
 80052cc:	bd80      	pop	{r7, pc}

080052ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d6:	f3ef 8310 	mrs	r3, PRIMASK
 80052da:	60bb      	str	r3, [r7, #8]
  return(result);
 80052dc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	2301      	movs	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2140      	movs	r1, #64	; 0x40
 80052f8:	438a      	bics	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f383 8810 	msr	PRIMASK, r3
}
 8005306:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	0018      	movs	r0, r3
 8005318:	f7fc fc78 	bl	8001c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b006      	add	sp, #24
 8005322:	bd80      	pop	{r7, pc}

08005324 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b094      	sub	sp, #80	; 0x50
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800532c:	204e      	movs	r0, #78	; 0x4e
 800532e:	183b      	adds	r3, r7, r0
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	215c      	movs	r1, #92	; 0x5c
 8005334:	5a52      	ldrh	r2, [r2, r1]
 8005336:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2280      	movs	r2, #128	; 0x80
 800533c:	589b      	ldr	r3, [r3, r2]
 800533e:	2b22      	cmp	r3, #34	; 0x22
 8005340:	d000      	beq.n	8005344 <UART_RxISR_8BIT+0x20>
 8005342:	e0ba      	b.n	80054ba <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	214c      	movs	r1, #76	; 0x4c
 800534a:	187b      	adds	r3, r7, r1
 800534c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800534e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005350:	187b      	adds	r3, r7, r1
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	183b      	adds	r3, r7, r0
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b2d9      	uxtb	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	400a      	ands	r2, r1
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	225a      	movs	r2, #90	; 0x5a
 8005374:	5a9b      	ldrh	r3, [r3, r2]
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b299      	uxth	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	225a      	movs	r2, #90	; 0x5a
 8005380:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	225a      	movs	r2, #90	; 0x5a
 8005386:	5a9b      	ldrh	r3, [r3, r2]
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d000      	beq.n	8005390 <UART_RxISR_8BIT+0x6c>
 800538e:	e09c      	b.n	80054ca <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005390:	f3ef 8310 	mrs	r3, PRIMASK
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005398:	64bb      	str	r3, [r7, #72]	; 0x48
 800539a:	2301      	movs	r3, #1
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	f383 8810 	msr	PRIMASK, r3
}
 80053a4:	46c0      	nop			; (mov r8, r8)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4948      	ldr	r1, [pc, #288]	; (80054d4 <UART_RxISR_8BIT+0x1b0>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	f383 8810 	msr	PRIMASK, r3
}
 80053c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c2:	f3ef 8310 	mrs	r3, PRIMASK
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	647b      	str	r3, [r7, #68]	; 0x44
 80053cc:	2301      	movs	r3, #1
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	f383 8810 	msr	PRIMASK, r3
}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2101      	movs	r1, #1
 80053e4:	438a      	bics	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	f383 8810 	msr	PRIMASK, r3
}
 80053f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2280      	movs	r2, #128	; 0x80
 80053f8:	2120      	movs	r1, #32
 80053fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	4013      	ands	r3, r2
 8005414:	d018      	beq.n	8005448 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005416:	f3ef 8310 	mrs	r3, PRIMASK
 800541a:	61bb      	str	r3, [r7, #24]
  return(result);
 800541c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800541e:	643b      	str	r3, [r7, #64]	; 0x40
 8005420:	2301      	movs	r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f383 8810 	msr	PRIMASK, r3
}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4928      	ldr	r1, [pc, #160]	; (80054d8 <UART_RxISR_8BIT+0x1b4>)
 8005438:	400a      	ands	r2, r1
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f383 8810 	msr	PRIMASK, r3
}
 8005446:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544c:	2b01      	cmp	r3, #1
 800544e:	d12f      	bne.n	80054b0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005456:	f3ef 8310 	mrs	r3, PRIMASK
 800545a:	60fb      	str	r3, [r7, #12]
  return(result);
 800545c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005460:	2301      	movs	r3, #1
 8005462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f383 8810 	msr	PRIMASK, r3
}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2110      	movs	r1, #16
 8005478:	438a      	bics	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f383 8810 	msr	PRIMASK, r3
}
 8005486:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	2210      	movs	r2, #16
 8005490:	4013      	ands	r3, r2
 8005492:	2b10      	cmp	r3, #16
 8005494:	d103      	bne.n	800549e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2210      	movs	r2, #16
 800549c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2258      	movs	r2, #88	; 0x58
 80054a2:	5a9a      	ldrh	r2, [r3, r2]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	0011      	movs	r1, r2
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7ff facd 	bl	8004a48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054ae:	e00c      	b.n	80054ca <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7fc fc2a 	bl	8001d0c <HAL_UART_RxCpltCallback>
}
 80054b8:	e007      	b.n	80054ca <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2108      	movs	r1, #8
 80054c6:	430a      	orrs	r2, r1
 80054c8:	619a      	str	r2, [r3, #24]
}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b014      	add	sp, #80	; 0x50
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	fffffedf 	.word	0xfffffedf
 80054d8:	fbffffff 	.word	0xfbffffff

080054dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b094      	sub	sp, #80	; 0x50
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054e4:	204e      	movs	r0, #78	; 0x4e
 80054e6:	183b      	adds	r3, r7, r0
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	215c      	movs	r1, #92	; 0x5c
 80054ec:	5a52      	ldrh	r2, [r2, r1]
 80054ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2280      	movs	r2, #128	; 0x80
 80054f4:	589b      	ldr	r3, [r3, r2]
 80054f6:	2b22      	cmp	r3, #34	; 0x22
 80054f8:	d000      	beq.n	80054fc <UART_RxISR_16BIT+0x20>
 80054fa:	e0ba      	b.n	8005672 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	214c      	movs	r1, #76	; 0x4c
 8005502:	187b      	adds	r3, r7, r1
 8005504:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005506:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800550e:	187b      	adds	r3, r7, r1
 8005510:	183a      	adds	r2, r7, r0
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	8812      	ldrh	r2, [r2, #0]
 8005516:	4013      	ands	r3, r2
 8005518:	b29a      	uxth	r2, r3
 800551a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	1c9a      	adds	r2, r3, #2
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	225a      	movs	r2, #90	; 0x5a
 800552c:	5a9b      	ldrh	r3, [r3, r2]
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b299      	uxth	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	225a      	movs	r2, #90	; 0x5a
 8005538:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	225a      	movs	r2, #90	; 0x5a
 800553e:	5a9b      	ldrh	r3, [r3, r2]
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d000      	beq.n	8005548 <UART_RxISR_16BIT+0x6c>
 8005546:	e09c      	b.n	8005682 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005548:	f3ef 8310 	mrs	r3, PRIMASK
 800554c:	623b      	str	r3, [r7, #32]
  return(result);
 800554e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005550:	647b      	str	r3, [r7, #68]	; 0x44
 8005552:	2301      	movs	r3, #1
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	f383 8810 	msr	PRIMASK, r3
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4948      	ldr	r1, [pc, #288]	; (800568c <UART_RxISR_16BIT+0x1b0>)
 800556a:	400a      	ands	r2, r1
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	f383 8810 	msr	PRIMASK, r3
}
 8005578:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800557a:	f3ef 8310 	mrs	r3, PRIMASK
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	643b      	str	r3, [r7, #64]	; 0x40
 8005584:	2301      	movs	r3, #1
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	f383 8810 	msr	PRIMASK, r3
}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2101      	movs	r1, #1
 800559c:	438a      	bics	r2, r1
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	f383 8810 	msr	PRIMASK, r3
}
 80055aa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	2120      	movs	r1, #32
 80055b2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	4013      	ands	r3, r2
 80055cc:	d018      	beq.n	8005600 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ce:	f3ef 8310 	mrs	r3, PRIMASK
 80055d2:	617b      	str	r3, [r7, #20]
  return(result);
 80055d4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d8:	2301      	movs	r3, #1
 80055da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f383 8810 	msr	PRIMASK, r3
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4928      	ldr	r1, [pc, #160]	; (8005690 <UART_RxISR_16BIT+0x1b4>)
 80055f0:	400a      	ands	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f383 8810 	msr	PRIMASK, r3
}
 80055fe:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	2b01      	cmp	r3, #1
 8005606:	d12f      	bne.n	8005668 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800560e:	f3ef 8310 	mrs	r3, PRIMASK
 8005612:	60bb      	str	r3, [r7, #8]
  return(result);
 8005614:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005616:	63bb      	str	r3, [r7, #56]	; 0x38
 8005618:	2301      	movs	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f383 8810 	msr	PRIMASK, r3
}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2110      	movs	r1, #16
 8005630:	438a      	bics	r2, r1
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f383 8810 	msr	PRIMASK, r3
}
 800563e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	2210      	movs	r2, #16
 8005648:	4013      	ands	r3, r2
 800564a:	2b10      	cmp	r3, #16
 800564c:	d103      	bne.n	8005656 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2210      	movs	r2, #16
 8005654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2258      	movs	r2, #88	; 0x58
 800565a:	5a9a      	ldrh	r2, [r3, r2]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	0011      	movs	r1, r2
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff f9f1 	bl	8004a48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005666:	e00c      	b.n	8005682 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	0018      	movs	r0, r3
 800566c:	f7fc fb4e 	bl	8001d0c <HAL_UART_RxCpltCallback>
}
 8005670:	e007      	b.n	8005682 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2108      	movs	r1, #8
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b014      	add	sp, #80	; 0x50
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	fffffedf 	.word	0xfffffedf
 8005690:	fbffffff 	.word	0xfbffffff

08005694 <kfifo_reset>:
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b002      	add	sp, #8
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
	return fifo->size;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b002      	add	sp, #8
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 80056c6:	b590      	push	{r4, r7, lr}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	1b1b      	subs	r3, r3, r4
}
 80056d8:	0018      	movs	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	b003      	add	sp, #12
 80056de:	bd90      	pop	{r4, r7, pc}

080056e0 <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 80056e0:	b590      	push	{r4, r7, lr}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7ff ffe1 	bl	80056b2 <kfifo_size>
 80056f0:	0004      	movs	r4, r0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7ff ffe6 	bl	80056c6 <kfifo_len>
 80056fa:	0003      	movs	r3, r0
 80056fc:	1ae3      	subs	r3, r4, r3
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b003      	add	sp, #12
 8005704:	bd90      	pop	{r4, r7, pc}

08005706 <__kfifo_add_out>:
/*
 * __kfifo_add_out internal helper function for updating the out offset
 */
static __inline void __kfifo_add_out(struct kfifo *fifo,
				unsigned int off)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
	fifo->out += off;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	18d2      	adds	r2, r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]
}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b002      	add	sp, #8
 8005722:	bd80      	pop	{r7, pc}

08005724 <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	18d2      	adds	r2, r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	46bd      	mov	sp, r7
 800573e:	b002      	add	sp, #8
 8005740:	bd80      	pop	{r7, pc}

08005742 <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	3b01      	subs	r3, #1
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	4013      	ands	r3, r2
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b002      	add	sp, #8
 800575c:	bd80      	pop	{r7, pc}

0800575e <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	0018      	movs	r0, r3
 800577a:	f7ff ff8b 	bl	8005694 <kfifo_reset>
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b004      	add	sp, #16
 8005784:	bd80      	pop	{r7, pc}

08005786 <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	18d2      	adds	r2, r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	0011      	movs	r1, r2
 80057a0:	0018      	movs	r0, r3
 80057a2:	f7ff ffce 	bl	8005742 <__kfifo_off>
 80057a6:	0003      	movs	r3, r0
 80057a8:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	1ad2      	subs	r2, r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d900      	bls.n	80057ba <__kfifo_in_data+0x34>
 80057b8:	0013      	movs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	18d3      	adds	r3, r2, r3
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 fdb6 	bl	800633a <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	18d1      	adds	r1, r2, r3
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	001a      	movs	r2, r3
 80057e0:	f000 fdab 	bl	800633a <memcpy>
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b006      	add	sp, #24
 80057ea:	bd80      	pop	{r7, pc}

080057ec <__kfifo_out_data>:

static __inline void __kfifo_out_data(struct kfifo *fifo,
		void *to, unsigned int len, unsigned int off)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->in index -before- we
	 * start removing bytes from the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->out + off);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	18d2      	adds	r2, r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	0011      	movs	r1, r2
 8005806:	0018      	movs	r0, r3
 8005808:	f7ff ff9b 	bl	8005742 <__kfifo_off>
 800580c:	0003      	movs	r3, r0
 800580e:	603b      	str	r3, [r7, #0]

	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - off);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	1ad2      	subs	r2, r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4293      	cmp	r3, r2
 800581c:	d900      	bls.n	8005820 <__kfifo_out_data+0x34>
 800581e:	0013      	movs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
	memcpy( (char*)to, fifo->buffer + off, l);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	18d1      	adds	r1, r2, r3
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 fd83 	bl	800633a <memcpy>

	/* then get the rest (if any) from the beginning of the buffer */
	memcpy( (char*)to + l, fifo->buffer, len - l);
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	18d0      	adds	r0, r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6819      	ldr	r1, [r3, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	001a      	movs	r2, r3
 8005846:	f000 fd78 	bl	800633a <memcpy>
}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	46bd      	mov	sp, r7
 800584e:	b006      	add	sp, #24
 8005850:	bd80      	pop	{r7, pc}

08005852 <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	0018      	movs	r0, r3
 8005862:	f7ff ff3d 	bl	80056e0 <kfifo_avail>
 8005866:	0002      	movs	r2, r0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4293      	cmp	r3, r2
 800586c:	d905      	bls.n	800587a <kfifo_in+0x28>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	0018      	movs	r0, r3
 8005872:	f7ff ff35 	bl	80056e0 <kfifo_avail>
 8005876:	0003      	movs	r3, r0
 8005878:	e000      	b.n	800587c <kfifo_in+0x2a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	2300      	movs	r3, #0
 8005886:	f7ff ff7e 	bl	8005786 <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff ff47 	bl	8005724 <__kfifo_add_in>
	return len;
 8005896:	687b      	ldr	r3, [r7, #4]
}
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b004      	add	sp, #16
 800589e:	bd80      	pop	{r7, pc}

080058a0 <kfifo_out>:
 *
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
	len = min(kfifo_len(fifo), len);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7ff ff09 	bl	80056c6 <kfifo_len>
 80058b4:	0002      	movs	r2, r0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d905      	bls.n	80058c8 <kfifo_out+0x28>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff ff01 	bl	80056c6 <kfifo_len>
 80058c4:	0003      	movs	r3, r0
 80058c6:	e000      	b.n	80058ca <kfifo_out+0x2a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	607b      	str	r3, [r7, #4]

	__kfifo_out_data(fifo, to, len, 0);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	2300      	movs	r3, #0
 80058d4:	f7ff ff8a 	bl	80057ec <__kfifo_out_data>
	__kfifo_add_out(fifo, len);
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	0011      	movs	r1, r2
 80058de:	0018      	movs	r0, r3
 80058e0:	f7ff ff11 	bl	8005706 <__kfifo_add_out>

	return len;
 80058e4:	687b      	ldr	r3, [r7, #4]
}
 80058e6:	0018      	movs	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b004      	add	sp, #16
 80058ec:	bd80      	pop	{r7, pc}

080058ee <mq_init>:
 * 
 * @param None
 * @return struct msgQueue   
 */
void mq_init(struct msgQueue *queue)
{
 80058ee:	b590      	push	{r4, r7, lr}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
    struct msgQueue *mq = (struct msgQueue *)malloc(sizeof(struct msgQueue));
 80058f6:	2090      	movs	r0, #144	; 0x90
 80058f8:	f000 f9b6 	bl	8005c68 <malloc>
 80058fc:	0003      	movs	r3, r0
 80058fe:	60bb      	str	r3, [r7, #8]
    if (mq == NULL)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <mq_init+0x1c>
    {
    	queue = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
    }
    mq->lock = 0;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
    mq->size = MSGQUEUESIZE;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2210      	movs	r2, #16
 8005914:	605a      	str	r2, [r3, #4]
    mq->head = 0;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2200      	movs	r2, #0
 800591a:	609a      	str	r2, [r3, #8]
    mq->tail = 0;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2200      	movs	r2, #0
 8005920:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 8005922:	230f      	movs	r3, #15
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e010      	b.n	800594e <mq_init+0x60>
    {
        memset(&(mq->list[i]), 0, sizeof(struct msgQueue));
 800592c:	240f      	movs	r4, #15
 800592e:	193b      	adds	r3, r7, r4
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	3302      	adds	r3, #2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	18d3      	adds	r3, r2, r3
 800593a:	2290      	movs	r2, #144	; 0x90
 800593c:	2100      	movs	r1, #0
 800593e:	0018      	movs	r0, r3
 8005940:	f000 fc66 	bl	8006210 <memset>
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 8005944:	193b      	adds	r3, r7, r4
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	193b      	adds	r3, r7, r4
 800594a:	3201      	adds	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	230f      	movs	r3, #15
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b0f      	cmp	r3, #15
 8005956:	d9e9      	bls.n	800592c <mq_init+0x3e>
    }
}
 8005958:	46c0      	nop			; (mov r8, r8)
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	46bd      	mov	sp, r7
 800595e:	b005      	add	sp, #20
 8005960:	bd90      	pop	{r4, r7, pc}

08005962 <mq_push>:
 * @param queue 
 * @param msg 
 * @return uint32_t 
 */
uint32_t mq_push(struct msgQueue *queue, struct msg *msg)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
    if (queue == NULL || msg == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <mq_push+0x16>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <mq_push+0x1a>
    {
        return 0;
 8005978:	2300      	movs	r3, #0
 800597a:	e02a      	b.n	80059d2 <mq_push+0x70>
//    if ((queue->head - queue->tail) == MSGQUEUESIZE - 1)
//    {
//        queue->head -= MSGQUEUESIZE - 1;
//    }

    uint8_t index = queue->head & (MSGQUEUESIZE - 1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	200f      	movs	r0, #15
 8005984:	183b      	adds	r3, r7, r0
 8005986:	210f      	movs	r1, #15
 8005988:	400a      	ands	r2, r1
 800598a:	701a      	strb	r2, [r3, #0]
    queue->list[index].type = msg->type;
 800598c:	183b      	adds	r3, r7, r0
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3202      	adds	r2, #2
 8005998:	00d2      	lsls	r2, r2, #3
 800599a:	50d1      	str	r1, [r2, r3]
    queue->list[index].data = msg->data;
 800599c:	183b      	adds	r3, r7, r0
 800599e:	7818      	ldrb	r0, [r3, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	1c83      	adds	r3, r0, #2
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	18cb      	adds	r3, r1, r3
 80059ac:	3304      	adds	r3, #4
 80059ae:	601a      	str	r2, [r3, #0]
    queue->head++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
    if (queue->head >= MSGQUEUESIZE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b0f      	cmp	r3, #15
 80059c0:	d905      	bls.n	80059ce <mq_push+0x6c>
    {
    	queue->head -= MSGQUEUESIZE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	3b10      	subs	r3, #16
 80059c8:	001a      	movs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	609a      	str	r2, [r3, #8]
    }
    return queue->head;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
}
 80059d2:	0018      	movs	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b004      	add	sp, #16
 80059d8:	bd80      	pop	{r7, pc}

080059da <mq_pop>:
 * 
 * @param queue 
 * @return struct msg* 
 */
struct msg *mq_pop(struct msgQueue *queue)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <mq_pop+0x12>
    {
        return NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e022      	b.n	8005a32 <mq_pop+0x58>
    }

    if (queue->head == queue->tail)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d101      	bne.n	80059fc <mq_pop+0x22>
    {
        return NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e01a      	b.n	8005a32 <mq_pop+0x58>
    }
    
    uint8_t index = queue->tail & (MSGQUEUESIZE - 1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	230f      	movs	r3, #15
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	210f      	movs	r1, #15
 8005a08:	400a      	ands	r2, r1
 8005a0a:	701a      	strb	r2, [r3, #0]
    queue->tail++;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60da      	str	r2, [r3, #12]
    if (queue->tail == MSGQUEUESIZE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d102      	bne.n	8005a24 <mq_pop+0x4a>
	{
		queue->tail = 0;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	60da      	str	r2, [r3, #12]
	}
    return &(queue->list[index]);
 8005a24:	230f      	movs	r3, #15
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	3302      	adds	r3, #2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	18d3      	adds	r3, r2, r3
}
 8005a32:	0018      	movs	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b004      	add	sp, #16
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <stateM_init>:
static struct transition *getTransition( struct stateMachine *stateMachine,
      struct state *state, struct event *const event );

void stateM_init( struct stateMachine *fsm,
      struct state *initialState, struct state *errorState )
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
   if ( !fsm )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <stateM_init+0x26>
      return;

   fsm->currentState = initialState;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	601a      	str	r2, [r3, #0]
   fsm->previousState = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]
   fsm->errorState = errorState;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	609a      	str	r2, [r3, #8]
 8005a5e:	e000      	b.n	8005a62 <stateM_init+0x28>
      return;
 8005a60:	46c0      	nop			; (mov r8, r8)
}
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b004      	add	sp, #16
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <stateM_handleEvent>:

int stateM_handleEvent( struct stateMachine *fsm,
      struct event *event )
{
 8005a68:	b590      	push	{r4, r7, lr}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
   if ( !fsm || !event )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <stateM_handleEvent+0x16>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <stateM_handleEvent+0x1c>
      return stateM_errArg;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	425b      	negs	r3, r3
 8005a82:	e093      	b.n	8005bac <stateM_handleEvent+0x144>

   if ( !fsm->currentState )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d108      	bne.n	8005a9e <stateM_handleEvent+0x36>
   {
      goToErrorState( fsm, event );
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0011      	movs	r1, r2
 8005a92:	0018      	movs	r0, r3
 8005a94:	f000 f88e 	bl	8005bb4 <goToErrorState>
      return stateM_errorStateReached;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	425b      	negs	r3, r3
 8005a9c:	e086      	b.n	8005bac <stateM_handleEvent+0x144>
   }

   if ( !fsm->currentState->numTransitions )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <stateM_handleEvent+0x44>
      return stateM_noStateChange;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e07f      	b.n	8005bac <stateM_handleEvent+0x144>

   struct state *nextState = fsm->currentState;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]
   do {
      struct transition *transition = getTransition( fsm, nextState, event );
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 f89e 	bl	8005bfa <getTransition>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	60bb      	str	r3, [r7, #8]

      /* If there were no transitions for the given event for the current
       * state, check if there are any transitions for any of the parent
       * states (if any): */
      if ( !transition )
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <stateM_handleEvent+0x68>
      {
         nextState = nextState->parentState;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]
         continue;
 8005ace:	e069      	b.n	8005ba4 <stateM_handleEvent+0x13c>
      }

      /* A transition must have a next state defined. If the user has not
       * defined the next state, go to error state: */
      if ( !transition->nextState )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d108      	bne.n	8005aea <stateM_handleEvent+0x82>
      {
         goToErrorState( fsm, event );
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	0011      	movs	r1, r2
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f000 f868 	bl	8005bb4 <goToErrorState>
         return stateM_errorStateReached;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	425b      	negs	r3, r3
 8005ae8:	e060      	b.n	8005bac <stateM_handleEvent+0x144>
      }

      nextState = transition->nextState;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	60fb      	str	r3, [r7, #12]

      /* If the new state is a parent state, enter its entry state (if it has
       * one). Step down through the whole family tree until a state without
       * an entry state is found: */
      while ( nextState->entryState )
 8005af0:	e002      	b.n	8005af8 <stateM_handleEvent+0x90>
         nextState = nextState->entryState;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f8      	bne.n	8005af2 <stateM_handleEvent+0x8a>

      /* Run exit action only if the current state is left (only if it does
       * not return to itself): */
      if ( nextState != fsm->currentState && fsm->currentState->exitAction )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d00d      	beq.n	8005b26 <stateM_handleEvent+0xbe>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <stateM_handleEvent+0xbe>
         fsm->currentState->exitAction( fsm->currentState->data, event );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	0018      	movs	r0, r3
 8005b24:	4790      	blx	r2

      /* Run transition action (if any): */
      if ( transition->action )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <stateM_handleEvent+0xda>
         transition->action( fsm->currentState->data, event, nextState->
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	68dc      	ldr	r4, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6918      	ldr	r0, [r3, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	0019      	movs	r1, r3
 8005b40:	47a0      	blx	r4
               data );

      /* Call the new state's entry action if it has any (only if state does
       * not return to itself): */
      if ( nextState != fsm->currentState && nextState->entryAction )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d00a      	beq.n	8005b62 <stateM_handleEvent+0xfa>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d006      	beq.n	8005b62 <stateM_handleEvent+0xfa>
         nextState->entryAction( nextState->data, event );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	4790      	blx	r2

      fsm->previousState = fsm->currentState;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	605a      	str	r2, [r3, #4]
      fsm->currentState = nextState;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	601a      	str	r2, [r3, #0]
      
      /* If the state returned to itself: */
      if ( fsm->currentState == fsm->previousState )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d101      	bne.n	8005b80 <stateM_handleEvent+0x118>
         return stateM_stateLoopSelf;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e015      	b.n	8005bac <stateM_handleEvent+0x144>

      if ( fsm->currentState == fsm->errorState )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d102      	bne.n	8005b92 <stateM_handleEvent+0x12a>
         return stateM_errorStateReached;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	425b      	negs	r3, r3
 8005b90:	e00c      	b.n	8005bac <stateM_handleEvent+0x144>

      /* If the new state is a final state, notify user that the state
       * machine has stopped: */
      if ( !fsm->currentState->numTransitions )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <stateM_handleEvent+0x138>
         return stateM_finalStateReached;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e005      	b.n	8005bac <stateM_handleEvent+0x144>

      return stateM_stateChanged;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e003      	b.n	8005bac <stateM_handleEvent+0x144>
   } while ( nextState );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d183      	bne.n	8005ab2 <stateM_handleEvent+0x4a>

   return stateM_noStateChange;
 8005baa:	2302      	movs	r3, #2
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b005      	add	sp, #20
 8005bb2:	bd90      	pop	{r4, r7, pc}

08005bb4 <goToErrorState>:
}


static void goToErrorState( struct stateMachine *fsm,
      struct event *const event )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
   fsm->previousState = fsm->currentState;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	605a      	str	r2, [r3, #4]
   fsm->currentState = fsm->errorState;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]

   if ( fsm->currentState && fsm->currentState->entryAction )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <goToErrorState+0x3e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <goToErrorState+0x3e>
      fsm->currentState->entryAction( fsm->currentState->data, event );
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	0018      	movs	r0, r3
 8005bf0:	4790      	blx	r2
}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b002      	add	sp, #8
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <getTransition>:

static struct transition *getTransition( struct stateMachine *fsm,
      struct state *state, struct event *const event )
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
   size_t i;

   for ( i = 0; i < state->numTransitions; ++i )
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e022      	b.n	8005c52 <getTransition+0x58>
   {
      struct transition *t = &state->transitions[ i ];
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6899      	ldr	r1, [r3, #8]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	0013      	movs	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	189b      	adds	r3, r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	18cb      	adds	r3, r1, r3
 8005c1c:	613b      	str	r3, [r7, #16]

      /* A transition for the given event has been found: */
      if ( t->eventType == event->type )
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d110      	bne.n	8005c4c <getTransition+0x52>
      {
         if ( !t->guard )
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <getTransition+0x3c>
            return t;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	e013      	b.n	8005c5e <getTransition+0x64>
         /* If transition is guarded, ensure that the condition is held: */
         else if ( t->guard( t->condition, event ) )
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	0018      	movs	r0, r3
 8005c42:	4790      	blx	r2
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d001      	beq.n	8005c4c <getTransition+0x52>
            return t;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	e008      	b.n	8005c5e <getTransition+0x64>
   for ( i = 0; i < state->numTransitions; ++i )
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3d7      	bcc.n	8005c0c <getTransition+0x12>
      }
   }

   /* No transitions found for given event for given state: */
   return NULL;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	0018      	movs	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b006      	add	sp, #24
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <malloc>:
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <malloc+0x10>)
 8005c6c:	0001      	movs	r1, r0
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	f000 f826 	bl	8005cc0 <_malloc_r>
 8005c74:	bd10      	pop	{r4, pc}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	20000150 	.word	0x20000150

08005c7c <sbrk_aligned>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	4e0f      	ldr	r6, [pc, #60]	; (8005cbc <sbrk_aligned+0x40>)
 8005c80:	000d      	movs	r5, r1
 8005c82:	6831      	ldr	r1, [r6, #0]
 8005c84:	0004      	movs	r4, r0
 8005c86:	2900      	cmp	r1, #0
 8005c88:	d102      	bne.n	8005c90 <sbrk_aligned+0x14>
 8005c8a:	f000 fb03 	bl	8006294 <_sbrk_r>
 8005c8e:	6030      	str	r0, [r6, #0]
 8005c90:	0029      	movs	r1, r5
 8005c92:	0020      	movs	r0, r4
 8005c94:	f000 fafe 	bl	8006294 <_sbrk_r>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d00a      	beq.n	8005cb2 <sbrk_aligned+0x36>
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	1cc5      	adds	r5, r0, #3
 8005ca0:	439d      	bics	r5, r3
 8005ca2:	42a8      	cmp	r0, r5
 8005ca4:	d007      	beq.n	8005cb6 <sbrk_aligned+0x3a>
 8005ca6:	1a29      	subs	r1, r5, r0
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f000 faf3 	bl	8006294 <_sbrk_r>
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d101      	bne.n	8005cb6 <sbrk_aligned+0x3a>
 8005cb2:	2501      	movs	r5, #1
 8005cb4:	426d      	negs	r5, r5
 8005cb6:	0028      	movs	r0, r5
 8005cb8:	bd70      	pop	{r4, r5, r6, pc}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	20000800 	.word	0x20000800

08005cc0 <_malloc_r>:
 8005cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	1ccb      	adds	r3, r1, #3
 8005cc6:	4393      	bics	r3, r2
 8005cc8:	3308      	adds	r3, #8
 8005cca:	0006      	movs	r6, r0
 8005ccc:	001f      	movs	r7, r3
 8005cce:	2b0c      	cmp	r3, #12
 8005cd0:	d238      	bcs.n	8005d44 <_malloc_r+0x84>
 8005cd2:	270c      	movs	r7, #12
 8005cd4:	42b9      	cmp	r1, r7
 8005cd6:	d837      	bhi.n	8005d48 <_malloc_r+0x88>
 8005cd8:	0030      	movs	r0, r6
 8005cda:	f000 f873 	bl	8005dc4 <__malloc_lock>
 8005cde:	4b38      	ldr	r3, [pc, #224]	; (8005dc0 <_malloc_r+0x100>)
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	001c      	movs	r4, r3
 8005ce6:	2c00      	cmp	r4, #0
 8005ce8:	d133      	bne.n	8005d52 <_malloc_r+0x92>
 8005cea:	0039      	movs	r1, r7
 8005cec:	0030      	movs	r0, r6
 8005cee:	f7ff ffc5 	bl	8005c7c <sbrk_aligned>
 8005cf2:	0004      	movs	r4, r0
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d15e      	bne.n	8005db6 <_malloc_r+0xf6>
 8005cf8:	9b00      	ldr	r3, [sp, #0]
 8005cfa:	681c      	ldr	r4, [r3, #0]
 8005cfc:	0025      	movs	r5, r4
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	d14e      	bne.n	8005da0 <_malloc_r+0xe0>
 8005d02:	2c00      	cmp	r4, #0
 8005d04:	d051      	beq.n	8005daa <_malloc_r+0xea>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	0029      	movs	r1, r5
 8005d0a:	18e3      	adds	r3, r4, r3
 8005d0c:	0030      	movs	r0, r6
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	f000 fac0 	bl	8006294 <_sbrk_r>
 8005d14:	9b01      	ldr	r3, [sp, #4]
 8005d16:	4283      	cmp	r3, r0
 8005d18:	d147      	bne.n	8005daa <_malloc_r+0xea>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	0030      	movs	r0, r6
 8005d1e:	1aff      	subs	r7, r7, r3
 8005d20:	0039      	movs	r1, r7
 8005d22:	f7ff ffab 	bl	8005c7c <sbrk_aligned>
 8005d26:	3001      	adds	r0, #1
 8005d28:	d03f      	beq.n	8005daa <_malloc_r+0xea>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	19db      	adds	r3, r3, r7
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	9b00      	ldr	r3, [sp, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d040      	beq.n	8005dba <_malloc_r+0xfa>
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	42a2      	cmp	r2, r4
 8005d3c:	d133      	bne.n	8005da6 <_malloc_r+0xe6>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	605a      	str	r2, [r3, #4]
 8005d42:	e014      	b.n	8005d6e <_malloc_r+0xae>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dac5      	bge.n	8005cd4 <_malloc_r+0x14>
 8005d48:	230c      	movs	r3, #12
 8005d4a:	2500      	movs	r5, #0
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	0028      	movs	r0, r5
 8005d50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d52:	6821      	ldr	r1, [r4, #0]
 8005d54:	1bc9      	subs	r1, r1, r7
 8005d56:	d420      	bmi.n	8005d9a <_malloc_r+0xda>
 8005d58:	290b      	cmp	r1, #11
 8005d5a:	d918      	bls.n	8005d8e <_malloc_r+0xce>
 8005d5c:	19e2      	adds	r2, r4, r7
 8005d5e:	6027      	str	r7, [r4, #0]
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d112      	bne.n	8005d8a <_malloc_r+0xca>
 8005d64:	9b00      	ldr	r3, [sp, #0]
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	6011      	str	r1, [r2, #0]
 8005d6c:	6053      	str	r3, [r2, #4]
 8005d6e:	0030      	movs	r0, r6
 8005d70:	0025      	movs	r5, r4
 8005d72:	f000 f82f 	bl	8005dd4 <__malloc_unlock>
 8005d76:	2207      	movs	r2, #7
 8005d78:	350b      	adds	r5, #11
 8005d7a:	1d23      	adds	r3, r4, #4
 8005d7c:	4395      	bics	r5, r2
 8005d7e:	1aea      	subs	r2, r5, r3
 8005d80:	429d      	cmp	r5, r3
 8005d82:	d0e4      	beq.n	8005d4e <_malloc_r+0x8e>
 8005d84:	1b5b      	subs	r3, r3, r5
 8005d86:	50a3      	str	r3, [r4, r2]
 8005d88:	e7e1      	b.n	8005d4e <_malloc_r+0x8e>
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	e7ec      	b.n	8005d68 <_malloc_r+0xa8>
 8005d8e:	6862      	ldr	r2, [r4, #4]
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d1d5      	bne.n	8005d40 <_malloc_r+0x80>
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e7e9      	b.n	8005d6e <_malloc_r+0xae>
 8005d9a:	0023      	movs	r3, r4
 8005d9c:	6864      	ldr	r4, [r4, #4]
 8005d9e:	e7a2      	b.n	8005ce6 <_malloc_r+0x26>
 8005da0:	002c      	movs	r4, r5
 8005da2:	686d      	ldr	r5, [r5, #4]
 8005da4:	e7ab      	b.n	8005cfe <_malloc_r+0x3e>
 8005da6:	0013      	movs	r3, r2
 8005da8:	e7c4      	b.n	8005d34 <_malloc_r+0x74>
 8005daa:	230c      	movs	r3, #12
 8005dac:	0030      	movs	r0, r6
 8005dae:	6033      	str	r3, [r6, #0]
 8005db0:	f000 f810 	bl	8005dd4 <__malloc_unlock>
 8005db4:	e7cb      	b.n	8005d4e <_malloc_r+0x8e>
 8005db6:	6027      	str	r7, [r4, #0]
 8005db8:	e7d9      	b.n	8005d6e <_malloc_r+0xae>
 8005dba:	605b      	str	r3, [r3, #4]
 8005dbc:	deff      	udf	#255	; 0xff
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	200007fc 	.word	0x200007fc

08005dc4 <__malloc_lock>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	4802      	ldr	r0, [pc, #8]	; (8005dd0 <__malloc_lock+0xc>)
 8005dc8:	f000 fab5 	bl	8006336 <__retarget_lock_acquire_recursive>
 8005dcc:	bd10      	pop	{r4, pc}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	20000944 	.word	0x20000944

08005dd4 <__malloc_unlock>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	4802      	ldr	r0, [pc, #8]	; (8005de0 <__malloc_unlock+0xc>)
 8005dd8:	f000 faae 	bl	8006338 <__retarget_lock_release_recursive>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	20000944 	.word	0x20000944

08005de4 <std>:
 8005de4:	2300      	movs	r3, #0
 8005de6:	b510      	push	{r4, lr}
 8005de8:	0004      	movs	r4, r0
 8005dea:	6003      	str	r3, [r0, #0]
 8005dec:	6043      	str	r3, [r0, #4]
 8005dee:	6083      	str	r3, [r0, #8]
 8005df0:	8181      	strh	r1, [r0, #12]
 8005df2:	6643      	str	r3, [r0, #100]	; 0x64
 8005df4:	81c2      	strh	r2, [r0, #14]
 8005df6:	6103      	str	r3, [r0, #16]
 8005df8:	6143      	str	r3, [r0, #20]
 8005dfa:	6183      	str	r3, [r0, #24]
 8005dfc:	0019      	movs	r1, r3
 8005dfe:	2208      	movs	r2, #8
 8005e00:	305c      	adds	r0, #92	; 0x5c
 8005e02:	f000 fa05 	bl	8006210 <memset>
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <std+0x50>)
 8005e08:	6224      	str	r4, [r4, #32]
 8005e0a:	6263      	str	r3, [r4, #36]	; 0x24
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <std+0x54>)
 8005e0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <std+0x58>)
 8005e12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e14:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <std+0x5c>)
 8005e16:	6323      	str	r3, [r4, #48]	; 0x30
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <std+0x60>)
 8005e1a:	429c      	cmp	r4, r3
 8005e1c:	d005      	beq.n	8005e2a <std+0x46>
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <std+0x64>)
 8005e20:	429c      	cmp	r4, r3
 8005e22:	d002      	beq.n	8005e2a <std+0x46>
 8005e24:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <std+0x68>)
 8005e26:	429c      	cmp	r4, r3
 8005e28:	d103      	bne.n	8005e32 <std+0x4e>
 8005e2a:	0020      	movs	r0, r4
 8005e2c:	3058      	adds	r0, #88	; 0x58
 8005e2e:	f000 fa81 	bl	8006334 <__retarget_lock_init_recursive>
 8005e32:	bd10      	pop	{r4, pc}
 8005e34:	0800602d 	.word	0x0800602d
 8005e38:	08006055 	.word	0x08006055
 8005e3c:	0800608d 	.word	0x0800608d
 8005e40:	080060b9 	.word	0x080060b9
 8005e44:	20000804 	.word	0x20000804
 8005e48:	2000086c 	.word	0x2000086c
 8005e4c:	200008d4 	.word	0x200008d4

08005e50 <stdio_exit_handler>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	4a03      	ldr	r2, [pc, #12]	; (8005e60 <stdio_exit_handler+0x10>)
 8005e54:	4903      	ldr	r1, [pc, #12]	; (8005e64 <stdio_exit_handler+0x14>)
 8005e56:	4804      	ldr	r0, [pc, #16]	; (8005e68 <stdio_exit_handler+0x18>)
 8005e58:	f000 f86c 	bl	8005f34 <_fwalk_sglue>
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	200000f8 	.word	0x200000f8
 8005e64:	080064f5 	.word	0x080064f5
 8005e68:	20000104 	.word	0x20000104

08005e6c <cleanup_stdio>:
 8005e6c:	6841      	ldr	r1, [r0, #4]
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <cleanup_stdio+0x30>)
 8005e70:	b510      	push	{r4, lr}
 8005e72:	0004      	movs	r4, r0
 8005e74:	4299      	cmp	r1, r3
 8005e76:	d001      	beq.n	8005e7c <cleanup_stdio+0x10>
 8005e78:	f000 fb3c 	bl	80064f4 <_fflush_r>
 8005e7c:	68a1      	ldr	r1, [r4, #8]
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <cleanup_stdio+0x34>)
 8005e80:	4299      	cmp	r1, r3
 8005e82:	d002      	beq.n	8005e8a <cleanup_stdio+0x1e>
 8005e84:	0020      	movs	r0, r4
 8005e86:	f000 fb35 	bl	80064f4 <_fflush_r>
 8005e8a:	68e1      	ldr	r1, [r4, #12]
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <cleanup_stdio+0x38>)
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	d002      	beq.n	8005e98 <cleanup_stdio+0x2c>
 8005e92:	0020      	movs	r0, r4
 8005e94:	f000 fb2e 	bl	80064f4 <_fflush_r>
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	20000804 	.word	0x20000804
 8005ea0:	2000086c 	.word	0x2000086c
 8005ea4:	200008d4 	.word	0x200008d4

08005ea8 <global_stdio_init.part.0>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <global_stdio_init.part.0+0x28>)
 8005eac:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <global_stdio_init.part.0+0x2c>)
 8005eae:	2104      	movs	r1, #4
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	4809      	ldr	r0, [pc, #36]	; (8005ed8 <global_stdio_init.part.0+0x30>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f7ff ff95 	bl	8005de4 <std>
 8005eba:	2201      	movs	r2, #1
 8005ebc:	2109      	movs	r1, #9
 8005ebe:	4807      	ldr	r0, [pc, #28]	; (8005edc <global_stdio_init.part.0+0x34>)
 8005ec0:	f7ff ff90 	bl	8005de4 <std>
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	2112      	movs	r1, #18
 8005ec8:	4805      	ldr	r0, [pc, #20]	; (8005ee0 <global_stdio_init.part.0+0x38>)
 8005eca:	f7ff ff8b 	bl	8005de4 <std>
 8005ece:	bd10      	pop	{r4, pc}
 8005ed0:	2000093c 	.word	0x2000093c
 8005ed4:	08005e51 	.word	0x08005e51
 8005ed8:	20000804 	.word	0x20000804
 8005edc:	2000086c 	.word	0x2000086c
 8005ee0:	200008d4 	.word	0x200008d4

08005ee4 <__sfp_lock_acquire>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	4802      	ldr	r0, [pc, #8]	; (8005ef0 <__sfp_lock_acquire+0xc>)
 8005ee8:	f000 fa25 	bl	8006336 <__retarget_lock_acquire_recursive>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	20000945 	.word	0x20000945

08005ef4 <__sfp_lock_release>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4802      	ldr	r0, [pc, #8]	; (8005f00 <__sfp_lock_release+0xc>)
 8005ef8:	f000 fa1e 	bl	8006338 <__retarget_lock_release_recursive>
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	20000945 	.word	0x20000945

08005f04 <__sinit>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	0004      	movs	r4, r0
 8005f08:	f7ff ffec 	bl	8005ee4 <__sfp_lock_acquire>
 8005f0c:	6a23      	ldr	r3, [r4, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <__sinit+0x14>
 8005f12:	f7ff ffef 	bl	8005ef4 <__sfp_lock_release>
 8005f16:	bd10      	pop	{r4, pc}
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <__sinit+0x28>)
 8005f1a:	6223      	str	r3, [r4, #32]
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <__sinit+0x2c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f6      	bne.n	8005f12 <__sinit+0xe>
 8005f24:	f7ff ffc0 	bl	8005ea8 <global_stdio_init.part.0>
 8005f28:	e7f3      	b.n	8005f12 <__sinit+0xe>
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	08005e6d 	.word	0x08005e6d
 8005f30:	2000093c 	.word	0x2000093c

08005f34 <_fwalk_sglue>:
 8005f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f36:	0014      	movs	r4, r2
 8005f38:	2600      	movs	r6, #0
 8005f3a:	9000      	str	r0, [sp, #0]
 8005f3c:	9101      	str	r1, [sp, #4]
 8005f3e:	68a5      	ldr	r5, [r4, #8]
 8005f40:	6867      	ldr	r7, [r4, #4]
 8005f42:	3f01      	subs	r7, #1
 8005f44:	d504      	bpl.n	8005f50 <_fwalk_sglue+0x1c>
 8005f46:	6824      	ldr	r4, [r4, #0]
 8005f48:	2c00      	cmp	r4, #0
 8005f4a:	d1f8      	bne.n	8005f3e <_fwalk_sglue+0xa>
 8005f4c:	0030      	movs	r0, r6
 8005f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f50:	89ab      	ldrh	r3, [r5, #12]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d908      	bls.n	8005f68 <_fwalk_sglue+0x34>
 8005f56:	220e      	movs	r2, #14
 8005f58:	5eab      	ldrsh	r3, [r5, r2]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	d004      	beq.n	8005f68 <_fwalk_sglue+0x34>
 8005f5e:	0029      	movs	r1, r5
 8005f60:	9800      	ldr	r0, [sp, #0]
 8005f62:	9b01      	ldr	r3, [sp, #4]
 8005f64:	4798      	blx	r3
 8005f66:	4306      	orrs	r6, r0
 8005f68:	3568      	adds	r5, #104	; 0x68
 8005f6a:	e7ea      	b.n	8005f42 <_fwalk_sglue+0xe>

08005f6c <_puts_r>:
 8005f6c:	6a03      	ldr	r3, [r0, #32]
 8005f6e:	b570      	push	{r4, r5, r6, lr}
 8005f70:	0005      	movs	r5, r0
 8005f72:	000e      	movs	r6, r1
 8005f74:	6884      	ldr	r4, [r0, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <_puts_r+0x12>
 8005f7a:	f7ff ffc3 	bl	8005f04 <__sinit>
 8005f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f80:	07db      	lsls	r3, r3, #31
 8005f82:	d405      	bmi.n	8005f90 <_puts_r+0x24>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	059b      	lsls	r3, r3, #22
 8005f88:	d402      	bmi.n	8005f90 <_puts_r+0x24>
 8005f8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f8c:	f000 f9d3 	bl	8006336 <__retarget_lock_acquire_recursive>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	071b      	lsls	r3, r3, #28
 8005f94:	d502      	bpl.n	8005f9c <_puts_r+0x30>
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d11f      	bne.n	8005fdc <_puts_r+0x70>
 8005f9c:	0021      	movs	r1, r4
 8005f9e:	0028      	movs	r0, r5
 8005fa0:	f000 f8d2 	bl	8006148 <__swsetup_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d019      	beq.n	8005fdc <_puts_r+0x70>
 8005fa8:	2501      	movs	r5, #1
 8005faa:	426d      	negs	r5, r5
 8005fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d405      	bmi.n	8005fbe <_puts_r+0x52>
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	059b      	lsls	r3, r3, #22
 8005fb6:	d402      	bmi.n	8005fbe <_puts_r+0x52>
 8005fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fba:	f000 f9bd 	bl	8006338 <__retarget_lock_release_recursive>
 8005fbe:	0028      	movs	r0, r5
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	60a3      	str	r3, [r4, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da04      	bge.n	8005fd4 <_puts_r+0x68>
 8005fca:	69a2      	ldr	r2, [r4, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	dc16      	bgt.n	8005ffe <_puts_r+0x92>
 8005fd0:	290a      	cmp	r1, #10
 8005fd2:	d014      	beq.n	8005ffe <_puts_r+0x92>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	6022      	str	r2, [r4, #0]
 8005fda:	7019      	strb	r1, [r3, #0]
 8005fdc:	68a3      	ldr	r3, [r4, #8]
 8005fde:	7831      	ldrb	r1, [r6, #0]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d1ed      	bne.n	8005fc2 <_puts_r+0x56>
 8005fe6:	60a3      	str	r3, [r4, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da0f      	bge.n	800600c <_puts_r+0xa0>
 8005fec:	0028      	movs	r0, r5
 8005fee:	0022      	movs	r2, r4
 8005ff0:	310a      	adds	r1, #10
 8005ff2:	f000 f867 	bl	80060c4 <__swbuf_r>
 8005ff6:	250a      	movs	r5, #10
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d1d7      	bne.n	8005fac <_puts_r+0x40>
 8005ffc:	e7d4      	b.n	8005fa8 <_puts_r+0x3c>
 8005ffe:	0022      	movs	r2, r4
 8006000:	0028      	movs	r0, r5
 8006002:	f000 f85f 	bl	80060c4 <__swbuf_r>
 8006006:	3001      	adds	r0, #1
 8006008:	d1e8      	bne.n	8005fdc <_puts_r+0x70>
 800600a:	e7cd      	b.n	8005fa8 <_puts_r+0x3c>
 800600c:	250a      	movs	r5, #10
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	6022      	str	r2, [r4, #0]
 8006014:	701d      	strb	r5, [r3, #0]
 8006016:	e7c9      	b.n	8005fac <_puts_r+0x40>

08006018 <puts>:
 8006018:	b510      	push	{r4, lr}
 800601a:	4b03      	ldr	r3, [pc, #12]	; (8006028 <puts+0x10>)
 800601c:	0001      	movs	r1, r0
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	f7ff ffa4 	bl	8005f6c <_puts_r>
 8006024:	bd10      	pop	{r4, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	20000150 	.word	0x20000150

0800602c <__sread>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	000c      	movs	r4, r1
 8006030:	250e      	movs	r5, #14
 8006032:	5f49      	ldrsh	r1, [r1, r5]
 8006034:	f000 f91a 	bl	800626c <_read_r>
 8006038:	2800      	cmp	r0, #0
 800603a:	db03      	blt.n	8006044 <__sread+0x18>
 800603c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800603e:	181b      	adds	r3, r3, r0
 8006040:	6563      	str	r3, [r4, #84]	; 0x54
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	4a02      	ldr	r2, [pc, #8]	; (8006050 <__sread+0x24>)
 8006048:	4013      	ands	r3, r2
 800604a:	81a3      	strh	r3, [r4, #12]
 800604c:	e7f9      	b.n	8006042 <__sread+0x16>
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	ffffefff 	.word	0xffffefff

08006054 <__swrite>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	001f      	movs	r7, r3
 8006058:	898b      	ldrh	r3, [r1, #12]
 800605a:	0005      	movs	r5, r0
 800605c:	000c      	movs	r4, r1
 800605e:	0016      	movs	r6, r2
 8006060:	05db      	lsls	r3, r3, #23
 8006062:	d505      	bpl.n	8006070 <__swrite+0x1c>
 8006064:	230e      	movs	r3, #14
 8006066:	5ec9      	ldrsh	r1, [r1, r3]
 8006068:	2200      	movs	r2, #0
 800606a:	2302      	movs	r3, #2
 800606c:	f000 f8ea 	bl	8006244 <_lseek_r>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	4a05      	ldr	r2, [pc, #20]	; (8006088 <__swrite+0x34>)
 8006074:	0028      	movs	r0, r5
 8006076:	4013      	ands	r3, r2
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	0032      	movs	r2, r6
 800607c:	230e      	movs	r3, #14
 800607e:	5ee1      	ldrsh	r1, [r4, r3]
 8006080:	003b      	movs	r3, r7
 8006082:	f000 f919 	bl	80062b8 <_write_r>
 8006086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006088:	ffffefff 	.word	0xffffefff

0800608c <__sseek>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	000c      	movs	r4, r1
 8006090:	250e      	movs	r5, #14
 8006092:	5f49      	ldrsh	r1, [r1, r5]
 8006094:	f000 f8d6 	bl	8006244 <_lseek_r>
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	1c42      	adds	r2, r0, #1
 800609c:	d103      	bne.n	80060a6 <__sseek+0x1a>
 800609e:	4a05      	ldr	r2, [pc, #20]	; (80060b4 <__sseek+0x28>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	0152      	lsls	r2, r2, #5
 80060aa:	4313      	orrs	r3, r2
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	6560      	str	r0, [r4, #84]	; 0x54
 80060b0:	e7f8      	b.n	80060a4 <__sseek+0x18>
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	ffffefff 	.word	0xffffefff

080060b8 <__sclose>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	230e      	movs	r3, #14
 80060bc:	5ec9      	ldrsh	r1, [r1, r3]
 80060be:	f000 f8af 	bl	8006220 <_close_r>
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <__swbuf_r>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	0006      	movs	r6, r0
 80060c8:	000d      	movs	r5, r1
 80060ca:	0014      	movs	r4, r2
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d004      	beq.n	80060da <__swbuf_r+0x16>
 80060d0:	6a03      	ldr	r3, [r0, #32]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <__swbuf_r+0x16>
 80060d6:	f7ff ff15 	bl	8005f04 <__sinit>
 80060da:	69a3      	ldr	r3, [r4, #24]
 80060dc:	60a3      	str	r3, [r4, #8]
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	071b      	lsls	r3, r3, #28
 80060e2:	d528      	bpl.n	8006136 <__swbuf_r+0x72>
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d025      	beq.n	8006136 <__swbuf_r+0x72>
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	b2ef      	uxtb	r7, r5
 80060f0:	1ac0      	subs	r0, r0, r3
 80060f2:	6963      	ldr	r3, [r4, #20]
 80060f4:	b2ed      	uxtb	r5, r5
 80060f6:	4283      	cmp	r3, r0
 80060f8:	dc05      	bgt.n	8006106 <__swbuf_r+0x42>
 80060fa:	0021      	movs	r1, r4
 80060fc:	0030      	movs	r0, r6
 80060fe:	f000 f9f9 	bl	80064f4 <_fflush_r>
 8006102:	2800      	cmp	r0, #0
 8006104:	d11d      	bne.n	8006142 <__swbuf_r+0x7e>
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	3001      	adds	r0, #1
 800610a:	3b01      	subs	r3, #1
 800610c:	60a3      	str	r3, [r4, #8]
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	6022      	str	r2, [r4, #0]
 8006114:	701f      	strb	r7, [r3, #0]
 8006116:	6963      	ldr	r3, [r4, #20]
 8006118:	4283      	cmp	r3, r0
 800611a:	d004      	beq.n	8006126 <__swbuf_r+0x62>
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	07db      	lsls	r3, r3, #31
 8006120:	d507      	bpl.n	8006132 <__swbuf_r+0x6e>
 8006122:	2d0a      	cmp	r5, #10
 8006124:	d105      	bne.n	8006132 <__swbuf_r+0x6e>
 8006126:	0021      	movs	r1, r4
 8006128:	0030      	movs	r0, r6
 800612a:	f000 f9e3 	bl	80064f4 <_fflush_r>
 800612e:	2800      	cmp	r0, #0
 8006130:	d107      	bne.n	8006142 <__swbuf_r+0x7e>
 8006132:	0028      	movs	r0, r5
 8006134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006136:	0021      	movs	r1, r4
 8006138:	0030      	movs	r0, r6
 800613a:	f000 f805 	bl	8006148 <__swsetup_r>
 800613e:	2800      	cmp	r0, #0
 8006140:	d0d3      	beq.n	80060ea <__swbuf_r+0x26>
 8006142:	2501      	movs	r5, #1
 8006144:	426d      	negs	r5, r5
 8006146:	e7f4      	b.n	8006132 <__swbuf_r+0x6e>

08006148 <__swsetup_r>:
 8006148:	4b30      	ldr	r3, [pc, #192]	; (800620c <__swsetup_r+0xc4>)
 800614a:	b570      	push	{r4, r5, r6, lr}
 800614c:	0005      	movs	r5, r0
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	000c      	movs	r4, r1
 8006152:	2800      	cmp	r0, #0
 8006154:	d004      	beq.n	8006160 <__swsetup_r+0x18>
 8006156:	6a03      	ldr	r3, [r0, #32]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <__swsetup_r+0x18>
 800615c:	f7ff fed2 	bl	8005f04 <__sinit>
 8006160:	230c      	movs	r3, #12
 8006162:	5ee2      	ldrsh	r2, [r4, r3]
 8006164:	b293      	uxth	r3, r2
 8006166:	0711      	lsls	r1, r2, #28
 8006168:	d423      	bmi.n	80061b2 <__swsetup_r+0x6a>
 800616a:	06d9      	lsls	r1, r3, #27
 800616c:	d407      	bmi.n	800617e <__swsetup_r+0x36>
 800616e:	2309      	movs	r3, #9
 8006170:	2001      	movs	r0, #1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	3337      	adds	r3, #55	; 0x37
 8006176:	4313      	orrs	r3, r2
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	4240      	negs	r0, r0
 800617c:	bd70      	pop	{r4, r5, r6, pc}
 800617e:	075b      	lsls	r3, r3, #29
 8006180:	d513      	bpl.n	80061aa <__swsetup_r+0x62>
 8006182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006184:	2900      	cmp	r1, #0
 8006186:	d008      	beq.n	800619a <__swsetup_r+0x52>
 8006188:	0023      	movs	r3, r4
 800618a:	3344      	adds	r3, #68	; 0x44
 800618c:	4299      	cmp	r1, r3
 800618e:	d002      	beq.n	8006196 <__swsetup_r+0x4e>
 8006190:	0028      	movs	r0, r5
 8006192:	f000 f8db 	bl	800634c <_free_r>
 8006196:	2300      	movs	r3, #0
 8006198:	6363      	str	r3, [r4, #52]	; 0x34
 800619a:	2224      	movs	r2, #36	; 0x24
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	4393      	bics	r3, r2
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	2300      	movs	r3, #0
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	2308      	movs	r3, #8
 80061ac:	89a2      	ldrh	r2, [r4, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10b      	bne.n	80061d0 <__swsetup_r+0x88>
 80061b8:	21a0      	movs	r1, #160	; 0xa0
 80061ba:	2280      	movs	r2, #128	; 0x80
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	0089      	lsls	r1, r1, #2
 80061c0:	0092      	lsls	r2, r2, #2
 80061c2:	400b      	ands	r3, r1
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d003      	beq.n	80061d0 <__swsetup_r+0x88>
 80061c8:	0021      	movs	r1, r4
 80061ca:	0028      	movs	r0, r5
 80061cc:	f000 f9e6 	bl	800659c <__smakebuf_r>
 80061d0:	220c      	movs	r2, #12
 80061d2:	5ea3      	ldrsh	r3, [r4, r2]
 80061d4:	2001      	movs	r0, #1
 80061d6:	001a      	movs	r2, r3
 80061d8:	b299      	uxth	r1, r3
 80061da:	4002      	ands	r2, r0
 80061dc:	4203      	tst	r3, r0
 80061de:	d00f      	beq.n	8006200 <__swsetup_r+0xb8>
 80061e0:	2200      	movs	r2, #0
 80061e2:	60a2      	str	r2, [r4, #8]
 80061e4:	6962      	ldr	r2, [r4, #20]
 80061e6:	4252      	negs	r2, r2
 80061e8:	61a2      	str	r2, [r4, #24]
 80061ea:	2000      	movs	r0, #0
 80061ec:	6922      	ldr	r2, [r4, #16]
 80061ee:	4282      	cmp	r2, r0
 80061f0:	d1c4      	bne.n	800617c <__swsetup_r+0x34>
 80061f2:	0609      	lsls	r1, r1, #24
 80061f4:	d5c2      	bpl.n	800617c <__swsetup_r+0x34>
 80061f6:	2240      	movs	r2, #64	; 0x40
 80061f8:	4313      	orrs	r3, r2
 80061fa:	81a3      	strh	r3, [r4, #12]
 80061fc:	3801      	subs	r0, #1
 80061fe:	e7bd      	b.n	800617c <__swsetup_r+0x34>
 8006200:	0788      	lsls	r0, r1, #30
 8006202:	d400      	bmi.n	8006206 <__swsetup_r+0xbe>
 8006204:	6962      	ldr	r2, [r4, #20]
 8006206:	60a2      	str	r2, [r4, #8]
 8006208:	e7ef      	b.n	80061ea <__swsetup_r+0xa2>
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	20000150 	.word	0x20000150

08006210 <memset>:
 8006210:	0003      	movs	r3, r0
 8006212:	1882      	adds	r2, r0, r2
 8006214:	4293      	cmp	r3, r2
 8006216:	d100      	bne.n	800621a <memset+0xa>
 8006218:	4770      	bx	lr
 800621a:	7019      	strb	r1, [r3, #0]
 800621c:	3301      	adds	r3, #1
 800621e:	e7f9      	b.n	8006214 <memset+0x4>

08006220 <_close_r>:
 8006220:	2300      	movs	r3, #0
 8006222:	b570      	push	{r4, r5, r6, lr}
 8006224:	4d06      	ldr	r5, [pc, #24]	; (8006240 <_close_r+0x20>)
 8006226:	0004      	movs	r4, r0
 8006228:	0008      	movs	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fc faeb 	bl	8002806 <_close>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d103      	bne.n	800623c <_close_r+0x1c>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d000      	beq.n	800623c <_close_r+0x1c>
 800623a:	6023      	str	r3, [r4, #0]
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	20000940 	.word	0x20000940

08006244 <_lseek_r>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	0004      	movs	r4, r0
 8006248:	0008      	movs	r0, r1
 800624a:	0011      	movs	r1, r2
 800624c:	001a      	movs	r2, r3
 800624e:	2300      	movs	r3, #0
 8006250:	4d05      	ldr	r5, [pc, #20]	; (8006268 <_lseek_r+0x24>)
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fc faf8 	bl	8002848 <_lseek>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d103      	bne.n	8006264 <_lseek_r+0x20>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d000      	beq.n	8006264 <_lseek_r+0x20>
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	20000940 	.word	0x20000940

0800626c <_read_r>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	0004      	movs	r4, r0
 8006270:	0008      	movs	r0, r1
 8006272:	0011      	movs	r1, r2
 8006274:	001a      	movs	r2, r3
 8006276:	2300      	movs	r3, #0
 8006278:	4d05      	ldr	r5, [pc, #20]	; (8006290 <_read_r+0x24>)
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	f7fc fa8a 	bl	8002794 <_read>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d103      	bne.n	800628c <_read_r+0x20>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d000      	beq.n	800628c <_read_r+0x20>
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	20000940 	.word	0x20000940

08006294 <_sbrk_r>:
 8006294:	2300      	movs	r3, #0
 8006296:	b570      	push	{r4, r5, r6, lr}
 8006298:	4d06      	ldr	r5, [pc, #24]	; (80062b4 <_sbrk_r+0x20>)
 800629a:	0004      	movs	r4, r0
 800629c:	0008      	movs	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fc fade 	bl	8002860 <_sbrk>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d103      	bne.n	80062b0 <_sbrk_r+0x1c>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d000      	beq.n	80062b0 <_sbrk_r+0x1c>
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	20000940 	.word	0x20000940

080062b8 <_write_r>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	0004      	movs	r4, r0
 80062bc:	0008      	movs	r0, r1
 80062be:	0011      	movs	r1, r2
 80062c0:	001a      	movs	r2, r3
 80062c2:	2300      	movs	r3, #0
 80062c4:	4d05      	ldr	r5, [pc, #20]	; (80062dc <_write_r+0x24>)
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	f7fc fa81 	bl	80027ce <_write>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d103      	bne.n	80062d8 <_write_r+0x20>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d000      	beq.n	80062d8 <_write_r+0x20>
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	bd70      	pop	{r4, r5, r6, pc}
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	20000940 	.word	0x20000940

080062e0 <__errno>:
 80062e0:	4b01      	ldr	r3, [pc, #4]	; (80062e8 <__errno+0x8>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	4770      	bx	lr
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	20000150 	.word	0x20000150

080062ec <__libc_init_array>:
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	2600      	movs	r6, #0
 80062f0:	4c0c      	ldr	r4, [pc, #48]	; (8006324 <__libc_init_array+0x38>)
 80062f2:	4d0d      	ldr	r5, [pc, #52]	; (8006328 <__libc_init_array+0x3c>)
 80062f4:	1b64      	subs	r4, r4, r5
 80062f6:	10a4      	asrs	r4, r4, #2
 80062f8:	42a6      	cmp	r6, r4
 80062fa:	d109      	bne.n	8006310 <__libc_init_array+0x24>
 80062fc:	2600      	movs	r6, #0
 80062fe:	f000 f9af 	bl	8006660 <_init>
 8006302:	4c0a      	ldr	r4, [pc, #40]	; (800632c <__libc_init_array+0x40>)
 8006304:	4d0a      	ldr	r5, [pc, #40]	; (8006330 <__libc_init_array+0x44>)
 8006306:	1b64      	subs	r4, r4, r5
 8006308:	10a4      	asrs	r4, r4, #2
 800630a:	42a6      	cmp	r6, r4
 800630c:	d105      	bne.n	800631a <__libc_init_array+0x2e>
 800630e:	bd70      	pop	{r4, r5, r6, pc}
 8006310:	00b3      	lsls	r3, r6, #2
 8006312:	58eb      	ldr	r3, [r5, r3]
 8006314:	4798      	blx	r3
 8006316:	3601      	adds	r6, #1
 8006318:	e7ee      	b.n	80062f8 <__libc_init_array+0xc>
 800631a:	00b3      	lsls	r3, r6, #2
 800631c:	58eb      	ldr	r3, [r5, r3]
 800631e:	4798      	blx	r3
 8006320:	3601      	adds	r6, #1
 8006322:	e7f2      	b.n	800630a <__libc_init_array+0x1e>
 8006324:	080068a0 	.word	0x080068a0
 8006328:	080068a0 	.word	0x080068a0
 800632c:	080068a4 	.word	0x080068a4
 8006330:	080068a0 	.word	0x080068a0

08006334 <__retarget_lock_init_recursive>:
 8006334:	4770      	bx	lr

08006336 <__retarget_lock_acquire_recursive>:
 8006336:	4770      	bx	lr

08006338 <__retarget_lock_release_recursive>:
 8006338:	4770      	bx	lr

0800633a <memcpy>:
 800633a:	2300      	movs	r3, #0
 800633c:	b510      	push	{r4, lr}
 800633e:	429a      	cmp	r2, r3
 8006340:	d100      	bne.n	8006344 <memcpy+0xa>
 8006342:	bd10      	pop	{r4, pc}
 8006344:	5ccc      	ldrb	r4, [r1, r3]
 8006346:	54c4      	strb	r4, [r0, r3]
 8006348:	3301      	adds	r3, #1
 800634a:	e7f8      	b.n	800633e <memcpy+0x4>

0800634c <_free_r>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	0005      	movs	r5, r0
 8006350:	2900      	cmp	r1, #0
 8006352:	d010      	beq.n	8006376 <_free_r+0x2a>
 8006354:	1f0c      	subs	r4, r1, #4
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	da00      	bge.n	800635e <_free_r+0x12>
 800635c:	18e4      	adds	r4, r4, r3
 800635e:	0028      	movs	r0, r5
 8006360:	f7ff fd30 	bl	8005dc4 <__malloc_lock>
 8006364:	4a1d      	ldr	r2, [pc, #116]	; (80063dc <_free_r+0x90>)
 8006366:	6813      	ldr	r3, [r2, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <_free_r+0x2c>
 800636c:	6063      	str	r3, [r4, #4]
 800636e:	6014      	str	r4, [r2, #0]
 8006370:	0028      	movs	r0, r5
 8006372:	f7ff fd2f 	bl	8005dd4 <__malloc_unlock>
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	42a3      	cmp	r3, r4
 800637a:	d908      	bls.n	800638e <_free_r+0x42>
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	1821      	adds	r1, r4, r0
 8006380:	428b      	cmp	r3, r1
 8006382:	d1f3      	bne.n	800636c <_free_r+0x20>
 8006384:	6819      	ldr	r1, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	1809      	adds	r1, r1, r0
 800638a:	6021      	str	r1, [r4, #0]
 800638c:	e7ee      	b.n	800636c <_free_r+0x20>
 800638e:	001a      	movs	r2, r3
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <_free_r+0x4e>
 8006396:	42a3      	cmp	r3, r4
 8006398:	d9f9      	bls.n	800638e <_free_r+0x42>
 800639a:	6811      	ldr	r1, [r2, #0]
 800639c:	1850      	adds	r0, r2, r1
 800639e:	42a0      	cmp	r0, r4
 80063a0:	d10b      	bne.n	80063ba <_free_r+0x6e>
 80063a2:	6820      	ldr	r0, [r4, #0]
 80063a4:	1809      	adds	r1, r1, r0
 80063a6:	1850      	adds	r0, r2, r1
 80063a8:	6011      	str	r1, [r2, #0]
 80063aa:	4283      	cmp	r3, r0
 80063ac:	d1e0      	bne.n	8006370 <_free_r+0x24>
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	1841      	adds	r1, r0, r1
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	6053      	str	r3, [r2, #4]
 80063b8:	e7da      	b.n	8006370 <_free_r+0x24>
 80063ba:	42a0      	cmp	r0, r4
 80063bc:	d902      	bls.n	80063c4 <_free_r+0x78>
 80063be:	230c      	movs	r3, #12
 80063c0:	602b      	str	r3, [r5, #0]
 80063c2:	e7d5      	b.n	8006370 <_free_r+0x24>
 80063c4:	6820      	ldr	r0, [r4, #0]
 80063c6:	1821      	adds	r1, r4, r0
 80063c8:	428b      	cmp	r3, r1
 80063ca:	d103      	bne.n	80063d4 <_free_r+0x88>
 80063cc:	6819      	ldr	r1, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	1809      	adds	r1, r1, r0
 80063d2:	6021      	str	r1, [r4, #0]
 80063d4:	6063      	str	r3, [r4, #4]
 80063d6:	6054      	str	r4, [r2, #4]
 80063d8:	e7ca      	b.n	8006370 <_free_r+0x24>
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	200007fc 	.word	0x200007fc

080063e0 <__sflush_r>:
 80063e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e2:	898b      	ldrh	r3, [r1, #12]
 80063e4:	0005      	movs	r5, r0
 80063e6:	000c      	movs	r4, r1
 80063e8:	071a      	lsls	r2, r3, #28
 80063ea:	d45c      	bmi.n	80064a6 <__sflush_r+0xc6>
 80063ec:	684a      	ldr	r2, [r1, #4]
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	dc04      	bgt.n	80063fc <__sflush_r+0x1c>
 80063f2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80063f4:	2a00      	cmp	r2, #0
 80063f6:	dc01      	bgt.n	80063fc <__sflush_r+0x1c>
 80063f8:	2000      	movs	r0, #0
 80063fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80063fe:	2f00      	cmp	r7, #0
 8006400:	d0fa      	beq.n	80063f8 <__sflush_r+0x18>
 8006402:	2200      	movs	r2, #0
 8006404:	2080      	movs	r0, #128	; 0x80
 8006406:	682e      	ldr	r6, [r5, #0]
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	001a      	movs	r2, r3
 800640c:	0140      	lsls	r0, r0, #5
 800640e:	6a21      	ldr	r1, [r4, #32]
 8006410:	4002      	ands	r2, r0
 8006412:	4203      	tst	r3, r0
 8006414:	d034      	beq.n	8006480 <__sflush_r+0xa0>
 8006416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	075b      	lsls	r3, r3, #29
 800641c:	d506      	bpl.n	800642c <__sflush_r+0x4c>
 800641e:	6863      	ldr	r3, [r4, #4]
 8006420:	1ac0      	subs	r0, r0, r3
 8006422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <__sflush_r+0x4c>
 8006428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800642a:	1ac0      	subs	r0, r0, r3
 800642c:	0002      	movs	r2, r0
 800642e:	2300      	movs	r3, #0
 8006430:	0028      	movs	r0, r5
 8006432:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006434:	6a21      	ldr	r1, [r4, #32]
 8006436:	47b8      	blx	r7
 8006438:	89a2      	ldrh	r2, [r4, #12]
 800643a:	1c43      	adds	r3, r0, #1
 800643c:	d106      	bne.n	800644c <__sflush_r+0x6c>
 800643e:	6829      	ldr	r1, [r5, #0]
 8006440:	291d      	cmp	r1, #29
 8006442:	d82c      	bhi.n	800649e <__sflush_r+0xbe>
 8006444:	4b2a      	ldr	r3, [pc, #168]	; (80064f0 <__sflush_r+0x110>)
 8006446:	410b      	asrs	r3, r1
 8006448:	07db      	lsls	r3, r3, #31
 800644a:	d428      	bmi.n	800649e <__sflush_r+0xbe>
 800644c:	2300      	movs	r3, #0
 800644e:	6063      	str	r3, [r4, #4]
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	6023      	str	r3, [r4, #0]
 8006454:	04d2      	lsls	r2, r2, #19
 8006456:	d505      	bpl.n	8006464 <__sflush_r+0x84>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <__sflush_r+0x82>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d100      	bne.n	8006464 <__sflush_r+0x84>
 8006462:	6560      	str	r0, [r4, #84]	; 0x54
 8006464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006466:	602e      	str	r6, [r5, #0]
 8006468:	2900      	cmp	r1, #0
 800646a:	d0c5      	beq.n	80063f8 <__sflush_r+0x18>
 800646c:	0023      	movs	r3, r4
 800646e:	3344      	adds	r3, #68	; 0x44
 8006470:	4299      	cmp	r1, r3
 8006472:	d002      	beq.n	800647a <__sflush_r+0x9a>
 8006474:	0028      	movs	r0, r5
 8006476:	f7ff ff69 	bl	800634c <_free_r>
 800647a:	2000      	movs	r0, #0
 800647c:	6360      	str	r0, [r4, #52]	; 0x34
 800647e:	e7bc      	b.n	80063fa <__sflush_r+0x1a>
 8006480:	2301      	movs	r3, #1
 8006482:	0028      	movs	r0, r5
 8006484:	47b8      	blx	r7
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	d1c6      	bne.n	8006418 <__sflush_r+0x38>
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0c3      	beq.n	8006418 <__sflush_r+0x38>
 8006490:	2b1d      	cmp	r3, #29
 8006492:	d001      	beq.n	8006498 <__sflush_r+0xb8>
 8006494:	2b16      	cmp	r3, #22
 8006496:	d101      	bne.n	800649c <__sflush_r+0xbc>
 8006498:	602e      	str	r6, [r5, #0]
 800649a:	e7ad      	b.n	80063f8 <__sflush_r+0x18>
 800649c:	89a2      	ldrh	r2, [r4, #12]
 800649e:	2340      	movs	r3, #64	; 0x40
 80064a0:	4313      	orrs	r3, r2
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	e7a9      	b.n	80063fa <__sflush_r+0x1a>
 80064a6:	690e      	ldr	r6, [r1, #16]
 80064a8:	2e00      	cmp	r6, #0
 80064aa:	d0a5      	beq.n	80063f8 <__sflush_r+0x18>
 80064ac:	680f      	ldr	r7, [r1, #0]
 80064ae:	600e      	str	r6, [r1, #0]
 80064b0:	1bba      	subs	r2, r7, r6
 80064b2:	9201      	str	r2, [sp, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	079b      	lsls	r3, r3, #30
 80064b8:	d100      	bne.n	80064bc <__sflush_r+0xdc>
 80064ba:	694a      	ldr	r2, [r1, #20]
 80064bc:	60a2      	str	r2, [r4, #8]
 80064be:	9b01      	ldr	r3, [sp, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dd99      	ble.n	80063f8 <__sflush_r+0x18>
 80064c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064c6:	0032      	movs	r2, r6
 80064c8:	001f      	movs	r7, r3
 80064ca:	0028      	movs	r0, r5
 80064cc:	9b01      	ldr	r3, [sp, #4]
 80064ce:	6a21      	ldr	r1, [r4, #32]
 80064d0:	47b8      	blx	r7
 80064d2:	2800      	cmp	r0, #0
 80064d4:	dc06      	bgt.n	80064e4 <__sflush_r+0x104>
 80064d6:	2340      	movs	r3, #64	; 0x40
 80064d8:	2001      	movs	r0, #1
 80064da:	89a2      	ldrh	r2, [r4, #12]
 80064dc:	4240      	negs	r0, r0
 80064de:	4313      	orrs	r3, r2
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	e78a      	b.n	80063fa <__sflush_r+0x1a>
 80064e4:	9b01      	ldr	r3, [sp, #4]
 80064e6:	1836      	adds	r6, r6, r0
 80064e8:	1a1b      	subs	r3, r3, r0
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	e7e7      	b.n	80064be <__sflush_r+0xde>
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	dfbffffe 	.word	0xdfbffffe

080064f4 <_fflush_r>:
 80064f4:	690b      	ldr	r3, [r1, #16]
 80064f6:	b570      	push	{r4, r5, r6, lr}
 80064f8:	0005      	movs	r5, r0
 80064fa:	000c      	movs	r4, r1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <_fflush_r+0x12>
 8006500:	2500      	movs	r5, #0
 8006502:	0028      	movs	r0, r5
 8006504:	bd70      	pop	{r4, r5, r6, pc}
 8006506:	2800      	cmp	r0, #0
 8006508:	d004      	beq.n	8006514 <_fflush_r+0x20>
 800650a:	6a03      	ldr	r3, [r0, #32]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <_fflush_r+0x20>
 8006510:	f7ff fcf8 	bl	8005f04 <__sinit>
 8006514:	220c      	movs	r2, #12
 8006516:	5ea3      	ldrsh	r3, [r4, r2]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f1      	beq.n	8006500 <_fflush_r+0xc>
 800651c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800651e:	07d2      	lsls	r2, r2, #31
 8006520:	d404      	bmi.n	800652c <_fflush_r+0x38>
 8006522:	059b      	lsls	r3, r3, #22
 8006524:	d402      	bmi.n	800652c <_fflush_r+0x38>
 8006526:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006528:	f7ff ff05 	bl	8006336 <__retarget_lock_acquire_recursive>
 800652c:	0028      	movs	r0, r5
 800652e:	0021      	movs	r1, r4
 8006530:	f7ff ff56 	bl	80063e0 <__sflush_r>
 8006534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006536:	0005      	movs	r5, r0
 8006538:	07db      	lsls	r3, r3, #31
 800653a:	d4e2      	bmi.n	8006502 <_fflush_r+0xe>
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	059b      	lsls	r3, r3, #22
 8006540:	d4df      	bmi.n	8006502 <_fflush_r+0xe>
 8006542:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006544:	f7ff fef8 	bl	8006338 <__retarget_lock_release_recursive>
 8006548:	e7db      	b.n	8006502 <_fflush_r+0xe>
	...

0800654c <__swhatbuf_r>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	000e      	movs	r6, r1
 8006550:	001d      	movs	r5, r3
 8006552:	230e      	movs	r3, #14
 8006554:	5ec9      	ldrsh	r1, [r1, r3]
 8006556:	0014      	movs	r4, r2
 8006558:	b096      	sub	sp, #88	; 0x58
 800655a:	2900      	cmp	r1, #0
 800655c:	da0c      	bge.n	8006578 <__swhatbuf_r+0x2c>
 800655e:	89b2      	ldrh	r2, [r6, #12]
 8006560:	2380      	movs	r3, #128	; 0x80
 8006562:	0011      	movs	r1, r2
 8006564:	4019      	ands	r1, r3
 8006566:	421a      	tst	r2, r3
 8006568:	d013      	beq.n	8006592 <__swhatbuf_r+0x46>
 800656a:	2100      	movs	r1, #0
 800656c:	3b40      	subs	r3, #64	; 0x40
 800656e:	2000      	movs	r0, #0
 8006570:	6029      	str	r1, [r5, #0]
 8006572:	6023      	str	r3, [r4, #0]
 8006574:	b016      	add	sp, #88	; 0x58
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	466a      	mov	r2, sp
 800657a:	f000 f84d 	bl	8006618 <_fstat_r>
 800657e:	2800      	cmp	r0, #0
 8006580:	dbed      	blt.n	800655e <__swhatbuf_r+0x12>
 8006582:	23f0      	movs	r3, #240	; 0xf0
 8006584:	9901      	ldr	r1, [sp, #4]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	4019      	ands	r1, r3
 800658a:	4b03      	ldr	r3, [pc, #12]	; (8006598 <__swhatbuf_r+0x4c>)
 800658c:	18c9      	adds	r1, r1, r3
 800658e:	424b      	negs	r3, r1
 8006590:	4159      	adcs	r1, r3
 8006592:	2380      	movs	r3, #128	; 0x80
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	e7ea      	b.n	800656e <__swhatbuf_r+0x22>
 8006598:	ffffe000 	.word	0xffffe000

0800659c <__smakebuf_r>:
 800659c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800659e:	2602      	movs	r6, #2
 80065a0:	898b      	ldrh	r3, [r1, #12]
 80065a2:	0005      	movs	r5, r0
 80065a4:	000c      	movs	r4, r1
 80065a6:	4233      	tst	r3, r6
 80065a8:	d006      	beq.n	80065b8 <__smakebuf_r+0x1c>
 80065aa:	0023      	movs	r3, r4
 80065ac:	3347      	adds	r3, #71	; 0x47
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	6123      	str	r3, [r4, #16]
 80065b2:	2301      	movs	r3, #1
 80065b4:	6163      	str	r3, [r4, #20]
 80065b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80065b8:	466a      	mov	r2, sp
 80065ba:	ab01      	add	r3, sp, #4
 80065bc:	f7ff ffc6 	bl	800654c <__swhatbuf_r>
 80065c0:	9900      	ldr	r1, [sp, #0]
 80065c2:	0007      	movs	r7, r0
 80065c4:	0028      	movs	r0, r5
 80065c6:	f7ff fb7b 	bl	8005cc0 <_malloc_r>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d108      	bne.n	80065e0 <__smakebuf_r+0x44>
 80065ce:	220c      	movs	r2, #12
 80065d0:	5ea3      	ldrsh	r3, [r4, r2]
 80065d2:	059a      	lsls	r2, r3, #22
 80065d4:	d4ef      	bmi.n	80065b6 <__smakebuf_r+0x1a>
 80065d6:	2203      	movs	r2, #3
 80065d8:	4393      	bics	r3, r2
 80065da:	431e      	orrs	r6, r3
 80065dc:	81a6      	strh	r6, [r4, #12]
 80065de:	e7e4      	b.n	80065aa <__smakebuf_r+0xe>
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	89a2      	ldrh	r2, [r4, #12]
 80065e4:	6020      	str	r0, [r4, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	81a3      	strh	r3, [r4, #12]
 80065ea:	9b00      	ldr	r3, [sp, #0]
 80065ec:	6120      	str	r0, [r4, #16]
 80065ee:	6163      	str	r3, [r4, #20]
 80065f0:	9b01      	ldr	r3, [sp, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <__smakebuf_r+0x74>
 80065f6:	0028      	movs	r0, r5
 80065f8:	230e      	movs	r3, #14
 80065fa:	5ee1      	ldrsh	r1, [r4, r3]
 80065fc:	f000 f81e 	bl	800663c <_isatty_r>
 8006600:	2800      	cmp	r0, #0
 8006602:	d005      	beq.n	8006610 <__smakebuf_r+0x74>
 8006604:	2303      	movs	r3, #3
 8006606:	89a2      	ldrh	r2, [r4, #12]
 8006608:	439a      	bics	r2, r3
 800660a:	3b02      	subs	r3, #2
 800660c:	4313      	orrs	r3, r2
 800660e:	81a3      	strh	r3, [r4, #12]
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	433b      	orrs	r3, r7
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	e7ce      	b.n	80065b6 <__smakebuf_r+0x1a>

08006618 <_fstat_r>:
 8006618:	2300      	movs	r3, #0
 800661a:	b570      	push	{r4, r5, r6, lr}
 800661c:	4d06      	ldr	r5, [pc, #24]	; (8006638 <_fstat_r+0x20>)
 800661e:	0004      	movs	r4, r0
 8006620:	0008      	movs	r0, r1
 8006622:	0011      	movs	r1, r2
 8006624:	602b      	str	r3, [r5, #0]
 8006626:	f7fc f8f8 	bl	800281a <_fstat>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	d103      	bne.n	8006636 <_fstat_r+0x1e>
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d000      	beq.n	8006636 <_fstat_r+0x1e>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	20000940 	.word	0x20000940

0800663c <_isatty_r>:
 800663c:	2300      	movs	r3, #0
 800663e:	b570      	push	{r4, r5, r6, lr}
 8006640:	4d06      	ldr	r5, [pc, #24]	; (800665c <_isatty_r+0x20>)
 8006642:	0004      	movs	r4, r0
 8006644:	0008      	movs	r0, r1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	f7fc f8f5 	bl	8002836 <_isatty>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d103      	bne.n	8006658 <_isatty_r+0x1c>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d000      	beq.n	8006658 <_isatty_r+0x1c>
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	bd70      	pop	{r4, r5, r6, pc}
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	20000940 	.word	0x20000940

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
