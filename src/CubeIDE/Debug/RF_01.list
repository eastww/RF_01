
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a84  08006a84  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  08006a84  08006a84  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a84  08006a84  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08006a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000168  08006bf4  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08006bf4  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013305  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae4  00000000  00000000  00033495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00036f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000382a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001608c  00000000  00000000  000393e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8ad  00000000  00000000  0004f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b975  00000000  00000000  0006bd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004838  00000000  00000000  000d76e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000168 	.word	0x20000168
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067e8 	.word	0x080067e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000016c 	.word	0x2000016c
 8000104:	080067e8 	.word	0x080067e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <errorStateHandler>:
 * 
 * @param stateData 
 * @param event 
 */
void errorStateHandler(void *stateData, struct event *event )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
   puts( "ENTERED ERROR STATE!" );
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <errorStateHandler+0x1c>)
 800022c:	0018      	movs	r0, r3
 800022e:	f005 fee5 	bl	8005ffc <puts>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	b002      	add	sp, #8
 8000238:	bd80      	pop	{r7, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	08006800 	.word	0x08006800

08000240 <rfRecvStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b0a5      	sub	sp, #148	; 0x94
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
    uint8_t user_rxBuffer[RF_PACKET_SIZE] = { 0 };
 800024c:	2410      	movs	r4, #16
 800024e:	193b      	adds	r3, r7, r4
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	3304      	adds	r3, #4
 8000256:	227c      	movs	r2, #124	; 0x7c
 8000258:	2100      	movs	r1, #0
 800025a:	0018      	movs	r0, r3
 800025c:	f005 fd71 	bl	8005d42 <memset>
    memcpy(user_rxBuffer, g_rxBuffer, g_rxBuffer[0]);
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <rfRecvStateAction+0x58>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	001a      	movs	r2, r3
 8000266:	490c      	ldr	r1, [pc, #48]	; (8000298 <rfRecvStateAction+0x58>)
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	f005 fd60 	bl	8005d30 <memcpy>
    uartSendData(BSP_TTL_CHANNEL1, user_rxBuffer, user_rxBuffer[0]);
 8000270:	193b      	adds	r3, r7, r4
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b29a      	uxth	r2, r3
 8000276:	193b      	adds	r3, r7, r4
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f001 fcca 	bl	8001c14 <uartSendData>
    
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 8000280:	2301      	movs	r3, #1
 8000282:	425a      	negs	r2, r3
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <rfRecvStateAction+0x58>)
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	0018      	movs	r0, r3
 800028a:	f001 f97f 	bl	800158c <RF_StartRx>
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b025      	add	sp, #148	; 0x94
 8000294:	bd90      	pop	{r4, r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000288 	.word	0x20000288

0800029c <rfRecvEnableRecv>:
 * @param event 
 * @param newStateData 
 */
void rfRecvEnableRecv( void *oldStateData, struct event *event,
      void *newStateData )
{   
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80002a8:	2301      	movs	r3, #1
 80002aa:	425a      	negs	r2, r3
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <rfRecvEnableRecv+0x24>)
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 f96b 	bl	800158c <RF_StartRx>
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	20000288 	.word	0x20000288

080002c4 <rfRecvStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateEnter( void *stateData, struct event *event )
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80002ce:	2301      	movs	r3, #1
 80002d0:	425a      	negs	r2, r3
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <rfRecvStateEnter+0x24>)
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 f958 	bl	800158c <RF_StartRx>
    rfTimerEnable();
 80002dc:	f001 fbaa 	bl	8001a34 <rfTimerEnable>
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b002      	add	sp, #8
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000288 	.word	0x20000288

080002ec <rfRecvStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateExit( void *stateData, struct event *event )
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
    rfTimerDisable();
 80002f6:	f001 fba9 	bl	8001a4c <rfTimerDisable>
}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b002      	add	sp, #8
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <rfRecvDefaultStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvDefaultStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
    RF_Process();
 8000310:	f001 f988 	bl	8001624 <RF_Process>
    mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 8000314:	2110      	movs	r1, #16
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2202      	movs	r2, #2
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	187a      	adds	r2, r7, r1
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <rfRecvDefaultStateAction+0x34>)
 8000326:	0011      	movs	r1, r2
 8000328:	0018      	movs	r0, r3
 800032a:	f005 fb48 	bl	80059be <mq_push>
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b006      	add	sp, #24
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	20000314 	.word	0x20000314

0800033c <rfSendStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]

}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}

08000350 <rfSendStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateEnter( void *stateData, struct event *event )
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
	bufferSize = uartGetData(BSP_TTL_CHANNEL1, txBuffer + 1, 256);
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <rfSendStateEnter+0x70>)
 800035c:	2280      	movs	r2, #128	; 0x80
 800035e:	0052      	lsls	r2, r2, #1
 8000360:	0019      	movs	r1, r3
 8000362:	2000      	movs	r0, #0
 8000364:	f001 fcb4 	bl	8001cd0 <uartGetData>
 8000368:	0002      	movs	r2, r0
 800036a:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <rfSendStateEnter+0x74>)
 800036c:	601a      	str	r2, [r3, #0]
	if (bufferSize)
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <rfSendStateEnter+0x74>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d01f      	beq.n	80003b6 <rfSendStateEnter+0x66>
        // uartSendData(BSP_TTL_CHANNEL1, txBuffer, bufferSize);
        // HAL_Delay_nMs(1000);

		/* reset the value */
		// bufferSize = 0;
        txBuffer[0] = bufferSize + 1;
 8000376:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <rfSendStateEnter+0x74>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	3301      	adds	r3, #1
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <rfSendStateEnter+0x78>)
 8000382:	701a      	strb	r2, [r3, #0]
        RF_StartTx(txBuffer,  txBuffer[0] , INFINITE);
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <rfSendStateEnter+0x78>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	b299      	uxth	r1, r3
 800038a:	2301      	movs	r3, #1
 800038c:	425a      	negs	r2, r3
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <rfSendStateEnter+0x78>)
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f925 	bl	80015e0 <RF_StartTx>
		uartResetData(BSP_TTL_CHANNEL1);
 8000396:	2000      	movs	r0, #0
 8000398:	f001 fcc8 	bl	8001d2c <uartResetData>
		mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 800039c:	2108      	movs	r1, #8
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2202      	movs	r2, #2
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	187a      	adds	r2, r7, r1
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <rfSendStateEnter+0x7c>)
 80003ae:	0011      	movs	r1, r2
 80003b0:	0018      	movs	r0, r3
 80003b2:	f005 fb04 	bl	80059be <mq_push>
	}
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b004      	add	sp, #16
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	20000185 	.word	0x20000185
 80003c4:	20000284 	.word	0x20000284
 80003c8:	20000184 	.word	0x20000184
 80003cc:	20000314 	.word	0x20000314

080003d0 <rfSendStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateExit( void *stateData, struct event *event )
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
   bufferSize = 0;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <rfSendStateExit+0x44>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
   mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 80003e0:	2108      	movs	r1, #8
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2202      	movs	r2, #2
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	187a      	adds	r2, r7, r1
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <rfSendStateExit+0x48>)
 80003f2:	0011      	movs	r1, r2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f005 fae2 	bl	80059be <mq_push>
   RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80003fa:	2301      	movs	r3, #1
 80003fc:	425a      	negs	r2, r3
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <rfSendStateExit+0x4c>)
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	0018      	movs	r0, r3
 8000404:	f001 f8c2 	bl	800158c <RF_StartRx>
   rfTimerEnable();
 8000408:	f001 fb14 	bl	8001a34 <rfTimerEnable>
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000284 	.word	0x20000284
 8000418:	20000314 	.word	0x20000314
 800041c:	20000288 	.word	0x20000288

08000420 <rfSendDefaultStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendDefaultStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
    RF_Process();
 800042c:	f001 f8fa 	bl	8001624 <RF_Process>
    mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 8000430:	2110      	movs	r1, #16
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2202      	movs	r2, #2
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	187a      	adds	r2, r7, r1
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <rfSendDefaultStateAction+0x34>)
 8000442:	0011      	movs	r1, r2
 8000444:	0018      	movs	r0, r3
 8000446:	f005 faba 	bl	80059be <mq_push>
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b006      	add	sp, #24
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	20000314 	.word	0x20000314

08000458 <stateActuator>:
 * 
 * @param None
 * @retval None
 */
void stateActuator(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
    struct msg *msg;
    stateM_init(&m, &rfRecvState, &errorState);
 800045e:	4a13      	ldr	r2, [pc, #76]	; (80004ac <stateActuator+0x54>)
 8000460:	4913      	ldr	r1, [pc, #76]	; (80004b0 <stateActuator+0x58>)
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <stateActuator+0x5c>)
 8000464:	0018      	movs	r0, r3
 8000466:	f005 fb18 	bl	8005a9a <stateM_init>
    mq_init(&mq);
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <stateActuator+0x60>)
 800046c:	0018      	movs	r0, r3
 800046e:	f005 fa6c 	bl	800594a <mq_init>
    
    /* triggle state machine */
    mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2202      	movs	r2, #2
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	1d3a      	adds	r2, r7, #4
 8000480:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <stateActuator+0x60>)
 8000482:	0011      	movs	r1, r2
 8000484:	0018      	movs	r0, r3
 8000486:	f005 fa9a 	bl	80059be <mq_push>

    while ( 1 )
    {
        if ((msg = mq_pop( &mq )) != NULL)
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <stateActuator+0x60>)
 800048c:	0018      	movs	r0, r3
 800048e:	f005 fad5 	bl	8005a3c <mq_pop>
 8000492:	0003      	movs	r3, r0
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f6      	beq.n	800048a <stateActuator+0x32>
        {
            stateM_handleEvent(&m, (struct event *)msg);
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <stateActuator+0x5c>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f005 fb10 	bl	8005ac8 <stateM_handleEvent>
        if ((msg = mq_pop( &mq )) != NULL)
 80004a8:	e7ef      	b.n	800048a <stateActuator+0x32>
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	200000c4 	.word	0x200000c4
 80004b0:	20000064 	.word	0x20000064
 80004b4:	20000308 	.word	0x20000308
 80004b8:	20000314 	.word	0x20000314

080004bc <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 80004c0:	21ff      	movs	r1, #255	; 0xff
 80004c2:	207f      	movs	r0, #127	; 0x7f
 80004c4:	f000 fd0c 	bl	8000ee0 <Cmt2300_WriteReg>
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 80004d2:	2061      	movs	r0, #97	; 0x61
 80004d4:	f000 fced 	bl	8000eb2 <Cmt2300_ReadReg>
 80004d8:	0003      	movs	r3, r0
 80004da:	001a      	movs	r2, r3
 80004dc:	230f      	movs	r3, #15
 80004de:	4013      	ands	r3, r2
 80004e0:	b2db      	uxtb	r3, r3
}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 80004f4:	230f      	movs	r3, #15
 80004f6:	18fb      	adds	r3, r7, r3
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	e013      	b.n	8000526 <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 80004fe:	250e      	movs	r5, #14
 8000500:	197c      	adds	r4, r7, r5
 8000502:	f7ff ffe4 	bl	80004ce <Cmt2300_GetChipStatus>
 8000506:	0003      	movs	r3, r0
 8000508:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 800050a:	1dfa      	adds	r2, r7, #7
 800050c:	197b      	adds	r3, r7, r5
 800050e:	7812      	ldrb	r2, [r2, #0]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	429a      	cmp	r2, r3
 8000514:	d101      	bne.n	800051a <Cmt2300_WaitChipStatus+0x32>
            return true;
 8000516:	2301      	movs	r3, #1
 8000518:	e00b      	b.n	8000532 <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 800051a:	210f      	movs	r1, #15
 800051c:	187b      	adds	r3, r7, r1
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	187b      	adds	r3, r7, r1
 8000522:	3201      	adds	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	230f      	movs	r3, #15
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b31      	cmp	r3, #49	; 0x31
 800052e:	d9e6      	bls.n	80004fe <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 8000530:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 8000532:	0018      	movs	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	b004      	add	sp, #16
 8000538:	bdb0      	pop	{r4, r5, r7, pc}

0800053a <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af00      	add	r7, sp, #0
 8000540:	0002      	movs	r2, r0
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 8000546:	2045      	movs	r0, #69	; 0x45
 8000548:	f000 fcb3 	bl	8000eb2 <Cmt2300_ReadReg>
 800054c:	0003      	movs	r3, r0
 800054e:	0019      	movs	r1, r3
 8000550:	200f      	movs	r0, #15
 8000552:	183b      	adds	r3, r7, r0
 8000554:	2201      	movs	r2, #1
 8000556:	4391      	bics	r1, r2
 8000558:	000a      	movs	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 800055c:	183a      	adds	r2, r7, r0
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4313      	orrs	r3, r2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	0019      	movs	r1, r3
 800056a:	2045      	movs	r0, #69	; 0x45
 800056c:	f000 fcb8 	bl	8000ee0 <Cmt2300_WriteReg>
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b004      	add	sp, #16
 8000576:	bd80      	pop	{r7, pc}

08000578 <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 800057c:	2110      	movs	r1, #16
 800057e:	2060      	movs	r0, #96	; 0x60
 8000580:	f000 fcae 	bl	8000ee0 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 8000584:	2001      	movs	r0, #1
 8000586:	f7ff ffaf 	bl	80004e8 <Cmt2300_WaitChipStatus>
 800058a:	0003      	movs	r3, r0
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 8000596:	2102      	movs	r1, #2
 8000598:	2060      	movs	r0, #96	; 0x60
 800059a:	f000 fca1 	bl	8000ee0 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 800059e:	2002      	movs	r0, #2
 80005a0:	f7ff ffa2 	bl	80004e8 <Cmt2300_WaitChipStatus>
 80005a4:	0003      	movs	r3, r0
}
 80005a6:	0018      	movs	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <Cmt2300_GoTx>:
* @name    Cmt2300_GoTx
* @desc    Entry Tx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoTx(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_TX);
 80005b0:	2140      	movs	r1, #64	; 0x40
 80005b2:	2060      	movs	r0, #96	; 0x60
 80005b4:	f000 fc94 	bl	8000ee0 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_TX);
 80005b8:	2006      	movs	r0, #6
 80005ba:	f7ff ff95 	bl	80004e8 <Cmt2300_WaitChipStatus>
 80005be:	0003      	movs	r3, r0
}
 80005c0:	0018      	movs	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <Cmt2300_GoRx>:
* @name    Cmt2300_GoRx
* @desc    Entry Rx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoRx(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_RX);
 80005ca:	2108      	movs	r1, #8
 80005cc:	2060      	movs	r0, #96	; 0x60
 80005ce:	f000 fc87 	bl	8000ee0 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_RX);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f7ff ff88 	bl	80004e8 <Cmt2300_WaitChipStatus>
 80005d8:	0003      	movs	r3, r0
}
 80005da:	0018      	movs	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	0002      	movs	r2, r0
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	0019      	movs	r1, r3
 80005f2:	2065      	movs	r0, #101	; 0x65
 80005f4:	f000 fc74 	bl	8000ee0 <Cmt2300_WriteReg>
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	0002      	movs	r2, r0
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	1dbb      	adds	r3, r7, #6
 800060e:	1c0a      	adds	r2, r1, #0
 8000610:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	1dfa      	adds	r2, r7, #7
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	211f      	movs	r1, #31
 800061a:	400a      	ands	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 800061e:	2066      	movs	r0, #102	; 0x66
 8000620:	f000 fc47 	bl	8000eb2 <Cmt2300_ReadReg>
 8000624:	0003      	movs	r3, r0
 8000626:	001a      	movs	r2, r3
 8000628:	231f      	movs	r3, #31
 800062a:	439a      	bics	r2, r3
 800062c:	0013      	movs	r3, r2
 800062e:	b25a      	sxtb	r2, r3
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b25b      	sxtb	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b25a      	sxtb	r2, r3
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	0019      	movs	r1, r3
 8000644:	2066      	movs	r0, #102	; 0x66
 8000646:	f000 fc4b 	bl	8000ee0 <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 800064a:	1dbb      	adds	r3, r7, #6
 800064c:	1dba      	adds	r2, r7, #6
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	211f      	movs	r1, #31
 8000652:	400a      	ands	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 8000656:	2067      	movs	r0, #103	; 0x67
 8000658:	f000 fc2b 	bl	8000eb2 <Cmt2300_ReadReg>
 800065c:	0003      	movs	r3, r0
 800065e:	001a      	movs	r2, r3
 8000660:	231f      	movs	r3, #31
 8000662:	439a      	bics	r2, r3
 8000664:	0013      	movs	r3, r2
 8000666:	b25a      	sxtb	r2, r3
 8000668:	1dbb      	adds	r3, r7, #6
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	4313      	orrs	r3, r2
 8000670:	b25a      	sxtb	r2, r3
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 8000676:	1dbb      	adds	r3, r7, #6
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	0019      	movs	r1, r3
 800067c:	2067      	movs	r0, #103	; 0x67
 800067e:	f000 fc2f 	bl	8000ee0 <Cmt2300_WriteReg>
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}

0800068a <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 800068a:	b5b0      	push	{r4, r5, r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	0002      	movs	r2, r0
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000696:	250f      	movs	r5, #15
 8000698:	197c      	adds	r4, r7, r5
 800069a:	2066      	movs	r0, #102	; 0x66
 800069c:	f000 fc09 	bl	8000eb2 <Cmt2300_ReadReg>
 80006a0:	0003      	movs	r3, r0
 80006a2:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10d      	bne.n	80006c8 <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 80006ac:	197b      	adds	r3, r7, r5
 80006ae:	197a      	adds	r2, r7, r5
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	4249      	negs	r1, r1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 80006ba:	197b      	adds	r3, r7, r5
 80006bc:	197a      	adds	r2, r7, r5
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	438a      	bics	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e010      	b.n	80006ea <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d10c      	bne.n	80006ea <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 80006d0:	200f      	movs	r0, #15
 80006d2:	183b      	adds	r3, r7, r0
 80006d4:	183a      	adds	r2, r7, r0
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	217f      	movs	r1, #127	; 0x7f
 80006da:	400a      	ands	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 80006de:	183b      	adds	r3, r7, r0
 80006e0:	183a      	adds	r2, r7, r0
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	430a      	orrs	r2, r1
 80006e8:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 80006ea:	230f      	movs	r3, #15
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	0019      	movs	r1, r3
 80006f2:	2066      	movs	r0, #102	; 0x66
 80006f4:	f000 fbf4 	bl	8000ee0 <Cmt2300_WriteReg>
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}

08000700 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	0002      	movs	r2, r0
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	0019      	movs	r1, r3
 8000712:	2068      	movs	r0, #104	; 0x68
 8000714:	f000 fbe4 	bl	8000ee0 <Cmt2300_WriteReg>
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}

08000720 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	0002      	movs	r2, r0
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 800072c:	250f      	movs	r5, #15
 800072e:	197c      	adds	r4, r7, r5
 8000730:	2069      	movs	r0, #105	; 0x69
 8000732:	f000 fbbe 	bl	8000eb2 <Cmt2300_ReadReg>
 8000736:	0003      	movs	r3, r0
 8000738:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 8000742:	197b      	adds	r3, r7, r5
 8000744:	197a      	adds	r2, r7, r5
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e006      	b.n	800075e <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 8000750:	220f      	movs	r2, #15
 8000752:	18bb      	adds	r3, r7, r2
 8000754:	18ba      	adds	r2, r7, r2
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	2102      	movs	r1, #2
 800075a:	438a      	bics	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 800075e:	230f      	movs	r3, #15
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	0019      	movs	r1, r3
 8000766:	2069      	movs	r0, #105	; 0x69
 8000768:	f000 fbba 	bl	8000ee0 <Cmt2300_WriteReg>
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b004      	add	sp, #16
 8000772:	bdb0      	pop	{r4, r5, r7, pc}

08000774 <Cmt2300_EnableReadFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableReadFifo
* @desc    Enable SPI to read the FIFO.
* *********************************************************/
void Cmt2300_EnableReadFifo(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 800077a:	1dfc      	adds	r4, r7, #7
 800077c:	2069      	movs	r0, #105	; 0x69
 800077e:	f000 fb98 	bl	8000eb2 <Cmt2300_ReadReg>
 8000782:	0003      	movs	r3, r0
 8000784:	7023      	strb	r3, [r4, #0]
    tmp &= ~CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	1dfa      	adds	r2, r7, #7
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	2101      	movs	r1, #1
 800078e:	438a      	bics	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_FIFO_RX_TX_SEL;
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	1dfa      	adds	r2, r7, #7
 8000796:	7812      	ldrb	r2, [r2, #0]
 8000798:	2104      	movs	r1, #4
 800079a:	438a      	bics	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0019      	movs	r1, r3
 80007a4:	2069      	movs	r0, #105	; 0x69
 80007a6:	f000 fb9b 	bl	8000ee0 <Cmt2300_WriteReg>
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b003      	add	sp, #12
 80007b0:	bd90      	pop	{r4, r7, pc}

080007b2 <Cmt2300_EnableWriteFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableWriteFifo
* @desc    Enable SPI to write the FIFO.
* *********************************************************/
void Cmt2300_EnableWriteFifo(void)
{
 80007b2:	b590      	push	{r4, r7, lr}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 80007b8:	1dfc      	adds	r4, r7, #7
 80007ba:	2069      	movs	r0, #105	; 0x69
 80007bc:	f000 fb79 	bl	8000eb2 <Cmt2300_ReadReg>
 80007c0:	0003      	movs	r3, r0
 80007c2:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	1dfa      	adds	r2, r7, #7
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	2101      	movs	r1, #1
 80007cc:	430a      	orrs	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
    tmp |= CMT2300_MASK_FIFO_RX_TX_SEL;
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	1dfa      	adds	r2, r7, #7
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	2104      	movs	r1, #4
 80007d8:	430a      	orrs	r2, r1
 80007da:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	0019      	movs	r1, r3
 80007e2:	2069      	movs	r0, #105	; 0x69
 80007e4:	f000 fb7c 	bl	8000ee0 <Cmt2300_WriteReg>
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b003      	add	sp, #12
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <Cmt2300_ClearFifo>:
*            CMT2300_MASK_TX_FIFO_FULL_FLG |
*            CMT2300_MASK_TX_FIFO_NMTY_FLG |
*            CMT2300_MASK_TX_FIFO_TH_FLG
* *********************************************************/
uint8_t Cmt2300_ClearFifo(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CLR);
 80007f6:	1dfc      	adds	r4, r7, #7
 80007f8:	206c      	movs	r0, #108	; 0x6c
 80007fa:	f000 fb5a 	bl	8000eb2 <Cmt2300_ReadReg>
 80007fe:	0003      	movs	r3, r0
 8000800:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CLR, CMT2300_MASK_FIFO_CLR_RX | CMT2300_MASK_FIFO_CLR_TX);
 8000802:	2103      	movs	r1, #3
 8000804:	206c      	movs	r0, #108	; 0x6c
 8000806:	f000 fb6b 	bl	8000ee0 <Cmt2300_WriteReg>
    return tmp;
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
}
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	b003      	add	sp, #12
 8000814:	bd90      	pop	{r4, r7, pc}

08000816 <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 8000816:	b590      	push	{r4, r7, lr}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 800081c:	1d7b      	adds	r3, r7, #5
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 8000828:	1cfb      	adds	r3, r7, #3
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 800082e:	1cbc      	adds	r4, r7, #2
 8000830:	2066      	movs	r0, #102	; 0x66
 8000832:	f000 fb3e 	bl	8000eb2 <Cmt2300_ReadReg>
 8000836:	0003      	movs	r3, r0
 8000838:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 800083a:	1cbb      	adds	r3, r7, #2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	115b      	asrs	r3, r3, #5
 8000840:	b2da      	uxtb	r2, r3
 8000842:	1cbb      	adds	r3, r7, #2
 8000844:	2101      	movs	r1, #1
 8000846:	400a      	ands	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 800084a:	1dfc      	adds	r4, r7, #7
 800084c:	206d      	movs	r0, #109	; 0x6d
 800084e:	f000 fb30 	bl	8000eb2 <Cmt2300_ReadReg>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 8000856:	1dbc      	adds	r4, r7, #6
 8000858:	206a      	movs	r0, #106	; 0x6a
 800085a:	f000 fb2a 	bl	8000eb2 <Cmt2300_ReadReg>
 800085e:	0003      	movs	r3, r0
 8000860:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 8000862:	1cbb      	adds	r3, r7, #2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d009      	beq.n	800087e <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	1dfa      	adds	r2, r7, #7
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	43d2      	mvns	r2, r2
 8000872:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 8000874:	1dbb      	adds	r3, r7, #6
 8000876:	1dba      	adds	r2, r7, #6
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	43d2      	mvns	r2, r2
 800087c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	da05      	bge.n	8000894 <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	2120      	movs	r1, #32
 8000890:	430a      	orrs	r2, r1
 8000892:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2240      	movs	r2, #64	; 0x40
 800089a:	4013      	ands	r3, r2
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d005      	beq.n	80008ae <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	1d3a      	adds	r2, r7, #4
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2220      	movs	r2, #32
 80008b4:	4013      	ands	r3, r2
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d005      	beq.n	80008c8 <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	1d3a      	adds	r2, r7, #4
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	2101      	movs	r1, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2210      	movs	r2, #16
 80008ce:	4013      	ands	r3, r2
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	1d3a      	adds	r2, r7, #4
 80008da:	7812      	ldrb	r2, [r2, #0]
 80008dc:	2110      	movs	r1, #16
 80008de:	430a      	orrs	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 80008e2:	1cfb      	adds	r3, r7, #3
 80008e4:	1cfa      	adds	r2, r7, #3
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	2110      	movs	r1, #16
 80008ea:	430a      	orrs	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2208      	movs	r2, #8
 80008f4:	4013      	ands	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00b      	beq.n	8000914 <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	1d3a      	adds	r2, r7, #4
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	2108      	movs	r1, #8
 8000904:	430a      	orrs	r2, r1
 8000906:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 8000908:	1cfb      	adds	r3, r7, #3
 800090a:	1cfa      	adds	r2, r7, #3
 800090c:	7812      	ldrb	r2, [r2, #0]
 800090e:	2108      	movs	r1, #8
 8000910:	430a      	orrs	r2, r1
 8000912:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2204      	movs	r2, #4
 800091a:	4013      	ands	r3, r2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00b      	beq.n	800093a <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	2104      	movs	r1, #4
 800092a:	430a      	orrs	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 800092e:	1cfb      	adds	r3, r7, #3
 8000930:	1cfa      	adds	r2, r7, #3
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	2104      	movs	r1, #4
 8000936:	430a      	orrs	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2202      	movs	r2, #2
 8000940:	4013      	ands	r3, r2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00b      	beq.n	8000960 <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	1d3a      	adds	r2, r7, #4
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	2102      	movs	r1, #2
 8000950:	430a      	orrs	r2, r1
 8000952:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 8000954:	1cfb      	adds	r3, r7, #3
 8000956:	1cfa      	adds	r2, r7, #3
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	2102      	movs	r1, #2
 800095c:	430a      	orrs	r2, r1
 800095e:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2201      	movs	r2, #1
 8000966:	4013      	ands	r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00b      	beq.n	8000986 <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	1d3a      	adds	r2, r7, #4
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 800097a:	1cfb      	adds	r3, r7, #3
 800097c:	1cfa      	adds	r2, r7, #3
 800097e:	7812      	ldrb	r2, [r2, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 8000986:	1dbb      	adds	r3, r7, #6
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2220      	movs	r2, #32
 800098c:	4013      	ands	r3, r2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00c      	beq.n	80009ae <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 8000994:	1d7b      	adds	r3, r7, #5
 8000996:	1d7a      	adds	r2, r7, #5
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	2102      	movs	r1, #2
 800099c:	430a      	orrs	r2, r1
 800099e:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 80009a0:	1cfb      	adds	r3, r7, #3
 80009a2:	1cfa      	adds	r2, r7, #3
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	4249      	negs	r1, r1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 80009ae:	1dbb      	adds	r3, r7, #6
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2210      	movs	r2, #16
 80009b4:	4013      	ands	r3, r2
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00b      	beq.n	80009d4 <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 80009bc:	1d7b      	adds	r3, r7, #5
 80009be:	1d7a      	adds	r2, r7, #5
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	2101      	movs	r1, #1
 80009c4:	430a      	orrs	r2, r1
 80009c6:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 80009c8:	1cfb      	adds	r3, r7, #3
 80009ca:	1cfa      	adds	r2, r7, #3
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	430a      	orrs	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 80009d4:	1dbb      	adds	r3, r7, #6
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2208      	movs	r2, #8
 80009da:	4013      	ands	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d00b      	beq.n	80009fa <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 80009e2:	1d7b      	adds	r3, r7, #5
 80009e4:	1d7a      	adds	r2, r7, #5
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	2104      	movs	r1, #4
 80009ea:	430a      	orrs	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 80009ee:	1cfb      	adds	r3, r7, #3
 80009f0:	1cfa      	adds	r2, r7, #3
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	2120      	movs	r1, #32
 80009f6:	430a      	orrs	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 80009fa:	1d7b      	adds	r3, r7, #5
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	0019      	movs	r1, r3
 8000a00:	206a      	movs	r0, #106	; 0x6a
 8000a02:	f000 fa6d 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	206b      	movs	r0, #107	; 0x6b
 8000a0e:	f000 fa67 	bl	8000ee0 <Cmt2300_WriteReg>

    if (nIntPolar)
 8000a12:	1cbb      	adds	r3, r7, #2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d004      	beq.n	8000a24 <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 8000a1a:	1cfb      	adds	r3, r7, #3
 8000a1c:	1cfa      	adds	r2, r7, #3
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	43d2      	mvns	r2, r2
 8000a22:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 8000a24:	1cfb      	adds	r3, r7, #3
 8000a26:	781b      	ldrb	r3, [r3, #0]
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b003      	add	sp, #12
 8000a2e:	bd90      	pop	{r4, r7, pc}

08000a30 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0002      	movs	r2, r0
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 8000a3c:	2004      	movs	r0, #4
 8000a3e:	f000 fa38 	bl	8000eb2 <Cmt2300_ReadReg>
 8000a42:	0003      	movs	r3, r0
 8000a44:	0019      	movs	r1, r3
 8000a46:	240f      	movs	r4, #15
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	0013      	movs	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	4a4d      	ldr	r2, [pc, #308]	; (8000b94 <Cmt2300_ConfigDataRate+0x164>)
 8000a5e:	189b      	adds	r3, r3, r2
 8000a60:	2218      	movs	r2, #24
 8000a62:	0019      	movs	r1, r3
 8000a64:	2020      	movs	r0, #32
 8000a66:	f000 f9ec 	bl	8000e42 <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	494a      	ldr	r1, [pc, #296]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000a70:	0013      	movs	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	189b      	adds	r3, r3, r2
 8000a76:	5c5b      	ldrb	r3, [r3, r1]
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	220f      	movs	r2, #15
 8000a7c:	4393      	bics	r3, r2
 8000a7e:	b25a      	sxtb	r2, r3
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	4313      	orrs	r3, r2
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	2004      	movs	r0, #4
 8000a90:	f000 fa26 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	493f      	ldr	r1, [pc, #252]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	18cb      	adds	r3, r1, r3
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	2055      	movs	r0, #85	; 0x55
 8000aaa:	f000 fa19 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	4939      	ldr	r1, [pc, #228]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	189b      	adds	r3, r3, r2
 8000aba:	18cb      	adds	r3, r1, r3
 8000abc:	3302      	adds	r3, #2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	2056      	movs	r0, #86	; 0x56
 8000ac4:	f000 fa0c 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	4932      	ldr	r1, [pc, #200]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000ace:	0013      	movs	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	189b      	adds	r3, r3, r2
 8000ad4:	18cb      	adds	r3, r1, r3
 8000ad6:	3303      	adds	r3, #3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0019      	movs	r1, r3
 8000adc:	2057      	movs	r0, #87	; 0x57
 8000ade:	f000 f9ff 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	492c      	ldr	r1, [pc, #176]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000ae8:	0013      	movs	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	189b      	adds	r3, r3, r2
 8000aee:	18cb      	adds	r3, r1, r3
 8000af0:	3304      	adds	r3, #4
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	0019      	movs	r1, r3
 8000af6:	2058      	movs	r0, #88	; 0x58
 8000af8:	f000 f9f2 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	4925      	ldr	r1, [pc, #148]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000b02:	0013      	movs	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	189b      	adds	r3, r3, r2
 8000b08:	18cb      	adds	r3, r1, r3
 8000b0a:	3305      	adds	r3, #5
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	0019      	movs	r1, r3
 8000b10:	2059      	movs	r0, #89	; 0x59
 8000b12:	f000 f9e5 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	491f      	ldr	r1, [pc, #124]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	189b      	adds	r3, r3, r2
 8000b22:	18cb      	adds	r3, r1, r3
 8000b24:	3306      	adds	r3, #6
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	0019      	movs	r1, r3
 8000b2a:	205a      	movs	r0, #90	; 0x5a
 8000b2c:	f000 f9d8 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	4918      	ldr	r1, [pc, #96]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000b36:	0013      	movs	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	18cb      	adds	r3, r1, r3
 8000b3e:	3307      	adds	r3, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0019      	movs	r1, r3
 8000b44:	205b      	movs	r0, #91	; 0x5b
 8000b46:	f000 f9cb 	bl	8000ee0 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 8000b4a:	205e      	movs	r0, #94	; 0x5e
 8000b4c:	f000 f9b1 	bl	8000eb2 <Cmt2300_ReadReg>
 8000b50:	0003      	movs	r3, r0
 8000b52:	0019      	movs	r1, r3
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	223f      	movs	r2, #63	; 0x3f
 8000b58:	400a      	ands	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	490d      	ldr	r1, [pc, #52]	; (8000b98 <Cmt2300_ConfigDataRate+0x168>)
 8000b62:	0013      	movs	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	189b      	adds	r3, r3, r2
 8000b68:	18cb      	adds	r3, r1, r3
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	223f      	movs	r2, #63	; 0x3f
 8000b72:	4393      	bics	r3, r2
 8000b74:	b25a      	sxtb	r2, r3
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	0019      	movs	r1, r3
 8000b84:	205e      	movs	r0, #94	; 0x5e
 8000b86:	f000 f9ab 	bl	8000ee0 <Cmt2300_WriteReg>
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b005      	add	sp, #20
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	08006834 	.word	0x08006834
 8000b98:	080068f4 	.word	0x080068f4

08000b9c <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 8000ba8:	2038      	movs	r0, #56	; 0x38
 8000baa:	f000 f982 	bl	8000eb2 <Cmt2300_ReadReg>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	183b      	adds	r3, r7, r0
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	4391      	bics	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 8000bbe:	183a      	adds	r2, r7, r0
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	0019      	movs	r1, r3
 8000bcc:	2038      	movs	r0, #56	; 0x38
 8000bce:	f000 f987 	bl	8000ee0 <Cmt2300_WriteReg>
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	0002      	movs	r2, r0
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f962 	bl	8000eb2 <Cmt2300_ReadReg>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4391      	bics	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	d902      	bls.n	8000c0c <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2207      	movs	r2, #7
 8000c0a:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <Cmt2300_ConfigTxPower+0xcc>)
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	b25a      	sxtb	r2, r3
 8000c1e:	240f      	movs	r4, #15
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f000 f956 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <Cmt2300_ConfigTxPower+0xcc>)
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0019      	movs	r1, r3
 8000c44:	205c      	movs	r0, #92	; 0x5c
 8000c46:	f000 f94b 	bl	8000ee0 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <Cmt2300_ConfigTxPower+0xcc>)
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	18d3      	adds	r3, r2, r3
 8000c54:	3302      	adds	r3, #2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	0019      	movs	r1, r3
 8000c5a:	205d      	movs	r0, #93	; 0x5d
 8000c5c:	f000 f940 	bl	8000ee0 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 8000c60:	205e      	movs	r0, #94	; 0x5e
 8000c62:	f000 f926 	bl	8000eb2 <Cmt2300_ReadReg>
 8000c66:	0003      	movs	r3, r0
 8000c68:	0019      	movs	r1, r3
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	223f      	movs	r2, #63	; 0x3f
 8000c6e:	4391      	bics	r1, r2
 8000c70:	000a      	movs	r2, r1
 8000c72:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <Cmt2300_ConfigTxPower+0xcc>)
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	3303      	adds	r3, #3
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	223f      	movs	r2, #63	; 0x3f
 8000c86:	4013      	ands	r3, r2
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	0019      	movs	r1, r3
 8000c98:	205e      	movs	r0, #94	; 0x5e
 8000c9a:	f000 f921 	bl	8000ee0 <Cmt2300_WriteReg>
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b005      	add	sp, #20
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	0800693c 	.word	0x0800693c

08000cac <Cmt2300_IsExist>:
* @name    Cmt2300_IsExist
* @desc    Chip indentify.
* @return  true: chip is exist, false: chip not found
* *********************************************************/
bool Cmt2300_IsExist(void)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
    uint8_t back, dat;

    back = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000cb2:	1dfc      	adds	r4, r7, #7
 8000cb4:	2048      	movs	r0, #72	; 0x48
 8000cb6:	f000 f8fc 	bl	8000eb2 <Cmt2300_ReadReg>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, 0xAA);
 8000cbe:	21aa      	movs	r1, #170	; 0xaa
 8000cc0:	2048      	movs	r0, #72	; 0x48
 8000cc2:	f000 f90d 	bl	8000ee0 <Cmt2300_WriteReg>

    // system_delay_us(5*20);

    dat = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000cc6:	1dbc      	adds	r4, r7, #6
 8000cc8:	2048      	movs	r0, #72	; 0x48
 8000cca:	f000 f8f2 	bl	8000eb2 <Cmt2300_ReadReg>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, back);
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	2048      	movs	r0, #72	; 0x48
 8000cda:	f000 f901 	bl	8000ee0 <Cmt2300_WriteReg>

    if (0xAA == dat)
 8000cde:	1dbb      	adds	r3, r7, #6
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2baa      	cmp	r3, #170	; 0xaa
 8000ce4:	d101      	bne.n	8000cea <Cmt2300_IsExist+0x3e>
        return true;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <Cmt2300_IsExist+0x40>

    return false;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b003      	add	sp, #12
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <Cmt2300_SetPayloadLength>:
* @name    Cmt2300_SetPayloadLength
* @desc    Set payload length.
* @param   nLength
* *********************************************************/
void Cmt2300_SetPayloadLength(uint16_t nLength)
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	1dbb      	adds	r3, r7, #6
 8000cfe:	801a      	strh	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14);
 8000d00:	250f      	movs	r5, #15
 8000d02:	197c      	adds	r4, r7, r5
 8000d04:	2045      	movs	r0, #69	; 0x45
 8000d06:	f000 f8d4 	bl	8000eb2 <Cmt2300_ReadReg>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	7023      	strb	r3, [r4, #0]

    tmp &= ~CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000d0e:	0028      	movs	r0, r5
 8000d10:	183b      	adds	r3, r7, r0
 8000d12:	183a      	adds	r2, r7, r0
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	2170      	movs	r1, #112	; 0x70
 8000d18:	438a      	bics	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
    tmp |= (nLength >> 4) & CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	2270      	movs	r2, #112	; 0x70
 8000d28:	4013      	ands	r3, r2
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	183b      	adds	r3, r7, r0
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b25a      	sxtb	r2, r3
 8000d36:	183b      	adds	r3, r7, r0
 8000d38:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp);
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	0019      	movs	r1, r3
 8000d42:	2045      	movs	r0, #69	; 0x45
 8000d44:	f000 f8cc 	bl	8000ee0 <Cmt2300_WriteReg>

    tmp = nLength & CMT2300_MASK_PAYLOAD_LENG_7_0;
 8000d48:	0020      	movs	r0, r4
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	1dba      	adds	r2, r7, #6
 8000d4e:	8812      	ldrh	r2, [r2, #0]
 8000d50:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT15, tmp);
 8000d52:	183b      	adds	r3, r7, r0
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	0019      	movs	r1, r3
 8000d58:	2046      	movs	r0, #70	; 0x46
 8000d5a:	f000 f8c1 	bl	8000ee0 <Cmt2300_WriteReg>
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b004      	add	sp, #16
 8000d64:	bdb0      	pop	{r4, r5, r7, pc}

08000d66 <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000d66:	b5b0      	push	{r4, r5, r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000d72:	250f      	movs	r5, #15
 8000d74:	197c      	adds	r4, r7, r5
 8000d76:	200d      	movs	r0, #13
 8000d78:	f000 f89b 	bl	8000eb2 <Cmt2300_ReadReg>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d013      	beq.n	8000db0 <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 8000d88:	197b      	adds	r3, r7, r5
 8000d8a:	197a      	adds	r2, r7, r5
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4249      	negs	r1, r1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 8000d96:	197b      	adds	r3, r7, r5
 8000d98:	197a      	adds	r2, r7, r5
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 8000da2:	197b      	adds	r3, r7, r5
 8000da4:	197a      	adds	r2, r7, r5
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	2120      	movs	r1, #32
 8000daa:	430a      	orrs	r2, r1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e012      	b.n	8000dd6 <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 8000db0:	200f      	movs	r0, #15
 8000db2:	183b      	adds	r3, r7, r0
 8000db4:	183a      	adds	r2, r7, r0
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	217f      	movs	r1, #127	; 0x7f
 8000dba:	400a      	ands	r2, r1
 8000dbc:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	183a      	adds	r2, r7, r0
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	2140      	movs	r1, #64	; 0x40
 8000dc6:	438a      	bics	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 8000dca:	183b      	adds	r3, r7, r0
 8000dcc:	183a      	adds	r2, r7, r0
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	438a      	bics	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	200d      	movs	r0, #13
 8000de0:	f000 f87e 	bl	8000ee0 <Cmt2300_WriteReg>
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b004      	add	sp, #16
 8000dea:	bdb0      	pop	{r4, r5, r7, pc}

08000dec <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000df2:	f7ff fb63 	bl	80004bc <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000df6:	200a      	movs	r0, #10
 8000df8:	f000 fd66 	bl	80018c8 <Delay_Ms>
   
    Cmt2300_GoStby();
 8000dfc:	f7ff fbc9 	bl	8000592 <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000e00:	1dfc      	adds	r4, r7, #7
 8000e02:	2061      	movs	r0, #97	; 0x61
 8000e04:	f000 f855 	bl	8000eb2 <Cmt2300_ReadReg>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	1dfa      	adds	r2, r7, #7
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	2110      	movs	r1, #16
 8000e14:	430a      	orrs	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	1dfa      	adds	r2, r7, #7
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	2120      	movs	r1, #32
 8000e20:	438a      	bics	r2, r1
 8000e22:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	0019      	movs	r1, r3
 8000e2a:	2061      	movs	r0, #97	; 0x61
 8000e2c:	f000 f858 	bl	8000ee0 <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff ff98 	bl	8000d66 <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000e36:	f7ff fcee 	bl	8000816 <Cmt2300_ClearInterruptFlags>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b003      	add	sp, #12
 8000e40:	bd90      	pop	{r4, r7, pc}

08000e42 <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000e42:	b590      	push	{r4, r7, lr}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	1c02      	adds	r2, r0, #0
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	1dbb      	adds	r3, r7, #6
 8000e54:	1c0a      	adds	r2, r1, #0
 8000e56:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000e58:	230f      	movs	r3, #15
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	e014      	b.n	8000e8c <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000e62:	210f      	movs	r1, #15
 8000e64:	187a      	adds	r2, r7, r1
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	b2d8      	uxtb	r0, r3
 8000e70:	000c      	movs	r4, r1
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	18d3      	adds	r3, r2, r3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	f000 f82f 	bl	8000ee0 <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	3201      	adds	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	18fa      	adds	r2, r7, r3
 8000e90:	1dbb      	adds	r3, r7, #6
 8000e92:	7812      	ldrb	r2, [r2, #0]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3e3      	bcc.n	8000e62 <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b005      	add	sp, #20
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000ea8:	f000 f876 	bl	8000f98 <cmt_spi3_init>
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000eb2:	b590      	push	{r4, r7, lr}
 8000eb4:	b085      	sub	sp, #20
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	0002      	movs	r2, r0
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000ebe:	240f      	movs	r4, #15
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000ec6:	193a      	adds	r2, r7, r4
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	0011      	movs	r1, r2
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 f974 	bl	80011bc <cmt_spi3_read>

    return dat;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	781b      	ldrb	r3, [r3, #0]
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b005      	add	sp, #20
 8000ede:	bd90      	pop	{r4, r7, pc}

08000ee0 <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	1dbb      	adds	r3, r7, #6
 8000eee:	1c0a      	adds	r2, r1, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000ef2:	1dbb      	adds	r3, r7, #6
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f000 f8e9 	bl	80010d4 <cmt_spi3_write>
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <Cmt2300_ReadFifo>:
* @desc    Reads the contents of the CMT2300 FIFO.
* @param   buf: buffer where to copy the FIFO read data
*          len: number of bytes to be read from the FIFO
* *********************************************************/
void Cmt2300_ReadFifo(uint8_t buf[], uint16_t len)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	000a      	movs	r2, r1
 8000f14:	1cbb      	adds	r3, r7, #2
 8000f16:	801a      	strh	r2, [r3, #0]
    cmt_spi3_read_fifo(buf, len);
 8000f18:	1cbb      	adds	r3, r7, #2
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 fa4b 	bl	80013bc <cmt_spi3_read_fifo>
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <Cmt2300_WriteFifo>:
* @desc    Writes the buffer contents to the CMT2300 FIFO.
* @param   buf: buffer containing data to be put on the FIFO
*          len: number of bytes to be written to the FIFO
* *********************************************************/
void Cmt2300_WriteFifo(const uint8_t buf[], uint16_t len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	000a      	movs	r2, r1
 8000f38:	1cbb      	adds	r3, r7, #2
 8000f3a:	801a      	strh	r2, [r3, #0]
    cmt_spi3_write_fifo(buf, len);
 8000f3c:	1cbb      	adds	r3, r7, #2
 8000f3e:	881a      	ldrh	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 f9af 	bl	80012a8 <cmt_spi3_write_fifo>
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	607b      	str	r3, [r7, #4]
    while (n--)
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1fa      	bne.n	8000f5e <cmt_spi3_delay+0xc>
        ;
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <cmt_spi3_delay_us>:

void cmt_spi3_delay_us(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
    uint16_t n = 8;
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	801a      	strh	r2, [r3, #0]
    while (n--)
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	1dba      	adds	r2, r7, #6
 8000f86:	1e59      	subs	r1, r3, #1
 8000f88:	8011      	strh	r1, [r2, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f8      	bne.n	8000f80 <cmt_spi3_delay_us+0xe>
        ;
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <cmt_spi3_init>:

void cmt_spi3_init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000f9c:	f000 fcb8 	bl	8001910 <spi_gpio_init>
    cmt_spi3_sda_in();
 8000fa0:	f000 fcee 	bl	8001980 <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000fa4:	f7ff ffd5 	bl	8000f52 <cmt_spi3_delay>
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000fba:	230f      	movs	r3, #15
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e034      	b.n	800102e <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	0119      	lsls	r1, r3, #4
 8000fc8:	2390      	movs	r3, #144	; 0x90
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	2200      	movs	r2, #0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f002 f929 	bl	8003226 <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da08      	bge.n	8000ff0 <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	0059      	lsls	r1, r3, #1
 8000fe2:	2390      	movs	r3, #144	; 0x90
 8000fe4:	05db      	lsls	r3, r3, #23
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f002 f91c 	bl	8003226 <HAL_GPIO_WritePin>
 8000fee:	e007      	b.n	8001000 <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	0059      	lsls	r1, r3, #1
 8000ff4:	2390      	movs	r3, #144	; 0x90
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 f913 	bl	8003226 <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8001000:	f7ff ffa7 	bl	8000f52 <cmt_spi3_delay>

        data8 <<= 1;
 8001004:	1dfa      	adds	r2, r7, #7
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	18db      	adds	r3, r3, r3
 800100c:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	0119      	lsls	r1, r3, #4
 8001012:	2390      	movs	r3, #144	; 0x90
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	2201      	movs	r2, #1
 8001018:	0018      	movs	r0, r3
 800101a:	f002 f904 	bl	8003226 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 800101e:	f7ff ff98 	bl	8000f52 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8001022:	210f      	movs	r1, #15
 8001024:	187b      	adds	r3, r7, r1
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	187b      	adds	r3, r7, r1
 800102a:	3201      	adds	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	230f      	movs	r3, #15
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b07      	cmp	r3, #7
 8001036:	d9c5      	bls.n	8000fc4 <cmt_spi3_send+0x16>
    }
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 8001048:	1dbb      	adds	r3, r7, #6
 800104a:	22ff      	movs	r2, #255	; 0xff
 800104c:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e034      	b.n	80010c0 <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	0119      	lsls	r1, r3, #4
 800105a:	2390      	movs	r3, #144	; 0x90
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2200      	movs	r2, #0
 8001060:	0018      	movs	r0, r3
 8001062:	f002 f8e0 	bl	8003226 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8001066:	f7ff ff74 	bl	8000f52 <cmt_spi3_delay>
        data8 <<= 1;
 800106a:	1dba      	adds	r2, r7, #6
 800106c:	1dbb      	adds	r3, r7, #6
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	18db      	adds	r3, r3, r3
 8001072:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	0119      	lsls	r1, r3, #4
 8001078:	2390      	movs	r3, #144	; 0x90
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	2201      	movs	r2, #1
 800107e:	0018      	movs	r0, r3
 8001080:	f002 f8d1 	bl	8003226 <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	005a      	lsls	r2, r3, #1
 8001088:	2390      	movs	r3, #144	; 0x90
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	0011      	movs	r1, r2
 800108e:	0018      	movs	r0, r3
 8001090:	f002 f8ac 	bl	80031ec <HAL_GPIO_ReadPin>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d006      	beq.n	80010a6 <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 8001098:	1dbb      	adds	r3, r7, #6
 800109a:	1dba      	adds	r2, r7, #6
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	2101      	movs	r1, #1
 80010a0:	430a      	orrs	r2, r1
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e005      	b.n	80010b2 <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 80010a6:	1dbb      	adds	r3, r7, #6
 80010a8:	1dba      	adds	r2, r7, #6
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	438a      	bics	r2, r1
 80010b0:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 80010b2:	f7ff ff4e 	bl	8000f52 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	3201      	adds	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b07      	cmp	r3, #7
 80010c6:	d9c6      	bls.n	8001056 <cmt_spi3_recv+0x14>
    }

    return data8;
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	781b      	ldrb	r3, [r3, #0]
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	0002      	movs	r2, r0
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	1dbb      	adds	r3, r7, #6
 80010e2:	1c0a      	adds	r2, r1, #0
 80010e4:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 80010e6:	f000 fc19 	bl	800191c <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	0059      	lsls	r1, r3, #1
 80010ee:	2390      	movs	r3, #144	; 0x90
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	2201      	movs	r2, #1
 80010f4:	0018      	movs	r0, r3
 80010f6:	f002 f896 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	0119      	lsls	r1, r3, #4
 80010fe:	2390      	movs	r3, #144	; 0x90
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	2200      	movs	r2, #0
 8001104:	0018      	movs	r0, r3
 8001106:	f002 f88e 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	0119      	lsls	r1, r3, #4
 800110e:	2390      	movs	r3, #144	; 0x90
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	2200      	movs	r2, #0
 8001114:	0018      	movs	r0, r3
 8001116:	f002 f886 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	01db      	lsls	r3, r3, #7
 800111e:	4826      	ldr	r0, [pc, #152]	; (80011b8 <cmt_spi3_write+0xe4>)
 8001120:	2201      	movs	r2, #1
 8001122:	0019      	movs	r1, r3
 8001124:	f002 f87f 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	01db      	lsls	r3, r3, #7
 800112c:	4822      	ldr	r0, [pc, #136]	; (80011b8 <cmt_spi3_write+0xe4>)
 800112e:	2201      	movs	r2, #1
 8001130:	0019      	movs	r1, r3
 8001132:	f002 f878 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	481f      	ldr	r0, [pc, #124]	; (80011b8 <cmt_spi3_write+0xe4>)
 800113c:	2200      	movs	r2, #0
 800113e:	0019      	movs	r1, r3
 8001140:	f002 f871 	bl	8003226 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001144:	f7ff ff05 	bl	8000f52 <cmt_spi3_delay>
    cmt_spi3_delay();
 8001148:	f7ff ff03 	bl	8000f52 <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	227f      	movs	r2, #127	; 0x7f
 8001152:	4013      	ands	r3, r2
 8001154:	b2db      	uxtb	r3, r3
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff29 	bl	8000fae <cmt_spi3_send>

    cmt_spi3_send(dat);
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ff24 	bl	8000fae <cmt_spi3_send>

    cmt_spi3_scl_0();
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	0119      	lsls	r1, r3, #4
 800116a:	2390      	movs	r3, #144	; 0x90
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	2200      	movs	r2, #0
 8001170:	0018      	movs	r0, r3
 8001172:	f002 f858 	bl	8003226 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001176:	f7ff feec 	bl	8000f52 <cmt_spi3_delay>
    cmt_spi3_delay();
 800117a:	f7ff feea 	bl	8000f52 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <cmt_spi3_write+0xe4>)
 8001184:	2201      	movs	r2, #1
 8001186:	0019      	movs	r1, r3
 8001188:	f002 f84d 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	0059      	lsls	r1, r3, #1
 8001190:	2390      	movs	r3, #144	; 0x90
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	2201      	movs	r2, #1
 8001196:	0018      	movs	r0, r3
 8001198:	f002 f845 	bl	8003226 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 800119c:	f000 fbf0 	bl	8001980 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	01db      	lsls	r3, r3, #7
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <cmt_spi3_write+0xe4>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	0019      	movs	r1, r3
 80011aa:	f002 f83c 	bl	8003226 <HAL_GPIO_WritePin>
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	48000400 	.word	0x48000400

080011bc <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	0002      	movs	r2, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 80011ca:	f000 fba7 	bl	800191c <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	0059      	lsls	r1, r3, #1
 80011d2:	2390      	movs	r3, #144	; 0x90
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	2201      	movs	r2, #1
 80011d8:	0018      	movs	r0, r3
 80011da:	f002 f824 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	0119      	lsls	r1, r3, #4
 80011e2:	2390      	movs	r3, #144	; 0x90
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	2200      	movs	r2, #0
 80011e8:	0018      	movs	r0, r3
 80011ea:	f002 f81c 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	0119      	lsls	r1, r3, #4
 80011f2:	2390      	movs	r3, #144	; 0x90
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	2200      	movs	r2, #0
 80011f8:	0018      	movs	r0, r3
 80011fa:	f002 f814 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	01db      	lsls	r3, r3, #7
 8001202:	4828      	ldr	r0, [pc, #160]	; (80012a4 <cmt_spi3_read+0xe8>)
 8001204:	2201      	movs	r2, #1
 8001206:	0019      	movs	r1, r3
 8001208:	f002 f80d 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	01db      	lsls	r3, r3, #7
 8001210:	4824      	ldr	r0, [pc, #144]	; (80012a4 <cmt_spi3_read+0xe8>)
 8001212:	2201      	movs	r2, #1
 8001214:	0019      	movs	r1, r3
 8001216:	f002 f806 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	4821      	ldr	r0, [pc, #132]	; (80012a4 <cmt_spi3_read+0xe8>)
 8001220:	2200      	movs	r2, #0
 8001222:	0019      	movs	r1, r3
 8001224:	f001 ffff 	bl	8003226 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001228:	f7ff fe93 	bl	8000f52 <cmt_spi3_delay>
    cmt_spi3_delay();
 800122c:	f7ff fe91 	bl	8000f52 <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	4252      	negs	r2, r2
 8001238:	4313      	orrs	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff feb6 	bl	8000fae <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 8001242:	f000 fb9d 	bl	8001980 <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 8001246:	f7ff fefc 	bl	8001042 <cmt_spi3_recv>
 800124a:	0003      	movs	r3, r0
 800124c:	001a      	movs	r2, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	0119      	lsls	r1, r3, #4
 8001256:	2390      	movs	r3, #144	; 0x90
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	2200      	movs	r2, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f001 ffe2 	bl	8003226 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001262:	f7ff fe76 	bl	8000f52 <cmt_spi3_delay>
    cmt_spi3_delay();
 8001266:	f7ff fe74 	bl	8000f52 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <cmt_spi3_read+0xe8>)
 8001270:	2201      	movs	r2, #1
 8001272:	0019      	movs	r1, r3
 8001274:	f001 ffd7 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	0059      	lsls	r1, r3, #1
 800127c:	2390      	movs	r3, #144	; 0x90
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	2201      	movs	r2, #1
 8001282:	0018      	movs	r0, r3
 8001284:	f001 ffcf 	bl	8003226 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8001288:	f000 fb7a 	bl	8001980 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	01db      	lsls	r3, r3, #7
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <cmt_spi3_read+0xe8>)
 8001292:	2201      	movs	r2, #1
 8001294:	0019      	movs	r1, r3
 8001296:	f001 ffc6 	bl	8003226 <HAL_GPIO_WritePin>
}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	48000400 	.word	0x48000400

080012a8 <cmt_spi3_write_fifo>:

void cmt_spi3_write_fifo(const uint8_t *p_buf, uint16_t len)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	000a      	movs	r2, r1
 80012b2:	1cbb      	adds	r3, r7, #2
 80012b4:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	483f      	ldr	r0, [pc, #252]	; (80013b8 <cmt_spi3_write_fifo+0x110>)
 80012bc:	2201      	movs	r2, #1
 80012be:	0019      	movs	r1, r3
 80012c0:	f001 ffb1 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	483b      	ldr	r0, [pc, #236]	; (80013b8 <cmt_spi3_write_fifo+0x110>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	0019      	movs	r1, r3
 80012ce:	f001 ffaa 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	4838      	ldr	r0, [pc, #224]	; (80013b8 <cmt_spi3_write_fifo+0x110>)
 80012d8:	2201      	movs	r2, #1
 80012da:	0019      	movs	r1, r3
 80012dc:	f001 ffa3 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	4834      	ldr	r0, [pc, #208]	; (80013b8 <cmt_spi3_write_fifo+0x110>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	0019      	movs	r1, r3
 80012ea:	f001 ff9c 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	0119      	lsls	r1, r3, #4
 80012f2:	2390      	movs	r3, #144	; 0x90
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	2200      	movs	r2, #0
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 ff94 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	0119      	lsls	r1, r3, #4
 8001302:	2390      	movs	r3, #144	; 0x90
 8001304:	05db      	lsls	r3, r3, #23
 8001306:	2200      	movs	r2, #0
 8001308:	0018      	movs	r0, r3
 800130a:	f001 ff8c 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_sda_out();
 800130e:	f000 fb05 	bl	800191c <cmt_spi3_sda_out>

    for (i = 0; i < len; i++)
 8001312:	230e      	movs	r3, #14
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	e039      	b.n	8001390 <cmt_spi3_write_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4825      	ldr	r0, [pc, #148]	; (80013b8 <cmt_spi3_write_fifo+0x110>)
 8001322:	2200      	movs	r2, #0
 8001324:	0019      	movs	r1, r3
 8001326:	f001 ff7e 	bl	8003226 <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 800132a:	f7ff fe12 	bl	8000f52 <cmt_spi3_delay>
        cmt_spi3_delay();
 800132e:	f7ff fe10 	bl	8000f52 <cmt_spi3_delay>

        cmt_spi3_send(p_buf[i]);
 8001332:	240e      	movs	r4, #14
 8001334:	193b      	adds	r3, r7, r4
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	18d3      	adds	r3, r2, r3
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff fe35 	bl	8000fae <cmt_spi3_send>

        cmt_spi3_scl_0();
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	0119      	lsls	r1, r3, #4
 8001348:	2390      	movs	r3, #144	; 0x90
 800134a:	05db      	lsls	r3, r3, #23
 800134c:	2200      	movs	r2, #0
 800134e:	0018      	movs	r0, r3
 8001350:	f001 ff69 	bl	8003226 <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 8001354:	f7ff fe0d 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001358:	f7ff fe0b 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800135c:	f7ff fe09 	bl	8000f72 <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	01db      	lsls	r3, r3, #7
 8001364:	4814      	ldr	r0, [pc, #80]	; (80013b8 <cmt_spi3_write_fifo+0x110>)
 8001366:	2201      	movs	r2, #1
 8001368:	0019      	movs	r1, r3
 800136a:	f001 ff5c 	bl	8003226 <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 800136e:	f7ff fe00 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001372:	f7ff fdfe 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001376:	f7ff fdfc 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800137a:	f7ff fdfa 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800137e:	f7ff fdf8 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001382:	f7ff fdf6 	bl	8000f72 <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 8001386:	193b      	adds	r3, r7, r4
 8001388:	881a      	ldrh	r2, [r3, #0]
 800138a:	193b      	adds	r3, r7, r4
 800138c:	3201      	adds	r2, #1
 800138e:	801a      	strh	r2, [r3, #0]
 8001390:	230e      	movs	r3, #14
 8001392:	18fa      	adds	r2, r7, r3
 8001394:	1cbb      	adds	r3, r7, #2
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3be      	bcc.n	800131c <cmt_spi3_write_fifo+0x74>
    }

    cmt_spi3_sda_in();
 800139e:	f000 faef 	bl	8001980 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	01db      	lsls	r3, r3, #7
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <cmt_spi3_write_fifo+0x110>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	0019      	movs	r1, r3
 80013ac:	f001 ff3b 	bl	8003226 <HAL_GPIO_WritePin>
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b005      	add	sp, #20
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	48000400 	.word	0x48000400

080013bc <cmt_spi3_read_fifo>:

void cmt_spi3_read_fifo(uint8_t *p_buf, uint16_t len)
{
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	000a      	movs	r2, r1
 80013c6:	1cbb      	adds	r3, r7, #2
 80013c8:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	01db      	lsls	r3, r3, #7
 80013ce:	483f      	ldr	r0, [pc, #252]	; (80014cc <cmt_spi3_read_fifo+0x110>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	0019      	movs	r1, r3
 80013d4:	f001 ff27 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	01db      	lsls	r3, r3, #7
 80013dc:	483b      	ldr	r0, [pc, #236]	; (80014cc <cmt_spi3_read_fifo+0x110>)
 80013de:	2201      	movs	r2, #1
 80013e0:	0019      	movs	r1, r3
 80013e2:	f001 ff20 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	4838      	ldr	r0, [pc, #224]	; (80014cc <cmt_spi3_read_fifo+0x110>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	0019      	movs	r1, r3
 80013f0:	f001 ff19 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	4834      	ldr	r0, [pc, #208]	; (80014cc <cmt_spi3_read_fifo+0x110>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	0019      	movs	r1, r3
 80013fe:	f001 ff12 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	0119      	lsls	r1, r3, #4
 8001406:	2390      	movs	r3, #144	; 0x90
 8001408:	05db      	lsls	r3, r3, #23
 800140a:	2200      	movs	r2, #0
 800140c:	0018      	movs	r0, r3
 800140e:	f001 ff0a 	bl	8003226 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	0119      	lsls	r1, r3, #4
 8001416:	2390      	movs	r3, #144	; 0x90
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	2200      	movs	r2, #0
 800141c:	0018      	movs	r0, r3
 800141e:	f001 ff02 	bl	8003226 <HAL_GPIO_WritePin>

    cmt_spi3_sda_in();
 8001422:	f000 faad 	bl	8001980 <cmt_spi3_sda_in>

    for (i = 0; i < len; i++)
 8001426:	230e      	movs	r3, #14
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	2200      	movs	r2, #0
 800142c:	801a      	strh	r2, [r3, #0]
 800142e:	e039      	b.n	80014a4 <cmt_spi3_read_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	01db      	lsls	r3, r3, #7
 8001434:	4825      	ldr	r0, [pc, #148]	; (80014cc <cmt_spi3_read_fifo+0x110>)
 8001436:	2200      	movs	r2, #0
 8001438:	0019      	movs	r1, r3
 800143a:	f001 fef4 	bl	8003226 <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 800143e:	f7ff fd88 	bl	8000f52 <cmt_spi3_delay>
        cmt_spi3_delay();
 8001442:	f7ff fd86 	bl	8000f52 <cmt_spi3_delay>

        p_buf[i] = cmt_spi3_recv();
 8001446:	250e      	movs	r5, #14
 8001448:	197b      	adds	r3, r7, r5
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	18d4      	adds	r4, r2, r3
 8001450:	f7ff fdf7 	bl	8001042 <cmt_spi3_recv>
 8001454:	0003      	movs	r3, r0
 8001456:	7023      	strb	r3, [r4, #0]

        cmt_spi3_scl_0();
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	0119      	lsls	r1, r3, #4
 800145c:	2390      	movs	r3, #144	; 0x90
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	2200      	movs	r2, #0
 8001462:	0018      	movs	r0, r3
 8001464:	f001 fedf 	bl	8003226 <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 8001468:	f7ff fd83 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800146c:	f7ff fd81 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001470:	f7ff fd7f 	bl	8000f72 <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	01db      	lsls	r3, r3, #7
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <cmt_spi3_read_fifo+0x110>)
 800147a:	2201      	movs	r2, #1
 800147c:	0019      	movs	r1, r3
 800147e:	f001 fed2 	bl	8003226 <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 8001482:	f7ff fd76 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001486:	f7ff fd74 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800148a:	f7ff fd72 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800148e:	f7ff fd70 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001492:	f7ff fd6e 	bl	8000f72 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001496:	f7ff fd6c 	bl	8000f72 <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 800149a:	197b      	adds	r3, r7, r5
 800149c:	881a      	ldrh	r2, [r3, #0]
 800149e:	197b      	adds	r3, r7, r5
 80014a0:	3201      	adds	r2, #1
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	230e      	movs	r3, #14
 80014a6:	18fa      	adds	r2, r7, r3
 80014a8:	1cbb      	adds	r3, r7, #2
 80014aa:	8812      	ldrh	r2, [r2, #0]
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3be      	bcc.n	8001430 <cmt_spi3_read_fifo+0x74>
    }

    cmt_spi3_sda_in();
 80014b2:	f000 fa65 	bl	8001980 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	01db      	lsls	r3, r3, #7
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <cmt_spi3_read_fifo+0x110>)
 80014bc:	2201      	movs	r2, #1
 80014be:	0019      	movs	r1, r3
 80014c0:	f001 feb1 	bl	8003226 <HAL_GPIO_WritePin>
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bdb0      	pop	{r4, r5, r7, pc}
 80014cc:	48000400 	.word	0x48000400

080014d0 <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 80014d4:	f7ff fce6 	bl	8000ea4 <Cmt2300_InitGpio>
    Cmt2300_Init();
 80014d8:	f7ff fc88 	bl	8000dec <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <RF_Init+0x60>)
 80014de:	220c      	movs	r2, #12
 80014e0:	0019      	movs	r1, r3
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fcad 	bl	8000e42 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <RF_Init+0x64>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	0019      	movs	r1, r3
 80014ee:	200c      	movs	r0, #12
 80014f0:	f7ff fca7 	bl	8000e42 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <RF_Init+0x68>)
 80014f6:	2208      	movs	r2, #8
 80014f8:	0019      	movs	r1, r3
 80014fa:	2018      	movs	r0, #24
 80014fc:	f7ff fca1 	bl	8000e42 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <RF_Init+0x6c>)
 8001502:	2218      	movs	r2, #24
 8001504:	0019      	movs	r1, r3
 8001506:	2020      	movs	r0, #32
 8001508:	f7ff fc9b 	bl	8000e42 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <RF_Init+0x70>)
 800150e:	221d      	movs	r2, #29
 8001510:	0019      	movs	r1, r3
 8001512:	2038      	movs	r0, #56	; 0x38
 8001514:	f7ff fc95 	bl	8000e42 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <RF_Init+0x74>)
 800151a:	220b      	movs	r2, #11
 800151c:	0019      	movs	r1, r3
 800151e:	2055      	movs	r0, #85	; 0x55
 8001520:	f7ff fc8f 	bl	8000e42 <Cmt2300_ConfigRegBank>

    RF_Config();
 8001524:	f000 f810 	bl	8001548 <RF_Config>
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	0800695c 	.word	0x0800695c
 8001534:	08006968 	.word	0x08006968
 8001538:	08006974 	.word	0x08006974
 800153c:	0800697c 	.word	0x0800697c
 8001540:	08006994 	.word	0x08006994
 8001544:	080069b4 	.word	0x080069b4

08001548 <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff f89c 	bl	800068a <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 8001552:	2020      	movs	r0, #32
 8001554:	f7ff f844 	bl	80005e0 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 8001558:	2107      	movs	r1, #7
 800155a:	200a      	movs	r0, #10
 800155c:	f7ff f850 	bl	8000600 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 8001560:	203f      	movs	r0, #63	; 0x3f
 8001562:	f7ff f8cd 	bl	8000700 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff fbfd 	bl	8000d66 <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 800156c:	f7ff f804 	bl	8000578 <Cmt2300_GoSleep>
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <RF_GetStatus>:
{
    g_nNextRFState = nStatus;
}

EnumRFStatus RF_GetStatus(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    return g_nNextRFState;
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <RF_GetStatus+0x10>)
 800157e:	781b      	ldrb	r3, [r3, #0]
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	200003a4 	.word	0x200003a4

0800158c <RF_StartRx>:
{
    return g_nInterrutFlags;
}

void RF_StartRx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	200a      	movs	r0, #10
 8001598:	183b      	adds	r3, r7, r0
 800159a:	1c0a      	adds	r2, r1, #0
 800159c:	801a      	strh	r2, [r3, #0]
    g_pRxBuffer = buf;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <RF_StartRx+0x44>)
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	601a      	str	r2, [r3, #0]
    g_nRxLength = len;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <RF_StartRx+0x48>)
 80015a6:	183a      	adds	r2, r7, r0
 80015a8:	8812      	ldrh	r2, [r2, #0]
 80015aa:	801a      	strh	r2, [r3, #0]
    g_nRxTimeout = timeout;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <RF_StartRx+0x4c>)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]

    memset(g_pRxBuffer, 0, g_nRxLength);
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <RF_StartRx+0x44>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <RF_StartRx+0x48>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	001a      	movs	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f004 fbc0 	bl	8005d42 <memset>

    g_nNextRFState = RF_STATE_RX_START;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <RF_StartRx+0x50>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200003a8 	.word	0x200003a8
 80015d4:	200003b0 	.word	0x200003b0
 80015d8:	200000e0 	.word	0x200000e0
 80015dc:	200003a4 	.word	0x200003a4

080015e0 <RF_StartTx>:

void RF_StartTx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	200a      	movs	r0, #10
 80015ec:	183b      	adds	r3, r7, r0
 80015ee:	1c0a      	adds	r2, r1, #0
 80015f0:	801a      	strh	r2, [r3, #0]
    g_pTxBuffer = buf;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <RF_StartTx+0x34>)
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	601a      	str	r2, [r3, #0]
    g_nTxLength = len;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <RF_StartTx+0x38>)
 80015fa:	183a      	adds	r2, r7, r0
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	801a      	strh	r2, [r3, #0]
    g_nTxTimeout = timeout;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <RF_StartTx+0x3c>)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]

    g_nNextRFState = RF_STATE_TX_START;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <RF_StartTx+0x40>)
 8001608:	2205      	movs	r2, #5
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b004      	add	sp, #16
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200003ac 	.word	0x200003ac
 8001618:	200003b2 	.word	0x200003b2
 800161c:	200000e4 	.word	0x200000e4
 8001620:	200003a4 	.word	0x200003a4

08001624 <RF_Process>:

EnumRFResult RF_Process(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
    EnumRFResult nRes = RF_BUSY;
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]

    switch (g_nNextRFState)
 8001630:	4b7c      	ldr	r3, [pc, #496]	; (8001824 <RF_Process+0x200>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b09      	cmp	r3, #9
 8001636:	d900      	bls.n	800163a <RF_Process+0x16>
 8001638:	e0e8      	b.n	800180c <RF_Process+0x1e8>
 800163a:	009a      	lsls	r2, r3, #2
 800163c:	4b7a      	ldr	r3, [pc, #488]	; (8001828 <RF_Process+0x204>)
 800163e:	18d3      	adds	r3, r2, r3
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	469f      	mov	pc, r3
    {
    case RF_STATE_IDLE:
    {
        nRes = RF_IDLE;
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
        break;
 800164a:	e0e4      	b.n	8001816 <RF_Process+0x1f2>
    }

    case RF_STATE_RX_START:
    {
        Cmt2300_GoStby();
 800164c:	f7fe ffa1 	bl	8000592 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 8001650:	f7ff f8e1 	bl	8000816 <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableReadFifo();
 8001654:	f7ff f88e 	bl	8000774 <Cmt2300_EnableReadFifo>
        Cmt2300_ClearFifo();
 8001658:	f7ff f8ca 	bl	80007f0 <Cmt2300_ClearFifo>

        if (false == Cmt2300_GoRx())
 800165c:	f7fe ffb3 	bl	80005c6 <Cmt2300_GoRx>
 8001660:	0003      	movs	r3, r0
 8001662:	001a      	movs	r2, r3
 8001664:	2301      	movs	r3, #1
 8001666:	4053      	eors	r3, r2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <RF_Process+0x52>
        {
            g_nNextRFState = RF_STATE_ERROR;
 800166e:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <RF_Process+0x200>)
 8001670:	2209      	movs	r2, #9
 8001672:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;

            g_nRxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 8001674:	e0cf      	b.n	8001816 <RF_Process+0x1f2>
            cmt2300_irq_request=0;
 8001676:	4b6d      	ldr	r3, [pc, #436]	; (800182c <RF_Process+0x208>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;
 800167c:	4b69      	ldr	r3, [pc, #420]	; (8001824 <RF_Process+0x200>)
 800167e:	2202      	movs	r2, #2
 8001680:	701a      	strb	r2, [r3, #0]
            g_nRxTimeCount = Cmt2300_GetTickCount();
 8001682:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <RF_Process+0x20c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <RF_Process+0x210>)
 8001688:	601a      	str	r2, [r3, #0]
        break;
 800168a:	e0c4      	b.n	8001816 <RF_Process+0x1f2>
    case RF_STATE_RX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_PKT_OK_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG)) /* Read PKT_OK flag */
#else
        if (cmt2300_irq_request) /* Read INT2, PKT_OK */
 800168c:	4b67      	ldr	r3, [pc, #412]	; (800182c <RF_Process+0x208>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <RF_Process+0x7e>
#endif
        {
            cmt2300_irq_request=0;
 8001696:	4b65      	ldr	r3, [pc, #404]	; (800182c <RF_Process+0x208>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_DONE;
 800169c:	4b61      	ldr	r3, [pc, #388]	; (8001824 <RF_Process+0x200>)
 800169e:	2203      	movs	r2, #3
 80016a0:	701a      	strb	r2, [r3, #0]
        }

        if( (INFINITE != g_nRxTimeout) && ((g_nSysTickCount-g_nRxTimeCount) > g_nRxTimeout) )
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <RF_Process+0x214>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	d100      	bne.n	80016ac <RF_Process+0x88>
 80016aa:	e0b1      	b.n	8001810 <RF_Process+0x1ec>
 80016ac:	4b60      	ldr	r3, [pc, #384]	; (8001830 <RF_Process+0x20c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b60      	ldr	r3, [pc, #384]	; (8001834 <RF_Process+0x210>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1ad2      	subs	r2, r2, r3
 80016b6:	4b60      	ldr	r3, [pc, #384]	; (8001838 <RF_Process+0x214>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d800      	bhi.n	80016c0 <RF_Process+0x9c>
 80016be:	e0a7      	b.n	8001810 <RF_Process+0x1ec>
            g_nNextRFState = RF_STATE_RX_TIMEOUT;
 80016c0:	4b58      	ldr	r3, [pc, #352]	; (8001824 <RF_Process+0x200>)
 80016c2:	2204      	movs	r2, #4
 80016c4:	701a      	strb	r2, [r3, #0]
        
        break;
 80016c6:	e0a3      	b.n	8001810 <RF_Process+0x1ec>
    }

    case RF_STATE_RX_DONE:
    {
        Cmt2300_GoStby();
 80016c8:	f7fe ff63 	bl	8000592 <Cmt2300_GoStby>

        Cmt2300_ReadFifo(g_pRxBuffer, 1);//读取数据长度
 80016cc:	4b5b      	ldr	r3, [pc, #364]	; (800183c <RF_Process+0x218>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff fc19 	bl	8000f0a <Cmt2300_ReadFifo>
           
        PlayLoadlen=g_pRxBuffer[0];
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <RF_Process+0x218>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <RF_Process+0x21c>)
 80016e0:	701a      	strb	r2, [r3, #0]
        
        /* The length need be smaller than 32 */
        Cmt2300_ReadFifo(g_pRxBuffer, PlayLoadlen);
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <RF_Process+0x218>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b56      	ldr	r3, [pc, #344]	; (8001840 <RF_Process+0x21c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	0019      	movs	r1, r3
 80016ee:	0010      	movs	r0, r2
 80016f0:	f7ff fc0b 	bl	8000f0a <Cmt2300_ReadFifo>

        g_nInterrutFlags = Cmt2300_ClearInterruptFlags();
 80016f4:	f7ff f88f 	bl	8000816 <Cmt2300_ClearInterruptFlags>
 80016f8:	0003      	movs	r3, r0
 80016fa:	001a      	movs	r2, r3
 80016fc:	4b51      	ldr	r3, [pc, #324]	; (8001844 <RF_Process+0x220>)
 80016fe:	701a      	strb	r2, [r3, #0]

        //        Cmt2300_GoSleep();
        g_nNextRFState = RF_STATE_IDLE;
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <RF_Process+0x200>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_DONE;
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	2202      	movs	r2, #2
 800170a:	701a      	strb	r2, [r3, #0]
        break;
 800170c:	e083      	b.n	8001816 <RF_Process+0x1f2>

    case RF_STATE_RX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();
        //
        g_nNextRFState = RF_STATE_IDLE;
 800170e:	4b45      	ldr	r3, [pc, #276]	; (8001824 <RF_Process+0x200>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_TIMEOUT;
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	2203      	movs	r2, #3
 8001718:	701a      	strb	r2, [r3, #0]
                
        break;
 800171a:	e07c      	b.n	8001816 <RF_Process+0x1f2>
    }

    case RF_STATE_TX_START:
    {
        Cmt2300_GoStby();
 800171c:	f7fe ff39 	bl	8000592 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 8001720:	f7ff f879 	bl	8000816 <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableWriteFifo();
 8001724:	f7ff f845 	bl	80007b2 <Cmt2300_EnableWriteFifo>
        Cmt2300_ClearFifo();
 8001728:	f7ff f862 	bl	80007f0 <Cmt2300_ClearFifo>

        Cmt2300_SetPayloadLength(g_nTxLength); //发射数据长度
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <RF_Process+0x224>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff fadf 	bl	8000cf4 <Cmt2300_SetPayloadLength>
      
        Cmt2300_WriteFifo(g_pTxBuffer, g_nTxLength);
 8001736:	4b45      	ldr	r3, [pc, #276]	; (800184c <RF_Process+0x228>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b43      	ldr	r3, [pc, #268]	; (8001848 <RF_Process+0x224>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	0019      	movs	r1, r3
 8001740:	0010      	movs	r0, r2
 8001742:	f7ff fbf4 	bl	8000f2e <Cmt2300_WriteFifo>

        if (0 == (CMT2300_MASK_TX_FIFO_NMTY_FLG & Cmt2300_ReadReg(CMT2300_CUS_FIFO_FLAG)))
 8001746:	206e      	movs	r0, #110	; 0x6e
 8001748:	f7ff fbb3 	bl	8000eb2 <Cmt2300_ReadReg>
 800174c:	0003      	movs	r3, r0
 800174e:	001a      	movs	r2, r3
 8001750:	2302      	movs	r3, #2
 8001752:	4013      	ands	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <RF_Process+0x13c>
        {
            g_nNextRFState = RF_STATE_ERROR;
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <RF_Process+0x200>)
 800175c:	2209      	movs	r2, #9
 800175e:	701a      	strb	r2, [r3, #0]
        }

        if (false == Cmt2300_GoTx())
 8001760:	f7fe ff24 	bl	80005ac <Cmt2300_GoTx>
 8001764:	0003      	movs	r3, r0
 8001766:	001a      	movs	r2, r3
 8001768:	2301      	movs	r3, #1
 800176a:	4053      	eors	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <RF_Process+0x156>
        {
            g_nNextRFState = RF_STATE_ERROR;
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <RF_Process+0x200>)
 8001774:	2209      	movs	r2, #9
 8001776:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;

            g_nTxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 8001778:	e04d      	b.n	8001816 <RF_Process+0x1f2>
            cmt2300_irq_request=0;
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <RF_Process+0x208>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <RF_Process+0x200>)
 8001782:	2206      	movs	r2, #6
 8001784:	701a      	strb	r2, [r3, #0]
            g_nTxTimeCount = Cmt2300_GetTickCount();
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <RF_Process+0x20c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <RF_Process+0x22c>)
 800178c:	601a      	str	r2, [r3, #0]
        break;
 800178e:	e042      	b.n	8001816 <RF_Process+0x1f2>
    case RF_STATE_TX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
#else
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
 8001790:	206a      	movs	r0, #106	; 0x6a
 8001792:	f7ff fb8e 	bl	8000eb2 <Cmt2300_ReadReg>
 8001796:	0003      	movs	r3, r0
 8001798:	001a      	movs	r2, r3
 800179a:	2308      	movs	r3, #8
 800179c:	4013      	ands	r3, r2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <RF_Process+0x186>
#endif
        {         
          g_nNextRFState = RF_STATE_TX_DONE;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <RF_Process+0x200>)
 80017a6:	2207      	movs	r2, #7
 80017a8:	701a      	strb	r2, [r3, #0]
        }
        
        if( (INFINITE != g_nTxTimeout) && ((g_nSysTickCount-g_nTxTimeCount) > g_nTxTimeout) )
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <RF_Process+0x230>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	d030      	beq.n	8001814 <RF_Process+0x1f0>
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <RF_Process+0x20c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <RF_Process+0x22c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	1ad2      	subs	r2, r2, r3
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <RF_Process+0x230>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d927      	bls.n	8001814 <RF_Process+0x1f0>
            g_nNextRFState = RF_STATE_TX_TIMEOUT;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <RF_Process+0x200>)
 80017c6:	2208      	movs	r2, #8
 80017c8:	701a      	strb	r2, [r3, #0]

        break;
 80017ca:	e023      	b.n	8001814 <RF_Process+0x1f0>
    }

    case RF_STATE_TX_DONE:
    {
        Cmt2300_ClearInterruptFlags();
 80017cc:	f7ff f823 	bl	8000816 <Cmt2300_ClearInterruptFlags>
        //Cmt2300_GoSleep();

        g_nNextRFState = RF_STATE_IDLE;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <RF_Process+0x200>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_DONE;
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	2204      	movs	r2, #4
 80017da:	701a      	strb	r2, [r3, #0]
        break;
 80017dc:	e01b      	b.n	8001816 <RF_Process+0x1f2>
    }

    case RF_STATE_TX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();      
        g_nNextRFState = RF_STATE_IDLE;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <RF_Process+0x200>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_TIMEOUT;
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	2205      	movs	r2, #5
 80017e8:	701a      	strb	r2, [r3, #0]
        break;
 80017ea:	e014      	b.n	8001816 <RF_Process+0x1f2>
    }

    case RF_STATE_ERROR:
    {
        Cmt2300_SoftReset();
 80017ec:	f7fe fe66 	bl	80004bc <Cmt2300_SoftReset>
        Delay_Ms(10);
 80017f0:	200a      	movs	r0, #10
 80017f2:	f000 f869 	bl	80018c8 <Delay_Ms>

        Cmt2300_GoStby();
 80017f6:	f7fe fecc 	bl	8000592 <Cmt2300_GoStby>
        RF_Config();
 80017fa:	f7ff fea5 	bl	8001548 <RF_Config>

        g_nNextRFState = RF_STATE_IDLE;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <RF_Process+0x200>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
        nRes = RF_ERROR;
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	2206      	movs	r2, #6
 8001808:	701a      	strb	r2, [r3, #0]
        break;
 800180a:	e004      	b.n	8001816 <RF_Process+0x1f2>
    }

    default:
        break;
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	e002      	b.n	8001816 <RF_Process+0x1f2>
        break;
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	e000      	b.n	8001816 <RF_Process+0x1f2>
        break;
 8001814:	46c0      	nop			; (mov r8, r8)
    }

    return nRes;
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	200003a4 	.word	0x200003a4
 8001828:	080069c0 	.word	0x080069c0
 800182c:	200003be 	.word	0x200003be
 8001830:	200003c0 	.word	0x200003c0
 8001834:	200003b4 	.word	0x200003b4
 8001838:	200000e0 	.word	0x200000e0
 800183c:	200003a8 	.word	0x200003a8
 8001840:	200003bc 	.word	0x200003bc
 8001844:	200003bd 	.word	0x200003bd
 8001848:	200003b2 	.word	0x200003b2
 800184c:	200003ac 	.word	0x200003ac
 8001850:	200003b8 	.word	0x200003b8
 8001854:	200000e4 	.word	0x200000e4

08001858 <bspInit>:

/*----------------------------------------------------------------
 *  FUNCTION DEFINITION
 *--------------------------------------------------------------*/
void bspInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
    uartInit(BSP_TTL_CHANNEL1);
 800185c:	2000      	movs	r0, #0
 800185e:	f000 f981 	bl	8001b64 <uartInit>
    
    RF_Init();
 8001862:	f7ff fe35 	bl	80014d0 <RF_Init>
    /* check rf is inited ok */
    if (Cmt2300_IsExist())
 8001866:	f7ff fa21 	bl	8000cac <Cmt2300_IsExist>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d006      	beq.n	800187c <bspInit+0x24>
    {
        led1On();
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <bspInit+0x68>)
 8001870:	2201      	movs	r2, #1
 8001872:	2110      	movs	r1, #16
 8001874:	0018      	movs	r0, r3
 8001876:	f001 fcd6 	bl	8003226 <HAL_GPIO_WritePin>
 800187a:	e005      	b.n	8001888 <bspInit+0x30>
    }
    else
    {
        led2On();
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <bspInit+0x68>)
 800187e:	2201      	movs	r2, #1
 8001880:	2120      	movs	r1, #32
 8001882:	0018      	movs	r0, r3
 8001884:	f001 fccf 	bl	8003226 <HAL_GPIO_WritePin>
    }

    /* level7: 20dbm */
    Cmt2300_ConfigTxPower(7);
 8001888:	2007      	movs	r0, #7
 800188a:	f7ff f9a7 	bl	8000bdc <Cmt2300_ConfigTxPower>
    /* rate:1.2kbps */
    Cmt2300_ConfigDataRate(rf_rate_1K2);
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff f8ce 	bl	8000a30 <Cmt2300_ConfigDataRate>
    /* packet type */
    Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 8001894:	2001      	movs	r0, #1
 8001896:	f7fe fe50 	bl	800053a <Cmt2300_ConfigPktLenthType>
    /* packet mode */
    Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 800189a:	2002      	movs	r0, #2
 800189c:	f7ff f97e 	bl	8000b9c <Cmt2300_ConfigDataMode>
    /* enable fifo */
    Cmt2300_EnableFifoMerge(true);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7fe ff3d 	bl	8000720 <Cmt2300_EnableFifoMerge>

    /* disable rf time */
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80018a6:	2301      	movs	r3, #1
 80018a8:	425a      	negs	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <bspInit+0x6c>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff fe6c 	bl	800158c <RF_StartRx>
    rfTimerEnable();
 80018b4:	f000 f8be 	bl	8001a34 <rfTimerEnable>
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	48000400 	.word	0x48000400
 80018c4:	20000288 	.word	0x20000288

080018c8 <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e00c      	b.n	80018f8 <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	e002      	b.n	80018ea <Delay_Ms+0x22>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <Delay_Ms+0x44>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d9f8      	bls.n	80018e4 <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3ee      	bcc.n	80018de <Delay_Ms+0x16>
  }
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	000011bb 	.word	0x000011bb

08001910 <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	0018      	movs	r0, r3
 8001926:	2314      	movs	r3, #20
 8001928:	001a      	movs	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	f004 fa09 	bl	8005d42 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <cmt_spi3_sda_out+0x60>)
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <cmt_spi3_sda_out+0x60>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0289      	lsls	r1, r1, #10
 800193a:	430a      	orrs	r2, r1
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <cmt_spi3_sda_out+0x60>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	029b      	lsls	r3, r3, #10
 8001946:	4013      	ands	r3, r2
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	0052      	lsls	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2201      	movs	r2, #1
 8001958:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2203      	movs	r2, #3
 8001964:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001966:	1d3a      	adds	r2, r7, #4
 8001968:	2390      	movs	r3, #144	; 0x90
 800196a:	05db      	lsls	r3, r3, #23
 800196c:	0011      	movs	r1, r2
 800196e:	0018      	movs	r0, r3
 8001970:	f001 f9fc 	bl	8002d6c <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b006      	add	sp, #24
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000

08001980 <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	0018      	movs	r0, r3
 800198a:	2314      	movs	r3, #20
 800198c:	001a      	movs	r2, r3
 800198e:	2100      	movs	r1, #0
 8001990:	f004 f9d7 	bl	8005d42 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <cmt_spi3_sda_in+0x5c>)
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <cmt_spi3_sda_in+0x5c>)
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	0289      	lsls	r1, r1, #10
 800199e:	430a      	orrs	r2, r1
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <cmt_spi3_sda_in+0x5c>)
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	029b      	lsls	r3, r3, #10
 80019aa:	4013      	ands	r3, r2
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	0052      	lsls	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 80019c4:	1d3a      	adds	r2, r7, #4
 80019c6:	2390      	movs	r3, #144	; 0x90
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f001 f9cd 	bl	8002d6c <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b006      	add	sp, #24
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_GPIO_EXTI_Callback>:
#endif
}

#ifdef USE_CUBEIDE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	0002      	movs	r2, r0
 80019e8:	1dbb      	adds	r3, r7, #6
 80019ea:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 80019ec:	1dbb      	adds	r3, r7, #6
 80019ee:	881a      	ldrh	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d116      	bne.n	8001a26 <HAL_GPIO_EXTI_Callback+0x46>
	{
        EnumRFStatus ret = RF_GetStatus();
 80019f8:	250f      	movs	r5, #15
 80019fa:	197c      	adds	r4, r7, r5
 80019fc:	f7ff fdbc 	bl	8001578 <RF_GetStatus>
 8001a00:	0003      	movs	r3, r0
 8001a02:	7023      	strb	r3, [r4, #0]
        if (ret == RF_STATE_RX_WAIT)
 8001a04:	197b      	adds	r3, r7, r5
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d102      	bne.n	8001a12 <HAL_GPIO_EXTI_Callback+0x32>
        {
            rfRecvDoneCallback();
 8001a0c:	f000 fad0 	bl	8001fb0 <rfRecvDoneCallback>
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x40>
        }
        else if (ret == RF_STATE_TX_WAIT)
 8001a12:	230f      	movs	r3, #15
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b06      	cmp	r3, #6
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_EXTI_Callback+0x40>
        {
            rfSendDoneCallback();
 8001a1c:	f000 fade 	bl	8001fdc <rfSendDoneCallback>
        }
        
		cmt2300_irq_request = 1;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
	}
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	200003be 	.word	0x200003be

08001a34 <rfTimerEnable>:
/**
 * @brief rf timer enable
 * 
 */
void rfTimerEnable(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim16);
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <rfTimerEnable+0x14>)
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f002 f9aa 	bl	8003d94 <HAL_TIM_Base_Start_IT>
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	200004e8 	.word	0x200004e8

08001a4c <rfTimerDisable>:
/**
 * @brief rf timer disable
 * 
 */
void rfTimerDisable(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim16);
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <rfTimerDisable+0x14>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f002 f9ea 	bl	8003e2c <HAL_TIM_Base_Stop_IT>
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	200004e8 	.word	0x200004e8

08001a64 <HAL_TIM_PeriodElapsedCallback>:
 * 
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim14.Instance)
    //	{
    //		time10ms_flag = 1;
    //		timer10InterruptHandler();
    //	}
    if(htim->Instance == htim16.Instance)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d101      	bne.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        HAL_Timer16Callback();
 8001a78:	f000 faf2 	bl	8002060 <HAL_Timer16Callback>
    }
    if (htim->Instance == htim17.Instance) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d103      	bne.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x2c>
        uartTimerIrqHandler(htim);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f9e8 	bl	8001e60 <uartTimerIrqHandler>
    }
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200004e8 	.word	0x200004e8
 8001a9c:	20000530 	.word	0x20000530

08001aa0 <HAL_SysTick_Handler>:
 * 
 * @param None
 * @retval None
 */
void HAL_SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_SysTick_Handler+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_SysTick_Handler+0x14>)
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200003c0 	.word	0x200003c0

08001ab8 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	609a      	str	r2, [r3, #8]
}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b002      	add	sp, #8
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <uartInitRxFifo>:
 * 
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	0002      	movs	r2, r0
 8001ae0:	1dfb      	adds	r3, r7, #7
 8001ae2:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	011a      	lsls	r2, r3, #4
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <uartInitRxFifo+0x34>)
 8001aec:	18d0      	adds	r0, r2, r3
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	021a      	lsls	r2, r3, #8
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <uartInitRxFifo+0x38>)
 8001af6:	18d3      	adds	r3, r2, r3
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	0052      	lsls	r2, r2, #1
 8001afc:	0019      	movs	r1, r3
 8001afe:	f003 fe5c 	bl	80057ba <kfifo_init>
}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	200004c8 	.word	0x200004c8
 8001b10:	200003c8 	.word	0x200003c8

08001b14 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	1dbb      	adds	r3, r7, #6
 8001b20:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8001b22:	2517      	movs	r5, #23
 8001b24:	197b      	adds	r3, r7, r5
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 8001b2a:	197c      	adds	r4, r7, r5
 8001b2c:	1dbb      	adds	r3, r7, #6
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f002 fc95 	bl	8004464 <HAL_UART_Receive_IT>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8001b3e:	197b      	adds	r3, r7, r5
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2278      	movs	r2, #120	; 0x78
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8001b56:	2317      	movs	r3, #23
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b006      	add	sp, #24
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}

08001b64 <uartInit>:
 * 
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff ffaf 	bl	8001ad8 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <uartInit+0x60>)
 8001b80:	0052      	lsls	r2, r2, #1
 8001b82:	2100      	movs	r1, #0
 8001b84:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <uartInit+0x64>)
 8001b8c:	0052      	lsls	r2, r2, #1
 8001b8e:	2100      	movs	r1, #0
 8001b90:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <uartInit+0x68>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <uartInit+0x6c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <uartInit+0x70>)
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	18d3      	adds	r3, r2, r3
 8001ba8:	3304      	adds	r3, #4
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <uartInit+0x74>)
 8001bb2:	18d3      	adds	r3, r2, r3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	f7ff ffac 	bl	8001b14 <UART_Receive_IT>
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200004d8 	.word	0x200004d8
 8001bc8:	200004dc 	.word	0x200004dc
 8001bcc:	200004e0 	.word	0x200004e0
 8001bd0:	200004e4 	.word	0x200004e4
 8001bd4:	200000e8 	.word	0x200000e8
 8001bd8:	200003c4 	.word	0x200003c4

08001bdc <uartRecovery>:
 * 
 * @param channel 
 * @retval None
 */
static void uartRecovery(uartChannel_t channel)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	0002      	movs	r2, r0
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <uartRecovery+0x34>)
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	18d3      	adds	r3, r2, r3
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f002 fb56 	bl	80042a8 <HAL_UART_DeInit>
    uartInit(channel);
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff ffaf 	bl	8001b64 <uartInit>
}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b002      	add	sp, #8
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	200000e8 	.word	0x200000e8

08001c14 <uartSendData>:
 * @param data
 * @param length
 * @retval None
 */
void uartSendData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6039      	str	r1, [r7, #0]
 8001c1c:	0011      	movs	r1, r2
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	1c02      	adds	r2, r0, #0
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	1c0a      	adds	r2, r1, #0
 8001c28:	801a      	strh	r2, [r3, #0]
    uart_tx_status[channel] = BSP_UART_TX_START;
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <uartSendData+0x54>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	54d1      	strb	r1, [r2, r3]
	// if (HAL_UART_Transmit_DMA(uartPara[channel].uart_handle_addr, data, length) != HAL_OK)
	/* use IT mode send data */
	// if (HAL_UART_Transmit_IT( uartPara[channel].uart_handle_addr, data, length ) != HAL_OK)
	/* use poll mode send data */
	if (HAL_UART_Transmit(uartPara[channel].uart_handle_addr, data, length, 0xFFFF) != HAL_OK)
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <uartSendData+0x58>)
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	18d3      	adds	r3, r2, r3
 8001c3e:	3304      	adds	r3, #4
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	4c0b      	ldr	r4, [pc, #44]	; (8001c70 <uartSendData+0x5c>)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	881a      	ldrh	r2, [r3, #0]
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	0023      	movs	r3, r4
 8001c4c:	f002 fb6a 	bl	8004324 <HAL_UART_Transmit>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d004      	beq.n	8001c5e <uartSendData+0x4a>
    {
        uartRecovery(channel);
 8001c54:	1dfb      	adds	r3, r7, #7
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff ffbf 	bl	8001bdc <uartRecovery>
    }
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b003      	add	sp, #12
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	200004e0 	.word	0x200004e0
 8001c6c:	200000e8 	.word	0x200000e8
 8001c70:	0000ffff 	.word	0x0000ffff

08001c74 <HAL_UART_TxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e015      	b.n	8001cb2 <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 8001c86:	210f      	movs	r1, #15
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_UART_TxCpltCallback+0x54>)
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	58d2      	ldr	r2, [r2, r3]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d105      	bne.n	8001ca6 <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_UART_TxCpltCallback+0x58>)
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	54d1      	strb	r1, [r2, r3]
            break;
 8001ca4:	e00b      	b.n	8001cbe <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	3201      	adds	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0e4      	beq.n	8001c86 <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b004      	add	sp, #16
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	200000e8 	.word	0x200000e8
 8001ccc:	200004e0 	.word	0x200004e0

08001cd0 <uartGetData>:
 * @param data 
 * @param length 
 * @retval uint32_t 
 */
uint32_t uartGetData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6039      	str	r1, [r7, #0]
 8001cd8:	0011      	movs	r1, r2
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	1c02      	adds	r2, r0, #0
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	1c0a      	adds	r2, r1, #0
 8001ce4:	801a      	strh	r2, [r3, #0]
    uint32_t ret = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]

    if (BSP_UART_RX_COMPLETED == uart_rx_status[channel]) 
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <uartGetData+0x54>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d10d      	bne.n	8001d14 <uartGetData+0x44>
	{
		ret = kfifo_out(&uart_rx_fifo[channel], data, length);
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	011a      	lsls	r2, r3, #4
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <uartGetData+0x58>)
 8001d00:	18d0      	adds	r0, r2, r3
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	0019      	movs	r1, r3
 8001d0a:	f003 fdf7 	bl	80058fc <kfifo_out>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e001      	b.n	8001d18 <uartGetData+0x48>
	}    
	else
	{
		ret = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
	}

    return ret;
 8001d18:	68fb      	ldr	r3, [r7, #12]
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	200004e4 	.word	0x200004e4
 8001d28:	200004c8 	.word	0x200004c8

08001d2c <uartResetData>:
 * 
 * @param channel 
 * @retval None
 */
void uartResetData(uartChannel_t channel)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	0002      	movs	r2, r0
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	701a      	strb	r2, [r3, #0]
    kfifo_reset(&uart_rx_fifo[channel]);
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	011a      	lsls	r2, r3, #4
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <uartResetData+0x3c>)
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	0018      	movs	r0, r3
 8001d44:	f7ff feb8 	bl	8001ab8 <kfifo_reset>
    uart_rx_size[channel] = 0;
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <uartResetData+0x40>)
 8001d4e:	0052      	lsls	r2, r2, #1
 8001d50:	2100      	movs	r1, #0
 8001d52:	52d1      	strh	r1, [r2, r3]
    uart_rx_status[channel] = BSP_UART_IDLE;
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <uartResetData+0x44>)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	54d1      	strb	r1, [r2, r3]
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	200004c8 	.word	0x200004c8
 8001d6c:	200004dc 	.word	0x200004dc
 8001d70:	200004e4 	.word	0x200004e4

08001d74 <HAL_UART_RxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e059      	b.n	8001e3a <HAL_UART_RxCpltCallback+0xc6>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8001d86:	240f      	movs	r4, #15
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_UART_RxCpltCallback+0xd8>)
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	58d2      	ldr	r2, [r2, r3]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d149      	bne.n	8001e2e <HAL_UART_RxCpltCallback+0xba>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4a2c      	ldr	r2, [pc, #176]	; (8001e50 <HAL_UART_RxCpltCallback+0xdc>)
 8001da0:	2103      	movs	r1, #3
 8001da2:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8001da4:	193b      	adds	r3, r7, r4
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_UART_RxCpltCallback+0xd8>)
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	18d3      	adds	r3, r2, r3
 8001dae:	3308      	adds	r3, #8
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8001db6:	193b      	adds	r3, r7, r4
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_UART_RxCpltCallback+0xd8>)
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	18d3      	adds	r3, r2, r3
 8001dc0:	3308      	adds	r3, #8
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_UART_RxCpltCallback+0xd8>)
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	18d3      	adds	r3, r2, r3
 8001dd2:	330c      	adds	r3, #12
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f001 ffdc 	bl	8003d94 <HAL_TIM_Base_Start_IT>
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 8001ddc:	193b      	adds	r3, r7, r4
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	011a      	lsls	r2, r3, #4
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_UART_RxCpltCallback+0xe0>)
 8001de4:	18d0      	adds	r0, r2, r3
 8001de6:	193b      	adds	r3, r7, r4
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_UART_RxCpltCallback+0xe4>)
 8001dec:	18d3      	adds	r3, r2, r3
 8001dee:	2201      	movs	r2, #1
 8001df0:	0019      	movs	r1, r3
 8001df2:	f003 fd5c 	bl	80058ae <kfifo_in>
            uart_rx_counter[i]++;
 8001df6:	0020      	movs	r0, r4
 8001df8:	193b      	adds	r3, r7, r4
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_UART_RxCpltCallback+0xe8>)
 8001dfe:	0059      	lsls	r1, r3, #1
 8001e00:	5a8a      	ldrh	r2, [r1, r2]
 8001e02:	3201      	adds	r2, #1
 8001e04:	b291      	uxth	r1, r2
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <HAL_UART_RxCpltCallback+0xe8>)
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 8001e0c:	0001      	movs	r1, r0
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_UART_RxCpltCallback+0xd8>)
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	18d3      	adds	r3, r2, r3
 8001e18:	3304      	adds	r3, #4
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_UART_RxCpltCallback+0xe4>)
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	2201      	movs	r2, #1
 8001e26:	0019      	movs	r1, r3
 8001e28:	f7ff fe74 	bl	8001b14 <UART_Receive_IT>
            return;
 8001e2c:	e00a      	b.n	8001e44 <HAL_UART_RxCpltCallback+0xd0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001e2e:	210f      	movs	r1, #15
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	3201      	adds	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	230f      	movs	r3, #15
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0a0      	beq.n	8001d86 <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b005      	add	sp, #20
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	200000e8 	.word	0x200000e8
 8001e50:	200004e4 	.word	0x200004e4
 8001e54:	200004c8 	.word	0x200004c8
 8001e58:	200003c4 	.word	0x200003c4
 8001e5c:	200004d8 	.word	0x200004d8

08001e60 <uartTimerIrqHandler>:
 * 
 * @param htim 
 * @retval None
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001e68:	230f      	movs	r3, #15
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	e05f      	b.n	8001f32 <uartTimerIrqHandler+0xd2>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 8001e72:	210f      	movs	r1, #15
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4a33      	ldr	r2, [pc, #204]	; (8001f48 <uartTimerIrqHandler+0xe8>)
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	18d3      	adds	r3, r2, r3
 8001e7e:	3308      	adds	r3, #8
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d14d      	bne.n	8001f26 <uartTimerIrqHandler+0xc6>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 8001e8a:	000c      	movs	r4, r1
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <uartTimerIrqHandler+0xe8>)
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	18d3      	adds	r3, r2, r3
 8001e96:	330c      	adds	r3, #12
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f001 ffc6 	bl	8003e2c <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8001ea0:	0020      	movs	r0, r4
 8001ea2:	183b      	adds	r3, r7, r0
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4a29      	ldr	r2, [pc, #164]	; (8001f4c <uartTimerIrqHandler+0xec>)
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <uartTimerIrqHandler+0xf0>)
 8001eb2:	0052      	lsls	r2, r2, #1
 8001eb4:	5ad1      	ldrh	r1, [r2, r3]
 8001eb6:	183b      	adds	r3, r7, r0
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <uartTimerIrqHandler+0xf4>)
 8001ebc:	0052      	lsls	r2, r2, #1
 8001ebe:	5ad3      	ldrh	r3, [r2, r3]
 8001ec0:	183a      	adds	r2, r7, r0
 8001ec2:	7812      	ldrb	r2, [r2, #0]
 8001ec4:	18cb      	adds	r3, r1, r3
 8001ec6:	b299      	uxth	r1, r3
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <uartTimerIrqHandler+0xf0>)
 8001eca:	0052      	lsls	r2, r2, #1
 8001ecc:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <uartTimerIrqHandler+0xf0>)
 8001ed4:	0052      	lsls	r2, r2, #1
 8001ed6:	5ad2      	ldrh	r2, [r2, r3]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d918      	bls.n	8001f12 <uartTimerIrqHandler+0xb2>
            {
            	uart_rx_size[i] = uart_rx_counter[i];
 8001ee0:	183b      	adds	r3, r7, r0
 8001ee2:	7819      	ldrb	r1, [r3, #0]
 8001ee4:	183b      	adds	r3, r7, r0
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <uartTimerIrqHandler+0xf4>)
 8001eea:	0049      	lsls	r1, r1, #1
 8001eec:	5ac9      	ldrh	r1, [r1, r3]
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <uartTimerIrqHandler+0xf0>)
 8001ef0:	0052      	lsls	r2, r2, #1
 8001ef2:	52d1      	strh	r1, [r2, r3]
            	kfifo_reset(&uart_rx_fifo[i]);
 8001ef4:	0004      	movs	r4, r0
 8001ef6:	183b      	adds	r3, r7, r0
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	011a      	lsls	r2, r3, #4
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <uartTimerIrqHandler+0xf8>)
 8001efe:	18d3      	adds	r3, r2, r3
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff fdd9 	bl	8001ab8 <kfifo_reset>
            	uart_rx_size[i] = 0;
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <uartTimerIrqHandler+0xf0>)
 8001f0c:	0052      	lsls	r2, r2, #1
 8001f0e:	2100      	movs	r1, #0
 8001f10:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 8001f12:	230f      	movs	r3, #15
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <uartTimerIrqHandler+0xf4>)
 8001f1a:	0052      	lsls	r2, r2, #1
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	52d1      	strh	r1, [r2, r3]

#ifdef USE_CUBEIDE
            uartRecvDoneCallback();
 8001f20:	f000 f8b8 	bl	8002094 <uartRecvDoneCallback>
#endif
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 8001f24:	e00b      	b.n	8001f3e <uartTimerIrqHandler+0xde>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f26:	210f      	movs	r1, #15
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	3201      	adds	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	230f      	movs	r3, #15
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d09a      	beq.n	8001e72 <uartTimerIrqHandler+0x12>
        }
    }
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b005      	add	sp, #20
 8001f44:	bd90      	pop	{r4, r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	200000e8 	.word	0x200000e8
 8001f4c:	200004e4 	.word	0x200004e4
 8001f50:	200004dc 	.word	0x200004dc
 8001f54:	200004d8 	.word	0x200004d8
 8001f58:	200004c8 	.word	0x200004c8

08001f5c <HAL_UART_ErrorCallback>:
 * 
 * @param huart
 * @retval None 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f64:	230f      	movs	r3, #15
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e014      	b.n	8001f98 <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 8001f6e:	210f      	movs	r1, #15
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_UART_ErrorCallback+0x50>)
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	58d2      	ldr	r2, [r2, r3]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d104      	bne.n	8001f8c <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7ff fe28 	bl	8001bdc <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	3201      	adds	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0e5      	beq.n	8001f6e <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200000e8 	.word	0x200000e8

08001fb0 <rfRecvDoneCallback>:
/**
 * @brief rf recv done callback
 * 
 */
void rfRecvDoneCallback(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){uartRecvEvent, NULL});
 8001fb6:	003b      	movs	r3, r7
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	003b      	movs	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	003a      	movs	r2, r7
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <rfRecvDoneCallback+0x28>)
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f003 fcf8 	bl	80059be <mq_push>
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000314 	.word	0x20000314

08001fdc <rfSendDoneCallback>:
/**
 * @brief rf send done callback
 * 
 */
void rfSendDoneCallback(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfSendEvent, NULL});
 8001fe2:	003b      	movs	r3, r7
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	003b      	movs	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	003a      	movs	r2, r7
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <rfSendDoneCallback+0x28>)
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f003 fce2 	bl	80059be <mq_push>
}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	20000314 	.word	0x20000314

08002008 <rfRecvTimeoutCallback>:
/**
 * @brief 
 * 
 */
void rfRecvTimeoutCallback(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvTimeoutEvent, NULL});
 800200e:	003b      	movs	r3, r7
 8002010:	2205      	movs	r2, #5
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	003b      	movs	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	003a      	movs	r2, r7
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <rfRecvTimeoutCallback+0x28>)
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f003 fccc 	bl	80059be <mq_push>
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	20000314 	.word	0x20000314

08002034 <rfRecvErrorCallback>:
/**
 * @brief 
 * 
 */
void rfRecvErrorCallback(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvErrorEvent, NULL});
 800203a:	003b      	movs	r3, r7
 800203c:	2204      	movs	r2, #4
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	003b      	movs	r3, r7
 8002042:	2200      	movs	r2, #0
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	003a      	movs	r2, r7
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <rfRecvErrorCallback+0x28>)
 800204a:	0011      	movs	r1, r2
 800204c:	0018      	movs	r0, r3
 800204e:	f003 fcb6 	bl	80059be <mq_push>
}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	20000314 	.word	0x20000314

08002060 <HAL_Timer16Callback>:
/**
 * @brief timer16 callback,10ms
 * 
 */
void HAL_Timer16Callback(void)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
    EnumRFStatus rfState = RF_GetStatus();
 8002066:	1dfc      	adds	r4, r7, #7
 8002068:	f7ff fa86 	bl	8001578 <RF_GetStatus>
 800206c:	0003      	movs	r3, r0
 800206e:	7023      	strb	r3, [r4, #0]
    if (RF_STATE_RX_TIMEOUT == rfState)
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d102      	bne.n	800207e <HAL_Timer16Callback+0x1e>
    {
        rfRecvTimeoutCallback();
 8002078:	f7ff ffc6 	bl	8002008 <rfRecvTimeoutCallback>
    }
    else if (RF_STATE_ERROR == rfState)
    {
        rfRecvErrorCallback();
    }
}
 800207c:	e005      	b.n	800208a <HAL_Timer16Callback+0x2a>
    else if (RF_STATE_ERROR == rfState)
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b09      	cmp	r3, #9
 8002084:	d101      	bne.n	800208a <HAL_Timer16Callback+0x2a>
        rfRecvErrorCallback();
 8002086:	f7ff ffd5 	bl	8002034 <rfRecvErrorCallback>
}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b003      	add	sp, #12
 8002090:	bd90      	pop	{r4, r7, pc}
	...

08002094 <uartRecvDoneCallback>:
/**
 * @brief uart recv done callback
 * 
 */
void uartRecvDoneCallback(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){uartRecvEvent, NULL});
 800209a:	003b      	movs	r3, r7
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	003b      	movs	r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	003a      	movs	r2, r7
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <uartRecvDoneCallback+0x28>)
 80020aa:	0011      	movs	r1, r2
 80020ac:	0018      	movs	r0, r3
 80020ae:	f003 fc86 	bl	80059be <mq_push>
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20000314 	.word	0x20000314

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c4:	f000 fc60 	bl	8002988 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c8:	f000 f80f 	bl	80020ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020cc:	f000 f91c 	bl	8002308 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020d0:	f000 f8ba 	bl	8002248 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80020d4:	f000 f8e8 	bl	80022a8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80020d8:	f000 f88e 	bl	80021f8 <MX_TIM17_Init>
  MX_TIM16_Init();
 80020dc:	f000 f864 	bl	80021a8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  bspInit();
 80020e0:	f7ff fbba 	bl	8001858 <bspInit>
  stateActuator();
 80020e4:	f7fe f9b8 	bl	8000458 <stateActuator>
//  messageQueueTest();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <main+0x28>

080020ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b095      	sub	sp, #84	; 0x54
 80020ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f0:	2420      	movs	r4, #32
 80020f2:	193b      	adds	r3, r7, r4
 80020f4:	0018      	movs	r0, r3
 80020f6:	2330      	movs	r3, #48	; 0x30
 80020f8:	001a      	movs	r2, r3
 80020fa:	2100      	movs	r1, #0
 80020fc:	f003 fe21 	bl	8005d42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002100:	2310      	movs	r3, #16
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	0018      	movs	r0, r3
 8002106:	2310      	movs	r3, #16
 8002108:	001a      	movs	r2, r3
 800210a:	2100      	movs	r1, #0
 800210c:	f003 fe19 	bl	8005d42 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002110:	003b      	movs	r3, r7
 8002112:	0018      	movs	r0, r3
 8002114:	2310      	movs	r3, #16
 8002116:	001a      	movs	r2, r3
 8002118:	2100      	movs	r1, #0
 800211a:	f003 fe12 	bl	8005d42 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800211e:	0021      	movs	r1, r4
 8002120:	187b      	adds	r3, r7, r1
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002126:	187b      	adds	r3, r7, r1
 8002128:	2201      	movs	r2, #1
 800212a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212c:	187b      	adds	r3, r7, r1
 800212e:	2202      	movs	r2, #2
 8002130:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002132:	187b      	adds	r3, r7, r1
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	0252      	lsls	r2, r2, #9
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800213a:	187b      	adds	r3, r7, r1
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	02d2      	lsls	r2, r2, #11
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2200      	movs	r2, #0
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002148:	187b      	adds	r3, r7, r1
 800214a:	0018      	movs	r0, r3
 800214c:	f001 f8a4 	bl	8003298 <HAL_RCC_OscConfig>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002154:	f000 f9c6 	bl	80024e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	2110      	movs	r1, #16
 800215a:	187b      	adds	r3, r7, r1
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002160:	187b      	adds	r3, r7, r1
 8002162:	2202      	movs	r2, #2
 8002164:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002166:	187b      	adds	r3, r7, r1
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800216c:	187b      	adds	r3, r7, r1
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002172:	187b      	adds	r3, r7, r1
 8002174:	2101      	movs	r1, #1
 8002176:	0018      	movs	r0, r3
 8002178:	f001 fba8 	bl	80038cc <HAL_RCC_ClockConfig>
 800217c:	1e03      	subs	r3, r0, #0
 800217e:	d001      	beq.n	8002184 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002180:	f000 f9b0 	bl	80024e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002184:	003b      	movs	r3, r7
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800218a:	003b      	movs	r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002190:	003b      	movs	r3, r7
 8002192:	0018      	movs	r0, r3
 8002194:	f001 fce0 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8002198:	1e03      	subs	r3, r0, #0
 800219a:	d001      	beq.n	80021a0 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800219c:	f000 f9a2 	bl	80024e4 <Error_Handler>
  }
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b015      	add	sp, #84	; 0x54
 80021a6:	bd90      	pop	{r4, r7, pc}

080021a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_TIM16_Init+0x44>)
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <MX_TIM16_Init+0x48>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_TIM16_Init+0x44>)
 80021b4:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <MX_TIM16_Init+0x4c>)
 80021b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_TIM16_Init+0x44>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_TIM16_Init+0x44>)
 80021c0:	2263      	movs	r2, #99	; 0x63
 80021c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_TIM16_Init+0x44>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_TIM16_Init+0x44>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_TIM16_Init+0x44>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <MX_TIM16_Init+0x44>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f001 fd8b 	bl	8003cf4 <HAL_TIM_Base_Init>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80021e2:	f000 f97f 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200004e8 	.word	0x200004e8
 80021f0:	40014400 	.word	0x40014400
 80021f4:	000012bf 	.word	0x000012bf

080021f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_TIM17_Init+0x44>)
 80021fe:	4a10      	ldr	r2, [pc, #64]	; (8002240 <MX_TIM17_Init+0x48>)
 8002200:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_TIM17_Init+0x44>)
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <MX_TIM17_Init+0x4c>)
 8002206:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_TIM17_Init+0x44>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <MX_TIM17_Init+0x44>)
 8002210:	2223      	movs	r2, #35	; 0x23
 8002212:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_TIM17_Init+0x44>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <MX_TIM17_Init+0x44>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_TIM17_Init+0x44>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <MX_TIM17_Init+0x44>)
 8002228:	0018      	movs	r0, r3
 800222a:	f001 fd63 	bl	8003cf4 <HAL_TIM_Base_Init>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8002232:	f000 f957 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000530 	.word	0x20000530
 8002240:	40014800 	.word	0x40014800
 8002244:	000012bf 	.word	0x000012bf

08002248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 800224e:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <MX_USART1_UART_Init+0x5c>)
 8002250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 8002254:	22e1      	movs	r2, #225	; 0xe1
 8002256:	0252      	lsls	r2, r2, #9
 8002258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <MX_USART1_UART_Init+0x58>)
 800228c:	0018      	movs	r0, r3
 800228e:	f001 ffb7 	bl	8004200 <HAL_UART_Init>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d001      	beq.n	800229a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002296:	f000 f925 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000578 	.word	0x20000578
 80022a4:	40013800 	.word	0x40013800

080022a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <MX_USART2_UART_Init+0x5c>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022b4:	22e1      	movs	r2, #225	; 0xe1
 80022b6:	0252      	lsls	r2, r2, #9
 80022b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <MX_USART2_UART_Init+0x58>)
 80022ec:	0018      	movs	r0, r3
 80022ee:	f001 ff87 	bl	8004200 <HAL_UART_Init>
 80022f2:	1e03      	subs	r3, r0, #0
 80022f4:	d001      	beq.n	80022fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022f6:	f000 f8f5 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000600 	.word	0x20000600
 8002304:	40004400 	.word	0x40004400

08002308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230e:	240c      	movs	r4, #12
 8002310:	193b      	adds	r3, r7, r4
 8002312:	0018      	movs	r0, r3
 8002314:	2314      	movs	r3, #20
 8002316:	001a      	movs	r2, r3
 8002318:	2100      	movs	r1, #0
 800231a:	f003 fd12 	bl	8005d42 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231e:	4b6e      	ldr	r3, [pc, #440]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	4b6d      	ldr	r3, [pc, #436]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	03c9      	lsls	r1, r1, #15
 8002328:	430a      	orrs	r2, r1
 800232a:	615a      	str	r2, [r3, #20]
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	03db      	lsls	r3, r3, #15
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0289      	lsls	r1, r1, #10
 8002344:	430a      	orrs	r2, r1
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	4013      	ands	r3, r2
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	4b60      	ldr	r3, [pc, #384]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	02c9      	lsls	r1, r1, #11
 8002360:	430a      	orrs	r2, r1
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <MX_GPIO_Init+0x1d0>)
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	02db      	lsls	r3, r3, #11
 800236c:	4013      	ands	r3, r2
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 8002372:	2381      	movs	r3, #129	; 0x81
 8002374:	0119      	lsls	r1, r3, #4
 8002376:	2390      	movs	r3, #144	; 0x90
 8002378:	05db      	lsls	r3, r3, #23
 800237a:	2200      	movs	r2, #0
 800237c:	0018      	movs	r0, r3
 800237e:	f000 ff52 	bl	8003226 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 8002382:	4956      	ldr	r1, [pc, #344]	; (80024dc <MX_GPIO_Init+0x1d4>)
 8002384:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <MX_GPIO_Init+0x1d8>)
 8002386:	2200      	movs	r2, #0
 8002388:	0018      	movs	r0, r3
 800238a:	f000 ff4c 	bl	8003226 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 800238e:	193b      	adds	r3, r7, r4
 8002390:	2210      	movs	r2, #16
 8002392:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	193b      	adds	r3, r7, r4
 8002396:	2201      	movs	r2, #1
 8002398:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	193b      	adds	r3, r7, r4
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	2201      	movs	r2, #1
 80023a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80023a6:	193a      	adds	r2, r7, r4
 80023a8:	2390      	movs	r3, #144	; 0x90
 80023aa:	05db      	lsls	r3, r3, #23
 80023ac:	0011      	movs	r1, r2
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 fcdc 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 80023b4:	0021      	movs	r1, r4
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	0152      	lsls	r2, r2, #5
 80023bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023be:	000c      	movs	r4, r1
 80023c0:	193b      	adds	r3, r7, r4
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c6:	193b      	adds	r3, r7, r4
 80023c8:	2201      	movs	r2, #1
 80023ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	4a44      	ldr	r2, [pc, #272]	; (80024e0 <MX_GPIO_Init+0x1d8>)
 80023d0:	0019      	movs	r1, r3
 80023d2:	0010      	movs	r0, r2
 80023d4:	f000 fcca 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 80023d8:	0021      	movs	r1, r4
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	0192      	lsls	r2, r2, #6
 80023e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	2288      	movs	r2, #136	; 0x88
 80023e6:	0352      	lsls	r2, r2, #13
 80023e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2201      	movs	r2, #1
 80023ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 80023f0:	000c      	movs	r4, r1
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	4a3a      	ldr	r2, [pc, #232]	; (80024e0 <MX_GPIO_Init+0x1d8>)
 80023f6:	0019      	movs	r1, r3
 80023f8:	0010      	movs	r0, r2
 80023fa:	f000 fcb7 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 80023fe:	0021      	movs	r1, r4
 8002400:	187b      	adds	r3, r7, r1
 8002402:	22c0      	movs	r2, #192	; 0xc0
 8002404:	0212      	lsls	r2, r2, #8
 8002406:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	000c      	movs	r4, r1
 800240a:	193b      	adds	r3, r7, r4
 800240c:	2201      	movs	r2, #1
 800240e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	193b      	adds	r3, r7, r4
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002416:	193b      	adds	r3, r7, r4
 8002418:	2203      	movs	r2, #3
 800241a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	193b      	adds	r3, r7, r4
 800241e:	4a30      	ldr	r2, [pc, #192]	; (80024e0 <MX_GPIO_Init+0x1d8>)
 8002420:	0019      	movs	r1, r3
 8002422:	0010      	movs	r0, r2
 8002424:	f000 fca2 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0052      	lsls	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002430:	193b      	adds	r3, r7, r4
 8002432:	2200      	movs	r2, #0
 8002434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	193b      	adds	r3, r7, r4
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 800243c:	193a      	adds	r2, r7, r4
 800243e:	2390      	movs	r3, #144	; 0x90
 8002440:	05db      	lsls	r3, r3, #23
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f000 fc91 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 800244a:	0021      	movs	r1, r4
 800244c:	187b      	adds	r3, r7, r1
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	000c      	movs	r4, r1
 8002456:	193b      	adds	r3, r7, r4
 8002458:	2201      	movs	r2, #1
 800245a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	193b      	adds	r3, r7, r4
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002462:	193b      	adds	r3, r7, r4
 8002464:	2203      	movs	r2, #3
 8002466:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 8002468:	193a      	adds	r2, r7, r4
 800246a:	2390      	movs	r3, #144	; 0x90
 800246c:	05db      	lsls	r3, r3, #23
 800246e:	0011      	movs	r1, r2
 8002470:	0018      	movs	r0, r3
 8002472:	f000 fc7b 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 8002476:	193b      	adds	r3, r7, r4
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	0152      	lsls	r2, r2, #5
 800247c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800247e:	193b      	adds	r3, r7, r4
 8002480:	2288      	movs	r2, #136	; 0x88
 8002482:	0352      	lsls	r2, r2, #13
 8002484:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002486:	193b      	adds	r3, r7, r4
 8002488:	2201      	movs	r2, #1
 800248a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 800248c:	193a      	adds	r2, r7, r4
 800248e:	2390      	movs	r3, #144	; 0x90
 8002490:	05db      	lsls	r3, r3, #23
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f000 fc69 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 800249a:	0021      	movs	r1, r4
 800249c:	187b      	adds	r3, r7, r1
 800249e:	2230      	movs	r2, #48	; 0x30
 80024a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	2201      	movs	r2, #1
 80024a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	2201      	movs	r2, #1
 80024b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <MX_GPIO_Init+0x1d8>)
 80024b8:	0019      	movs	r1, r3
 80024ba:	0010      	movs	r0, r2
 80024bc:	f000 fc56 	bl	8002d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	2007      	movs	r0, #7
 80024c6:	f000 fb91 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80024ca:	2007      	movs	r0, #7
 80024cc:	f000 fba3 	bl	8002c16 <HAL_NVIC_EnableIRQ>

}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b009      	add	sp, #36	; 0x24
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	0000c030 	.word	0x0000c030
 80024e0:	48000400 	.word	0x48000400

080024e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e8:	b672      	cpsid	i
}
 80024ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024ec:	e7fe      	b.n	80024ec <Error_Handler+0x8>
	...

080024f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_MspInit+0x44>)
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_MspInit+0x44>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_MspInit+0x44>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_MspInit+0x44>)
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_MspInit+0x44>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0549      	lsls	r1, r1, #21
 8002518:	430a      	orrs	r2, r1
 800251a:	61da      	str	r2, [r3, #28]
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_MspInit+0x44>)
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	055b      	lsls	r3, r3, #21
 8002524:	4013      	ands	r3, r2
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_TIM_Base_MspInit+0x80>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d116      	bne.n	8002578 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_TIM_Base_MspInit+0x84>)
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_TIM_Base_MspInit+0x84>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0289      	lsls	r1, r1, #10
 8002554:	430a      	orrs	r2, r1
 8002556:	619a      	str	r2, [r3, #24]
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_TIM_Base_MspInit+0x84>)
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	2015      	movs	r0, #21
 800256c:	f000 fb3e 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002570:	2015      	movs	r0, #21
 8002572:	f000 fb50 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002576:	e01a      	b.n	80025ae <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_TIM_Base_MspInit+0x88>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d115      	bne.n	80025ae <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_TIM_Base_MspInit+0x84>)
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_TIM_Base_MspInit+0x84>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	02c9      	lsls	r1, r1, #11
 800258c:	430a      	orrs	r2, r1
 800258e:	619a      	str	r2, [r3, #24]
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_TIM_Base_MspInit+0x84>)
 8002592:	699a      	ldr	r2, [r3, #24]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	02db      	lsls	r3, r3, #11
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2016      	movs	r0, #22
 80025a4:	f000 fb22 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80025a8:	2016      	movs	r0, #22
 80025aa:	f000 fb34 	bl	8002c16 <HAL_NVIC_EnableIRQ>
}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b004      	add	sp, #16
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	40014400 	.word	0x40014400
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40014800 	.word	0x40014800

080025c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b08d      	sub	sp, #52	; 0x34
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	241c      	movs	r4, #28
 80025ce:	193b      	adds	r3, r7, r4
 80025d0:	0018      	movs	r0, r3
 80025d2:	2314      	movs	r3, #20
 80025d4:	001a      	movs	r2, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	f003 fbb3 	bl	8005d42 <memset>
  if(huart->Instance==USART1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3d      	ldr	r2, [pc, #244]	; (80026d8 <HAL_UART_MspInit+0x114>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d13c      	bne.n	8002660 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_UART_MspInit+0x118>)
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <HAL_UART_MspInit+0x118>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	01c9      	lsls	r1, r1, #7
 80025f0:	430a      	orrs	r2, r1
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_UART_MspInit+0x118>)
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	01db      	lsls	r3, r3, #7
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_UART_MspInit+0x118>)
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_UART_MspInit+0x118>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0289      	lsls	r1, r1, #10
 800260c:	430a      	orrs	r2, r1
 800260e:	615a      	str	r2, [r3, #20]
 8002610:	4b32      	ldr	r3, [pc, #200]	; (80026dc <HAL_UART_MspInit+0x118>)
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	029b      	lsls	r3, r3, #10
 8002618:	4013      	ands	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800261e:	193b      	adds	r3, r7, r4
 8002620:	22c0      	movs	r2, #192	; 0xc0
 8002622:	00d2      	lsls	r2, r2, #3
 8002624:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	0021      	movs	r1, r4
 8002628:	187b      	adds	r3, r7, r1
 800262a:	2202      	movs	r2, #2
 800262c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002634:	187b      	adds	r3, r7, r1
 8002636:	2203      	movs	r2, #3
 8002638:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800263a:	187b      	adds	r3, r7, r1
 800263c:	2201      	movs	r2, #1
 800263e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002640:	187a      	adds	r2, r7, r1
 8002642:	2390      	movs	r3, #144	; 0x90
 8002644:	05db      	lsls	r3, r3, #23
 8002646:	0011      	movs	r1, r2
 8002648:	0018      	movs	r0, r3
 800264a:	f000 fb8f 	bl	8002d6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2101      	movs	r1, #1
 8002652:	201b      	movs	r0, #27
 8002654:	f000 faca 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002658:	201b      	movs	r0, #27
 800265a:	f000 fadc 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800265e:	e037      	b.n	80026d0 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <HAL_UART_MspInit+0x11c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d132      	bne.n	80026d0 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_UART_MspInit+0x118>)
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_UART_MspInit+0x118>)
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	0289      	lsls	r1, r1, #10
 8002674:	430a      	orrs	r2, r1
 8002676:	61da      	str	r2, [r3, #28]
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_UART_MspInit+0x118>)
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_UART_MspInit+0x118>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_UART_MspInit+0x118>)
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	0289      	lsls	r1, r1, #10
 8002690:	430a      	orrs	r2, r1
 8002692:	615a      	str	r2, [r3, #20]
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_UART_MspInit+0x118>)
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a2:	211c      	movs	r1, #28
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	2202      	movs	r2, #2
 80026ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2203      	movs	r2, #3
 80026ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2201      	movs	r2, #1
 80026c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	187a      	adds	r2, r7, r1
 80026c4:	2390      	movs	r3, #144	; 0x90
 80026c6:	05db      	lsls	r3, r3, #23
 80026c8:	0011      	movs	r1, r2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fb4e 	bl	8002d6c <HAL_GPIO_Init>
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b00d      	add	sp, #52	; 0x34
 80026d6:	bd90      	pop	{r4, r7, pc}
 80026d8:	40013800 	.word	0x40013800
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40004400 	.word	0x40004400

080026e4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_UART_MspDeInit+0x60>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d111      	bne.n	800271a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_UART_MspDeInit+0x64>)
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_UART_MspDeInit+0x64>)
 80026fc:	4913      	ldr	r1, [pc, #76]	; (800274c <HAL_UART_MspDeInit+0x68>)
 80026fe:	400a      	ands	r2, r1
 8002700:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002702:	23c0      	movs	r3, #192	; 0xc0
 8002704:	00da      	lsls	r2, r3, #3
 8002706:	2390      	movs	r3, #144	; 0x90
 8002708:	05db      	lsls	r3, r3, #23
 800270a:	0011      	movs	r1, r2
 800270c:	0018      	movs	r0, r3
 800270e:	f000 fc9d 	bl	800304c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002712:	201b      	movs	r0, #27
 8002714:	f000 fa8f 	bl	8002c36 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002718:	e010      	b.n	800273c <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <HAL_UART_MspDeInit+0x6c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d10b      	bne.n	800273c <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_UART_MspDeInit+0x64>)
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <HAL_UART_MspDeInit+0x64>)
 800272a:	490a      	ldr	r1, [pc, #40]	; (8002754 <HAL_UART_MspDeInit+0x70>)
 800272c:	400a      	ands	r2, r1
 800272e:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002730:	2390      	movs	r3, #144	; 0x90
 8002732:	05db      	lsls	r3, r3, #23
 8002734:	210c      	movs	r1, #12
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fc88 	bl	800304c <HAL_GPIO_DeInit>
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40013800 	.word	0x40013800
 8002748:	40021000 	.word	0x40021000
 800274c:	ffffbfff 	.word	0xffffbfff
 8002750:	40004400 	.word	0x40004400
 8002754:	fffdffff 	.word	0xfffdffff

08002758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800275c:	e7fe      	b.n	800275c <NMI_Handler+0x4>

0800275e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <HardFault_Handler+0x4>

08002764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277c:	f000 f94c 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 8002780:	f7ff f98e 	bl	8001aa0 <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	015b      	lsls	r3, r3, #5
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fd64 	bl	8003260 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	019b      	lsls	r3, r3, #6
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fd5f 	bl	8003260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <TIM16_IRQHandler+0x14>)
 80027ae:	0018      	movs	r0, r3
 80027b0:	f001 fb6a 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	200004e8 	.word	0x200004e8

080027c0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <TIM17_IRQHandler+0x14>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f001 fb5e 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	20000530 	.word	0x20000530

080027d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <USART1_IRQHandler+0x14>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f001 fe98 	bl	8004514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20000578 	.word	0x20000578

080027f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e00a      	b.n	8002818 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002802:	e000      	b.n	8002806 <_read+0x16>
 8002804:	bf00      	nop
 8002806:	0001      	movs	r1, r0
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	60ba      	str	r2, [r7, #8]
 800280e:	b2ca      	uxtb	r2, r1
 8002810:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	dbf0      	blt.n	8002802 <_read+0x12>
	}

return len;
 8002820:	687b      	ldr	r3, [r7, #4]
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b006      	add	sp, #24
 8002828:	bd80      	pop	{r7, pc}

0800282a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e009      	b.n	8002850 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	60ba      	str	r2, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	0018      	movs	r0, r3
 8002846:	e000      	b.n	800284a <_write+0x20>
 8002848:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	dbf1      	blt.n	800283c <_write+0x12>
	}
	return len;
 8002858:	687b      	ldr	r3, [r7, #4]
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b006      	add	sp, #24
 8002860:	bd80      	pop	{r7, pc}

08002862 <_close>:

int _close(int file)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
	return -1;
 800286a:	2301      	movs	r3, #1
 800286c:	425b      	negs	r3, r3
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	0192      	lsls	r2, r2, #6
 8002886:	605a      	str	r2, [r3, #4]
	return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}

08002892 <_isatty>:

int _isatty(int file)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	return 1;
 800289a:	2301      	movs	r3, #1
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b002      	add	sp, #8
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
	return 0;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b004      	add	sp, #16
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <_sbrk+0x5c>)
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <_sbrk+0x60>)
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_sbrk+0x64>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <_sbrk+0x68>)
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d207      	bcs.n	80028fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ec:	f003 f9ec 	bl	8005cc8 <__errno>
 80028f0:	0003      	movs	r3, r0
 80028f2:	220c      	movs	r2, #12
 80028f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	425b      	negs	r3, r3
 80028fa:	e009      	b.n	8002910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	18d2      	adds	r2, r2, r3
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <_sbrk+0x64>)
 800290c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b006      	add	sp, #24
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20002000 	.word	0x20002000
 800291c:	00000400 	.word	0x00000400
 8002920:	20000688 	.word	0x20000688
 8002924:	200006a0 	.word	0x200006a0

08002928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002934:	480d      	ldr	r0, [pc, #52]	; (800296c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002936:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002938:	f7ff fff6 	bl	8002928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <LoopForever+0x6>)
  ldr r1, =_edata
 800293e:	490d      	ldr	r1, [pc, #52]	; (8002974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002940:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <LoopForever+0xe>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002954:	4c0a      	ldr	r4, [pc, #40]	; (8002980 <LoopForever+0x16>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002962:	f003 f9b7 	bl	8005cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002966:	f7ff fbab 	bl	80020c0 <main>

0800296a <LoopForever>:

LoopForever:
    b LoopForever
 800296a:	e7fe      	b.n	800296a <LoopForever>
  ldr   r0, =_estack
 800296c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002974:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8002978:	08006a8c 	.word	0x08006a8c
  ldr r2, =_sbss
 800297c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8002980:	200006a0 	.word	0x200006a0

08002984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC1_IRQHandler>
	...

08002988 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_Init+0x24>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_Init+0x24>)
 8002992:	2110      	movs	r1, #16
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002998:	2000      	movs	r0, #0
 800299a:	f000 f809 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299e:	f7ff fda7 	bl	80024f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	40022000 	.word	0x40022000

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_InitTick+0x5c>)
 80029ba:	681c      	ldr	r4, [r3, #0]
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_InitTick+0x60>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	0019      	movs	r1, r3
 80029c2:	23fa      	movs	r3, #250	; 0xfa
 80029c4:	0098      	lsls	r0, r3, #2
 80029c6:	f7fd fb9f 	bl	8000108 <__udivsi3>
 80029ca:	0003      	movs	r3, r0
 80029cc:	0019      	movs	r1, r3
 80029ce:	0020      	movs	r0, r4
 80029d0:	f7fd fb9a 	bl	8000108 <__udivsi3>
 80029d4:	0003      	movs	r3, r0
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 f93d 	bl	8002c56 <HAL_SYSTICK_Config>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e00f      	b.n	8002a04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d80b      	bhi.n	8002a02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	2301      	movs	r3, #1
 80029ee:	425b      	negs	r3, r3
 80029f0:	2200      	movs	r2, #0
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 f8fa 	bl	8002bec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_InitTick+0x64>)
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b003      	add	sp, #12
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	200000f8 	.word	0x200000f8
 8002a10:	20000100 	.word	0x20000100
 8002a14:	200000fc 	.word	0x200000fc

08002a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_IncTick+0x1c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	001a      	movs	r2, r3
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_IncTick+0x20>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	18d2      	adds	r2, r2, r3
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_IncTick+0x20>)
 8002a2a:	601a      	str	r2, [r3, #0]
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	20000100 	.word	0x20000100
 8002a38:	2000068c 	.word	0x2000068c

08002a3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <HAL_GetTick+0x10>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	2000068c 	.word	0x2000068c

08002a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	0002      	movs	r2, r0
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	1dfb      	adds	r3, r7, #7
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b7f      	cmp	r3, #127	; 0x7f
 8002a62:	d809      	bhi.n	8002a78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	001a      	movs	r2, r3
 8002a6a:	231f      	movs	r3, #31
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_EnableIRQ+0x30>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	4091      	lsls	r1, r2
 8002a74:	000a      	movs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
  }
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	1dfb      	adds	r3, r7, #7
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b7f      	cmp	r3, #127	; 0x7f
 8002a96:	d810      	bhi.n	8002aba <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	231f      	movs	r3, #31
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	4908      	ldr	r1, [pc, #32]	; (8002ac4 <__NVIC_DisableIRQ+0x40>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002aae:	f3bf 8f4f 	dsb	sy
}
 8002ab2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002ab4:	f3bf 8f6f 	isb	sy
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b002      	add	sp, #8
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	0002      	movs	r2, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ad6:	1dfb      	adds	r3, r7, #7
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b7f      	cmp	r3, #127	; 0x7f
 8002adc:	d828      	bhi.n	8002b30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ade:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <__NVIC_SetPriority+0xd4>)
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	33c0      	adds	r3, #192	; 0xc0
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	589b      	ldr	r3, [r3, r2]
 8002aee:	1dfa      	adds	r2, r7, #7
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	0011      	movs	r1, r2
 8002af4:	2203      	movs	r2, #3
 8002af6:	400a      	ands	r2, r1
 8002af8:	00d2      	lsls	r2, r2, #3
 8002afa:	21ff      	movs	r1, #255	; 0xff
 8002afc:	4091      	lsls	r1, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	43d2      	mvns	r2, r2
 8002b02:	401a      	ands	r2, r3
 8002b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	0018      	movs	r0, r3
 8002b14:	2303      	movs	r3, #3
 8002b16:	4003      	ands	r3, r0
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b1c:	481f      	ldr	r0, [pc, #124]	; (8002b9c <__NVIC_SetPriority+0xd4>)
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	430a      	orrs	r2, r1
 8002b28:	33c0      	adds	r3, #192	; 0xc0
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b2e:	e031      	b.n	8002b94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b30:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <__NVIC_SetPriority+0xd8>)
 8002b32:	1dfb      	adds	r3, r7, #7
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	0019      	movs	r1, r3
 8002b38:	230f      	movs	r3, #15
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	3b08      	subs	r3, #8
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3306      	adds	r3, #6
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	18d3      	adds	r3, r2, r3
 8002b46:	3304      	adds	r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1dfa      	adds	r2, r7, #7
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	0011      	movs	r1, r2
 8002b50:	2203      	movs	r2, #3
 8002b52:	400a      	ands	r2, r1
 8002b54:	00d2      	lsls	r2, r2, #3
 8002b56:	21ff      	movs	r1, #255	; 0xff
 8002b58:	4091      	lsls	r1, r2
 8002b5a:	000a      	movs	r2, r1
 8002b5c:	43d2      	mvns	r2, r2
 8002b5e:	401a      	ands	r2, r3
 8002b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	019b      	lsls	r3, r3, #6
 8002b66:	22ff      	movs	r2, #255	; 0xff
 8002b68:	401a      	ands	r2, r3
 8002b6a:	1dfb      	adds	r3, r7, #7
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	2303      	movs	r3, #3
 8002b72:	4003      	ands	r3, r0
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b78:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <__NVIC_SetPriority+0xd8>)
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	001c      	movs	r4, r3
 8002b80:	230f      	movs	r3, #15
 8002b82:	4023      	ands	r3, r4
 8002b84:	3b08      	subs	r3, #8
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	3306      	adds	r3, #6
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	18c3      	adds	r3, r0, r3
 8002b90:	3304      	adds	r3, #4
 8002b92:	601a      	str	r2, [r3, #0]
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b003      	add	sp, #12
 8002b9a:	bd90      	pop	{r4, r7, pc}
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1e5a      	subs	r2, r3, #1
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	045b      	lsls	r3, r3, #17
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d301      	bcc.n	8002bbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e010      	b.n	8002bde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <SysTick_Config+0x44>)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	425b      	negs	r3, r3
 8002bc8:	2103      	movs	r1, #3
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7ff ff7c 	bl	8002ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SysTick_Config+0x44>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SysTick_Config+0x44>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b002      	add	sp, #8
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	1c02      	adds	r2, r0, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7ff ff5d 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b004      	add	sp, #16
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	1dfb      	adds	r3, r7, #7
 8002c20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff ff11 	bl	8002a50 <__NVIC_EnableIRQ>
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b002      	add	sp, #8
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	1dfb      	adds	r3, r7, #7
 8002c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff ff1b 	bl	8002a84 <__NVIC_DisableIRQ>
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b002      	add	sp, #8
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7ff ff9f 	bl	8002ba4 <SysTick_Config>
 8002c66:	0003      	movs	r3, r0
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2221      	movs	r2, #33	; 0x21
 8002c7c:	5c9b      	ldrb	r3, [r3, r2]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d008      	beq.n	8002c96 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2204      	movs	r2, #4
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e020      	b.n	8002cd8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	210e      	movs	r1, #14
 8002ca2:	438a      	bics	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4091      	lsls	r1, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2221      	movs	r2, #33	; 0x21
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	210f      	movs	r1, #15
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2221      	movs	r2, #33	; 0x21
 8002cf4:	5c9b      	ldrb	r3, [r3, r2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d006      	beq.n	8002d0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e028      	b.n	8002d5c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	210e      	movs	r1, #14
 8002d16:	438a      	bics	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	438a      	bics	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	2101      	movs	r1, #1
 8002d34:	4091      	lsls	r1, r2
 8002d36:	000a      	movs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2221      	movs	r2, #33	; 0x21
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	2100      	movs	r1, #0
 8002d48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	0010      	movs	r0, r2
 8002d5a:	4798      	blx	r3
    }
  }
  return status;
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7a:	e14f      	b.n	800301c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4091      	lsls	r1, r2
 8002d86:	000a      	movs	r2, r1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d100      	bne.n	8002d94 <HAL_GPIO_Init+0x28>
 8002d92:	e140      	b.n	8003016 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d005      	beq.n	8002dac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2203      	movs	r2, #3
 8002da6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d130      	bne.n	8002e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	409a      	lsls	r2, r3
 8002dba:	0013      	movs	r3, r2
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	0013      	movs	r3, r2
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de2:	2201      	movs	r2, #1
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
 8002de8:	0013      	movs	r3, r2
 8002dea:	43da      	mvns	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	2201      	movs	r2, #1
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	0013      	movs	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2203      	movs	r2, #3
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d017      	beq.n	8002e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	409a      	lsls	r2, r3
 8002e28:	0013      	movs	r3, r2
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	0013      	movs	r3, r2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2203      	movs	r2, #3
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d123      	bne.n	8002e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	08da      	lsrs	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	58d3      	ldr	r3, [r2, r3]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2207      	movs	r2, #7
 8002e68:	4013      	ands	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	0013      	movs	r3, r2
 8002e72:	43da      	mvns	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2107      	movs	r1, #7
 8002e82:	400b      	ands	r3, r1
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	409a      	lsls	r2, r3
 8002e88:	0013      	movs	r3, r2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	6939      	ldr	r1, [r7, #16]
 8002e9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	0013      	movs	r3, r2
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	23c0      	movs	r3, #192	; 0xc0
 8002ed8:	029b      	lsls	r3, r3, #10
 8002eda:	4013      	ands	r3, r2
 8002edc:	d100      	bne.n	8002ee0 <HAL_GPIO_Init+0x174>
 8002ede:	e09a      	b.n	8003016 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee0:	4b54      	ldr	r3, [pc, #336]	; (8003034 <HAL_GPIO_Init+0x2c8>)
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	4b53      	ldr	r3, [pc, #332]	; (8003034 <HAL_GPIO_Init+0x2c8>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	619a      	str	r2, [r3, #24]
 8002eec:	4b51      	ldr	r3, [pc, #324]	; (8003034 <HAL_GPIO_Init+0x2c8>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	; (8003038 <HAL_GPIO_Init+0x2cc>)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	589b      	ldr	r3, [r3, r2]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	409a      	lsls	r2, r3
 8002f12:	0013      	movs	r3, r2
 8002f14:	43da      	mvns	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	2390      	movs	r3, #144	; 0x90
 8002f20:	05db      	lsls	r3, r3, #23
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x1e2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a44      	ldr	r2, [pc, #272]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x1de>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a43      	ldr	r2, [pc, #268]	; (8003040 <HAL_GPIO_Init+0x2d4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x1da>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a42      	ldr	r2, [pc, #264]	; (8003044 <HAL_GPIO_Init+0x2d8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x1d6>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x1e4>
 8002f42:	2305      	movs	r3, #5
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x1e4>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x1e4>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x1e4>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	2103      	movs	r1, #3
 8002f54:	400a      	ands	r2, r1
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f60:	4935      	ldr	r1, [pc, #212]	; (8003038 <HAL_GPIO_Init+0x2cc>)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_GPIO_Init+0x2dc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	43da      	mvns	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	035b      	lsls	r3, r3, #13
 8002f86:	4013      	ands	r3, r2
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f92:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_GPIO_Init+0x2dc>)
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_GPIO_Init+0x2dc>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	039b      	lsls	r3, r3, #14
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fbc:	4b22      	ldr	r3, [pc, #136]	; (8003048 <HAL_GPIO_Init+0x2dc>)
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <HAL_GPIO_Init+0x2dc>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	029b      	lsls	r3, r3, #10
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_GPIO_Init+0x2dc>)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_GPIO_Init+0x2dc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	025b      	lsls	r3, r3, #9
 8003004:	4013      	ands	r3, r2
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_GPIO_Init+0x2dc>)
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3301      	adds	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	40da      	lsrs	r2, r3
 8003024:	1e13      	subs	r3, r2, #0
 8003026:	d000      	beq.n	800302a <HAL_GPIO_Init+0x2be>
 8003028:	e6a8      	b.n	8002d7c <HAL_GPIO_Init+0x10>
  } 
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b006      	add	sp, #24
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	40010000 	.word	0x40010000
 800303c:	48000400 	.word	0x48000400
 8003040:	48000800 	.word	0x48000800
 8003044:	48000c00 	.word	0x48000c00
 8003048:	40010400 	.word	0x40010400

0800304c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800305a:	e0b1      	b.n	80031c0 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800305c:	2201      	movs	r2, #1
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	409a      	lsls	r2, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d100      	bne.n	8003070 <HAL_GPIO_DeInit+0x24>
 800306e:	e0a4      	b.n	80031ba <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003070:	4a59      	ldr	r2, [pc, #356]	; (80031d8 <HAL_GPIO_DeInit+0x18c>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	3302      	adds	r3, #2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	589b      	ldr	r3, [r3, r2]
 800307c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2203      	movs	r2, #3
 8003082:	4013      	ands	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	2390      	movs	r3, #144	; 0x90
 8003094:	05db      	lsls	r3, r3, #23
 8003096:	429a      	cmp	r2, r3
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_DeInit+0x76>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4f      	ldr	r2, [pc, #316]	; (80031dc <HAL_GPIO_DeInit+0x190>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00d      	beq.n	80030be <HAL_GPIO_DeInit+0x72>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4e      	ldr	r2, [pc, #312]	; (80031e0 <HAL_GPIO_DeInit+0x194>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <HAL_GPIO_DeInit+0x6e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4d      	ldr	r2, [pc, #308]	; (80031e4 <HAL_GPIO_DeInit+0x198>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_GPIO_DeInit+0x6a>
 80030b2:	2303      	movs	r3, #3
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_DeInit+0x78>
 80030b6:	2305      	movs	r3, #5
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_DeInit+0x78>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_DeInit+0x78>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_DeInit+0x78>
 80030c2:	2300      	movs	r3, #0
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	2103      	movs	r1, #3
 80030c8:	400a      	ands	r2, r1
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	4093      	lsls	r3, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d132      	bne.n	800313a <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030d4:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <HAL_GPIO_DeInit+0x19c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	43d9      	mvns	r1, r3
 80030dc:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <HAL_GPIO_DeInit+0x19c>)
 80030de:	400a      	ands	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_GPIO_DeInit+0x19c>)
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	43d9      	mvns	r1, r3
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_GPIO_DeInit+0x19c>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030f0:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_GPIO_DeInit+0x19c>)
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_GPIO_DeInit+0x19c>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030fe:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_GPIO_DeInit+0x19c>)
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	43d9      	mvns	r1, r3
 8003106:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <HAL_GPIO_DeInit+0x19c>)
 8003108:	400a      	ands	r2, r1
 800310a:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2203      	movs	r2, #3
 8003110:	4013      	ands	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800311c:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <HAL_GPIO_DeInit+0x18c>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	589a      	ldr	r2, [r3, r2]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43d9      	mvns	r1, r3
 800312c:	482a      	ldr	r0, [pc, #168]	; (80031d8 <HAL_GPIO_DeInit+0x18c>)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	400a      	ands	r2, r1
 8003134:	3302      	adds	r3, #2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	0052      	lsls	r2, r2, #1
 8003142:	2103      	movs	r1, #3
 8003144:	4091      	lsls	r1, r2
 8003146:	000a      	movs	r2, r1
 8003148:	43d2      	mvns	r2, r2
 800314a:	401a      	ands	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	0092      	lsls	r2, r2, #2
 800315a:	58d3      	ldr	r3, [r2, r3]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	2107      	movs	r1, #7
 8003160:	400a      	ands	r2, r1
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	210f      	movs	r1, #15
 8003166:	4091      	lsls	r1, r2
 8003168:	000a      	movs	r2, r1
 800316a:	43d1      	mvns	r1, r2
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	08d2      	lsrs	r2, r2, #3
 8003170:	4019      	ands	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	0092      	lsls	r2, r2, #2
 8003178:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	0052      	lsls	r2, r2, #1
 8003182:	2103      	movs	r1, #3
 8003184:	4091      	lsls	r1, r2
 8003186:	000a      	movs	r2, r1
 8003188:	43d2      	mvns	r2, r2
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2101      	movs	r1, #1
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4091      	lsls	r1, r2
 800319a:	000a      	movs	r2, r1
 800319c:	43d2      	mvns	r2, r2
 800319e:	401a      	ands	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	0052      	lsls	r2, r2, #1
 80031ac:	2103      	movs	r1, #3
 80031ae:	4091      	lsls	r1, r2
 80031b0:	000a      	movs	r2, r1
 80031b2:	43d2      	mvns	r2, r2
 80031b4:	401a      	ands	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]

    }

    position++;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	40da      	lsrs	r2, r3
 80031c6:	1e13      	subs	r3, r2, #0
 80031c8:	d000      	beq.n	80031cc <HAL_GPIO_DeInit+0x180>
 80031ca:	e747      	b.n	800305c <HAL_GPIO_DeInit+0x10>
  }
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b006      	add	sp, #24
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	40010000 	.word	0x40010000
 80031dc:	48000400 	.word	0x48000400
 80031e0:	48000800 	.word	0x48000800
 80031e4:	48000c00 	.word	0x48000c00
 80031e8:	40010400 	.word	0x40010400

080031ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	000a      	movs	r2, r1
 80031f6:	1cbb      	adds	r3, r7, #2
 80031f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	1cba      	adds	r2, r7, #2
 8003200:	8812      	ldrh	r2, [r2, #0]
 8003202:	4013      	ands	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003206:	230f      	movs	r3, #15
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e003      	b.n	8003218 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003210:	230f      	movs	r3, #15
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003218:	230f      	movs	r3, #15
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	781b      	ldrb	r3, [r3, #0]
  }
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	0008      	movs	r0, r1
 8003230:	0011      	movs	r1, r2
 8003232:	1cbb      	adds	r3, r7, #2
 8003234:	1c02      	adds	r2, r0, #0
 8003236:	801a      	strh	r2, [r3, #0]
 8003238:	1c7b      	adds	r3, r7, #1
 800323a:	1c0a      	adds	r2, r1, #0
 800323c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800323e:	1c7b      	adds	r3, r7, #1
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003246:	1cbb      	adds	r3, r7, #2
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800324e:	e003      	b.n	8003258 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003250:	1cbb      	adds	r3, r7, #2
 8003252:	881a      	ldrh	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	0002      	movs	r2, r0
 8003268:	1dbb      	adds	r3, r7, #6
 800326a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	1dba      	adds	r2, r7, #6
 8003272:	8812      	ldrh	r2, [r2, #0]
 8003274:	4013      	ands	r3, r2
 8003276:	d008      	beq.n	800328a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800327a:	1dba      	adds	r2, r7, #6
 800327c:	8812      	ldrh	r2, [r2, #0]
 800327e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003280:	1dbb      	adds	r3, r7, #6
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	0018      	movs	r0, r3
 8003286:	f7fe fbab 	bl	80019e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b002      	add	sp, #8
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	40010400 	.word	0x40010400

08003298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e301      	b.n	80038ae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4013      	ands	r3, r2
 80032b2:	d100      	bne.n	80032b6 <HAL_RCC_OscConfig+0x1e>
 80032b4:	e08d      	b.n	80033d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032b6:	4bc3      	ldr	r3, [pc, #780]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	220c      	movs	r2, #12
 80032bc:	4013      	ands	r3, r2
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d00e      	beq.n	80032e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032c2:	4bc0      	ldr	r3, [pc, #768]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	220c      	movs	r2, #12
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d116      	bne.n	80032fc <HAL_RCC_OscConfig+0x64>
 80032ce:	4bbd      	ldr	r3, [pc, #756]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	401a      	ands	r2, r3
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	025b      	lsls	r3, r3, #9
 80032dc:	429a      	cmp	r2, r3
 80032de:	d10d      	bne.n	80032fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4bb8      	ldr	r3, [pc, #736]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	029b      	lsls	r3, r3, #10
 80032e8:	4013      	ands	r3, r2
 80032ea:	d100      	bne.n	80032ee <HAL_RCC_OscConfig+0x56>
 80032ec:	e070      	b.n	80033d0 <HAL_RCC_OscConfig+0x138>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d000      	beq.n	80032f8 <HAL_RCC_OscConfig+0x60>
 80032f6:	e06b      	b.n	80033d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e2d8      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x7c>
 8003304:	4baf      	ldr	r3, [pc, #700]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4bae      	ldr	r3, [pc, #696]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	0249      	lsls	r1, r1, #9
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e02f      	b.n	8003374 <HAL_RCC_OscConfig+0xdc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10c      	bne.n	8003336 <HAL_RCC_OscConfig+0x9e>
 800331c:	4ba9      	ldr	r3, [pc, #676]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4ba8      	ldr	r3, [pc, #672]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003322:	49a9      	ldr	r1, [pc, #676]	; (80035c8 <HAL_RCC_OscConfig+0x330>)
 8003324:	400a      	ands	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4ba6      	ldr	r3, [pc, #664]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4ba5      	ldr	r3, [pc, #660]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800332e:	49a7      	ldr	r1, [pc, #668]	; (80035cc <HAL_RCC_OscConfig+0x334>)
 8003330:	400a      	ands	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e01e      	b.n	8003374 <HAL_RCC_OscConfig+0xdc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d10e      	bne.n	800335c <HAL_RCC_OscConfig+0xc4>
 800333e:	4ba1      	ldr	r3, [pc, #644]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4ba0      	ldr	r3, [pc, #640]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	02c9      	lsls	r1, r1, #11
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	4b9d      	ldr	r3, [pc, #628]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b9c      	ldr	r3, [pc, #624]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	0249      	lsls	r1, r1, #9
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xdc>
 800335c:	4b99      	ldr	r3, [pc, #612]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b98      	ldr	r3, [pc, #608]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003362:	4999      	ldr	r1, [pc, #612]	; (80035c8 <HAL_RCC_OscConfig+0x330>)
 8003364:	400a      	ands	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	4b96      	ldr	r3, [pc, #600]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b95      	ldr	r3, [pc, #596]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800336e:	4997      	ldr	r1, [pc, #604]	; (80035cc <HAL_RCC_OscConfig+0x334>)
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d014      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7ff fb5e 	bl	8002a3c <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003386:	f7ff fb59 	bl	8002a3c <HAL_GetTick>
 800338a:	0002      	movs	r2, r0
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b64      	cmp	r3, #100	; 0x64
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e28a      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003398:	4b8a      	ldr	r3, [pc, #552]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	029b      	lsls	r3, r3, #10
 80033a0:	4013      	ands	r3, r2
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0xee>
 80033a4:	e015      	b.n	80033d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7ff fb49 	bl	8002a3c <HAL_GetTick>
 80033aa:	0003      	movs	r3, r0
 80033ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b0:	f7ff fb44 	bl	8002a3c <HAL_GetTick>
 80033b4:	0002      	movs	r2, r0
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e275      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	4b80      	ldr	r3, [pc, #512]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	029b      	lsls	r3, r3, #10
 80033ca:	4013      	ands	r3, r2
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x118>
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2202      	movs	r2, #2
 80033d8:	4013      	ands	r3, r2
 80033da:	d100      	bne.n	80033de <HAL_RCC_OscConfig+0x146>
 80033dc:	e069      	b.n	80034b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033de:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	220c      	movs	r2, #12
 80033e4:	4013      	ands	r3, r2
 80033e6:	d00b      	beq.n	8003400 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033e8:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	220c      	movs	r2, #12
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d11c      	bne.n	800342e <HAL_RCC_OscConfig+0x196>
 80033f4:	4b73      	ldr	r3, [pc, #460]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	025b      	lsls	r3, r3, #9
 80033fc:	4013      	ands	r3, r2
 80033fe:	d116      	bne.n	800342e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003400:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2202      	movs	r2, #2
 8003406:	4013      	ands	r3, r2
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x17e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e24b      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	22f8      	movs	r2, #248	; 0xf8
 800341c:	4393      	bics	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	00da      	lsls	r2, r3, #3
 8003426:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342c:	e041      	b.n	80034b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d024      	beq.n	8003480 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003436:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800343c:	2101      	movs	r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7ff fafb 	bl	8002a3c <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344c:	f7ff faf6 	bl	8002a3c <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e227      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2202      	movs	r2, #2
 8003464:	4013      	ands	r3, r2
 8003466:	d0f1      	beq.n	800344c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	22f8      	movs	r2, #248	; 0xf8
 800346e:	4393      	bics	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00da      	lsls	r2, r3, #3
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e018      	b.n	80034b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003486:	2101      	movs	r1, #1
 8003488:	438a      	bics	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff fad6 	bl	8002a3c <HAL_GetTick>
 8003490:	0003      	movs	r3, r0
 8003492:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003496:	f7ff fad1 	bl	8002a3c <HAL_GetTick>
 800349a:	0002      	movs	r2, r0
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e202      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a8:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2202      	movs	r2, #2
 80034ae:	4013      	ands	r3, r2
 80034b0:	d1f1      	bne.n	8003496 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2208      	movs	r2, #8
 80034b8:	4013      	ands	r3, r2
 80034ba:	d036      	beq.n	800352a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d019      	beq.n	80034f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c4:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80034c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c8:	4b3e      	ldr	r3, [pc, #248]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	430a      	orrs	r2, r1
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d0:	f7ff fab4 	bl	8002a3c <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034da:	f7ff faaf 	bl	8002a3c <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e1e0      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d0f1      	beq.n	80034da <HAL_RCC_OscConfig+0x242>
 80034f6:	e018      	b.n	800352a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fc:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	2101      	movs	r1, #1
 8003500:	438a      	bics	r2, r1
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7ff fa9a 	bl	8002a3c <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350e:	f7ff fa95 	bl	8002a3c <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1c6      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d1f1      	bne.n	800350e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	d100      	bne.n	8003536 <HAL_RCC_OscConfig+0x29e>
 8003534:	e0b4      	b.n	80036a0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003536:	201f      	movs	r0, #31
 8003538:	183b      	adds	r3, r7, r0
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	055b      	lsls	r3, r3, #21
 8003546:	4013      	ands	r3, r2
 8003548:	d110      	bne.n	800356c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0549      	lsls	r1, r1, #21
 8003554:	430a      	orrs	r2, r1
 8003556:	61da      	str	r2, [r3, #28]
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	055b      	lsls	r3, r3, #21
 8003560:	4013      	ands	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003566:	183b      	adds	r3, r7, r0
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <HAL_RCC_OscConfig+0x338>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4013      	ands	r3, r2
 8003576:	d11a      	bne.n	80035ae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003578:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <HAL_RCC_OscConfig+0x338>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_RCC_OscConfig+0x338>)
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	0049      	lsls	r1, r1, #1
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7ff fa59 	bl	8002a3c <HAL_GetTick>
 800358a:	0003      	movs	r3, r0
 800358c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003590:	f7ff fa54 	bl	8002a3c <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e185      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x338>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10e      	bne.n	80035d4 <HAL_RCC_OscConfig+0x33c>
 80035b6:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	4b02      	ldr	r3, [pc, #8]	; (80035c4 <HAL_RCC_OscConfig+0x32c>)
 80035bc:	2101      	movs	r1, #1
 80035be:	430a      	orrs	r2, r1
 80035c0:	621a      	str	r2, [r3, #32]
 80035c2:	e035      	b.n	8003630 <HAL_RCC_OscConfig+0x398>
 80035c4:	40021000 	.word	0x40021000
 80035c8:	fffeffff 	.word	0xfffeffff
 80035cc:	fffbffff 	.word	0xfffbffff
 80035d0:	40007000 	.word	0x40007000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10c      	bne.n	80035f6 <HAL_RCC_OscConfig+0x35e>
 80035dc:	4bb6      	ldr	r3, [pc, #728]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	4bb5      	ldr	r3, [pc, #724]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80035e2:	2101      	movs	r1, #1
 80035e4:	438a      	bics	r2, r1
 80035e6:	621a      	str	r2, [r3, #32]
 80035e8:	4bb3      	ldr	r3, [pc, #716]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	4bb2      	ldr	r3, [pc, #712]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80035ee:	2104      	movs	r1, #4
 80035f0:	438a      	bics	r2, r1
 80035f2:	621a      	str	r2, [r3, #32]
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x398>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x380>
 80035fe:	4bae      	ldr	r3, [pc, #696]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	4bad      	ldr	r3, [pc, #692]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003604:	2104      	movs	r1, #4
 8003606:	430a      	orrs	r2, r1
 8003608:	621a      	str	r2, [r3, #32]
 800360a:	4bab      	ldr	r3, [pc, #684]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	4baa      	ldr	r3, [pc, #680]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003610:	2101      	movs	r1, #1
 8003612:	430a      	orrs	r2, r1
 8003614:	621a      	str	r2, [r3, #32]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x398>
 8003618:	4ba7      	ldr	r3, [pc, #668]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	4ba6      	ldr	r3, [pc, #664]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800361e:	2101      	movs	r1, #1
 8003620:	438a      	bics	r2, r1
 8003622:	621a      	str	r2, [r3, #32]
 8003624:	4ba4      	ldr	r3, [pc, #656]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003626:	6a1a      	ldr	r2, [r3, #32]
 8003628:	4ba3      	ldr	r3, [pc, #652]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800362a:	2104      	movs	r1, #4
 800362c:	438a      	bics	r2, r1
 800362e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d014      	beq.n	8003662 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003638:	f7ff fa00 	bl	8002a3c <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	e009      	b.n	8003656 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7ff f9fb 	bl	8002a3c <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	4a9b      	ldr	r2, [pc, #620]	; (80038bc <HAL_RCC_OscConfig+0x624>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e12b      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	4b98      	ldr	r3, [pc, #608]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	2202      	movs	r2, #2
 800365c:	4013      	ands	r3, r2
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x3aa>
 8003660:	e013      	b.n	800368a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003662:	f7ff f9eb 	bl	8002a3c <HAL_GetTick>
 8003666:	0003      	movs	r3, r0
 8003668:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	e009      	b.n	8003680 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7ff f9e6 	bl	8002a3c <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	4a91      	ldr	r2, [pc, #580]	; (80038bc <HAL_RCC_OscConfig+0x624>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e116      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003680:	4b8d      	ldr	r3, [pc, #564]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	2202      	movs	r2, #2
 8003686:	4013      	ands	r3, r2
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800368a:	231f      	movs	r3, #31
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b88      	ldr	r3, [pc, #544]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	4b87      	ldr	r3, [pc, #540]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800369a:	4989      	ldr	r1, [pc, #548]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 800369c:	400a      	ands	r2, r1
 800369e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2210      	movs	r2, #16
 80036a6:	4013      	ands	r3, r2
 80036a8:	d063      	beq.n	8003772 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d12a      	bne.n	8003708 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036b2:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80036b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b6:	4b80      	ldr	r3, [pc, #512]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80036b8:	2104      	movs	r1, #4
 80036ba:	430a      	orrs	r2, r1
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80036be:	4b7e      	ldr	r3, [pc, #504]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80036c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c2:	4b7d      	ldr	r3, [pc, #500]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80036c4:	2101      	movs	r1, #1
 80036c6:	430a      	orrs	r2, r1
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7ff f9b7 	bl	8002a3c <HAL_GetTick>
 80036ce:	0003      	movs	r3, r0
 80036d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80036d4:	f7ff f9b2 	bl	8002a3c <HAL_GetTick>
 80036d8:	0002      	movs	r2, r0
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0e3      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036e6:	4b74      	ldr	r3, [pc, #464]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	d0f1      	beq.n	80036d4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036f0:	4b71      	ldr	r3, [pc, #452]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	22f8      	movs	r2, #248	; 0xf8
 80036f6:	4393      	bics	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	00da      	lsls	r2, r3, #3
 8003700:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003702:	430a      	orrs	r2, r1
 8003704:	635a      	str	r2, [r3, #52]	; 0x34
 8003706:	e034      	b.n	8003772 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	3305      	adds	r3, #5
 800370e:	d111      	bne.n	8003734 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003710:	4b69      	ldr	r3, [pc, #420]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003714:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003716:	2104      	movs	r1, #4
 8003718:	438a      	bics	r2, r1
 800371a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800371c:	4b66      	ldr	r3, [pc, #408]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	22f8      	movs	r2, #248	; 0xf8
 8003722:	4393      	bics	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	00da      	lsls	r2, r3, #3
 800372c:	4b62      	ldr	r3, [pc, #392]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800372e:	430a      	orrs	r2, r1
 8003730:	635a      	str	r2, [r3, #52]	; 0x34
 8003732:	e01e      	b.n	8003772 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003734:	4b60      	ldr	r3, [pc, #384]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003738:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800373a:	2104      	movs	r1, #4
 800373c:	430a      	orrs	r2, r1
 800373e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003740:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003744:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003746:	2101      	movs	r1, #1
 8003748:	438a      	bics	r2, r1
 800374a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7ff f976 	bl	8002a3c <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003756:	f7ff f971 	bl	8002a3c <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0a2      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	2202      	movs	r2, #2
 800376e:	4013      	ands	r3, r2
 8003770:	d1f1      	bne.n	8003756 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d100      	bne.n	800377c <HAL_RCC_OscConfig+0x4e4>
 800377a:	e097      	b.n	80038ac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800377c:	4b4e      	ldr	r3, [pc, #312]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	220c      	movs	r2, #12
 8003782:	4013      	ands	r3, r2
 8003784:	2b08      	cmp	r3, #8
 8003786:	d100      	bne.n	800378a <HAL_RCC_OscConfig+0x4f2>
 8003788:	e06b      	b.n	8003862 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d14c      	bne.n	800382c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b48      	ldr	r3, [pc, #288]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003798:	494a      	ldr	r1, [pc, #296]	; (80038c4 <HAL_RCC_OscConfig+0x62c>)
 800379a:	400a      	ands	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7ff f94d 	bl	8002a3c <HAL_GetTick>
 80037a2:	0003      	movs	r3, r0
 80037a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7ff f948 	bl	8002a3c <HAL_GetTick>
 80037ac:	0002      	movs	r2, r0
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e079      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ba:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	049b      	lsls	r3, r3, #18
 80037c2:	4013      	ands	r3, r2
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c6:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	220f      	movs	r2, #15
 80037cc:	4393      	bics	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4b38      	ldr	r3, [pc, #224]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80037d6:	430a      	orrs	r2, r1
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037da:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4a3a      	ldr	r2, [pc, #232]	; (80038c8 <HAL_RCC_OscConfig+0x630>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	431a      	orrs	r2, r3
 80037ee:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80037f0:	430a      	orrs	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f4:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	0449      	lsls	r1, r1, #17
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7ff f91b 	bl	8002a3c <HAL_GetTick>
 8003806:	0003      	movs	r3, r0
 8003808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380c:	f7ff f916 	bl	8002a3c <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e047      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	049b      	lsls	r3, r3, #18
 8003826:	4013      	ands	r3, r2
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x574>
 800382a:	e03f      	b.n	80038ac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382c:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003832:	4924      	ldr	r1, [pc, #144]	; (80038c4 <HAL_RCC_OscConfig+0x62c>)
 8003834:	400a      	ands	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7ff f900 	bl	8002a3c <HAL_GetTick>
 800383c:	0003      	movs	r3, r0
 800383e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003842:	f7ff f8fb 	bl	8002a3c <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e02c      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	049b      	lsls	r3, r3, #18
 800385c:	4013      	ands	r3, r2
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x5aa>
 8003860:	e024      	b.n	80038ac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e01f      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003874:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_RCC_OscConfig+0x620>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	025b      	lsls	r3, r3, #9
 8003880:	401a      	ands	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	429a      	cmp	r2, r3
 8003888:	d10e      	bne.n	80038a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	220f      	movs	r2, #15
 800388e:	401a      	ands	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	23f0      	movs	r3, #240	; 0xf0
 800389c:	039b      	lsls	r3, r3, #14
 800389e:	401a      	ands	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b008      	add	sp, #32
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	40021000 	.word	0x40021000
 80038bc:	00001388 	.word	0x00001388
 80038c0:	efffffff 	.word	0xefffffff
 80038c4:	feffffff 	.word	0xfeffffff
 80038c8:	ffc2ffff 	.word	0xffc2ffff

080038cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b3      	b.n	8003a48 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b5b      	ldr	r3, [pc, #364]	; (8003a50 <HAL_RCC_ClockConfig+0x184>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d911      	bls.n	8003912 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b58      	ldr	r3, [pc, #352]	; (8003a50 <HAL_RCC_ClockConfig+0x184>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2201      	movs	r2, #1
 80038f4:	4393      	bics	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	4b55      	ldr	r3, [pc, #340]	; (8003a50 <HAL_RCC_ClockConfig+0x184>)
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCC_ClockConfig+0x184>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d001      	beq.n	8003912 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e09a      	b.n	8003a48 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2202      	movs	r2, #2
 8003918:	4013      	ands	r3, r2
 800391a:	d015      	beq.n	8003948 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2204      	movs	r2, #4
 8003922:	4013      	ands	r3, r2
 8003924:	d006      	beq.n	8003934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003926:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4b4a      	ldr	r3, [pc, #296]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 800392c:	21e0      	movs	r1, #224	; 0xe0
 800392e:	00c9      	lsls	r1, r1, #3
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	22f0      	movs	r2, #240	; 0xf0
 800393a:	4393      	bics	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	4b44      	ldr	r3, [pc, #272]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	029b      	lsls	r3, r3, #10
 8003962:	4013      	ands	r3, r2
 8003964:	d114      	bne.n	8003990 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06e      	b.n	8003a48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b38      	ldr	r3, [pc, #224]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	049b      	lsls	r3, r3, #18
 800397a:	4013      	ands	r3, r2
 800397c:	d108      	bne.n	8003990 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e062      	b.n	8003a48 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b34      	ldr	r3, [pc, #208]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2202      	movs	r2, #2
 8003988:	4013      	ands	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e05b      	b.n	8003a48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2203      	movs	r2, #3
 8003996:	4393      	bics	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7ff f84a 	bl	8002a3c <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ac:	e009      	b.n	80039c2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ae:	f7ff f845 	bl	8002a3c <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <HAL_RCC_ClockConfig+0x18c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e042      	b.n	8003a48 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	220c      	movs	r2, #12
 80039c8:	401a      	ands	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1ec      	bne.n	80039ae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_RCC_ClockConfig+0x184>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2201      	movs	r2, #1
 80039da:	4013      	ands	r3, r2
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d211      	bcs.n	8003a06 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCC_ClockConfig+0x184>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2201      	movs	r2, #1
 80039e8:	4393      	bics	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <HAL_RCC_ClockConfig+0x184>)
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <HAL_RCC_ClockConfig+0x184>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2201      	movs	r2, #1
 80039fa:	4013      	ands	r3, r2
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e020      	b.n	8003a48 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <HAL_RCC_ClockConfig+0x190>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	0019      	movs	r1, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a24:	f000 f820 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8003a28:	0001      	movs	r1, r0
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_RCC_ClockConfig+0x188>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	220f      	movs	r2, #15
 8003a32:	4013      	ands	r3, r2
 8003a34:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <HAL_RCC_ClockConfig+0x194>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	000a      	movs	r2, r1
 8003a3a:	40da      	lsrs	r2, r3
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_ClockConfig+0x198>)
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a40:	2000      	movs	r0, #0
 8003a42:	f7fe ffb5 	bl	80029b0 <HAL_InitTick>
  
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b004      	add	sp, #16
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40021000 	.word	0x40021000
 8003a58:	00001388 	.word	0x00001388
 8003a5c:	fffff8ff 	.word	0xfffff8ff
 8003a60:	080069e8 	.word	0x080069e8
 8003a64:	200000f8 	.word	0x200000f8

08003a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x30>
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x36>
 8003a96:	e02c      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a9a:	613b      	str	r3, [r7, #16]
      break;
 8003a9c:	e02c      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	0c9b      	lsrs	r3, r3, #18
 8003aa2:	220f      	movs	r2, #15
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
 8003aaa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	025b      	lsls	r3, r3, #9
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4810      	ldr	r0, [pc, #64]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ac8:	f7fc fb1e 	bl	8000108 <__udivsi3>
 8003acc:	0003      	movs	r3, r0
 8003ace:	001a      	movs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4353      	muls	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	e009      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	000a      	movs	r2, r1
 8003adc:	0152      	lsls	r2, r2, #5
 8003ade:	1a52      	subs	r2, r2, r1
 8003ae0:	0193      	lsls	r3, r2, #6
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	185b      	adds	r3, r3, r1
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
      break;
 8003af0:	e002      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xac>)
 8003af4:	613b      	str	r3, [r7, #16]
      break;
 8003af6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003af8:	693b      	ldr	r3, [r7, #16]
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b006      	add	sp, #24
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	40021000 	.word	0x40021000
 8003b08:	00f42400 	.word	0x00f42400
 8003b0c:	08006a00 	.word	0x08006a00
 8003b10:	08006a10 	.word	0x08006a10
 8003b14:	007a1200 	.word	0x007a1200

08003b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b02      	ldr	r3, [pc, #8]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	200000f8 	.word	0x200000f8

08003b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b30:	f7ff fff2 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b34:	0001      	movs	r1, r0
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	4013      	ands	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	40d9      	lsrs	r1, r3
 8003b46:	000b      	movs	r3, r1
}    
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	40021000 	.word	0x40021000
 8003b54:	080069f8 	.word	0x080069f8

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	025b      	lsls	r3, r3, #9
 8003b70:	4013      	ands	r3, r2
 8003b72:	d100      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003b74:	e08e      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	2017      	movs	r0, #23
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b57      	ldr	r3, [pc, #348]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	055b      	lsls	r3, r3, #21
 8003b86:	4013      	ands	r3, r2
 8003b88:	d110      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b54      	ldr	r3, [pc, #336]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	0549      	lsls	r1, r1, #21
 8003b94:	430a      	orrs	r2, r1
 8003b96:	61da      	str	r2, [r3, #28]
 8003b98:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	055b      	lsls	r3, r3, #21
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b4c      	ldr	r3, [pc, #304]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d11a      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb8:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b48      	ldr	r3, [pc, #288]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	0049      	lsls	r1, r1, #1
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe ff39 	bl	8002a3c <HAL_GetTick>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	e008      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fe ff34 	bl	8002a3c <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e077      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b3f      	ldr	r3, [pc, #252]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4013      	ands	r3, r2
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bee:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bf0:	6a1a      	ldr	r2, [r3, #32]
 8003bf2:	23c0      	movs	r3, #192	; 0xc0
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d034      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	23c0      	movs	r3, #192	; 0xc0
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4013      	ands	r3, r2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d02c      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c10:	4b32      	ldr	r3, [pc, #200]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a33      	ldr	r2, [pc, #204]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c1a:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c20:	2180      	movs	r1, #128	; 0x80
 8003c22:	0249      	lsls	r1, r1, #9
 8003c24:	430a      	orrs	r2, r1
 8003c26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c2e:	492e      	ldr	r1, [pc, #184]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c34:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe fefb 	bl	8002a3c <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	e009      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fef6 	bl	8002a3c <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	4a25      	ldr	r2, [pc, #148]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e038      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c60:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	2202      	movs	r2, #2
 8003c66:	4013      	ands	r3, r2
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c6a:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c7e:	2317      	movs	r3, #23
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c8e:	4918      	ldr	r1, [pc, #96]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003c90:	400a      	ands	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	4393      	bics	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b006      	add	sp, #24
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	fffffcff 	.word	0xfffffcff
 8003ce8:	fffeffff 	.word	0xfffeffff
 8003cec:	00001388 	.word	0x00001388
 8003cf0:	efffffff 	.word	0xefffffff

08003cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e042      	b.n	8003d8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	223d      	movs	r2, #61	; 0x3d
 8003d0a:	5c9b      	ldrb	r3, [r3, r2]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	223c      	movs	r2, #60	; 0x3c
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7fe fc0b 	bl	8002538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223d      	movs	r2, #61	; 0x3d
 8003d26:	2102      	movs	r1, #2
 8003d28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	0019      	movs	r1, r3
 8003d34:	0010      	movs	r0, r2
 8003d36:	f000 f9dd 	bl	80040f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2246      	movs	r2, #70	; 0x46
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223e      	movs	r2, #62	; 0x3e
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	223f      	movs	r2, #63	; 0x3f
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2240      	movs	r2, #64	; 0x40
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2241      	movs	r2, #65	; 0x41
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2242      	movs	r2, #66	; 0x42
 8003d66:	2101      	movs	r1, #1
 8003d68:	5499      	strb	r1, [r3, r2]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2243      	movs	r2, #67	; 0x43
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2244      	movs	r2, #68	; 0x44
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2245      	movs	r2, #69	; 0x45
 8003d7e:	2101      	movs	r1, #1
 8003d80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	223d      	movs	r2, #61	; 0x3d
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b002      	add	sp, #8
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	223d      	movs	r2, #61	; 0x3d
 8003da0:	5c9b      	ldrb	r3, [r3, r2]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e035      	b.n	8003e18 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	223d      	movs	r2, #61	; 0x3d
 8003db0:	2102      	movs	r1, #2
 8003db2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <HAL_TIM_Base_Start_IT+0x8c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x4e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_TIM_Base_Start_IT+0x90>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x4e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <HAL_TIM_Base_Start_IT+0x94>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d111      	bne.n	8003e06 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2207      	movs	r2, #7
 8003dea:	4013      	ands	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b06      	cmp	r3, #6
 8003df2:	d010      	beq.n	8003e16 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2101      	movs	r1, #1
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	e007      	b.n	8003e16 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40014000 	.word	0x40014000

08003e2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2101      	movs	r1, #1
 8003e40:	438a      	bics	r2, r1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <HAL_TIM_Base_Stop_IT+0x54>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d10d      	bne.n	8003e6c <HAL_TIM_Base_Stop_IT+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	4a0b      	ldr	r2, [pc, #44]	; (8003e84 <HAL_TIM_Base_Stop_IT+0x58>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_Base_Stop_IT+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	438a      	bics	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	223d      	movs	r2, #61	; 0x3d
 8003e70:	2101      	movs	r1, #1
 8003e72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	00001111 	.word	0x00001111
 8003e84:	00000444 	.word	0x00000444

08003e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2202      	movs	r2, #2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d124      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d11d      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	4252      	negs	r2, r2
 8003eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 f8fa 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e007      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f8ed 	bl	80040b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 f8f9 	bl	80040d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2204      	movs	r2, #4
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d125      	bne.n	8003f42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	2204      	movs	r2, #4
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d11e      	bne.n	8003f42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2205      	movs	r2, #5
 8003f0a:	4252      	negs	r2, r2
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	23c0      	movs	r3, #192	; 0xc0
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 f8cd 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003f2a:	e007      	b.n	8003f3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 f8c0 	bl	80040b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 f8cc 	bl	80040d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2208      	movs	r2, #8
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d124      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2208      	movs	r2, #8
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d11d      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2209      	movs	r2, #9
 8003f64:	4252      	negs	r2, r2
 8003f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	2203      	movs	r2, #3
 8003f76:	4013      	ands	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f000 f8a1 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003f82:	e007      	b.n	8003f94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 f894 	bl	80040b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 f8a0 	bl	80040d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d125      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d11e      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2211      	movs	r2, #17
 8003fbc:	4252      	negs	r2, r2
 8003fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	23c0      	movs	r3, #192	; 0xc0
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 f874 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003fdc:	e007      	b.n	8003fee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 f867 	bl	80040b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 f873 	bl	80040d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d10f      	bne.n	8004022 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	4013      	ands	r3, r2
 800400c:	2b01      	cmp	r3, #1
 800400e:	d108      	bne.n	8004022 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2202      	movs	r2, #2
 8004016:	4252      	negs	r2, r2
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7fd fd21 	bl	8001a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	4013      	ands	r3, r2
 800402c:	2b80      	cmp	r3, #128	; 0x80
 800402e:	d10f      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2280      	movs	r2, #128	; 0x80
 8004038:	4013      	ands	r3, r2
 800403a:	2b80      	cmp	r3, #128	; 0x80
 800403c:	d108      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2281      	movs	r2, #129	; 0x81
 8004044:	4252      	negs	r2, r2
 8004046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0018      	movs	r0, r3
 800404c:	f000 f8d0 	bl	80041f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	4013      	ands	r3, r2
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d10f      	bne.n	800407e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2240      	movs	r2, #64	; 0x40
 8004066:	4013      	ands	r3, r2
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d108      	bne.n	800407e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2241      	movs	r2, #65	; 0x41
 8004072:	4252      	negs	r2, r2
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f000 f833 	bl	80040e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2220      	movs	r2, #32
 8004086:	4013      	ands	r3, r2
 8004088:	2b20      	cmp	r3, #32
 800408a:	d10f      	bne.n	80040ac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	4013      	ands	r3, r2
 8004096:	2b20      	cmp	r3, #32
 8004098:	d108      	bne.n	80040ac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2221      	movs	r2, #33	; 0x21
 80040a0:	4252      	negs	r2, r2
 80040a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f89a 	bl	80041e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b002      	add	sp, #8
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b002      	add	sp, #8
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a2f      	ldr	r2, [pc, #188]	; (80041c4 <TIM_Base_SetConfig+0xd0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0x20>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a2e      	ldr	r2, [pc, #184]	; (80041c8 <TIM_Base_SetConfig+0xd4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2270      	movs	r2, #112	; 0x70
 8004118:	4393      	bics	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <TIM_Base_SetConfig+0xd0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <TIM_Base_SetConfig+0x62>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <TIM_Base_SetConfig+0xd4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00f      	beq.n	8004156 <TIM_Base_SetConfig+0x62>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a24      	ldr	r2, [pc, #144]	; (80041cc <TIM_Base_SetConfig+0xd8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00b      	beq.n	8004156 <TIM_Base_SetConfig+0x62>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <TIM_Base_SetConfig+0xdc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <TIM_Base_SetConfig+0x62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <TIM_Base_SetConfig+0xe0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_Base_SetConfig+0x62>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <TIM_Base_SetConfig+0xe4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d108      	bne.n	8004168 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a20      	ldr	r2, [pc, #128]	; (80041dc <TIM_Base_SetConfig+0xe8>)
 800415a:	4013      	ands	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	4393      	bics	r3, r2
 800416e:	001a      	movs	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <TIM_Base_SetConfig+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00b      	beq.n	80041ae <TIM_Base_SetConfig+0xba>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a0d      	ldr	r2, [pc, #52]	; (80041d0 <TIM_Base_SetConfig+0xdc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <TIM_Base_SetConfig+0xba>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <TIM_Base_SetConfig+0xe0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <TIM_Base_SetConfig+0xba>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <TIM_Base_SetConfig+0xe4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d103      	bne.n	80041b6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	615a      	str	r2, [r3, #20]
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b004      	add	sp, #16
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40002000 	.word	0x40002000
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40014400 	.word	0x40014400
 80041d8:	40014800 	.word	0x40014800
 80041dc:	fffffcff 	.word	0xfffffcff

080041e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b002      	add	sp, #8
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e044      	b.n	800429c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2278      	movs	r2, #120	; 0x78
 800421e:	2100      	movs	r1, #0
 8004220:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	0018      	movs	r0, r3
 8004226:	f7fe f9cd 	bl	80025c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2224      	movs	r2, #36	; 0x24
 800422e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2101      	movs	r1, #1
 800423c:	438a      	bics	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f000 fc3a 	bl	8004abc <UART_SetConfig>
 8004248:	0003      	movs	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e024      	b.n	800429c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0018      	movs	r0, r3
 800425e:	f000 fd6d 	bl	8004d3c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	490d      	ldr	r1, [pc, #52]	; (80042a4 <HAL_UART_Init+0xa4>)
 800426e:	400a      	ands	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2108      	movs	r1, #8
 800427e:	438a      	bics	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2101      	movs	r1, #1
 800428e:	430a      	orrs	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 fe05 	bl	8004ea4 <UART_CheckIdleState>
 800429a:	0003      	movs	r3, r0
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	b002      	add	sp, #8
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	fffff7ff 	.word	0xfffff7ff

080042a8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e030      	b.n	800431c <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2224      	movs	r2, #36	; 0x24
 80042be:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2101      	movs	r1, #1
 80042cc:	438a      	bics	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2200      	movs	r2, #0
 80042de:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7fe f9fa 	bl	80026e4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2284      	movs	r2, #132	; 0x84
 80042f4:	2100      	movs	r1, #0
 80042f6:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	2100      	movs	r1, #0
 8004304:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2278      	movs	r2, #120	; 0x78
 8004316:	2100      	movs	r1, #0
 8004318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004338:	2b20      	cmp	r3, #32
 800433a:	d000      	beq.n	800433e <HAL_UART_Transmit+0x1a>
 800433c:	e08d      	b.n	800445a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_UART_Transmit+0x28>
 8004344:	1dbb      	adds	r3, r7, #6
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e085      	b.n	800445c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	015b      	lsls	r3, r3, #5
 8004358:	429a      	cmp	r2, r3
 800435a:	d109      	bne.n	8004370 <HAL_UART_Transmit+0x4c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2201      	movs	r2, #1
 8004368:	4013      	ands	r3, r2
 800436a:	d001      	beq.n	8004370 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e075      	b.n	800445c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2284      	movs	r2, #132	; 0x84
 8004374:	2100      	movs	r1, #0
 8004376:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2221      	movs	r2, #33	; 0x21
 800437c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800437e:	f7fe fb5d 	bl	8002a3c <HAL_GetTick>
 8004382:	0003      	movs	r3, r0
 8004384:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1dba      	adds	r2, r7, #6
 800438a:	2150      	movs	r1, #80	; 0x50
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1dba      	adds	r2, r7, #6
 8004394:	2152      	movs	r1, #82	; 0x52
 8004396:	8812      	ldrh	r2, [r2, #0]
 8004398:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	015b      	lsls	r3, r3, #5
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d108      	bne.n	80043b8 <HAL_UART_Transmit+0x94>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e003      	b.n	80043c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043c0:	e030      	b.n	8004424 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	0013      	movs	r3, r2
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	f000 fe10 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 80043d4:	1e03      	subs	r3, r0, #0
 80043d6:	d004      	beq.n	80043e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e03c      	b.n	800445c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	881a      	ldrh	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	05d2      	lsls	r2, r2, #23
 80043f2:	0dd2      	lsrs	r2, r2, #23
 80043f4:	b292      	uxth	r2, r2
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	3302      	adds	r3, #2
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e008      	b.n	8004412 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	b292      	uxth	r2, r2
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3301      	adds	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2252      	movs	r2, #82	; 0x52
 8004416:	5a9b      	ldrh	r3, [r3, r2]
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b299      	uxth	r1, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2252      	movs	r2, #82	; 0x52
 8004422:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2252      	movs	r2, #82	; 0x52
 8004428:	5a9b      	ldrh	r3, [r3, r2]
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1c8      	bne.n	80043c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	0013      	movs	r3, r2
 800443a:	2200      	movs	r2, #0
 800443c:	2140      	movs	r1, #64	; 0x40
 800443e:	f000 fdd9 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004442:	1e03      	subs	r3, r0, #0
 8004444:	d004      	beq.n	8004450 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e005      	b.n	800445c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b008      	add	sp, #32
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	1dbb      	adds	r3, r7, #6
 8004470:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2280      	movs	r2, #128	; 0x80
 8004476:	589b      	ldr	r3, [r3, r2]
 8004478:	2b20      	cmp	r3, #32
 800447a:	d145      	bne.n	8004508 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_UART_Receive_IT+0x26>
 8004482:	1dbb      	adds	r3, r7, #6
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e03d      	b.n	800450a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	015b      	lsls	r3, r3, #5
 8004496:	429a      	cmp	r2, r3
 8004498:	d109      	bne.n	80044ae <HAL_UART_Receive_IT+0x4a>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2201      	movs	r2, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	d001      	beq.n	80044ae <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e02d      	b.n	800450a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	4013      	ands	r3, r2
 80044c0:	d019      	beq.n	80044f6 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c2:	f3ef 8310 	mrs	r3, PRIMASK
 80044c6:	613b      	str	r3, [r7, #16]
  return(result);
 80044c8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	04c9      	lsls	r1, r1, #19
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f383 8810 	msr	PRIMASK, r3
}
 80044f4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044f6:	1dbb      	adds	r3, r7, #6
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	0018      	movs	r0, r3
 8004500:	f000 fde2 	bl	80050c8 <UART_Start_Receive_IT>
 8004504:	0003      	movs	r3, r0
 8004506:	e000      	b.n	800450a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b008      	add	sp, #32
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b0ab      	sub	sp, #172	; 0xac
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	22a4      	movs	r2, #164	; 0xa4
 8004524:	18b9      	adds	r1, r7, r2
 8004526:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	20a0      	movs	r0, #160	; 0xa0
 8004530:	1839      	adds	r1, r7, r0
 8004532:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	219c      	movs	r1, #156	; 0x9c
 800453c:	1879      	adds	r1, r7, r1
 800453e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004540:	0011      	movs	r1, r2
 8004542:	18bb      	adds	r3, r7, r2
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a99      	ldr	r2, [pc, #612]	; (80047ac <HAL_UART_IRQHandler+0x298>)
 8004548:	4013      	ands	r3, r2
 800454a:	2298      	movs	r2, #152	; 0x98
 800454c:	18bc      	adds	r4, r7, r2
 800454e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004550:	18bb      	adds	r3, r7, r2
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d114      	bne.n	8004582 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004558:	187b      	adds	r3, r7, r1
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2220      	movs	r2, #32
 800455e:	4013      	ands	r3, r2
 8004560:	d00f      	beq.n	8004582 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004562:	183b      	adds	r3, r7, r0
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2220      	movs	r2, #32
 8004568:	4013      	ands	r3, r2
 800456a:	d00a      	beq.n	8004582 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004570:	2b00      	cmp	r3, #0
 8004572:	d100      	bne.n	8004576 <HAL_UART_IRQHandler+0x62>
 8004574:	e286      	b.n	8004a84 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	0010      	movs	r0, r2
 800457e:	4798      	blx	r3
      }
      return;
 8004580:	e280      	b.n	8004a84 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004582:	2398      	movs	r3, #152	; 0x98
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d100      	bne.n	800458e <HAL_UART_IRQHandler+0x7a>
 800458c:	e114      	b.n	80047b8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800458e:	239c      	movs	r3, #156	; 0x9c
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	4013      	ands	r3, r2
 8004598:	d106      	bne.n	80045a8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800459a:	23a0      	movs	r3, #160	; 0xa0
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a83      	ldr	r2, [pc, #524]	; (80047b0 <HAL_UART_IRQHandler+0x29c>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	d100      	bne.n	80045a8 <HAL_UART_IRQHandler+0x94>
 80045a6:	e107      	b.n	80047b8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045a8:	23a4      	movs	r3, #164	; 0xa4
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2201      	movs	r2, #1
 80045b0:	4013      	ands	r3, r2
 80045b2:	d012      	beq.n	80045da <HAL_UART_IRQHandler+0xc6>
 80045b4:	23a0      	movs	r3, #160	; 0xa0
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4013      	ands	r3, r2
 80045c0:	d00b      	beq.n	80045da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2284      	movs	r2, #132	; 0x84
 80045ce:	589b      	ldr	r3, [r3, r2]
 80045d0:	2201      	movs	r2, #1
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2184      	movs	r1, #132	; 0x84
 80045d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045da:	23a4      	movs	r3, #164	; 0xa4
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2202      	movs	r2, #2
 80045e2:	4013      	ands	r3, r2
 80045e4:	d011      	beq.n	800460a <HAL_UART_IRQHandler+0xf6>
 80045e6:	239c      	movs	r3, #156	; 0x9c
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d00b      	beq.n	800460a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2202      	movs	r2, #2
 80045f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2284      	movs	r2, #132	; 0x84
 80045fe:	589b      	ldr	r3, [r3, r2]
 8004600:	2204      	movs	r2, #4
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2184      	movs	r1, #132	; 0x84
 8004608:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800460a:	23a4      	movs	r3, #164	; 0xa4
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2204      	movs	r2, #4
 8004612:	4013      	ands	r3, r2
 8004614:	d011      	beq.n	800463a <HAL_UART_IRQHandler+0x126>
 8004616:	239c      	movs	r3, #156	; 0x9c
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	4013      	ands	r3, r2
 8004620:	d00b      	beq.n	800463a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2204      	movs	r2, #4
 8004628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2284      	movs	r2, #132	; 0x84
 800462e:	589b      	ldr	r3, [r3, r2]
 8004630:	2202      	movs	r2, #2
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2184      	movs	r1, #132	; 0x84
 8004638:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800463a:	23a4      	movs	r3, #164	; 0xa4
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2208      	movs	r2, #8
 8004642:	4013      	ands	r3, r2
 8004644:	d017      	beq.n	8004676 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004646:	23a0      	movs	r3, #160	; 0xa0
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2220      	movs	r2, #32
 800464e:	4013      	ands	r3, r2
 8004650:	d105      	bne.n	800465e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004652:	239c      	movs	r3, #156	; 0x9c
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2201      	movs	r2, #1
 800465a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800465c:	d00b      	beq.n	8004676 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2208      	movs	r2, #8
 8004664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2284      	movs	r2, #132	; 0x84
 800466a:	589b      	ldr	r3, [r3, r2]
 800466c:	2208      	movs	r2, #8
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2184      	movs	r1, #132	; 0x84
 8004674:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004676:	23a4      	movs	r3, #164	; 0xa4
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	4013      	ands	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_UART_IRQHandler+0x198>
 8004684:	23a0      	movs	r3, #160	; 0xa0
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	04db      	lsls	r3, r3, #19
 800468e:	4013      	ands	r3, r2
 8004690:	d00c      	beq.n	80046ac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2284      	movs	r2, #132	; 0x84
 80046a0:	589b      	ldr	r3, [r3, r2]
 80046a2:	2220      	movs	r2, #32
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2184      	movs	r1, #132	; 0x84
 80046aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2284      	movs	r2, #132	; 0x84
 80046b0:	589b      	ldr	r3, [r3, r2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d100      	bne.n	80046b8 <HAL_UART_IRQHandler+0x1a4>
 80046b6:	e1e7      	b.n	8004a88 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046b8:	23a4      	movs	r3, #164	; 0xa4
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2220      	movs	r2, #32
 80046c0:	4013      	ands	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046c4:	23a0      	movs	r3, #160	; 0xa0
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2220      	movs	r2, #32
 80046cc:	4013      	ands	r3, r2
 80046ce:	d008      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	0010      	movs	r0, r2
 80046e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2284      	movs	r2, #132	; 0x84
 80046e6:	589b      	ldr	r3, [r3, r2]
 80046e8:	2194      	movs	r1, #148	; 0x94
 80046ea:	187a      	adds	r2, r7, r1
 80046ec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2240      	movs	r2, #64	; 0x40
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d004      	beq.n	8004706 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2228      	movs	r2, #40	; 0x28
 8004702:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004704:	d047      	beq.n	8004796 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	0018      	movs	r0, r3
 800470a:	f000 fd93 	bl	8005234 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2240      	movs	r2, #64	; 0x40
 8004716:	4013      	ands	r3, r2
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d137      	bne.n	800478c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471c:	f3ef 8310 	mrs	r3, PRIMASK
 8004720:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004724:	2090      	movs	r0, #144	; 0x90
 8004726:	183a      	adds	r2, r7, r0
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	2301      	movs	r3, #1
 800472c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004730:	f383 8810 	msr	PRIMASK, r3
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	438a      	bics	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	183b      	adds	r3, r7, r0
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004758:	2b00      	cmp	r3, #0
 800475a:	d012      	beq.n	8004782 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_UART_IRQHandler+0x2a0>)
 8004762:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004768:	0018      	movs	r0, r3
 800476a:	f7fe fab9 	bl	8002ce0 <HAL_DMA_Abort_IT>
 800476e:	1e03      	subs	r3, r0, #0
 8004770:	d01a      	beq.n	80047a8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	0018      	movs	r0, r3
 800477e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	e012      	b.n	80047a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f7fd fbe9 	bl	8001f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	e00d      	b.n	80047a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0018      	movs	r0, r3
 8004790:	f7fd fbe4 	bl	8001f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e008      	b.n	80047a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f7fd fbdf 	bl	8001f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2284      	movs	r2, #132	; 0x84
 80047a2:	2100      	movs	r1, #0
 80047a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80047a6:	e16f      	b.n	8004a88 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	46c0      	nop			; (mov r8, r8)
    return;
 80047aa:	e16d      	b.n	8004a88 <HAL_UART_IRQHandler+0x574>
 80047ac:	0000080f 	.word	0x0000080f
 80047b0:	04000120 	.word	0x04000120
 80047b4:	080052fd 	.word	0x080052fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d000      	beq.n	80047c2 <HAL_UART_IRQHandler+0x2ae>
 80047c0:	e139      	b.n	8004a36 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047c2:	23a4      	movs	r3, #164	; 0xa4
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2210      	movs	r2, #16
 80047ca:	4013      	ands	r3, r2
 80047cc:	d100      	bne.n	80047d0 <HAL_UART_IRQHandler+0x2bc>
 80047ce:	e132      	b.n	8004a36 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047d0:	23a0      	movs	r3, #160	; 0xa0
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2210      	movs	r2, #16
 80047d8:	4013      	ands	r3, r2
 80047da:	d100      	bne.n	80047de <HAL_UART_IRQHandler+0x2ca>
 80047dc:	e12b      	b.n	8004a36 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2210      	movs	r2, #16
 80047e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d000      	beq.n	80047f6 <HAL_UART_IRQHandler+0x2e2>
 80047f4:	e09f      	b.n	8004936 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	217e      	movs	r1, #126	; 0x7e
 8004800:	187b      	adds	r3, r7, r1
 8004802:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004804:	187b      	adds	r3, r7, r1
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d100      	bne.n	800480e <HAL_UART_IRQHandler+0x2fa>
 800480c:	e13e      	b.n	8004a8c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2258      	movs	r2, #88	; 0x58
 8004812:	5a9b      	ldrh	r3, [r3, r2]
 8004814:	187a      	adds	r2, r7, r1
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d300      	bcc.n	800481e <HAL_UART_IRQHandler+0x30a>
 800481c:	e136      	b.n	8004a8c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	187a      	adds	r2, r7, r1
 8004822:	215a      	movs	r1, #90	; 0x5a
 8004824:	8812      	ldrh	r2, [r2, #0]
 8004826:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b20      	cmp	r3, #32
 8004830:	d06f      	beq.n	8004912 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483a:	67bb      	str	r3, [r7, #120]	; 0x78
 800483c:	2301      	movs	r3, #1
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4992      	ldr	r1, [pc, #584]	; (8004a9c <HAL_UART_IRQHandler+0x588>)
 8004854:	400a      	ands	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004864:	f3ef 8310 	mrs	r3, PRIMASK
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	677b      	str	r3, [r7, #116]	; 0x74
 800486e:	2301      	movs	r3, #1
 8004870:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	438a      	bics	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004896:	f3ef 8310 	mrs	r3, PRIMASK
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800489c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489e:	673b      	str	r3, [r7, #112]	; 0x70
 80048a0:	2301      	movs	r3, #1
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2140      	movs	r1, #64	; 0x40
 80048b8:	438a      	bics	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048be:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2280      	movs	r2, #128	; 0x80
 80048cc:	2120      	movs	r1, #32
 80048ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d6:	f3ef 8310 	mrs	r3, PRIMASK
 80048da:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80048dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e0:	2301      	movs	r3, #1
 80048e2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2110      	movs	r1, #16
 80048f8:	438a      	bics	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004902:	f383 8810 	msr	PRIMASK, r3
}
 8004906:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490c:	0018      	movs	r0, r3
 800490e:	f7fe f9af 	bl	8002c70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2258      	movs	r2, #88	; 0x58
 800491c:	5a9a      	ldrh	r2, [r3, r2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	215a      	movs	r1, #90	; 0x5a
 8004922:	5a5b      	ldrh	r3, [r3, r1]
 8004924:	b29b      	uxth	r3, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0011      	movs	r1, r2
 800492e:	0018      	movs	r0, r3
 8004930:	f000 f8b8 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004934:	e0aa      	b.n	8004a8c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2258      	movs	r2, #88	; 0x58
 800493a:	5a99      	ldrh	r1, [r3, r2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	225a      	movs	r2, #90	; 0x5a
 8004940:	5a9b      	ldrh	r3, [r3, r2]
 8004942:	b29a      	uxth	r2, r3
 8004944:	208e      	movs	r0, #142	; 0x8e
 8004946:	183b      	adds	r3, r7, r0
 8004948:	1a8a      	subs	r2, r1, r2
 800494a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	225a      	movs	r2, #90	; 0x5a
 8004950:	5a9b      	ldrh	r3, [r3, r2]
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d100      	bne.n	800495a <HAL_UART_IRQHandler+0x446>
 8004958:	e09a      	b.n	8004a90 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800495a:	183b      	adds	r3, r7, r0
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d100      	bne.n	8004964 <HAL_UART_IRQHandler+0x450>
 8004962:	e095      	b.n	8004a90 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004964:	f3ef 8310 	mrs	r3, PRIMASK
 8004968:	60fb      	str	r3, [r7, #12]
  return(result);
 800496a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496c:	2488      	movs	r4, #136	; 0x88
 800496e:	193a      	adds	r2, r7, r4
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	2301      	movs	r3, #1
 8004974:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f383 8810 	msr	PRIMASK, r3
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4945      	ldr	r1, [pc, #276]	; (8004aa0 <HAL_UART_IRQHandler+0x58c>)
 800498a:	400a      	ands	r2, r1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	193b      	adds	r3, r7, r4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f383 8810 	msr	PRIMASK, r3
}
 800499a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499c:	f3ef 8310 	mrs	r3, PRIMASK
 80049a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80049a2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	2484      	movs	r4, #132	; 0x84
 80049a6:	193a      	adds	r2, r7, r4
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	2301      	movs	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f383 8810 	msr	PRIMASK, r3
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2101      	movs	r1, #1
 80049c2:	438a      	bics	r2, r1
 80049c4:	609a      	str	r2, [r3, #8]
 80049c6:	193b      	adds	r3, r7, r4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	f383 8810 	msr	PRIMASK, r3
}
 80049d2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2280      	movs	r2, #128	; 0x80
 80049d8:	2120      	movs	r1, #32
 80049da:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e8:	f3ef 8310 	mrs	r3, PRIMASK
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f0:	2480      	movs	r4, #128	; 0x80
 80049f2:	193a      	adds	r2, r7, r4
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	2301      	movs	r3, #1
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	f383 8810 	msr	PRIMASK, r3
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2110      	movs	r1, #16
 8004a0e:	438a      	bics	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	193b      	adds	r3, r7, r4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	f383 8810 	msr	PRIMASK, r3
}
 8004a1e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a26:	183b      	adds	r3, r7, r0
 8004a28:	881a      	ldrh	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0011      	movs	r1, r2
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 f838 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a34:	e02c      	b.n	8004a90 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a36:	23a4      	movs	r3, #164	; 0xa4
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d00f      	beq.n	8004a62 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a42:	23a0      	movs	r3, #160	; 0xa0
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2280      	movs	r2, #128	; 0x80
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01e      	beq.n	8004a94 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	0010      	movs	r0, r2
 8004a5e:	4798      	blx	r3
    }
    return;
 8004a60:	e018      	b.n	8004a94 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a62:	23a4      	movs	r3, #164	; 0xa4
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2240      	movs	r2, #64	; 0x40
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_UART_IRQHandler+0x582>
 8004a6e:	23a0      	movs	r3, #160	; 0xa0
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2240      	movs	r2, #64	; 0x40
 8004a76:	4013      	ands	r3, r2
 8004a78:	d00d      	beq.n	8004a96 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 fc54 	bl	800532a <UART_EndTransmit_IT>
    return;
 8004a82:	e008      	b.n	8004a96 <HAL_UART_IRQHandler+0x582>
      return;
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	e006      	b.n	8004a96 <HAL_UART_IRQHandler+0x582>
    return;
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	e004      	b.n	8004a96 <HAL_UART_IRQHandler+0x582>
      return;
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	e002      	b.n	8004a96 <HAL_UART_IRQHandler+0x582>
      return;
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	e000      	b.n	8004a96 <HAL_UART_IRQHandler+0x582>
    return;
 8004a94:	46c0      	nop			; (mov r8, r8)
  }

}
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b02b      	add	sp, #172	; 0xac
 8004a9a:	bd90      	pop	{r4, r7, pc}
 8004a9c:	fffffeff 	.word	0xfffffeff
 8004aa0:	fffffedf 	.word	0xfffffedf

08004aa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	000a      	movs	r2, r1
 8004aae:	1cbb      	adds	r3, r7, #2
 8004ab0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b002      	add	sp, #8
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ac4:	231e      	movs	r3, #30
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a8d      	ldr	r2, [pc, #564]	; (8004d20 <UART_SetConfig+0x264>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4a88      	ldr	r2, [pc, #544]	; (8004d24 <UART_SetConfig+0x268>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a7f      	ldr	r2, [pc, #508]	; (8004d28 <UART_SetConfig+0x26c>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a7b      	ldr	r2, [pc, #492]	; (8004d2c <UART_SetConfig+0x270>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d127      	bne.n	8004b92 <UART_SetConfig+0xd6>
 8004b42:	4b7b      	ldr	r3, [pc, #492]	; (8004d30 <UART_SetConfig+0x274>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	2203      	movs	r2, #3
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d00d      	beq.n	8004b6a <UART_SetConfig+0xae>
 8004b4e:	d81b      	bhi.n	8004b88 <UART_SetConfig+0xcc>
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d014      	beq.n	8004b7e <UART_SetConfig+0xc2>
 8004b54:	d818      	bhi.n	8004b88 <UART_SetConfig+0xcc>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <UART_SetConfig+0xa4>
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d00a      	beq.n	8004b74 <UART_SetConfig+0xb8>
 8004b5e:	e013      	b.n	8004b88 <UART_SetConfig+0xcc>
 8004b60:	231f      	movs	r3, #31
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	e021      	b.n	8004bae <UART_SetConfig+0xf2>
 8004b6a:	231f      	movs	r3, #31
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	2202      	movs	r2, #2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	e01c      	b.n	8004bae <UART_SetConfig+0xf2>
 8004b74:	231f      	movs	r3, #31
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	2204      	movs	r2, #4
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	e017      	b.n	8004bae <UART_SetConfig+0xf2>
 8004b7e:	231f      	movs	r3, #31
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	2208      	movs	r2, #8
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e012      	b.n	8004bae <UART_SetConfig+0xf2>
 8004b88:	231f      	movs	r3, #31
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	e00d      	b.n	8004bae <UART_SetConfig+0xf2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <UART_SetConfig+0x278>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d104      	bne.n	8004ba6 <UART_SetConfig+0xea>
 8004b9c:	231f      	movs	r3, #31
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	e003      	b.n	8004bae <UART_SetConfig+0xf2>
 8004ba6:	231f      	movs	r3, #31
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	2210      	movs	r2, #16
 8004bac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69da      	ldr	r2, [r3, #28]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d15c      	bne.n	8004c74 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004bba:	231f      	movs	r3, #31
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d015      	beq.n	8004bf0 <UART_SetConfig+0x134>
 8004bc4:	dc18      	bgt.n	8004bf8 <UART_SetConfig+0x13c>
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d00d      	beq.n	8004be6 <UART_SetConfig+0x12a>
 8004bca:	dc15      	bgt.n	8004bf8 <UART_SetConfig+0x13c>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <UART_SetConfig+0x11a>
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d005      	beq.n	8004be0 <UART_SetConfig+0x124>
 8004bd4:	e010      	b.n	8004bf8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd6:	f7fe ffa9 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	61bb      	str	r3, [r7, #24]
        break;
 8004bde:	e012      	b.n	8004c06 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be0:	4b55      	ldr	r3, [pc, #340]	; (8004d38 <UART_SetConfig+0x27c>)
 8004be2:	61bb      	str	r3, [r7, #24]
        break;
 8004be4:	e00f      	b.n	8004c06 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be6:	f7fe ff3f 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8004bea:	0003      	movs	r3, r0
 8004bec:	61bb      	str	r3, [r7, #24]
        break;
 8004bee:	e00a      	b.n	8004c06 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	61bb      	str	r3, [r7, #24]
        break;
 8004bf6:	e006      	b.n	8004c06 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bfc:	231e      	movs	r3, #30
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
        break;
 8004c04:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d100      	bne.n	8004c0e <UART_SetConfig+0x152>
 8004c0c:	e07a      	b.n	8004d04 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	005a      	lsls	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	18d2      	adds	r2, r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	0019      	movs	r1, r3
 8004c20:	0010      	movs	r0, r2
 8004c22:	f7fb fa71 	bl	8000108 <__udivsi3>
 8004c26:	0003      	movs	r3, r0
 8004c28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b0f      	cmp	r3, #15
 8004c2e:	d91c      	bls.n	8004c6a <UART_SetConfig+0x1ae>
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	025b      	lsls	r3, r3, #9
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d217      	bcs.n	8004c6a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	200e      	movs	r0, #14
 8004c40:	183b      	adds	r3, r7, r0
 8004c42:	210f      	movs	r1, #15
 8004c44:	438a      	bics	r2, r1
 8004c46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2207      	movs	r2, #7
 8004c50:	4013      	ands	r3, r2
 8004c52:	b299      	uxth	r1, r3
 8004c54:	183b      	adds	r3, r7, r0
 8004c56:	183a      	adds	r2, r7, r0
 8004c58:	8812      	ldrh	r2, [r2, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	183a      	adds	r2, r7, r0
 8004c64:	8812      	ldrh	r2, [r2, #0]
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	e04c      	b.n	8004d04 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6a:	231e      	movs	r3, #30
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	e047      	b.n	8004d04 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c74:	231f      	movs	r3, #31
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d015      	beq.n	8004caa <UART_SetConfig+0x1ee>
 8004c7e:	dc18      	bgt.n	8004cb2 <UART_SetConfig+0x1f6>
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d00d      	beq.n	8004ca0 <UART_SetConfig+0x1e4>
 8004c84:	dc15      	bgt.n	8004cb2 <UART_SetConfig+0x1f6>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <UART_SetConfig+0x1d4>
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d005      	beq.n	8004c9a <UART_SetConfig+0x1de>
 8004c8e:	e010      	b.n	8004cb2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c90:	f7fe ff4c 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8004c94:	0003      	movs	r3, r0
 8004c96:	61bb      	str	r3, [r7, #24]
        break;
 8004c98:	e012      	b.n	8004cc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <UART_SetConfig+0x27c>)
 8004c9c:	61bb      	str	r3, [r7, #24]
        break;
 8004c9e:	e00f      	b.n	8004cc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca0:	f7fe fee2 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	61bb      	str	r3, [r7, #24]
        break;
 8004ca8:	e00a      	b.n	8004cc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	61bb      	str	r3, [r7, #24]
        break;
 8004cb0:	e006      	b.n	8004cc0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cb6:	231e      	movs	r3, #30
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
        break;
 8004cbe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01e      	beq.n	8004d04 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	085a      	lsrs	r2, r3, #1
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	18d2      	adds	r2, r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	0010      	movs	r0, r2
 8004cd8:	f7fb fa16 	bl	8000108 <__udivsi3>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d90a      	bls.n	8004cfc <UART_SetConfig+0x240>
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	025b      	lsls	r3, r3, #9
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d205      	bcs.n	8004cfc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e003      	b.n	8004d04 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfc:	231e      	movs	r3, #30
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d10:	231e      	movs	r3, #30
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	781b      	ldrb	r3, [r3, #0]
}
 8004d16:	0018      	movs	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b008      	add	sp, #32
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	ffff69f3 	.word	0xffff69f3
 8004d24:	ffffcfff 	.word	0xffffcfff
 8004d28:	fffff4ff 	.word	0xfffff4ff
 8004d2c:	40013800 	.word	0x40013800
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40004400 	.word	0x40004400
 8004d38:	007a1200 	.word	0x007a1200

08004d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4a4a      	ldr	r2, [pc, #296]	; (8004e80 <UART_AdvFeatureConfig+0x144>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	0019      	movs	r1, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d00b      	beq.n	8004d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4a43      	ldr	r2, [pc, #268]	; (8004e84 <UART_AdvFeatureConfig+0x148>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	0019      	movs	r1, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d00b      	beq.n	8004daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a3b      	ldr	r2, [pc, #236]	; (8004e88 <UART_AdvFeatureConfig+0x14c>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2208      	movs	r2, #8
 8004db0:	4013      	ands	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4a34      	ldr	r2, [pc, #208]	; (8004e8c <UART_AdvFeatureConfig+0x150>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <UART_AdvFeatureConfig+0x154>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2220      	movs	r2, #32
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <UART_AdvFeatureConfig+0x158>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	4013      	ands	r3, r2
 8004e18:	d01d      	beq.n	8004e56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <UART_AdvFeatureConfig+0x15c>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	035b      	lsls	r3, r3, #13
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d10b      	bne.n	8004e56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <UART_AdvFeatureConfig+0x160>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	0019      	movs	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2280      	movs	r2, #128	; 0x80
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4a0e      	ldr	r2, [pc, #56]	; (8004ea0 <UART_AdvFeatureConfig+0x164>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]
  }
}
 8004e78:	46c0      	nop			; (mov r8, r8)
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b002      	add	sp, #8
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	fffdffff 	.word	0xfffdffff
 8004e84:	fffeffff 	.word	0xfffeffff
 8004e88:	fffbffff 	.word	0xfffbffff
 8004e8c:	ffff7fff 	.word	0xffff7fff
 8004e90:	ffffefff 	.word	0xffffefff
 8004e94:	ffffdfff 	.word	0xffffdfff
 8004e98:	ffefffff 	.word	0xffefffff
 8004e9c:	ff9fffff 	.word	0xff9fffff
 8004ea0:	fff7ffff 	.word	0xfff7ffff

08004ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b092      	sub	sp, #72	; 0x48
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2284      	movs	r2, #132	; 0x84
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb4:	f7fd fdc2 	bl	8002a3c <HAL_GetTick>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2208      	movs	r2, #8
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d12c      	bne.n	8004f24 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ecc:	2280      	movs	r2, #128	; 0x80
 8004ece:	0391      	lsls	r1, r2, #14
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4a46      	ldr	r2, [pc, #280]	; (8004fec <UART_CheckIdleState+0x148>)
 8004ed4:	9200      	str	r2, [sp, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f000 f88c 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004edc:	1e03      	subs	r3, r0, #0
 8004ede:	d021      	beq.n	8004f24 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eea:	2301      	movs	r3, #1
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	438a      	bics	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	f383 8810 	msr	PRIMASK, r3
}
 8004f10:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2278      	movs	r2, #120	; 0x78
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e05f      	b.n	8004fe4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d146      	bne.n	8004fc0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f34:	2280      	movs	r2, #128	; 0x80
 8004f36:	03d1      	lsls	r1, r2, #15
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4a2c      	ldr	r2, [pc, #176]	; (8004fec <UART_CheckIdleState+0x148>)
 8004f3c:	9200      	str	r2, [sp, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f000 f858 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004f44:	1e03      	subs	r3, r0, #0
 8004f46:	d03b      	beq.n	8004fc0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f48:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
 8004f52:	2301      	movs	r3, #1
 8004f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f383 8810 	msr	PRIMASK, r3
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4921      	ldr	r1, [pc, #132]	; (8004ff0 <UART_CheckIdleState+0x14c>)
 8004f6a:	400a      	ands	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f383 8810 	msr	PRIMASK, r3
}
 8004f78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f80:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	633b      	str	r3, [r7, #48]	; 0x30
 8004f84:	2301      	movs	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f383 8810 	msr	PRIMASK, r3
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	609a      	str	r2, [r3, #8]
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	f383 8810 	msr	PRIMASK, r3
}
 8004faa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2280      	movs	r2, #128	; 0x80
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2278      	movs	r2, #120	; 0x78
 8004fb8:	2100      	movs	r1, #0
 8004fba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e011      	b.n	8004fe4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2280      	movs	r2, #128	; 0x80
 8004fca:	2120      	movs	r1, #32
 8004fcc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2278      	movs	r2, #120	; 0x78
 8004fde:	2100      	movs	r1, #0
 8004fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b010      	add	sp, #64	; 0x40
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	01ffffff 	.word	0x01ffffff
 8004ff0:	fffffedf 	.word	0xfffffedf

08004ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	1dfb      	adds	r3, r7, #7
 8005002:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	e04b      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	3301      	adds	r3, #1
 800500a:	d048      	beq.n	800509e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500c:	f7fd fd16 	bl	8002a3c <HAL_GetTick>
 8005010:	0002      	movs	r2, r0
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <UART_WaitOnFlagUntilTimeout+0x2e>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e04b      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2204      	movs	r2, #4
 800502e:	4013      	ands	r3, r2
 8005030:	d035      	beq.n	800509e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	2208      	movs	r2, #8
 800503a:	4013      	ands	r3, r2
 800503c:	2b08      	cmp	r3, #8
 800503e:	d111      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2208      	movs	r2, #8
 8005046:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	0018      	movs	r0, r3
 800504c:	f000 f8f2 	bl	8005234 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2284      	movs	r2, #132	; 0x84
 8005054:	2108      	movs	r1, #8
 8005056:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2278      	movs	r2, #120	; 0x78
 800505c:	2100      	movs	r1, #0
 800505e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e02c      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	401a      	ands	r2, r3
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	429a      	cmp	r2, r3
 8005076:	d112      	bne.n	800509e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2280      	movs	r2, #128	; 0x80
 800507e:	0112      	lsls	r2, r2, #4
 8005080:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	0018      	movs	r0, r3
 8005086:	f000 f8d5 	bl	8005234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2284      	movs	r2, #132	; 0x84
 800508e:	2120      	movs	r1, #32
 8005090:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2278      	movs	r2, #120	; 0x78
 8005096:	2100      	movs	r1, #0
 8005098:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e00f      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	425a      	negs	r2, r3
 80050ae:	4153      	adcs	r3, r2
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	001a      	movs	r2, r3
 80050b4:	1dfb      	adds	r3, r7, #7
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d0a4      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	0018      	movs	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b004      	add	sp, #16
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b090      	sub	sp, #64	; 0x40
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	1dbb      	adds	r3, r7, #6
 80050d4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	1dba      	adds	r2, r7, #6
 80050e0:	2158      	movs	r1, #88	; 0x58
 80050e2:	8812      	ldrh	r2, [r2, #0]
 80050e4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1dba      	adds	r2, r7, #6
 80050ea:	215a      	movs	r1, #90	; 0x5a
 80050ec:	8812      	ldrh	r2, [r2, #0]
 80050ee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	015b      	lsls	r3, r3, #5
 80050fe:	429a      	cmp	r2, r3
 8005100:	d10d      	bne.n	800511e <UART_Start_Receive_IT+0x56>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <UART_Start_Receive_IT+0x4c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	225c      	movs	r2, #92	; 0x5c
 800510e:	4946      	ldr	r1, [pc, #280]	; (8005228 <UART_Start_Receive_IT+0x160>)
 8005110:	5299      	strh	r1, [r3, r2]
 8005112:	e01a      	b.n	800514a <UART_Start_Receive_IT+0x82>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	225c      	movs	r2, #92	; 0x5c
 8005118:	21ff      	movs	r1, #255	; 0xff
 800511a:	5299      	strh	r1, [r3, r2]
 800511c:	e015      	b.n	800514a <UART_Start_Receive_IT+0x82>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10d      	bne.n	8005142 <UART_Start_Receive_IT+0x7a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <UART_Start_Receive_IT+0x70>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	225c      	movs	r2, #92	; 0x5c
 8005132:	21ff      	movs	r1, #255	; 0xff
 8005134:	5299      	strh	r1, [r3, r2]
 8005136:	e008      	b.n	800514a <UART_Start_Receive_IT+0x82>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	225c      	movs	r2, #92	; 0x5c
 800513c:	217f      	movs	r1, #127	; 0x7f
 800513e:	5299      	strh	r1, [r3, r2]
 8005140:	e003      	b.n	800514a <UART_Start_Receive_IT+0x82>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	225c      	movs	r2, #92	; 0x5c
 8005146:	2100      	movs	r1, #0
 8005148:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2284      	movs	r2, #132	; 0x84
 800514e:	2100      	movs	r1, #0
 8005150:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	2122      	movs	r1, #34	; 0x22
 8005158:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515a:	f3ef 8310 	mrs	r3, PRIMASK
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005164:	2301      	movs	r3, #1
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516a:	f383 8810 	msr	PRIMASK, r3
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2101      	movs	r1, #1
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005182:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	f383 8810 	msr	PRIMASK, r3
}
 800518a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	015b      	lsls	r3, r3, #5
 8005194:	429a      	cmp	r2, r3
 8005196:	d107      	bne.n	80051a8 <UART_Start_Receive_IT+0xe0>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a22      	ldr	r2, [pc, #136]	; (800522c <UART_Start_Receive_IT+0x164>)
 80051a4:	669a      	str	r2, [r3, #104]	; 0x68
 80051a6:	e002      	b.n	80051ae <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a21      	ldr	r2, [pc, #132]	; (8005230 <UART_Start_Receive_IT+0x168>)
 80051ac:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d019      	beq.n	80051ea <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80051bc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
 80051c0:	2301      	movs	r3, #1
 80051c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	f383 8810 	msr	PRIMASK, r3
}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2190      	movs	r1, #144	; 0x90
 80051d8:	0049      	lsls	r1, r1, #1
 80051da:	430a      	orrs	r2, r1
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	f383 8810 	msr	PRIMASK, r3
}
 80051e8:	e018      	b.n	800521c <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ea:	f3ef 8310 	mrs	r3, PRIMASK
 80051ee:	613b      	str	r3, [r7, #16]
  return(result);
 80051f0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80051f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f383 8810 	msr	PRIMASK, r3
}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2120      	movs	r1, #32
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f383 8810 	msr	PRIMASK, r3
}
 800521a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	0018      	movs	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	b010      	add	sp, #64	; 0x40
 8005224:	bd80      	pop	{r7, pc}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	000001ff 	.word	0x000001ff
 800522c:	08005539 	.word	0x08005539
 8005230:	08005381 	.word	0x08005381

08005234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	; 0x38
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523c:	f3ef 8310 	mrs	r3, PRIMASK
 8005240:	617b      	str	r3, [r7, #20]
  return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
 8005246:	2301      	movs	r3, #1
 8005248:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4926      	ldr	r1, [pc, #152]	; (80052f8 <UART_EndRxTransfer+0xc4>)
 800525e:	400a      	ands	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526e:	f3ef 8310 	mrs	r3, PRIMASK
 8005272:	623b      	str	r3, [r7, #32]
  return(result);
 8005274:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005276:	633b      	str	r3, [r7, #48]	; 0x30
 8005278:	2301      	movs	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	f383 8810 	msr	PRIMASK, r3
}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2101      	movs	r1, #1
 8005290:	438a      	bics	r2, r1
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d118      	bne.n	80052da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b2:	2301      	movs	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f383 8810 	msr	PRIMASK, r3
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2110      	movs	r1, #16
 80052ca:	438a      	bics	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f383 8810 	msr	PRIMASK, r3
}
 80052d8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2280      	movs	r2, #128	; 0x80
 80052de:	2120      	movs	r1, #32
 80052e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b00e      	add	sp, #56	; 0x38
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	fffffedf 	.word	0xfffffedf

080052fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	225a      	movs	r2, #90	; 0x5a
 800530e:	2100      	movs	r1, #0
 8005310:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2252      	movs	r2, #82	; 0x52
 8005316:	2100      	movs	r1, #0
 8005318:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	0018      	movs	r0, r3
 800531e:	f7fc fe1d 	bl	8001f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	b004      	add	sp, #16
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b086      	sub	sp, #24
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005332:	f3ef 8310 	mrs	r3, PRIMASK
 8005336:	60bb      	str	r3, [r7, #8]
  return(result);
 8005338:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	2301      	movs	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f383 8810 	msr	PRIMASK, r3
}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2140      	movs	r1, #64	; 0x40
 8005354:	438a      	bics	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f383 8810 	msr	PRIMASK, r3
}
 8005362:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	0018      	movs	r0, r3
 8005374:	f7fc fc7e 	bl	8001c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b006      	add	sp, #24
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b094      	sub	sp, #80	; 0x50
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005388:	204e      	movs	r0, #78	; 0x4e
 800538a:	183b      	adds	r3, r7, r0
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	215c      	movs	r1, #92	; 0x5c
 8005390:	5a52      	ldrh	r2, [r2, r1]
 8005392:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2280      	movs	r2, #128	; 0x80
 8005398:	589b      	ldr	r3, [r3, r2]
 800539a:	2b22      	cmp	r3, #34	; 0x22
 800539c:	d000      	beq.n	80053a0 <UART_RxISR_8BIT+0x20>
 800539e:	e0ba      	b.n	8005516 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	214c      	movs	r1, #76	; 0x4c
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80053aa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053ac:	187b      	adds	r3, r7, r1
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	183b      	adds	r3, r7, r0
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b2d9      	uxtb	r1, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	400a      	ands	r2, r1
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	225a      	movs	r2, #90	; 0x5a
 80053d0:	5a9b      	ldrh	r3, [r3, r2]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b299      	uxth	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	225a      	movs	r2, #90	; 0x5a
 80053dc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	225a      	movs	r2, #90	; 0x5a
 80053e2:	5a9b      	ldrh	r3, [r3, r2]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d000      	beq.n	80053ec <UART_RxISR_8BIT+0x6c>
 80053ea:	e09c      	b.n	8005526 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ec:	f3ef 8310 	mrs	r3, PRIMASK
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f6:	2301      	movs	r3, #1
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4948      	ldr	r1, [pc, #288]	; (8005530 <UART_RxISR_8BIT+0x1b0>)
 800540e:	400a      	ands	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541e:	f3ef 8310 	mrs	r3, PRIMASK
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	647b      	str	r3, [r7, #68]	; 0x44
 8005428:	2301      	movs	r3, #1
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	f383 8810 	msr	PRIMASK, r3
}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	438a      	bics	r2, r1
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	f383 8810 	msr	PRIMASK, r3
}
 800544e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	2120      	movs	r1, #32
 8005456:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	4013      	ands	r3, r2
 8005470:	d018      	beq.n	80054a4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005472:	f3ef 8310 	mrs	r3, PRIMASK
 8005476:	61bb      	str	r3, [r7, #24]
  return(result);
 8005478:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800547a:	643b      	str	r3, [r7, #64]	; 0x40
 800547c:	2301      	movs	r3, #1
 800547e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f383 8810 	msr	PRIMASK, r3
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4928      	ldr	r1, [pc, #160]	; (8005534 <UART_RxISR_8BIT+0x1b4>)
 8005494:	400a      	ands	r2, r1
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	f383 8810 	msr	PRIMASK, r3
}
 80054a2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d12f      	bne.n	800550c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b2:	f3ef 8310 	mrs	r3, PRIMASK
 80054b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80054b8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054bc:	2301      	movs	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2110      	movs	r1, #16
 80054d4:	438a      	bics	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	2210      	movs	r2, #16
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b10      	cmp	r3, #16
 80054f0:	d103      	bne.n	80054fa <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2210      	movs	r2, #16
 80054f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2258      	movs	r2, #88	; 0x58
 80054fe:	5a9a      	ldrh	r2, [r3, r2]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0011      	movs	r1, r2
 8005504:	0018      	movs	r0, r3
 8005506:	f7ff facd 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800550a:	e00c      	b.n	8005526 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	0018      	movs	r0, r3
 8005510:	f7fc fc30 	bl	8001d74 <HAL_UART_RxCpltCallback>
}
 8005514:	e007      	b.n	8005526 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2108      	movs	r1, #8
 8005522:	430a      	orrs	r2, r1
 8005524:	619a      	str	r2, [r3, #24]
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	b014      	add	sp, #80	; 0x50
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	fffffedf 	.word	0xfffffedf
 8005534:	fbffffff 	.word	0xfbffffff

08005538 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b094      	sub	sp, #80	; 0x50
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005540:	204e      	movs	r0, #78	; 0x4e
 8005542:	183b      	adds	r3, r7, r0
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	215c      	movs	r1, #92	; 0x5c
 8005548:	5a52      	ldrh	r2, [r2, r1]
 800554a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	589b      	ldr	r3, [r3, r2]
 8005552:	2b22      	cmp	r3, #34	; 0x22
 8005554:	d000      	beq.n	8005558 <UART_RxISR_16BIT+0x20>
 8005556:	e0ba      	b.n	80056ce <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	214c      	movs	r1, #76	; 0x4c
 800555e:	187b      	adds	r3, r7, r1
 8005560:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005562:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800556a:	187b      	adds	r3, r7, r1
 800556c:	183a      	adds	r2, r7, r0
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	8812      	ldrh	r2, [r2, #0]
 8005572:	4013      	ands	r3, r2
 8005574:	b29a      	uxth	r2, r3
 8005576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005578:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	225a      	movs	r2, #90	; 0x5a
 8005588:	5a9b      	ldrh	r3, [r3, r2]
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b299      	uxth	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	225a      	movs	r2, #90	; 0x5a
 8005594:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	225a      	movs	r2, #90	; 0x5a
 800559a:	5a9b      	ldrh	r3, [r3, r2]
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d000      	beq.n	80055a4 <UART_RxISR_16BIT+0x6c>
 80055a2:	e09c      	b.n	80056de <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a4:	f3ef 8310 	mrs	r3, PRIMASK
 80055a8:	623b      	str	r3, [r7, #32]
  return(result);
 80055aa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ac:	647b      	str	r3, [r7, #68]	; 0x44
 80055ae:	2301      	movs	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	f383 8810 	msr	PRIMASK, r3
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4948      	ldr	r1, [pc, #288]	; (80056e8 <UART_RxISR_16BIT+0x1b0>)
 80055c6:	400a      	ands	r2, r1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	f383 8810 	msr	PRIMASK, r3
}
 80055d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d6:	f3ef 8310 	mrs	r3, PRIMASK
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055de:	643b      	str	r3, [r7, #64]	; 0x40
 80055e0:	2301      	movs	r3, #1
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f383 8810 	msr	PRIMASK, r3
}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2101      	movs	r1, #1
 80055f8:	438a      	bics	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	f383 8810 	msr	PRIMASK, r3
}
 8005606:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2280      	movs	r2, #128	; 0x80
 800560c:	2120      	movs	r1, #32
 800560e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	4013      	ands	r3, r2
 8005628:	d018      	beq.n	800565c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562a:	f3ef 8310 	mrs	r3, PRIMASK
 800562e:	617b      	str	r3, [r7, #20]
  return(result);
 8005630:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005634:	2301      	movs	r3, #1
 8005636:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f383 8810 	msr	PRIMASK, r3
}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4928      	ldr	r1, [pc, #160]	; (80056ec <UART_RxISR_16BIT+0x1b4>)
 800564c:	400a      	ands	r2, r1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f383 8810 	msr	PRIMASK, r3
}
 800565a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005660:	2b01      	cmp	r3, #1
 8005662:	d12f      	bne.n	80056c4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566a:	f3ef 8310 	mrs	r3, PRIMASK
 800566e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005670:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005672:	63bb      	str	r3, [r7, #56]	; 0x38
 8005674:	2301      	movs	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f383 8810 	msr	PRIMASK, r3
}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2110      	movs	r1, #16
 800568c:	438a      	bics	r2, r1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f383 8810 	msr	PRIMASK, r3
}
 800569a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	2210      	movs	r2, #16
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b10      	cmp	r3, #16
 80056a8:	d103      	bne.n	80056b2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2210      	movs	r2, #16
 80056b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2258      	movs	r2, #88	; 0x58
 80056b6:	5a9a      	ldrh	r2, [r3, r2]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0011      	movs	r1, r2
 80056bc:	0018      	movs	r0, r3
 80056be:	f7ff f9f1 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056c2:	e00c      	b.n	80056de <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7fc fb54 	bl	8001d74 <HAL_UART_RxCpltCallback>
}
 80056cc:	e007      	b.n	80056de <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2108      	movs	r1, #8
 80056da:	430a      	orrs	r2, r1
 80056dc:	619a      	str	r2, [r3, #24]
}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b014      	add	sp, #80	; 0x50
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	fffffedf 	.word	0xfffffedf
 80056ec:	fbffffff 	.word	0xfbffffff

080056f0 <kfifo_reset>:
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	46bd      	mov	sp, r7
 800570a:	b002      	add	sp, #8
 800570c:	bd80      	pop	{r7, pc}

0800570e <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
	return fifo->size;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
}
 800571a:	0018      	movs	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	b002      	add	sp, #8
 8005720:	bd80      	pop	{r7, pc}

08005722 <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 8005722:	b590      	push	{r4, r7, lr}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	1b1b      	subs	r3, r3, r4
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	b003      	add	sp, #12
 800573a:	bd90      	pop	{r4, r7, pc}

0800573c <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 800573c:	b590      	push	{r4, r7, lr}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	0018      	movs	r0, r3
 8005748:	f7ff ffe1 	bl	800570e <kfifo_size>
 800574c:	0004      	movs	r4, r0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	0018      	movs	r0, r3
 8005752:	f7ff ffe6 	bl	8005722 <kfifo_len>
 8005756:	0003      	movs	r3, r0
 8005758:	1ae3      	subs	r3, r4, r3
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b003      	add	sp, #12
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <__kfifo_add_out>:
/*
 * __kfifo_add_out internal helper function for updating the out offset
 */
static __inline void __kfifo_add_out(struct kfifo *fifo,
				unsigned int off)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
	fifo->out += off;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	18d2      	adds	r2, r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60da      	str	r2, [r3, #12]
}
 8005778:	46c0      	nop			; (mov r8, r8)
 800577a:	46bd      	mov	sp, r7
 800577c:	b002      	add	sp, #8
 800577e:	bd80      	pop	{r7, pc}

08005780 <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	18d2      	adds	r2, r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	609a      	str	r2, [r3, #8]
}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b002      	add	sp, #8
 800579c:	bd80      	pop	{r7, pc}

0800579e <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	4013      	ands	r3, r2
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b002      	add	sp, #8
 80057b8:	bd80      	pop	{r7, pc}

080057ba <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f7ff ff8b 	bl	80056f0 <kfifo_reset>
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b086      	sub	sp, #24
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	18d2      	adds	r2, r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	0011      	movs	r1, r2
 80057fc:	0018      	movs	r0, r3
 80057fe:	f7ff ffce 	bl	800579e <__kfifo_off>
 8005802:	0003      	movs	r3, r0
 8005804:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	1ad2      	subs	r2, r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4293      	cmp	r3, r2
 8005812:	d900      	bls.n	8005816 <__kfifo_in_data+0x34>
 8005814:	0013      	movs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	18d3      	adds	r3, r2, r3
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	0018      	movs	r0, r3
 8005826:	f000 fa83 	bl	8005d30 <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	18d1      	adds	r1, r2, r3
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	001a      	movs	r2, r3
 800583c:	f000 fa78 	bl	8005d30 <memcpy>
}
 8005840:	46c0      	nop			; (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b006      	add	sp, #24
 8005846:	bd80      	pop	{r7, pc}

08005848 <__kfifo_out_data>:

static __inline void __kfifo_out_data(struct kfifo *fifo,
		void *to, unsigned int len, unsigned int off)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->in index -before- we
	 * start removing bytes from the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->out + off);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	18d2      	adds	r2, r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	0011      	movs	r1, r2
 8005862:	0018      	movs	r0, r3
 8005864:	f7ff ff9b 	bl	800579e <__kfifo_off>
 8005868:	0003      	movs	r3, r0
 800586a:	603b      	str	r3, [r7, #0]

	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - off);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4293      	cmp	r3, r2
 8005878:	d900      	bls.n	800587c <__kfifo_out_data+0x34>
 800587a:	0013      	movs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
	memcpy( (char*)to, fifo->buffer + off, l);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	18d1      	adds	r1, r2, r3
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fa50 	bl	8005d30 <memcpy>

	/* then get the rest (if any) from the beginning of the buffer */
	memcpy( (char*)to + l, fifo->buffer, len - l);
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	18d0      	adds	r0, r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	001a      	movs	r2, r3
 80058a2:	f000 fa45 	bl	8005d30 <memcpy>
}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b006      	add	sp, #24
 80058ac:	bd80      	pop	{r7, pc}

080058ae <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	0018      	movs	r0, r3
 80058be:	f7ff ff3d 	bl	800573c <kfifo_avail>
 80058c2:	0002      	movs	r2, r0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d905      	bls.n	80058d6 <kfifo_in+0x28>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f7ff ff35 	bl	800573c <kfifo_avail>
 80058d2:	0003      	movs	r3, r0
 80058d4:	e000      	b.n	80058d8 <kfifo_in+0x2a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	2300      	movs	r3, #0
 80058e2:	f7ff ff7e 	bl	80057e2 <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	0011      	movs	r1, r2
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7ff ff47 	bl	8005780 <__kfifo_add_in>
	return len;
 80058f2:	687b      	ldr	r3, [r7, #4]
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b004      	add	sp, #16
 80058fa:	bd80      	pop	{r7, pc}

080058fc <kfifo_out>:
 *
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
	len = min(kfifo_len(fifo), len);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	0018      	movs	r0, r3
 800590c:	f7ff ff09 	bl	8005722 <kfifo_len>
 8005910:	0002      	movs	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4293      	cmp	r3, r2
 8005916:	d905      	bls.n	8005924 <kfifo_out+0x28>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	0018      	movs	r0, r3
 800591c:	f7ff ff01 	bl	8005722 <kfifo_len>
 8005920:	0003      	movs	r3, r0
 8005922:	e000      	b.n	8005926 <kfifo_out+0x2a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	607b      	str	r3, [r7, #4]

	__kfifo_out_data(fifo, to, len, 0);
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	2300      	movs	r3, #0
 8005930:	f7ff ff8a 	bl	8005848 <__kfifo_out_data>
	__kfifo_add_out(fifo, len);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	0011      	movs	r1, r2
 800593a:	0018      	movs	r0, r3
 800593c:	f7ff ff11 	bl	8005762 <__kfifo_add_out>

	return len;
 8005940:	687b      	ldr	r3, [r7, #4]
}
 8005942:	0018      	movs	r0, r3
 8005944:	46bd      	mov	sp, r7
 8005946:	b004      	add	sp, #16
 8005948:	bd80      	pop	{r7, pc}

0800594a <mq_init>:
 * 
 * @param None
 * @return struct msgQueue   
 */
void mq_init(struct msgQueue *queue)
{
 800594a:	b590      	push	{r4, r7, lr}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
    struct msgQueue *mq = (struct msgQueue *)malloc(sizeof(struct msgQueue));
 8005952:	2090      	movs	r0, #144	; 0x90
 8005954:	f000 f9e2 	bl	8005d1c <malloc>
 8005958:	0003      	movs	r3, r0
 800595a:	60bb      	str	r3, [r7, #8]
    if (mq == NULL)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <mq_init+0x1c>
    {
    	queue = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
    }
    mq->lock = 0;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
    mq->size = MSGQUEUESIZE;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2210      	movs	r2, #16
 8005970:	605a      	str	r2, [r3, #4]
    mq->head = 0;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	609a      	str	r2, [r3, #8]
    mq->tail = 0;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2200      	movs	r2, #0
 800597c:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 800597e:	230f      	movs	r3, #15
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e010      	b.n	80059aa <mq_init+0x60>
    {
        memset(&(mq->list[i]), 0, sizeof(struct msgQueue));
 8005988:	240f      	movs	r4, #15
 800598a:	193b      	adds	r3, r7, r4
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	3302      	adds	r3, #2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	18d3      	adds	r3, r2, r3
 8005996:	2290      	movs	r2, #144	; 0x90
 8005998:	2100      	movs	r1, #0
 800599a:	0018      	movs	r0, r3
 800599c:	f000 f9d1 	bl	8005d42 <memset>
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 80059a0:	193b      	adds	r3, r7, r4
 80059a2:	781a      	ldrb	r2, [r3, #0]
 80059a4:	193b      	adds	r3, r7, r4
 80059a6:	3201      	adds	r2, #1
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	230f      	movs	r3, #15
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b0f      	cmp	r3, #15
 80059b2:	d9e9      	bls.n	8005988 <mq_init+0x3e>
    }
}
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b005      	add	sp, #20
 80059bc:	bd90      	pop	{r4, r7, pc}

080059be <mq_push>:
 * @param queue 
 * @param msg 
 * @return uint32_t 
 */
uint32_t mq_push(struct msgQueue *queue, struct msg *msg)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
    if (queue == NULL || msg == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <mq_push+0x16>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <mq_push+0x1a>
    {
        return 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e02d      	b.n	8005a34 <mq_push+0x76>
    }
    if ((queue->head - queue->tail) == MSGQUEUESIZE - 1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b0f      	cmp	r3, #15
 80059e4:	d105      	bne.n	80059f2 <mq_push+0x34>
    {
        queue->head -= MSGQUEUESIZE - 1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	3b0f      	subs	r3, #15
 80059ec:	001a      	movs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	609a      	str	r2, [r3, #8]
    }

    uint8_t index = queue->head & (MSGQUEUESIZE - 1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	200f      	movs	r0, #15
 80059fa:	183b      	adds	r3, r7, r0
 80059fc:	210f      	movs	r1, #15
 80059fe:	400a      	ands	r2, r1
 8005a00:	701a      	strb	r2, [r3, #0]
    queue->list[index].type = msg->type;
 8005a02:	183b      	adds	r3, r7, r0
 8005a04:	781a      	ldrb	r2, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3202      	adds	r2, #2
 8005a0e:	00d2      	lsls	r2, r2, #3
 8005a10:	50d1      	str	r1, [r2, r3]
    queue->list[index].data = msg->data;
 8005a12:	183b      	adds	r3, r7, r0
 8005a14:	7818      	ldrb	r0, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	1c83      	adds	r3, r0, #2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	18cb      	adds	r3, r1, r3
 8005a22:	3304      	adds	r3, #4
 8005a24:	601a      	str	r2, [r3, #0]
    queue->head++;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	609a      	str	r2, [r3, #8]

    return queue->head;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b004      	add	sp, #16
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <mq_pop>:
 * 
 * @param queue 
 * @return struct msg* 
 */
struct msg *mq_pop(struct msgQueue *queue)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <mq_pop+0x12>
    {
        return NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e021      	b.n	8005a92 <mq_pop+0x56>
    }

    if (queue->head == queue->tail)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d101      	bne.n	8005a5e <mq_pop+0x22>
    {
        return NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e019      	b.n	8005a92 <mq_pop+0x56>
    }

    if (queue->tail == MSGQUEUESIZE - 1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b0f      	cmp	r3, #15
 8005a64:	d102      	bne.n	8005a6c <mq_pop+0x30>
    {
        queue->tail = 0;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	60da      	str	r2, [r3, #12]
    }
    
    uint8_t index = queue->tail & (MSGQUEUESIZE - 1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	200f      	movs	r0, #15
 8005a74:	183b      	adds	r3, r7, r0
 8005a76:	210f      	movs	r1, #15
 8005a78:	400a      	ands	r2, r1
 8005a7a:	701a      	strb	r2, [r3, #0]
    queue->tail++;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	60da      	str	r2, [r3, #12]
    return &(queue->list[index]);
 8005a86:	183b      	adds	r3, r7, r0
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	3302      	adds	r3, #2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	18d3      	adds	r3, r2, r3
}
 8005a92:	0018      	movs	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b004      	add	sp, #16
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <stateM_init>:
static struct transition *getTransition( struct stateMachine *stateMachine,
      struct state *state, struct event *const event );

void stateM_init( struct stateMachine *fsm,
      struct state *initialState, struct state *errorState )
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
   if ( !fsm )
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <stateM_init+0x26>
      return;

   fsm->currentState = initialState;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	601a      	str	r2, [r3, #0]
   fsm->previousState = NULL;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	605a      	str	r2, [r3, #4]
   fsm->errorState = errorState;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	609a      	str	r2, [r3, #8]
 8005abe:	e000      	b.n	8005ac2 <stateM_init+0x28>
      return;
 8005ac0:	46c0      	nop			; (mov r8, r8)
}
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b004      	add	sp, #16
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <stateM_handleEvent>:

int stateM_handleEvent( struct stateMachine *fsm,
      struct event *event )
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
   if ( !fsm || !event )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <stateM_handleEvent+0x16>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <stateM_handleEvent+0x1c>
      return stateM_errArg;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	e093      	b.n	8005c0c <stateM_handleEvent+0x144>

   if ( !fsm->currentState )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d108      	bne.n	8005afe <stateM_handleEvent+0x36>
   {
      goToErrorState( fsm, event );
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0011      	movs	r1, r2
 8005af2:	0018      	movs	r0, r3
 8005af4:	f000 f88e 	bl	8005c14 <goToErrorState>
      return stateM_errorStateReached;
 8005af8:	2301      	movs	r3, #1
 8005afa:	425b      	negs	r3, r3
 8005afc:	e086      	b.n	8005c0c <stateM_handleEvent+0x144>
   }

   if ( !fsm->currentState->numTransitions )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <stateM_handleEvent+0x44>
      return stateM_noStateChange;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e07f      	b.n	8005c0c <stateM_handleEvent+0x144>

   struct state *nextState = fsm->currentState;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
   do {
      struct transition *transition = getTransition( fsm, nextState, event );
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f000 f89e 	bl	8005c5a <getTransition>
 8005b1e:	0003      	movs	r3, r0
 8005b20:	60bb      	str	r3, [r7, #8]

      /* If there were no transitions for the given event for the current
       * state, check if there are any transitions for any of the parent
       * states (if any): */
      if ( !transition )
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <stateM_handleEvent+0x6e>
      {
         nextState = nextState->parentState;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
       * machine has stopped: */
      if ( !fsm->currentState->numTransitions )
         return stateM_finalStateReached;

      return stateM_stateChanged;
   } while ( nextState );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ee      	bne.n	8005b12 <stateM_handleEvent+0x4a>
 8005b34:	e069      	b.n	8005c0a <stateM_handleEvent+0x142>
      if ( !transition->nextState )
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d108      	bne.n	8005b50 <stateM_handleEvent+0x88>
         goToErrorState( fsm, event );
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	0011      	movs	r1, r2
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 f865 	bl	8005c14 <goToErrorState>
         return stateM_errorStateReached;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	425b      	negs	r3, r3
 8005b4e:	e05d      	b.n	8005c0c <stateM_handleEvent+0x144>
      nextState = transition->nextState;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8005b56:	e002      	b.n	8005b5e <stateM_handleEvent+0x96>
         nextState = nextState->entryState;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f8      	bne.n	8005b58 <stateM_handleEvent+0x90>
      if ( nextState != fsm->currentState && fsm->currentState->exitAction )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d00d      	beq.n	8005b8c <stateM_handleEvent+0xc4>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <stateM_handleEvent+0xc4>
         fsm->currentState->exitAction( fsm->currentState->data, event );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	4790      	blx	r2
      if ( transition->action )
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <stateM_handleEvent+0xe0>
         transition->action( fsm->currentState->data, event, nextState->
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	68dc      	ldr	r4, [r3, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6918      	ldr	r0, [r3, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	47a0      	blx	r4
      if ( nextState != fsm->currentState && nextState->entryAction )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d00a      	beq.n	8005bc8 <stateM_handleEvent+0x100>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d006      	beq.n	8005bc8 <stateM_handleEvent+0x100>
         nextState->entryAction( nextState->data, event );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	4790      	blx	r2
      fsm->previousState = fsm->currentState;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	605a      	str	r2, [r3, #4]
      fsm->currentState = nextState;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	601a      	str	r2, [r3, #0]
      if ( fsm->currentState == fsm->previousState )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d101      	bne.n	8005be6 <stateM_handleEvent+0x11e>
         return stateM_stateLoopSelf;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e012      	b.n	8005c0c <stateM_handleEvent+0x144>
      if ( fsm->currentState == fsm->errorState )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d102      	bne.n	8005bf8 <stateM_handleEvent+0x130>
         return stateM_errorStateReached;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	425b      	negs	r3, r3
 8005bf6:	e009      	b.n	8005c0c <stateM_handleEvent+0x144>
      if ( !fsm->currentState->numTransitions )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <stateM_handleEvent+0x13e>
         return stateM_finalStateReached;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e002      	b.n	8005c0c <stateM_handleEvent+0x144>
      return stateM_stateChanged;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e000      	b.n	8005c0c <stateM_handleEvent+0x144>

   return stateM_noStateChange;
 8005c0a:	2302      	movs	r3, #2
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b005      	add	sp, #20
 8005c12:	bd90      	pop	{r4, r7, pc}

08005c14 <goToErrorState>:
}


static void goToErrorState( struct stateMachine *fsm,
      struct event *const event )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
   fsm->previousState = fsm->currentState;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	605a      	str	r2, [r3, #4]
   fsm->currentState = fsm->errorState;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	601a      	str	r2, [r3, #0]

   if ( fsm->currentState && fsm->currentState->entryAction )
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <goToErrorState+0x3e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <goToErrorState+0x3e>
      fsm->currentState->entryAction( fsm->currentState->data, event );
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695a      	ldr	r2, [r3, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	4790      	blx	r2
}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b002      	add	sp, #8
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <getTransition>:

static struct transition *getTransition( struct stateMachine *fsm,
      struct state *state, struct event *const event )
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b086      	sub	sp, #24
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
   size_t i;

   for ( i = 0; i < state->numTransitions; ++i )
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e022      	b.n	8005cb2 <getTransition+0x58>
   {
      struct transition *t = &state->transitions[ i ];
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6899      	ldr	r1, [r3, #8]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	0013      	movs	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	189b      	adds	r3, r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	18cb      	adds	r3, r1, r3
 8005c7c:	613b      	str	r3, [r7, #16]

      /* A transition for the given event has been found: */
      if ( t->eventType == event->type )
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d110      	bne.n	8005cac <getTransition+0x52>
      {
         if ( !t->guard )
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <getTransition+0x3c>
            return t;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	e013      	b.n	8005cbe <getTransition+0x64>
         /* If transition is guarded, ensure that the condition is held: */
         else if ( t->guard( t->condition, event ) )
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	4790      	blx	r2
 8005ca4:	1e03      	subs	r3, r0, #0
 8005ca6:	d001      	beq.n	8005cac <getTransition+0x52>
            return t;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	e008      	b.n	8005cbe <getTransition+0x64>
   for ( i = 0; i < state->numTransitions; ++i )
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d3d7      	bcc.n	8005c6c <getTransition+0x12>
      }
   }

   /* No transitions found for given event for given state: */
   return NULL;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b006      	add	sp, #24
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <__errno>:
 8005cc8:	4b01      	ldr	r3, [pc, #4]	; (8005cd0 <__errno+0x8>)
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	4770      	bx	lr
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	20000104 	.word	0x20000104

08005cd4 <__libc_init_array>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	4d0c      	ldr	r5, [pc, #48]	; (8005d0c <__libc_init_array+0x38>)
 8005cda:	4c0d      	ldr	r4, [pc, #52]	; (8005d10 <__libc_init_array+0x3c>)
 8005cdc:	1b64      	subs	r4, r4, r5
 8005cde:	10a4      	asrs	r4, r4, #2
 8005ce0:	42a6      	cmp	r6, r4
 8005ce2:	d109      	bne.n	8005cf8 <__libc_init_array+0x24>
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	f000 fd7f 	bl	80067e8 <_init>
 8005cea:	4d0a      	ldr	r5, [pc, #40]	; (8005d14 <__libc_init_array+0x40>)
 8005cec:	4c0a      	ldr	r4, [pc, #40]	; (8005d18 <__libc_init_array+0x44>)
 8005cee:	1b64      	subs	r4, r4, r5
 8005cf0:	10a4      	asrs	r4, r4, #2
 8005cf2:	42a6      	cmp	r6, r4
 8005cf4:	d105      	bne.n	8005d02 <__libc_init_array+0x2e>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	00b3      	lsls	r3, r6, #2
 8005cfa:	58eb      	ldr	r3, [r5, r3]
 8005cfc:	4798      	blx	r3
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7ee      	b.n	8005ce0 <__libc_init_array+0xc>
 8005d02:	00b3      	lsls	r3, r6, #2
 8005d04:	58eb      	ldr	r3, [r5, r3]
 8005d06:	4798      	blx	r3
 8005d08:	3601      	adds	r6, #1
 8005d0a:	e7f2      	b.n	8005cf2 <__libc_init_array+0x1e>
 8005d0c:	08006a84 	.word	0x08006a84
 8005d10:	08006a84 	.word	0x08006a84
 8005d14:	08006a84 	.word	0x08006a84
 8005d18:	08006a88 	.word	0x08006a88

08005d1c <malloc>:
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <malloc+0x10>)
 8005d20:	0001      	movs	r1, r0
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	f000 f882 	bl	8005e2c <_malloc_r>
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	20000104 	.word	0x20000104

08005d30 <memcpy>:
 8005d30:	2300      	movs	r3, #0
 8005d32:	b510      	push	{r4, lr}
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d100      	bne.n	8005d3a <memcpy+0xa>
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	5ccc      	ldrb	r4, [r1, r3]
 8005d3c:	54c4      	strb	r4, [r0, r3]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	e7f8      	b.n	8005d34 <memcpy+0x4>

08005d42 <memset>:
 8005d42:	0003      	movs	r3, r0
 8005d44:	1882      	adds	r2, r0, r2
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d100      	bne.n	8005d4c <memset+0xa>
 8005d4a:	4770      	bx	lr
 8005d4c:	7019      	strb	r1, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	e7f9      	b.n	8005d46 <memset+0x4>
	...

08005d54 <_free_r>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	0005      	movs	r5, r0
 8005d58:	2900      	cmp	r1, #0
 8005d5a:	d010      	beq.n	8005d7e <_free_r+0x2a>
 8005d5c:	1f0c      	subs	r4, r1, #4
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	da00      	bge.n	8005d66 <_free_r+0x12>
 8005d64:	18e4      	adds	r4, r4, r3
 8005d66:	0028      	movs	r0, r5
 8005d68:	f000 fc70 	bl	800664c <__malloc_lock>
 8005d6c:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <_free_r+0x90>)
 8005d6e:	6813      	ldr	r3, [r2, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <_free_r+0x2c>
 8005d74:	6063      	str	r3, [r4, #4]
 8005d76:	6014      	str	r4, [r2, #0]
 8005d78:	0028      	movs	r0, r5
 8005d7a:	f000 fc6f 	bl	800665c <__malloc_unlock>
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	d908      	bls.n	8005d96 <_free_r+0x42>
 8005d84:	6821      	ldr	r1, [r4, #0]
 8005d86:	1860      	adds	r0, r4, r1
 8005d88:	4283      	cmp	r3, r0
 8005d8a:	d1f3      	bne.n	8005d74 <_free_r+0x20>
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	1841      	adds	r1, r0, r1
 8005d92:	6021      	str	r1, [r4, #0]
 8005d94:	e7ee      	b.n	8005d74 <_free_r+0x20>
 8005d96:	001a      	movs	r2, r3
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <_free_r+0x4e>
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	d9f9      	bls.n	8005d96 <_free_r+0x42>
 8005da2:	6811      	ldr	r1, [r2, #0]
 8005da4:	1850      	adds	r0, r2, r1
 8005da6:	42a0      	cmp	r0, r4
 8005da8:	d10b      	bne.n	8005dc2 <_free_r+0x6e>
 8005daa:	6820      	ldr	r0, [r4, #0]
 8005dac:	1809      	adds	r1, r1, r0
 8005dae:	1850      	adds	r0, r2, r1
 8005db0:	6011      	str	r1, [r2, #0]
 8005db2:	4283      	cmp	r3, r0
 8005db4:	d1e0      	bne.n	8005d78 <_free_r+0x24>
 8005db6:	6818      	ldr	r0, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	1841      	adds	r1, r0, r1
 8005dbc:	6011      	str	r1, [r2, #0]
 8005dbe:	6053      	str	r3, [r2, #4]
 8005dc0:	e7da      	b.n	8005d78 <_free_r+0x24>
 8005dc2:	42a0      	cmp	r0, r4
 8005dc4:	d902      	bls.n	8005dcc <_free_r+0x78>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	602b      	str	r3, [r5, #0]
 8005dca:	e7d5      	b.n	8005d78 <_free_r+0x24>
 8005dcc:	6821      	ldr	r1, [r4, #0]
 8005dce:	1860      	adds	r0, r4, r1
 8005dd0:	4283      	cmp	r3, r0
 8005dd2:	d103      	bne.n	8005ddc <_free_r+0x88>
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	1841      	adds	r1, r0, r1
 8005dda:	6021      	str	r1, [r4, #0]
 8005ddc:	6063      	str	r3, [r4, #4]
 8005dde:	6054      	str	r4, [r2, #4]
 8005de0:	e7ca      	b.n	8005d78 <_free_r+0x24>
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	20000690 	.word	0x20000690

08005de8 <sbrk_aligned>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4e0f      	ldr	r6, [pc, #60]	; (8005e28 <sbrk_aligned+0x40>)
 8005dec:	000d      	movs	r5, r1
 8005dee:	6831      	ldr	r1, [r6, #0]
 8005df0:	0004      	movs	r4, r0
 8005df2:	2900      	cmp	r1, #0
 8005df4:	d102      	bne.n	8005dfc <sbrk_aligned+0x14>
 8005df6:	f000 f90b 	bl	8006010 <_sbrk_r>
 8005dfa:	6030      	str	r0, [r6, #0]
 8005dfc:	0029      	movs	r1, r5
 8005dfe:	0020      	movs	r0, r4
 8005e00:	f000 f906 	bl	8006010 <_sbrk_r>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d00a      	beq.n	8005e1e <sbrk_aligned+0x36>
 8005e08:	2303      	movs	r3, #3
 8005e0a:	1cc5      	adds	r5, r0, #3
 8005e0c:	439d      	bics	r5, r3
 8005e0e:	42a8      	cmp	r0, r5
 8005e10:	d007      	beq.n	8005e22 <sbrk_aligned+0x3a>
 8005e12:	1a29      	subs	r1, r5, r0
 8005e14:	0020      	movs	r0, r4
 8005e16:	f000 f8fb 	bl	8006010 <_sbrk_r>
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	d101      	bne.n	8005e22 <sbrk_aligned+0x3a>
 8005e1e:	2501      	movs	r5, #1
 8005e20:	426d      	negs	r5, r5
 8005e22:	0028      	movs	r0, r5
 8005e24:	bd70      	pop	{r4, r5, r6, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	20000694 	.word	0x20000694

08005e2c <_malloc_r>:
 8005e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2e:	2203      	movs	r2, #3
 8005e30:	1ccb      	adds	r3, r1, #3
 8005e32:	4393      	bics	r3, r2
 8005e34:	3308      	adds	r3, #8
 8005e36:	0006      	movs	r6, r0
 8005e38:	001f      	movs	r7, r3
 8005e3a:	2b0c      	cmp	r3, #12
 8005e3c:	d232      	bcs.n	8005ea4 <_malloc_r+0x78>
 8005e3e:	270c      	movs	r7, #12
 8005e40:	42b9      	cmp	r1, r7
 8005e42:	d831      	bhi.n	8005ea8 <_malloc_r+0x7c>
 8005e44:	0030      	movs	r0, r6
 8005e46:	f000 fc01 	bl	800664c <__malloc_lock>
 8005e4a:	4d32      	ldr	r5, [pc, #200]	; (8005f14 <_malloc_r+0xe8>)
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	001c      	movs	r4, r3
 8005e50:	2c00      	cmp	r4, #0
 8005e52:	d12e      	bne.n	8005eb2 <_malloc_r+0x86>
 8005e54:	0039      	movs	r1, r7
 8005e56:	0030      	movs	r0, r6
 8005e58:	f7ff ffc6 	bl	8005de8 <sbrk_aligned>
 8005e5c:	0004      	movs	r4, r0
 8005e5e:	1c43      	adds	r3, r0, #1
 8005e60:	d11e      	bne.n	8005ea0 <_malloc_r+0x74>
 8005e62:	682c      	ldr	r4, [r5, #0]
 8005e64:	0025      	movs	r5, r4
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	d14a      	bne.n	8005f00 <_malloc_r+0xd4>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	0029      	movs	r1, r5
 8005e6e:	18e3      	adds	r3, r4, r3
 8005e70:	0030      	movs	r0, r6
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	f000 f8cc 	bl	8006010 <_sbrk_r>
 8005e78:	9b01      	ldr	r3, [sp, #4]
 8005e7a:	4283      	cmp	r3, r0
 8005e7c:	d143      	bne.n	8005f06 <_malloc_r+0xda>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	3703      	adds	r7, #3
 8005e82:	1aff      	subs	r7, r7, r3
 8005e84:	2303      	movs	r3, #3
 8005e86:	439f      	bics	r7, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	2f0c      	cmp	r7, #12
 8005e8c:	d200      	bcs.n	8005e90 <_malloc_r+0x64>
 8005e8e:	270c      	movs	r7, #12
 8005e90:	0039      	movs	r1, r7
 8005e92:	0030      	movs	r0, r6
 8005e94:	f7ff ffa8 	bl	8005de8 <sbrk_aligned>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d034      	beq.n	8005f06 <_malloc_r+0xda>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	19df      	adds	r7, r3, r7
 8005ea0:	6027      	str	r7, [r4, #0]
 8005ea2:	e013      	b.n	8005ecc <_malloc_r+0xa0>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dacb      	bge.n	8005e40 <_malloc_r+0x14>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	2500      	movs	r5, #0
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	0028      	movs	r0, r5
 8005eb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	1bd1      	subs	r1, r2, r7
 8005eb6:	d420      	bmi.n	8005efa <_malloc_r+0xce>
 8005eb8:	290b      	cmp	r1, #11
 8005eba:	d917      	bls.n	8005eec <_malloc_r+0xc0>
 8005ebc:	19e2      	adds	r2, r4, r7
 8005ebe:	6027      	str	r7, [r4, #0]
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d111      	bne.n	8005ee8 <_malloc_r+0xbc>
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	6863      	ldr	r3, [r4, #4]
 8005ec8:	6011      	str	r1, [r2, #0]
 8005eca:	6053      	str	r3, [r2, #4]
 8005ecc:	0030      	movs	r0, r6
 8005ece:	0025      	movs	r5, r4
 8005ed0:	f000 fbc4 	bl	800665c <__malloc_unlock>
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	350b      	adds	r5, #11
 8005ed8:	1d23      	adds	r3, r4, #4
 8005eda:	4395      	bics	r5, r2
 8005edc:	1aea      	subs	r2, r5, r3
 8005ede:	429d      	cmp	r5, r3
 8005ee0:	d0e5      	beq.n	8005eae <_malloc_r+0x82>
 8005ee2:	1b5b      	subs	r3, r3, r5
 8005ee4:	50a3      	str	r3, [r4, r2]
 8005ee6:	e7e2      	b.n	8005eae <_malloc_r+0x82>
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	e7ec      	b.n	8005ec6 <_malloc_r+0x9a>
 8005eec:	6862      	ldr	r2, [r4, #4]
 8005eee:	42a3      	cmp	r3, r4
 8005ef0:	d101      	bne.n	8005ef6 <_malloc_r+0xca>
 8005ef2:	602a      	str	r2, [r5, #0]
 8005ef4:	e7ea      	b.n	8005ecc <_malloc_r+0xa0>
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	e7e8      	b.n	8005ecc <_malloc_r+0xa0>
 8005efa:	0023      	movs	r3, r4
 8005efc:	6864      	ldr	r4, [r4, #4]
 8005efe:	e7a7      	b.n	8005e50 <_malloc_r+0x24>
 8005f00:	002c      	movs	r4, r5
 8005f02:	686d      	ldr	r5, [r5, #4]
 8005f04:	e7af      	b.n	8005e66 <_malloc_r+0x3a>
 8005f06:	230c      	movs	r3, #12
 8005f08:	0030      	movs	r0, r6
 8005f0a:	6033      	str	r3, [r6, #0]
 8005f0c:	f000 fba6 	bl	800665c <__malloc_unlock>
 8005f10:	e7cd      	b.n	8005eae <_malloc_r+0x82>
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	20000690 	.word	0x20000690

08005f18 <_puts_r>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	0005      	movs	r5, r0
 8005f1c:	000e      	movs	r6, r1
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d004      	beq.n	8005f2c <_puts_r+0x14>
 8005f22:	6983      	ldr	r3, [r0, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <_puts_r+0x14>
 8005f28:	f000 fa80 	bl	800642c <__sinit>
 8005f2c:	69ab      	ldr	r3, [r5, #24]
 8005f2e:	68ac      	ldr	r4, [r5, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <_puts_r+0x22>
 8005f34:	0028      	movs	r0, r5
 8005f36:	f000 fa79 	bl	800642c <__sinit>
 8005f3a:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <_puts_r+0xd8>)
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	d122      	bne.n	8005f86 <_puts_r+0x6e>
 8005f40:	686c      	ldr	r4, [r5, #4]
 8005f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f44:	07db      	lsls	r3, r3, #31
 8005f46:	d405      	bmi.n	8005f54 <_puts_r+0x3c>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	059b      	lsls	r3, r3, #22
 8005f4c:	d402      	bmi.n	8005f54 <_puts_r+0x3c>
 8005f4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f50:	f000 fb0d 	bl	800656e <__retarget_lock_acquire_recursive>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	071b      	lsls	r3, r3, #28
 8005f58:	d502      	bpl.n	8005f60 <_puts_r+0x48>
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d129      	bne.n	8005fb4 <_puts_r+0x9c>
 8005f60:	0021      	movs	r1, r4
 8005f62:	0028      	movs	r0, r5
 8005f64:	f000 f8bc 	bl	80060e0 <__swsetup_r>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d023      	beq.n	8005fb4 <_puts_r+0x9c>
 8005f6c:	2501      	movs	r5, #1
 8005f6e:	426d      	negs	r5, r5
 8005f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f72:	07db      	lsls	r3, r3, #31
 8005f74:	d405      	bmi.n	8005f82 <_puts_r+0x6a>
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	059b      	lsls	r3, r3, #22
 8005f7a:	d402      	bmi.n	8005f82 <_puts_r+0x6a>
 8005f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f7e:	f000 faf7 	bl	8006570 <__retarget_lock_release_recursive>
 8005f82:	0028      	movs	r0, r5
 8005f84:	bd70      	pop	{r4, r5, r6, pc}
 8005f86:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <_puts_r+0xdc>)
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d101      	bne.n	8005f90 <_puts_r+0x78>
 8005f8c:	68ac      	ldr	r4, [r5, #8]
 8005f8e:	e7d8      	b.n	8005f42 <_puts_r+0x2a>
 8005f90:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <_puts_r+0xe0>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d1d5      	bne.n	8005f42 <_puts_r+0x2a>
 8005f96:	68ec      	ldr	r4, [r5, #12]
 8005f98:	e7d3      	b.n	8005f42 <_puts_r+0x2a>
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	60a3      	str	r3, [r4, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	da04      	bge.n	8005fac <_puts_r+0x94>
 8005fa2:	69a2      	ldr	r2, [r4, #24]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	dc16      	bgt.n	8005fd6 <_puts_r+0xbe>
 8005fa8:	290a      	cmp	r1, #10
 8005faa:	d014      	beq.n	8005fd6 <_puts_r+0xbe>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	6022      	str	r2, [r4, #0]
 8005fb2:	7019      	strb	r1, [r3, #0]
 8005fb4:	68a3      	ldr	r3, [r4, #8]
 8005fb6:	7831      	ldrb	r1, [r6, #0]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d1ed      	bne.n	8005f9a <_puts_r+0x82>
 8005fbe:	60a3      	str	r3, [r4, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da0f      	bge.n	8005fe4 <_puts_r+0xcc>
 8005fc4:	0028      	movs	r0, r5
 8005fc6:	0022      	movs	r2, r4
 8005fc8:	310a      	adds	r1, #10
 8005fca:	f000 f833 	bl	8006034 <__swbuf_r>
 8005fce:	250a      	movs	r5, #10
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d1cd      	bne.n	8005f70 <_puts_r+0x58>
 8005fd4:	e7ca      	b.n	8005f6c <_puts_r+0x54>
 8005fd6:	0022      	movs	r2, r4
 8005fd8:	0028      	movs	r0, r5
 8005fda:	f000 f82b 	bl	8006034 <__swbuf_r>
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	d1e8      	bne.n	8005fb4 <_puts_r+0x9c>
 8005fe2:	e7c3      	b.n	8005f6c <_puts_r+0x54>
 8005fe4:	250a      	movs	r5, #10
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	701d      	strb	r5, [r3, #0]
 8005fee:	e7bf      	b.n	8005f70 <_puts_r+0x58>
 8005ff0:	08006a44 	.word	0x08006a44
 8005ff4:	08006a64 	.word	0x08006a64
 8005ff8:	08006a24 	.word	0x08006a24

08005ffc <puts>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	4b03      	ldr	r3, [pc, #12]	; (800600c <puts+0x10>)
 8006000:	0001      	movs	r1, r0
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	f7ff ff88 	bl	8005f18 <_puts_r>
 8006008:	bd10      	pop	{r4, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	20000104 	.word	0x20000104

08006010 <_sbrk_r>:
 8006010:	2300      	movs	r3, #0
 8006012:	b570      	push	{r4, r5, r6, lr}
 8006014:	4d06      	ldr	r5, [pc, #24]	; (8006030 <_sbrk_r+0x20>)
 8006016:	0004      	movs	r4, r0
 8006018:	0008      	movs	r0, r1
 800601a:	602b      	str	r3, [r5, #0]
 800601c:	f7fc fc4e 	bl	80028bc <_sbrk>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d103      	bne.n	800602c <_sbrk_r+0x1c>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d000      	beq.n	800602c <_sbrk_r+0x1c>
 800602a:	6023      	str	r3, [r4, #0]
 800602c:	bd70      	pop	{r4, r5, r6, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	2000069c 	.word	0x2000069c

08006034 <__swbuf_r>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0005      	movs	r5, r0
 8006038:	000e      	movs	r6, r1
 800603a:	0014      	movs	r4, r2
 800603c:	2800      	cmp	r0, #0
 800603e:	d004      	beq.n	800604a <__swbuf_r+0x16>
 8006040:	6983      	ldr	r3, [r0, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <__swbuf_r+0x16>
 8006046:	f000 f9f1 	bl	800642c <__sinit>
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <__swbuf_r+0xa0>)
 800604c:	429c      	cmp	r4, r3
 800604e:	d12e      	bne.n	80060ae <__swbuf_r+0x7a>
 8006050:	686c      	ldr	r4, [r5, #4]
 8006052:	69a3      	ldr	r3, [r4, #24]
 8006054:	60a3      	str	r3, [r4, #8]
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	071b      	lsls	r3, r3, #28
 800605a:	d532      	bpl.n	80060c2 <__swbuf_r+0x8e>
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d02f      	beq.n	80060c2 <__swbuf_r+0x8e>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	6922      	ldr	r2, [r4, #16]
 8006066:	b2f7      	uxtb	r7, r6
 8006068:	1a98      	subs	r0, r3, r2
 800606a:	6963      	ldr	r3, [r4, #20]
 800606c:	b2f6      	uxtb	r6, r6
 800606e:	4283      	cmp	r3, r0
 8006070:	dc05      	bgt.n	800607e <__swbuf_r+0x4a>
 8006072:	0021      	movs	r1, r4
 8006074:	0028      	movs	r0, r5
 8006076:	f000 f937 	bl	80062e8 <_fflush_r>
 800607a:	2800      	cmp	r0, #0
 800607c:	d127      	bne.n	80060ce <__swbuf_r+0x9a>
 800607e:	68a3      	ldr	r3, [r4, #8]
 8006080:	3001      	adds	r0, #1
 8006082:	3b01      	subs	r3, #1
 8006084:	60a3      	str	r3, [r4, #8]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	6022      	str	r2, [r4, #0]
 800608c:	701f      	strb	r7, [r3, #0]
 800608e:	6963      	ldr	r3, [r4, #20]
 8006090:	4283      	cmp	r3, r0
 8006092:	d004      	beq.n	800609e <__swbuf_r+0x6a>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	07db      	lsls	r3, r3, #31
 8006098:	d507      	bpl.n	80060aa <__swbuf_r+0x76>
 800609a:	2e0a      	cmp	r6, #10
 800609c:	d105      	bne.n	80060aa <__swbuf_r+0x76>
 800609e:	0021      	movs	r1, r4
 80060a0:	0028      	movs	r0, r5
 80060a2:	f000 f921 	bl	80062e8 <_fflush_r>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d111      	bne.n	80060ce <__swbuf_r+0x9a>
 80060aa:	0030      	movs	r0, r6
 80060ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <__swbuf_r+0xa4>)
 80060b0:	429c      	cmp	r4, r3
 80060b2:	d101      	bne.n	80060b8 <__swbuf_r+0x84>
 80060b4:	68ac      	ldr	r4, [r5, #8]
 80060b6:	e7cc      	b.n	8006052 <__swbuf_r+0x1e>
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <__swbuf_r+0xa8>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d1c9      	bne.n	8006052 <__swbuf_r+0x1e>
 80060be:	68ec      	ldr	r4, [r5, #12]
 80060c0:	e7c7      	b.n	8006052 <__swbuf_r+0x1e>
 80060c2:	0021      	movs	r1, r4
 80060c4:	0028      	movs	r0, r5
 80060c6:	f000 f80b 	bl	80060e0 <__swsetup_r>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d0c9      	beq.n	8006062 <__swbuf_r+0x2e>
 80060ce:	2601      	movs	r6, #1
 80060d0:	4276      	negs	r6, r6
 80060d2:	e7ea      	b.n	80060aa <__swbuf_r+0x76>
 80060d4:	08006a44 	.word	0x08006a44
 80060d8:	08006a64 	.word	0x08006a64
 80060dc:	08006a24 	.word	0x08006a24

080060e0 <__swsetup_r>:
 80060e0:	4b37      	ldr	r3, [pc, #220]	; (80061c0 <__swsetup_r+0xe0>)
 80060e2:	b570      	push	{r4, r5, r6, lr}
 80060e4:	681d      	ldr	r5, [r3, #0]
 80060e6:	0006      	movs	r6, r0
 80060e8:	000c      	movs	r4, r1
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	d005      	beq.n	80060fa <__swsetup_r+0x1a>
 80060ee:	69ab      	ldr	r3, [r5, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <__swsetup_r+0x1a>
 80060f4:	0028      	movs	r0, r5
 80060f6:	f000 f999 	bl	800642c <__sinit>
 80060fa:	4b32      	ldr	r3, [pc, #200]	; (80061c4 <__swsetup_r+0xe4>)
 80060fc:	429c      	cmp	r4, r3
 80060fe:	d10f      	bne.n	8006120 <__swsetup_r+0x40>
 8006100:	686c      	ldr	r4, [r5, #4]
 8006102:	230c      	movs	r3, #12
 8006104:	5ee2      	ldrsh	r2, [r4, r3]
 8006106:	b293      	uxth	r3, r2
 8006108:	0711      	lsls	r1, r2, #28
 800610a:	d42d      	bmi.n	8006168 <__swsetup_r+0x88>
 800610c:	06d9      	lsls	r1, r3, #27
 800610e:	d411      	bmi.n	8006134 <__swsetup_r+0x54>
 8006110:	2309      	movs	r3, #9
 8006112:	2001      	movs	r0, #1
 8006114:	6033      	str	r3, [r6, #0]
 8006116:	3337      	adds	r3, #55	; 0x37
 8006118:	4313      	orrs	r3, r2
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	4240      	negs	r0, r0
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <__swsetup_r+0xe8>)
 8006122:	429c      	cmp	r4, r3
 8006124:	d101      	bne.n	800612a <__swsetup_r+0x4a>
 8006126:	68ac      	ldr	r4, [r5, #8]
 8006128:	e7eb      	b.n	8006102 <__swsetup_r+0x22>
 800612a:	4b28      	ldr	r3, [pc, #160]	; (80061cc <__swsetup_r+0xec>)
 800612c:	429c      	cmp	r4, r3
 800612e:	d1e8      	bne.n	8006102 <__swsetup_r+0x22>
 8006130:	68ec      	ldr	r4, [r5, #12]
 8006132:	e7e6      	b.n	8006102 <__swsetup_r+0x22>
 8006134:	075b      	lsls	r3, r3, #29
 8006136:	d513      	bpl.n	8006160 <__swsetup_r+0x80>
 8006138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613a:	2900      	cmp	r1, #0
 800613c:	d008      	beq.n	8006150 <__swsetup_r+0x70>
 800613e:	0023      	movs	r3, r4
 8006140:	3344      	adds	r3, #68	; 0x44
 8006142:	4299      	cmp	r1, r3
 8006144:	d002      	beq.n	800614c <__swsetup_r+0x6c>
 8006146:	0030      	movs	r0, r6
 8006148:	f7ff fe04 	bl	8005d54 <_free_r>
 800614c:	2300      	movs	r3, #0
 800614e:	6363      	str	r3, [r4, #52]	; 0x34
 8006150:	2224      	movs	r2, #36	; 0x24
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	4393      	bics	r3, r2
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	2300      	movs	r3, #0
 800615a:	6063      	str	r3, [r4, #4]
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	2308      	movs	r3, #8
 8006162:	89a2      	ldrh	r2, [r4, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <__swsetup_r+0xa6>
 800616e:	21a0      	movs	r1, #160	; 0xa0
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	0089      	lsls	r1, r1, #2
 8006176:	0092      	lsls	r2, r2, #2
 8006178:	400b      	ands	r3, r1
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <__swsetup_r+0xa6>
 800617e:	0021      	movs	r1, r4
 8006180:	0030      	movs	r0, r6
 8006182:	f000 fa1f 	bl	80065c4 <__smakebuf_r>
 8006186:	220c      	movs	r2, #12
 8006188:	5ea3      	ldrsh	r3, [r4, r2]
 800618a:	2001      	movs	r0, #1
 800618c:	001a      	movs	r2, r3
 800618e:	b299      	uxth	r1, r3
 8006190:	4002      	ands	r2, r0
 8006192:	4203      	tst	r3, r0
 8006194:	d00f      	beq.n	80061b6 <__swsetup_r+0xd6>
 8006196:	2200      	movs	r2, #0
 8006198:	60a2      	str	r2, [r4, #8]
 800619a:	6962      	ldr	r2, [r4, #20]
 800619c:	4252      	negs	r2, r2
 800619e:	61a2      	str	r2, [r4, #24]
 80061a0:	2000      	movs	r0, #0
 80061a2:	6922      	ldr	r2, [r4, #16]
 80061a4:	4282      	cmp	r2, r0
 80061a6:	d1ba      	bne.n	800611e <__swsetup_r+0x3e>
 80061a8:	060a      	lsls	r2, r1, #24
 80061aa:	d5b8      	bpl.n	800611e <__swsetup_r+0x3e>
 80061ac:	2240      	movs	r2, #64	; 0x40
 80061ae:	4313      	orrs	r3, r2
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	3801      	subs	r0, #1
 80061b4:	e7b3      	b.n	800611e <__swsetup_r+0x3e>
 80061b6:	0788      	lsls	r0, r1, #30
 80061b8:	d400      	bmi.n	80061bc <__swsetup_r+0xdc>
 80061ba:	6962      	ldr	r2, [r4, #20]
 80061bc:	60a2      	str	r2, [r4, #8]
 80061be:	e7ef      	b.n	80061a0 <__swsetup_r+0xc0>
 80061c0:	20000104 	.word	0x20000104
 80061c4:	08006a44 	.word	0x08006a44
 80061c8:	08006a64 	.word	0x08006a64
 80061cc:	08006a24 	.word	0x08006a24

080061d0 <__sflush_r>:
 80061d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061d2:	898b      	ldrh	r3, [r1, #12]
 80061d4:	0005      	movs	r5, r0
 80061d6:	000c      	movs	r4, r1
 80061d8:	071a      	lsls	r2, r3, #28
 80061da:	d45f      	bmi.n	800629c <__sflush_r+0xcc>
 80061dc:	684a      	ldr	r2, [r1, #4]
 80061de:	2a00      	cmp	r2, #0
 80061e0:	dc04      	bgt.n	80061ec <__sflush_r+0x1c>
 80061e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	dc01      	bgt.n	80061ec <__sflush_r+0x1c>
 80061e8:	2000      	movs	r0, #0
 80061ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80061ee:	2f00      	cmp	r7, #0
 80061f0:	d0fa      	beq.n	80061e8 <__sflush_r+0x18>
 80061f2:	2200      	movs	r2, #0
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	682e      	ldr	r6, [r5, #0]
 80061f8:	602a      	str	r2, [r5, #0]
 80061fa:	001a      	movs	r2, r3
 80061fc:	0149      	lsls	r1, r1, #5
 80061fe:	400a      	ands	r2, r1
 8006200:	420b      	tst	r3, r1
 8006202:	d034      	beq.n	800626e <__sflush_r+0x9e>
 8006204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	075b      	lsls	r3, r3, #29
 800620a:	d506      	bpl.n	800621a <__sflush_r+0x4a>
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	1ac0      	subs	r0, r0, r3
 8006210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <__sflush_r+0x4a>
 8006216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006218:	1ac0      	subs	r0, r0, r3
 800621a:	0002      	movs	r2, r0
 800621c:	6a21      	ldr	r1, [r4, #32]
 800621e:	2300      	movs	r3, #0
 8006220:	0028      	movs	r0, r5
 8006222:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006224:	47b8      	blx	r7
 8006226:	89a1      	ldrh	r1, [r4, #12]
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d106      	bne.n	800623a <__sflush_r+0x6a>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	2b1d      	cmp	r3, #29
 8006230:	d831      	bhi.n	8006296 <__sflush_r+0xc6>
 8006232:	4a2c      	ldr	r2, [pc, #176]	; (80062e4 <__sflush_r+0x114>)
 8006234:	40da      	lsrs	r2, r3
 8006236:	07d3      	lsls	r3, r2, #31
 8006238:	d52d      	bpl.n	8006296 <__sflush_r+0xc6>
 800623a:	2300      	movs	r3, #0
 800623c:	6063      	str	r3, [r4, #4]
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	04cb      	lsls	r3, r1, #19
 8006244:	d505      	bpl.n	8006252 <__sflush_r+0x82>
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	d102      	bne.n	8006250 <__sflush_r+0x80>
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d100      	bne.n	8006252 <__sflush_r+0x82>
 8006250:	6560      	str	r0, [r4, #84]	; 0x54
 8006252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006254:	602e      	str	r6, [r5, #0]
 8006256:	2900      	cmp	r1, #0
 8006258:	d0c6      	beq.n	80061e8 <__sflush_r+0x18>
 800625a:	0023      	movs	r3, r4
 800625c:	3344      	adds	r3, #68	; 0x44
 800625e:	4299      	cmp	r1, r3
 8006260:	d002      	beq.n	8006268 <__sflush_r+0x98>
 8006262:	0028      	movs	r0, r5
 8006264:	f7ff fd76 	bl	8005d54 <_free_r>
 8006268:	2000      	movs	r0, #0
 800626a:	6360      	str	r0, [r4, #52]	; 0x34
 800626c:	e7bd      	b.n	80061ea <__sflush_r+0x1a>
 800626e:	2301      	movs	r3, #1
 8006270:	0028      	movs	r0, r5
 8006272:	6a21      	ldr	r1, [r4, #32]
 8006274:	47b8      	blx	r7
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d1c5      	bne.n	8006206 <__sflush_r+0x36>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0c2      	beq.n	8006206 <__sflush_r+0x36>
 8006280:	2b1d      	cmp	r3, #29
 8006282:	d001      	beq.n	8006288 <__sflush_r+0xb8>
 8006284:	2b16      	cmp	r3, #22
 8006286:	d101      	bne.n	800628c <__sflush_r+0xbc>
 8006288:	602e      	str	r6, [r5, #0]
 800628a:	e7ad      	b.n	80061e8 <__sflush_r+0x18>
 800628c:	2340      	movs	r3, #64	; 0x40
 800628e:	89a2      	ldrh	r2, [r4, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	e7a9      	b.n	80061ea <__sflush_r+0x1a>
 8006296:	2340      	movs	r3, #64	; 0x40
 8006298:	430b      	orrs	r3, r1
 800629a:	e7fa      	b.n	8006292 <__sflush_r+0xc2>
 800629c:	690f      	ldr	r7, [r1, #16]
 800629e:	2f00      	cmp	r7, #0
 80062a0:	d0a2      	beq.n	80061e8 <__sflush_r+0x18>
 80062a2:	680a      	ldr	r2, [r1, #0]
 80062a4:	600f      	str	r7, [r1, #0]
 80062a6:	1bd2      	subs	r2, r2, r7
 80062a8:	9201      	str	r2, [sp, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	079b      	lsls	r3, r3, #30
 80062ae:	d100      	bne.n	80062b2 <__sflush_r+0xe2>
 80062b0:	694a      	ldr	r2, [r1, #20]
 80062b2:	60a2      	str	r2, [r4, #8]
 80062b4:	9b01      	ldr	r3, [sp, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	dc00      	bgt.n	80062bc <__sflush_r+0xec>
 80062ba:	e795      	b.n	80061e8 <__sflush_r+0x18>
 80062bc:	003a      	movs	r2, r7
 80062be:	0028      	movs	r0, r5
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	6a21      	ldr	r1, [r4, #32]
 80062c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062c6:	47b0      	blx	r6
 80062c8:	2800      	cmp	r0, #0
 80062ca:	dc06      	bgt.n	80062da <__sflush_r+0x10a>
 80062cc:	2340      	movs	r3, #64	; 0x40
 80062ce:	2001      	movs	r0, #1
 80062d0:	89a2      	ldrh	r2, [r4, #12]
 80062d2:	4240      	negs	r0, r0
 80062d4:	4313      	orrs	r3, r2
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	e787      	b.n	80061ea <__sflush_r+0x1a>
 80062da:	9b01      	ldr	r3, [sp, #4]
 80062dc:	183f      	adds	r7, r7, r0
 80062de:	1a1b      	subs	r3, r3, r0
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	e7e7      	b.n	80062b4 <__sflush_r+0xe4>
 80062e4:	20400001 	.word	0x20400001

080062e8 <_fflush_r>:
 80062e8:	690b      	ldr	r3, [r1, #16]
 80062ea:	b570      	push	{r4, r5, r6, lr}
 80062ec:	0005      	movs	r5, r0
 80062ee:	000c      	movs	r4, r1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <_fflush_r+0x12>
 80062f4:	2500      	movs	r5, #0
 80062f6:	0028      	movs	r0, r5
 80062f8:	bd70      	pop	{r4, r5, r6, pc}
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d004      	beq.n	8006308 <_fflush_r+0x20>
 80062fe:	6983      	ldr	r3, [r0, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <_fflush_r+0x20>
 8006304:	f000 f892 	bl	800642c <__sinit>
 8006308:	4b14      	ldr	r3, [pc, #80]	; (800635c <_fflush_r+0x74>)
 800630a:	429c      	cmp	r4, r3
 800630c:	d11b      	bne.n	8006346 <_fflush_r+0x5e>
 800630e:	686c      	ldr	r4, [r5, #4]
 8006310:	220c      	movs	r2, #12
 8006312:	5ea3      	ldrsh	r3, [r4, r2]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0ed      	beq.n	80062f4 <_fflush_r+0xc>
 8006318:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800631a:	07d2      	lsls	r2, r2, #31
 800631c:	d404      	bmi.n	8006328 <_fflush_r+0x40>
 800631e:	059b      	lsls	r3, r3, #22
 8006320:	d402      	bmi.n	8006328 <_fflush_r+0x40>
 8006322:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006324:	f000 f923 	bl	800656e <__retarget_lock_acquire_recursive>
 8006328:	0028      	movs	r0, r5
 800632a:	0021      	movs	r1, r4
 800632c:	f7ff ff50 	bl	80061d0 <__sflush_r>
 8006330:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006332:	0005      	movs	r5, r0
 8006334:	07db      	lsls	r3, r3, #31
 8006336:	d4de      	bmi.n	80062f6 <_fflush_r+0xe>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	059b      	lsls	r3, r3, #22
 800633c:	d4db      	bmi.n	80062f6 <_fflush_r+0xe>
 800633e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006340:	f000 f916 	bl	8006570 <__retarget_lock_release_recursive>
 8006344:	e7d7      	b.n	80062f6 <_fflush_r+0xe>
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <_fflush_r+0x78>)
 8006348:	429c      	cmp	r4, r3
 800634a:	d101      	bne.n	8006350 <_fflush_r+0x68>
 800634c:	68ac      	ldr	r4, [r5, #8]
 800634e:	e7df      	b.n	8006310 <_fflush_r+0x28>
 8006350:	4b04      	ldr	r3, [pc, #16]	; (8006364 <_fflush_r+0x7c>)
 8006352:	429c      	cmp	r4, r3
 8006354:	d1dc      	bne.n	8006310 <_fflush_r+0x28>
 8006356:	68ec      	ldr	r4, [r5, #12]
 8006358:	e7da      	b.n	8006310 <_fflush_r+0x28>
 800635a:	46c0      	nop			; (mov r8, r8)
 800635c:	08006a44 	.word	0x08006a44
 8006360:	08006a64 	.word	0x08006a64
 8006364:	08006a24 	.word	0x08006a24

08006368 <std>:
 8006368:	2300      	movs	r3, #0
 800636a:	b510      	push	{r4, lr}
 800636c:	0004      	movs	r4, r0
 800636e:	6003      	str	r3, [r0, #0]
 8006370:	6043      	str	r3, [r0, #4]
 8006372:	6083      	str	r3, [r0, #8]
 8006374:	8181      	strh	r1, [r0, #12]
 8006376:	6643      	str	r3, [r0, #100]	; 0x64
 8006378:	0019      	movs	r1, r3
 800637a:	81c2      	strh	r2, [r0, #14]
 800637c:	6103      	str	r3, [r0, #16]
 800637e:	6143      	str	r3, [r0, #20]
 8006380:	6183      	str	r3, [r0, #24]
 8006382:	2208      	movs	r2, #8
 8006384:	305c      	adds	r0, #92	; 0x5c
 8006386:	f7ff fcdc 	bl	8005d42 <memset>
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <std+0x38>)
 800638c:	6224      	str	r4, [r4, #32]
 800638e:	6263      	str	r3, [r4, #36]	; 0x24
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <std+0x3c>)
 8006392:	62a3      	str	r3, [r4, #40]	; 0x28
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <std+0x40>)
 8006396:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <std+0x44>)
 800639a:	6323      	str	r3, [r4, #48]	; 0x30
 800639c:	bd10      	pop	{r4, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	0800666d 	.word	0x0800666d
 80063a4:	08006695 	.word	0x08006695
 80063a8:	080066cd 	.word	0x080066cd
 80063ac:	080066f9 	.word	0x080066f9

080063b0 <_cleanup_r>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	4902      	ldr	r1, [pc, #8]	; (80063bc <_cleanup_r+0xc>)
 80063b4:	f000 f8ba 	bl	800652c <_fwalk_reent>
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	080062e9 	.word	0x080062e9

080063c0 <__sfmoreglue>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	2568      	movs	r5, #104	; 0x68
 80063c4:	1e4a      	subs	r2, r1, #1
 80063c6:	4355      	muls	r5, r2
 80063c8:	000e      	movs	r6, r1
 80063ca:	0029      	movs	r1, r5
 80063cc:	3174      	adds	r1, #116	; 0x74
 80063ce:	f7ff fd2d 	bl	8005e2c <_malloc_r>
 80063d2:	1e04      	subs	r4, r0, #0
 80063d4:	d008      	beq.n	80063e8 <__sfmoreglue+0x28>
 80063d6:	2100      	movs	r1, #0
 80063d8:	002a      	movs	r2, r5
 80063da:	6001      	str	r1, [r0, #0]
 80063dc:	6046      	str	r6, [r0, #4]
 80063de:	300c      	adds	r0, #12
 80063e0:	60a0      	str	r0, [r4, #8]
 80063e2:	3268      	adds	r2, #104	; 0x68
 80063e4:	f7ff fcad 	bl	8005d42 <memset>
 80063e8:	0020      	movs	r0, r4
 80063ea:	bd70      	pop	{r4, r5, r6, pc}

080063ec <__sfp_lock_acquire>:
 80063ec:	b510      	push	{r4, lr}
 80063ee:	4802      	ldr	r0, [pc, #8]	; (80063f8 <__sfp_lock_acquire+0xc>)
 80063f0:	f000 f8bd 	bl	800656e <__retarget_lock_acquire_recursive>
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	20000699 	.word	0x20000699

080063fc <__sfp_lock_release>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	4802      	ldr	r0, [pc, #8]	; (8006408 <__sfp_lock_release+0xc>)
 8006400:	f000 f8b6 	bl	8006570 <__retarget_lock_release_recursive>
 8006404:	bd10      	pop	{r4, pc}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	20000699 	.word	0x20000699

0800640c <__sinit_lock_acquire>:
 800640c:	b510      	push	{r4, lr}
 800640e:	4802      	ldr	r0, [pc, #8]	; (8006418 <__sinit_lock_acquire+0xc>)
 8006410:	f000 f8ad 	bl	800656e <__retarget_lock_acquire_recursive>
 8006414:	bd10      	pop	{r4, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	2000069a 	.word	0x2000069a

0800641c <__sinit_lock_release>:
 800641c:	b510      	push	{r4, lr}
 800641e:	4802      	ldr	r0, [pc, #8]	; (8006428 <__sinit_lock_release+0xc>)
 8006420:	f000 f8a6 	bl	8006570 <__retarget_lock_release_recursive>
 8006424:	bd10      	pop	{r4, pc}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	2000069a 	.word	0x2000069a

0800642c <__sinit>:
 800642c:	b513      	push	{r0, r1, r4, lr}
 800642e:	0004      	movs	r4, r0
 8006430:	f7ff ffec 	bl	800640c <__sinit_lock_acquire>
 8006434:	69a3      	ldr	r3, [r4, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <__sinit+0x14>
 800643a:	f7ff ffef 	bl	800641c <__sinit_lock_release>
 800643e:	bd13      	pop	{r0, r1, r4, pc}
 8006440:	64a3      	str	r3, [r4, #72]	; 0x48
 8006442:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006444:	6523      	str	r3, [r4, #80]	; 0x50
 8006446:	4b13      	ldr	r3, [pc, #76]	; (8006494 <__sinit+0x68>)
 8006448:	4a13      	ldr	r2, [pc, #76]	; (8006498 <__sinit+0x6c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	62a2      	str	r2, [r4, #40]	; 0x28
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	42a3      	cmp	r3, r4
 8006452:	d101      	bne.n	8006458 <__sinit+0x2c>
 8006454:	2301      	movs	r3, #1
 8006456:	61a3      	str	r3, [r4, #24]
 8006458:	0020      	movs	r0, r4
 800645a:	f000 f81f 	bl	800649c <__sfp>
 800645e:	6060      	str	r0, [r4, #4]
 8006460:	0020      	movs	r0, r4
 8006462:	f000 f81b 	bl	800649c <__sfp>
 8006466:	60a0      	str	r0, [r4, #8]
 8006468:	0020      	movs	r0, r4
 800646a:	f000 f817 	bl	800649c <__sfp>
 800646e:	2200      	movs	r2, #0
 8006470:	2104      	movs	r1, #4
 8006472:	60e0      	str	r0, [r4, #12]
 8006474:	6860      	ldr	r0, [r4, #4]
 8006476:	f7ff ff77 	bl	8006368 <std>
 800647a:	2201      	movs	r2, #1
 800647c:	2109      	movs	r1, #9
 800647e:	68a0      	ldr	r0, [r4, #8]
 8006480:	f7ff ff72 	bl	8006368 <std>
 8006484:	2202      	movs	r2, #2
 8006486:	2112      	movs	r1, #18
 8006488:	68e0      	ldr	r0, [r4, #12]
 800648a:	f7ff ff6d 	bl	8006368 <std>
 800648e:	2301      	movs	r3, #1
 8006490:	61a3      	str	r3, [r4, #24]
 8006492:	e7d2      	b.n	800643a <__sinit+0xe>
 8006494:	08006a20 	.word	0x08006a20
 8006498:	080063b1 	.word	0x080063b1

0800649c <__sfp>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	0007      	movs	r7, r0
 80064a0:	f7ff ffa4 	bl	80063ec <__sfp_lock_acquire>
 80064a4:	4b1f      	ldr	r3, [pc, #124]	; (8006524 <__sfp+0x88>)
 80064a6:	681e      	ldr	r6, [r3, #0]
 80064a8:	69b3      	ldr	r3, [r6, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d102      	bne.n	80064b4 <__sfp+0x18>
 80064ae:	0030      	movs	r0, r6
 80064b0:	f7ff ffbc 	bl	800642c <__sinit>
 80064b4:	3648      	adds	r6, #72	; 0x48
 80064b6:	68b4      	ldr	r4, [r6, #8]
 80064b8:	6873      	ldr	r3, [r6, #4]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	d504      	bpl.n	80064c8 <__sfp+0x2c>
 80064be:	6833      	ldr	r3, [r6, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d022      	beq.n	800650a <__sfp+0x6e>
 80064c4:	6836      	ldr	r6, [r6, #0]
 80064c6:	e7f6      	b.n	80064b6 <__sfp+0x1a>
 80064c8:	220c      	movs	r2, #12
 80064ca:	5ea5      	ldrsh	r5, [r4, r2]
 80064cc:	2d00      	cmp	r5, #0
 80064ce:	d11a      	bne.n	8006506 <__sfp+0x6a>
 80064d0:	0020      	movs	r0, r4
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <__sfp+0x8c>)
 80064d4:	3058      	adds	r0, #88	; 0x58
 80064d6:	60e3      	str	r3, [r4, #12]
 80064d8:	6665      	str	r5, [r4, #100]	; 0x64
 80064da:	f000 f847 	bl	800656c <__retarget_lock_init_recursive>
 80064de:	f7ff ff8d 	bl	80063fc <__sfp_lock_release>
 80064e2:	0020      	movs	r0, r4
 80064e4:	2208      	movs	r2, #8
 80064e6:	0029      	movs	r1, r5
 80064e8:	6025      	str	r5, [r4, #0]
 80064ea:	60a5      	str	r5, [r4, #8]
 80064ec:	6065      	str	r5, [r4, #4]
 80064ee:	6125      	str	r5, [r4, #16]
 80064f0:	6165      	str	r5, [r4, #20]
 80064f2:	61a5      	str	r5, [r4, #24]
 80064f4:	305c      	adds	r0, #92	; 0x5c
 80064f6:	f7ff fc24 	bl	8005d42 <memset>
 80064fa:	6365      	str	r5, [r4, #52]	; 0x34
 80064fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80064fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8006500:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006502:	0020      	movs	r0, r4
 8006504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006506:	3468      	adds	r4, #104	; 0x68
 8006508:	e7d7      	b.n	80064ba <__sfp+0x1e>
 800650a:	2104      	movs	r1, #4
 800650c:	0038      	movs	r0, r7
 800650e:	f7ff ff57 	bl	80063c0 <__sfmoreglue>
 8006512:	1e04      	subs	r4, r0, #0
 8006514:	6030      	str	r0, [r6, #0]
 8006516:	d1d5      	bne.n	80064c4 <__sfp+0x28>
 8006518:	f7ff ff70 	bl	80063fc <__sfp_lock_release>
 800651c:	230c      	movs	r3, #12
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	e7ef      	b.n	8006502 <__sfp+0x66>
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	08006a20 	.word	0x08006a20
 8006528:	ffff0001 	.word	0xffff0001

0800652c <_fwalk_reent>:
 800652c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800652e:	0004      	movs	r4, r0
 8006530:	0006      	movs	r6, r0
 8006532:	2700      	movs	r7, #0
 8006534:	9101      	str	r1, [sp, #4]
 8006536:	3448      	adds	r4, #72	; 0x48
 8006538:	6863      	ldr	r3, [r4, #4]
 800653a:	68a5      	ldr	r5, [r4, #8]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	d504      	bpl.n	8006550 <_fwalk_reent+0x24>
 8006546:	6824      	ldr	r4, [r4, #0]
 8006548:	2c00      	cmp	r4, #0
 800654a:	d1f5      	bne.n	8006538 <_fwalk_reent+0xc>
 800654c:	0038      	movs	r0, r7
 800654e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006550:	89ab      	ldrh	r3, [r5, #12]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d908      	bls.n	8006568 <_fwalk_reent+0x3c>
 8006556:	220e      	movs	r2, #14
 8006558:	5eab      	ldrsh	r3, [r5, r2]
 800655a:	3301      	adds	r3, #1
 800655c:	d004      	beq.n	8006568 <_fwalk_reent+0x3c>
 800655e:	0029      	movs	r1, r5
 8006560:	0030      	movs	r0, r6
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	4798      	blx	r3
 8006566:	4307      	orrs	r7, r0
 8006568:	3568      	adds	r5, #104	; 0x68
 800656a:	e7e8      	b.n	800653e <_fwalk_reent+0x12>

0800656c <__retarget_lock_init_recursive>:
 800656c:	4770      	bx	lr

0800656e <__retarget_lock_acquire_recursive>:
 800656e:	4770      	bx	lr

08006570 <__retarget_lock_release_recursive>:
 8006570:	4770      	bx	lr
	...

08006574 <__swhatbuf_r>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	000e      	movs	r6, r1
 8006578:	001d      	movs	r5, r3
 800657a:	230e      	movs	r3, #14
 800657c:	5ec9      	ldrsh	r1, [r1, r3]
 800657e:	0014      	movs	r4, r2
 8006580:	b096      	sub	sp, #88	; 0x58
 8006582:	2900      	cmp	r1, #0
 8006584:	da08      	bge.n	8006598 <__swhatbuf_r+0x24>
 8006586:	220c      	movs	r2, #12
 8006588:	5eb3      	ldrsh	r3, [r6, r2]
 800658a:	2200      	movs	r2, #0
 800658c:	602a      	str	r2, [r5, #0]
 800658e:	061b      	lsls	r3, r3, #24
 8006590:	d411      	bmi.n	80065b6 <__swhatbuf_r+0x42>
 8006592:	2380      	movs	r3, #128	; 0x80
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	e00f      	b.n	80065b8 <__swhatbuf_r+0x44>
 8006598:	466a      	mov	r2, sp
 800659a:	f000 f8d9 	bl	8006750 <_fstat_r>
 800659e:	2800      	cmp	r0, #0
 80065a0:	dbf1      	blt.n	8006586 <__swhatbuf_r+0x12>
 80065a2:	23f0      	movs	r3, #240	; 0xf0
 80065a4:	9901      	ldr	r1, [sp, #4]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	4019      	ands	r1, r3
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <__swhatbuf_r+0x4c>)
 80065ac:	18c9      	adds	r1, r1, r3
 80065ae:	424b      	negs	r3, r1
 80065b0:	4159      	adcs	r1, r3
 80065b2:	6029      	str	r1, [r5, #0]
 80065b4:	e7ed      	b.n	8006592 <__swhatbuf_r+0x1e>
 80065b6:	2340      	movs	r3, #64	; 0x40
 80065b8:	2000      	movs	r0, #0
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	b016      	add	sp, #88	; 0x58
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	ffffe000 	.word	0xffffe000

080065c4 <__smakebuf_r>:
 80065c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c6:	2602      	movs	r6, #2
 80065c8:	898b      	ldrh	r3, [r1, #12]
 80065ca:	0005      	movs	r5, r0
 80065cc:	000c      	movs	r4, r1
 80065ce:	4233      	tst	r3, r6
 80065d0:	d006      	beq.n	80065e0 <__smakebuf_r+0x1c>
 80065d2:	0023      	movs	r3, r4
 80065d4:	3347      	adds	r3, #71	; 0x47
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	2301      	movs	r3, #1
 80065dc:	6163      	str	r3, [r4, #20]
 80065de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80065e0:	466a      	mov	r2, sp
 80065e2:	ab01      	add	r3, sp, #4
 80065e4:	f7ff ffc6 	bl	8006574 <__swhatbuf_r>
 80065e8:	9900      	ldr	r1, [sp, #0]
 80065ea:	0007      	movs	r7, r0
 80065ec:	0028      	movs	r0, r5
 80065ee:	f7ff fc1d 	bl	8005e2c <_malloc_r>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d108      	bne.n	8006608 <__smakebuf_r+0x44>
 80065f6:	220c      	movs	r2, #12
 80065f8:	5ea3      	ldrsh	r3, [r4, r2]
 80065fa:	059a      	lsls	r2, r3, #22
 80065fc:	d4ef      	bmi.n	80065de <__smakebuf_r+0x1a>
 80065fe:	2203      	movs	r2, #3
 8006600:	4393      	bics	r3, r2
 8006602:	431e      	orrs	r6, r3
 8006604:	81a6      	strh	r6, [r4, #12]
 8006606:	e7e4      	b.n	80065d2 <__smakebuf_r+0xe>
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <__smakebuf_r+0x84>)
 800660a:	62ab      	str	r3, [r5, #40]	; 0x28
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	89a2      	ldrh	r2, [r4, #12]
 8006610:	6020      	str	r0, [r4, #0]
 8006612:	4313      	orrs	r3, r2
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	9b00      	ldr	r3, [sp, #0]
 8006618:	6120      	str	r0, [r4, #16]
 800661a:	6163      	str	r3, [r4, #20]
 800661c:	9b01      	ldr	r3, [sp, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00d      	beq.n	800663e <__smakebuf_r+0x7a>
 8006622:	0028      	movs	r0, r5
 8006624:	230e      	movs	r3, #14
 8006626:	5ee1      	ldrsh	r1, [r4, r3]
 8006628:	f000 f8a4 	bl	8006774 <_isatty_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	d006      	beq.n	800663e <__smakebuf_r+0x7a>
 8006630:	2203      	movs	r2, #3
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	4393      	bics	r3, r2
 8006636:	001a      	movs	r2, r3
 8006638:	2301      	movs	r3, #1
 800663a:	4313      	orrs	r3, r2
 800663c:	81a3      	strh	r3, [r4, #12]
 800663e:	89a0      	ldrh	r0, [r4, #12]
 8006640:	4307      	orrs	r7, r0
 8006642:	81a7      	strh	r7, [r4, #12]
 8006644:	e7cb      	b.n	80065de <__smakebuf_r+0x1a>
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	080063b1 	.word	0x080063b1

0800664c <__malloc_lock>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4802      	ldr	r0, [pc, #8]	; (8006658 <__malloc_lock+0xc>)
 8006650:	f7ff ff8d 	bl	800656e <__retarget_lock_acquire_recursive>
 8006654:	bd10      	pop	{r4, pc}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	20000698 	.word	0x20000698

0800665c <__malloc_unlock>:
 800665c:	b510      	push	{r4, lr}
 800665e:	4802      	ldr	r0, [pc, #8]	; (8006668 <__malloc_unlock+0xc>)
 8006660:	f7ff ff86 	bl	8006570 <__retarget_lock_release_recursive>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	20000698 	.word	0x20000698

0800666c <__sread>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	000c      	movs	r4, r1
 8006670:	250e      	movs	r5, #14
 8006672:	5f49      	ldrsh	r1, [r1, r5]
 8006674:	f000 f8a4 	bl	80067c0 <_read_r>
 8006678:	2800      	cmp	r0, #0
 800667a:	db03      	blt.n	8006684 <__sread+0x18>
 800667c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800667e:	181b      	adds	r3, r3, r0
 8006680:	6563      	str	r3, [r4, #84]	; 0x54
 8006682:	bd70      	pop	{r4, r5, r6, pc}
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	4a02      	ldr	r2, [pc, #8]	; (8006690 <__sread+0x24>)
 8006688:	4013      	ands	r3, r2
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	e7f9      	b.n	8006682 <__sread+0x16>
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	ffffefff 	.word	0xffffefff

08006694 <__swrite>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	001f      	movs	r7, r3
 8006698:	898b      	ldrh	r3, [r1, #12]
 800669a:	0005      	movs	r5, r0
 800669c:	000c      	movs	r4, r1
 800669e:	0016      	movs	r6, r2
 80066a0:	05db      	lsls	r3, r3, #23
 80066a2:	d505      	bpl.n	80066b0 <__swrite+0x1c>
 80066a4:	230e      	movs	r3, #14
 80066a6:	5ec9      	ldrsh	r1, [r1, r3]
 80066a8:	2200      	movs	r2, #0
 80066aa:	2302      	movs	r3, #2
 80066ac:	f000 f874 	bl	8006798 <_lseek_r>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	4a05      	ldr	r2, [pc, #20]	; (80066c8 <__swrite+0x34>)
 80066b4:	0028      	movs	r0, r5
 80066b6:	4013      	ands	r3, r2
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	0032      	movs	r2, r6
 80066bc:	230e      	movs	r3, #14
 80066be:	5ee1      	ldrsh	r1, [r4, r3]
 80066c0:	003b      	movs	r3, r7
 80066c2:	f000 f81f 	bl	8006704 <_write_r>
 80066c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c8:	ffffefff 	.word	0xffffefff

080066cc <__sseek>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	000c      	movs	r4, r1
 80066d0:	250e      	movs	r5, #14
 80066d2:	5f49      	ldrsh	r1, [r1, r5]
 80066d4:	f000 f860 	bl	8006798 <_lseek_r>
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	1c42      	adds	r2, r0, #1
 80066dc:	d103      	bne.n	80066e6 <__sseek+0x1a>
 80066de:	4a05      	ldr	r2, [pc, #20]	; (80066f4 <__sseek+0x28>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	81a3      	strh	r3, [r4, #12]
 80066e4:	bd70      	pop	{r4, r5, r6, pc}
 80066e6:	2280      	movs	r2, #128	; 0x80
 80066e8:	0152      	lsls	r2, r2, #5
 80066ea:	4313      	orrs	r3, r2
 80066ec:	81a3      	strh	r3, [r4, #12]
 80066ee:	6560      	str	r0, [r4, #84]	; 0x54
 80066f0:	e7f8      	b.n	80066e4 <__sseek+0x18>
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	ffffefff 	.word	0xffffefff

080066f8 <__sclose>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	230e      	movs	r3, #14
 80066fc:	5ec9      	ldrsh	r1, [r1, r3]
 80066fe:	f000 f815 	bl	800672c <_close_r>
 8006702:	bd10      	pop	{r4, pc}

08006704 <_write_r>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	0004      	movs	r4, r0
 8006708:	0008      	movs	r0, r1
 800670a:	0011      	movs	r1, r2
 800670c:	001a      	movs	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	4d05      	ldr	r5, [pc, #20]	; (8006728 <_write_r+0x24>)
 8006712:	602b      	str	r3, [r5, #0]
 8006714:	f7fc f889 	bl	800282a <_write>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	d103      	bne.n	8006724 <_write_r+0x20>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d000      	beq.n	8006724 <_write_r+0x20>
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	bd70      	pop	{r4, r5, r6, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	2000069c 	.word	0x2000069c

0800672c <_close_r>:
 800672c:	2300      	movs	r3, #0
 800672e:	b570      	push	{r4, r5, r6, lr}
 8006730:	4d06      	ldr	r5, [pc, #24]	; (800674c <_close_r+0x20>)
 8006732:	0004      	movs	r4, r0
 8006734:	0008      	movs	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fc f893 	bl	8002862 <_close>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d103      	bne.n	8006748 <_close_r+0x1c>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d000      	beq.n	8006748 <_close_r+0x1c>
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	bd70      	pop	{r4, r5, r6, pc}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	2000069c 	.word	0x2000069c

08006750 <_fstat_r>:
 8006750:	2300      	movs	r3, #0
 8006752:	b570      	push	{r4, r5, r6, lr}
 8006754:	4d06      	ldr	r5, [pc, #24]	; (8006770 <_fstat_r+0x20>)
 8006756:	0004      	movs	r4, r0
 8006758:	0008      	movs	r0, r1
 800675a:	0011      	movs	r1, r2
 800675c:	602b      	str	r3, [r5, #0]
 800675e:	f7fc f88a 	bl	8002876 <_fstat>
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	d103      	bne.n	800676e <_fstat_r+0x1e>
 8006766:	682b      	ldr	r3, [r5, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d000      	beq.n	800676e <_fstat_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	2000069c 	.word	0x2000069c

08006774 <_isatty_r>:
 8006774:	2300      	movs	r3, #0
 8006776:	b570      	push	{r4, r5, r6, lr}
 8006778:	4d06      	ldr	r5, [pc, #24]	; (8006794 <_isatty_r+0x20>)
 800677a:	0004      	movs	r4, r0
 800677c:	0008      	movs	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fc f887 	bl	8002892 <_isatty>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d103      	bne.n	8006790 <_isatty_r+0x1c>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d000      	beq.n	8006790 <_isatty_r+0x1c>
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	bd70      	pop	{r4, r5, r6, pc}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	2000069c 	.word	0x2000069c

08006798 <_lseek_r>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	0004      	movs	r4, r0
 800679c:	0008      	movs	r0, r1
 800679e:	0011      	movs	r1, r2
 80067a0:	001a      	movs	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	4d05      	ldr	r5, [pc, #20]	; (80067bc <_lseek_r+0x24>)
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	f7fc f87c 	bl	80028a4 <_lseek>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d103      	bne.n	80067b8 <_lseek_r+0x20>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d000      	beq.n	80067b8 <_lseek_r+0x20>
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	2000069c 	.word	0x2000069c

080067c0 <_read_r>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	0004      	movs	r4, r0
 80067c4:	0008      	movs	r0, r1
 80067c6:	0011      	movs	r1, r2
 80067c8:	001a      	movs	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	4d05      	ldr	r5, [pc, #20]	; (80067e4 <_read_r+0x24>)
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	f7fc f80e 	bl	80027f0 <_read>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d103      	bne.n	80067e0 <_read_r+0x20>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d000      	beq.n	80067e0 <_read_r+0x20>
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	2000069c 	.word	0x2000069c

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
