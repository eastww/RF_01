
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004940  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc4  08004bc4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bc4  08004bc4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bc4  08004bc4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc8  08004bc8  00014bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000001c  08004be8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004be8  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c21  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b31  00000000  00000000  00030c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00033798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000347d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ad7  00000000  00000000  000356d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147a8  00000000  00000000  000481a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069c6b  00000000  00000000  0005c94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c65ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  000c660c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049e8 	.word	0x080049e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	080049e8 	.word	0x080049e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 8000224:	21ff      	movs	r1, #255	; 0xff
 8000226:	207f      	movs	r0, #127	; 0x7f
 8000228:	f000 fc69 	bl	8000afe <Cmt2300_WriteReg>
}
 800022c:	46c0      	nop			; (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}

08000232 <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 8000236:	2061      	movs	r0, #97	; 0x61
 8000238:	f000 fc4a 	bl	8000ad0 <Cmt2300_ReadReg>
 800023c:	0003      	movs	r3, r0
 800023e:	001a      	movs	r2, r3
 8000240:	230f      	movs	r3, #15
 8000242:	4013      	ands	r3, r2
 8000244:	b2db      	uxtb	r3, r3
}
 8000246:	0018      	movs	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 800024c:	b5b0      	push	{r4, r5, r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	1dfb      	adds	r3, r7, #7
 8000256:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 8000258:	230f      	movs	r3, #15
 800025a:	18fb      	adds	r3, r7, r3
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
 8000260:	e013      	b.n	800028a <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 8000262:	250e      	movs	r5, #14
 8000264:	197c      	adds	r4, r7, r5
 8000266:	f7ff ffe4 	bl	8000232 <Cmt2300_GetChipStatus>
 800026a:	0003      	movs	r3, r0
 800026c:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 800026e:	1dfa      	adds	r2, r7, #7
 8000270:	197b      	adds	r3, r7, r5
 8000272:	7812      	ldrb	r2, [r2, #0]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	d101      	bne.n	800027e <Cmt2300_WaitChipStatus+0x32>
            return true;
 800027a:	2301      	movs	r3, #1
 800027c:	e00b      	b.n	8000296 <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 800027e:	210f      	movs	r1, #15
 8000280:	187b      	adds	r3, r7, r1
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	187b      	adds	r3, r7, r1
 8000286:	3201      	adds	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b31      	cmp	r3, #49	; 0x31
 8000292:	d9e6      	bls.n	8000262 <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 8000294:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 8000296:	0018      	movs	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	b004      	add	sp, #16
 800029c:	bdb0      	pop	{r4, r5, r7, pc}

0800029e <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	0002      	movs	r2, r0
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 80002aa:	2045      	movs	r0, #69	; 0x45
 80002ac:	f000 fc10 	bl	8000ad0 <Cmt2300_ReadReg>
 80002b0:	0003      	movs	r3, r0
 80002b2:	0019      	movs	r1, r3
 80002b4:	200f      	movs	r0, #15
 80002b6:	183b      	adds	r3, r7, r0
 80002b8:	2201      	movs	r2, #1
 80002ba:	4391      	bics	r1, r2
 80002bc:	000a      	movs	r2, r1
 80002be:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 80002c0:	183a      	adds	r2, r7, r0
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	7812      	ldrb	r2, [r2, #0]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	0019      	movs	r1, r3
 80002ce:	2045      	movs	r0, #69	; 0x45
 80002d0:	f000 fc15 	bl	8000afe <Cmt2300_WriteReg>
}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b004      	add	sp, #16
 80002da:	bd80      	pop	{r7, pc}

080002dc <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 80002e0:	2110      	movs	r1, #16
 80002e2:	2060      	movs	r0, #96	; 0x60
 80002e4:	f000 fc0b 	bl	8000afe <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f7ff ffaf 	bl	800024c <Cmt2300_WaitChipStatus>
 80002ee:	0003      	movs	r3, r0
}
 80002f0:	0018      	movs	r0, r3
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 80002fa:	2102      	movs	r1, #2
 80002fc:	2060      	movs	r0, #96	; 0x60
 80002fe:	f000 fbfe 	bl	8000afe <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 8000302:	2002      	movs	r0, #2
 8000304:	f7ff ffa2 	bl	800024c <Cmt2300_WaitChipStatus>
 8000308:	0003      	movs	r3, r0
}
 800030a:	0018      	movs	r0, r3
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	0002      	movs	r2, r0
 8000318:	1dfb      	adds	r3, r7, #7
 800031a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	0019      	movs	r1, r3
 8000322:	2065      	movs	r0, #101	; 0x65
 8000324:	f000 fbeb 	bl	8000afe <Cmt2300_WriteReg>
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b002      	add	sp, #8
 800032e:	bd80      	pop	{r7, pc}

08000330 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	0002      	movs	r2, r0
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	701a      	strb	r2, [r3, #0]
 800033c:	1dbb      	adds	r3, r7, #6
 800033e:	1c0a      	adds	r2, r1, #0
 8000340:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	211f      	movs	r1, #31
 800034a:	400a      	ands	r2, r1
 800034c:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 800034e:	2066      	movs	r0, #102	; 0x66
 8000350:	f000 fbbe 	bl	8000ad0 <Cmt2300_ReadReg>
 8000354:	0003      	movs	r3, r0
 8000356:	001a      	movs	r2, r3
 8000358:	231f      	movs	r3, #31
 800035a:	439a      	bics	r2, r3
 800035c:	0013      	movs	r3, r2
 800035e:	b25a      	sxtb	r2, r3
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	b25b      	sxtb	r3, r3
 8000366:	4313      	orrs	r3, r2
 8000368:	b25a      	sxtb	r2, r3
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	0019      	movs	r1, r3
 8000374:	2066      	movs	r0, #102	; 0x66
 8000376:	f000 fbc2 	bl	8000afe <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 800037a:	1dbb      	adds	r3, r7, #6
 800037c:	1dba      	adds	r2, r7, #6
 800037e:	7812      	ldrb	r2, [r2, #0]
 8000380:	211f      	movs	r1, #31
 8000382:	400a      	ands	r2, r1
 8000384:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 8000386:	2067      	movs	r0, #103	; 0x67
 8000388:	f000 fba2 	bl	8000ad0 <Cmt2300_ReadReg>
 800038c:	0003      	movs	r3, r0
 800038e:	001a      	movs	r2, r3
 8000390:	231f      	movs	r3, #31
 8000392:	439a      	bics	r2, r3
 8000394:	0013      	movs	r3, r2
 8000396:	b25a      	sxtb	r2, r3
 8000398:	1dbb      	adds	r3, r7, #6
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b25b      	sxtb	r3, r3
 800039e:	4313      	orrs	r3, r2
 80003a0:	b25a      	sxtb	r2, r3
 80003a2:	1dbb      	adds	r3, r7, #6
 80003a4:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 80003a6:	1dbb      	adds	r3, r7, #6
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	0019      	movs	r1, r3
 80003ac:	2067      	movs	r0, #103	; 0x67
 80003ae:	f000 fba6 	bl	8000afe <Cmt2300_WriteReg>
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b002      	add	sp, #8
 80003b8:	bd80      	pop	{r7, pc}

080003ba <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 80003ba:	b5b0      	push	{r4, r5, r7, lr}
 80003bc:	b084      	sub	sp, #16
 80003be:	af00      	add	r7, sp, #0
 80003c0:	0002      	movs	r2, r0
 80003c2:	1dfb      	adds	r3, r7, #7
 80003c4:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 80003c6:	250f      	movs	r5, #15
 80003c8:	197c      	adds	r4, r7, r5
 80003ca:	2066      	movs	r0, #102	; 0x66
 80003cc:	f000 fb80 	bl	8000ad0 <Cmt2300_ReadReg>
 80003d0:	0003      	movs	r3, r0
 80003d2:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 80003d4:	1dfb      	adds	r3, r7, #7
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d10d      	bne.n	80003f8 <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 80003dc:	197b      	adds	r3, r7, r5
 80003de:	197a      	adds	r2, r7, r5
 80003e0:	7812      	ldrb	r2, [r2, #0]
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	4249      	negs	r1, r1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 80003ea:	197b      	adds	r3, r7, r5
 80003ec:	197a      	adds	r2, r7, r5
 80003ee:	7812      	ldrb	r2, [r2, #0]
 80003f0:	2140      	movs	r1, #64	; 0x40
 80003f2:	438a      	bics	r2, r1
 80003f4:	701a      	strb	r2, [r3, #0]
 80003f6:	e010      	b.n	800041a <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d10c      	bne.n	800041a <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 8000400:	200f      	movs	r0, #15
 8000402:	183b      	adds	r3, r7, r0
 8000404:	183a      	adds	r2, r7, r0
 8000406:	7812      	ldrb	r2, [r2, #0]
 8000408:	217f      	movs	r1, #127	; 0x7f
 800040a:	400a      	ands	r2, r1
 800040c:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 800040e:	183b      	adds	r3, r7, r0
 8000410:	183a      	adds	r2, r7, r0
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	2140      	movs	r1, #64	; 0x40
 8000416:	430a      	orrs	r2, r1
 8000418:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 800041a:	230f      	movs	r3, #15
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	0019      	movs	r1, r3
 8000422:	2066      	movs	r0, #102	; 0x66
 8000424:	f000 fb6b 	bl	8000afe <Cmt2300_WriteReg>
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b004      	add	sp, #16
 800042e:	bdb0      	pop	{r4, r5, r7, pc}

08000430 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	0002      	movs	r2, r0
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	0019      	movs	r1, r3
 8000442:	2068      	movs	r0, #104	; 0x68
 8000444:	f000 fb5b 	bl	8000afe <Cmt2300_WriteReg>
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 8000450:	b5b0      	push	{r4, r5, r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	0002      	movs	r2, r0
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 800045c:	250f      	movs	r5, #15
 800045e:	197c      	adds	r4, r7, r5
 8000460:	2069      	movs	r0, #105	; 0x69
 8000462:	f000 fb35 	bl	8000ad0 <Cmt2300_ReadReg>
 8000466:	0003      	movs	r3, r0
 8000468:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d006      	beq.n	8000480 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 8000472:	197b      	adds	r3, r7, r5
 8000474:	197a      	adds	r2, r7, r5
 8000476:	7812      	ldrb	r2, [r2, #0]
 8000478:	2102      	movs	r1, #2
 800047a:	430a      	orrs	r2, r1
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e006      	b.n	800048e <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 8000480:	220f      	movs	r2, #15
 8000482:	18bb      	adds	r3, r7, r2
 8000484:	18ba      	adds	r2, r7, r2
 8000486:	7812      	ldrb	r2, [r2, #0]
 8000488:	2102      	movs	r1, #2
 800048a:	438a      	bics	r2, r1
 800048c:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 800048e:	230f      	movs	r3, #15
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	0019      	movs	r1, r3
 8000496:	2069      	movs	r0, #105	; 0x69
 8000498:	f000 fb31 	bl	8000afe <Cmt2300_WriteReg>
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b004      	add	sp, #16
 80004a2:	bdb0      	pop	{r4, r5, r7, pc}

080004a4 <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 80004aa:	1d7b      	adds	r3, r7, #5
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 80004b6:	1cfb      	adds	r3, r7, #3
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 80004bc:	1cbc      	adds	r4, r7, #2
 80004be:	2066      	movs	r0, #102	; 0x66
 80004c0:	f000 fb06 	bl	8000ad0 <Cmt2300_ReadReg>
 80004c4:	0003      	movs	r3, r0
 80004c6:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 80004c8:	1cbb      	adds	r3, r7, #2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	115b      	asrs	r3, r3, #5
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	1cbb      	adds	r3, r7, #2
 80004d2:	2101      	movs	r1, #1
 80004d4:	400a      	ands	r2, r1
 80004d6:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 80004d8:	1dfc      	adds	r4, r7, #7
 80004da:	206d      	movs	r0, #109	; 0x6d
 80004dc:	f000 faf8 	bl	8000ad0 <Cmt2300_ReadReg>
 80004e0:	0003      	movs	r3, r0
 80004e2:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 80004e4:	1dbc      	adds	r4, r7, #6
 80004e6:	206a      	movs	r0, #106	; 0x6a
 80004e8:	f000 faf2 	bl	8000ad0 <Cmt2300_ReadReg>
 80004ec:	0003      	movs	r3, r0
 80004ee:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 80004f0:	1cbb      	adds	r3, r7, #2
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d009      	beq.n	800050c <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	1dfa      	adds	r2, r7, #7
 80004fc:	7812      	ldrb	r2, [r2, #0]
 80004fe:	43d2      	mvns	r2, r2
 8000500:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 8000502:	1dbb      	adds	r3, r7, #6
 8000504:	1dba      	adds	r2, r7, #6
 8000506:	7812      	ldrb	r2, [r2, #0]
 8000508:	43d2      	mvns	r2, r2
 800050a:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b25b      	sxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	da05      	bge.n	8000522 <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	1d3a      	adds	r2, r7, #4
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	2120      	movs	r1, #32
 800051e:	430a      	orrs	r2, r1
 8000520:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2240      	movs	r2, #64	; 0x40
 8000528:	4013      	ands	r3, r2
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d005      	beq.n	800053c <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	1d3a      	adds	r2, r7, #4
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	2101      	movs	r1, #1
 8000538:	430a      	orrs	r2, r1
 800053a:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2220      	movs	r2, #32
 8000542:	4013      	ands	r3, r2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	1d3a      	adds	r2, r7, #4
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	2101      	movs	r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2210      	movs	r2, #16
 800055c:	4013      	ands	r3, r2
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	1d3a      	adds	r2, r7, #4
 8000568:	7812      	ldrb	r2, [r2, #0]
 800056a:	2110      	movs	r1, #16
 800056c:	430a      	orrs	r2, r1
 800056e:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 8000570:	1cfb      	adds	r3, r7, #3
 8000572:	1cfa      	adds	r2, r7, #3
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	2110      	movs	r1, #16
 8000578:	430a      	orrs	r2, r1
 800057a:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2208      	movs	r2, #8
 8000582:	4013      	ands	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00b      	beq.n	80005a2 <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	1d3a      	adds	r2, r7, #4
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	2108      	movs	r1, #8
 8000592:	430a      	orrs	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 8000596:	1cfb      	adds	r3, r7, #3
 8000598:	1cfa      	adds	r2, r7, #3
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	2108      	movs	r1, #8
 800059e:	430a      	orrs	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2204      	movs	r2, #4
 80005a8:	4013      	ands	r3, r2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	2104      	movs	r1, #4
 80005b8:	430a      	orrs	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 80005bc:	1cfb      	adds	r3, r7, #3
 80005be:	1cfa      	adds	r2, r7, #3
 80005c0:	7812      	ldrb	r2, [r2, #0]
 80005c2:	2104      	movs	r1, #4
 80005c4:	430a      	orrs	r2, r1
 80005c6:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 80005c8:	1dfb      	adds	r3, r7, #7
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2202      	movs	r2, #2
 80005ce:	4013      	ands	r3, r2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00b      	beq.n	80005ee <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	1d3a      	adds	r2, r7, #4
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	2102      	movs	r1, #2
 80005de:	430a      	orrs	r2, r1
 80005e0:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 80005e2:	1cfb      	adds	r3, r7, #3
 80005e4:	1cfa      	adds	r2, r7, #3
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	2102      	movs	r1, #2
 80005ea:	430a      	orrs	r2, r1
 80005ec:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d00b      	beq.n	8000614 <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	1d3a      	adds	r2, r7, #4
 8000600:	7812      	ldrb	r2, [r2, #0]
 8000602:	2101      	movs	r1, #1
 8000604:	430a      	orrs	r2, r1
 8000606:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 8000608:	1cfb      	adds	r3, r7, #3
 800060a:	1cfa      	adds	r2, r7, #3
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	2101      	movs	r1, #1
 8000610:	430a      	orrs	r2, r1
 8000612:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 8000614:	1dbb      	adds	r3, r7, #6
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2220      	movs	r2, #32
 800061a:	4013      	ands	r3, r2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00c      	beq.n	800063c <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 8000622:	1d7b      	adds	r3, r7, #5
 8000624:	1d7a      	adds	r2, r7, #5
 8000626:	7812      	ldrb	r2, [r2, #0]
 8000628:	2102      	movs	r1, #2
 800062a:	430a      	orrs	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 800062e:	1cfb      	adds	r3, r7, #3
 8000630:	1cfa      	adds	r2, r7, #3
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	4249      	negs	r1, r1
 8000638:	430a      	orrs	r2, r1
 800063a:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2210      	movs	r2, #16
 8000642:	4013      	ands	r3, r2
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00b      	beq.n	8000662 <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 800064a:	1d7b      	adds	r3, r7, #5
 800064c:	1d7a      	adds	r2, r7, #5
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 8000656:	1cfb      	adds	r3, r7, #3
 8000658:	1cfa      	adds	r2, r7, #3
 800065a:	7812      	ldrb	r2, [r2, #0]
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	430a      	orrs	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 8000662:	1dbb      	adds	r3, r7, #6
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2208      	movs	r2, #8
 8000668:	4013      	ands	r3, r2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00b      	beq.n	8000688 <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 8000670:	1d7b      	adds	r3, r7, #5
 8000672:	1d7a      	adds	r2, r7, #5
 8000674:	7812      	ldrb	r2, [r2, #0]
 8000676:	2104      	movs	r1, #4
 8000678:	430a      	orrs	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 800067c:	1cfb      	adds	r3, r7, #3
 800067e:	1cfa      	adds	r2, r7, #3
 8000680:	7812      	ldrb	r2, [r2, #0]
 8000682:	2120      	movs	r1, #32
 8000684:	430a      	orrs	r2, r1
 8000686:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 8000688:	1d7b      	adds	r3, r7, #5
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	0019      	movs	r1, r3
 800068e:	206a      	movs	r0, #106	; 0x6a
 8000690:	f000 fa35 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	0019      	movs	r1, r3
 800069a:	206b      	movs	r0, #107	; 0x6b
 800069c:	f000 fa2f 	bl	8000afe <Cmt2300_WriteReg>

    if (nIntPolar)
 80006a0:	1cbb      	adds	r3, r7, #2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d004      	beq.n	80006b2 <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 80006a8:	1cfb      	adds	r3, r7, #3
 80006aa:	1cfa      	adds	r2, r7, #3
 80006ac:	7812      	ldrb	r2, [r2, #0]
 80006ae:	43d2      	mvns	r2, r2
 80006b0:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 80006b2:	1cfb      	adds	r3, r7, #3
 80006b4:	781b      	ldrb	r3, [r3, #0]
}
 80006b6:	0018      	movs	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b003      	add	sp, #12
 80006bc:	bd90      	pop	{r4, r7, pc}
	...

080006c0 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	0002      	movs	r2, r0
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 80006cc:	2004      	movs	r0, #4
 80006ce:	f000 f9ff 	bl	8000ad0 <Cmt2300_ReadReg>
 80006d2:	0003      	movs	r3, r0
 80006d4:	0019      	movs	r1, r3
 80006d6:	240f      	movs	r4, #15
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	220f      	movs	r2, #15
 80006dc:	400a      	ands	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	0013      	movs	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	189b      	adds	r3, r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	4a4d      	ldr	r2, [pc, #308]	; (8000824 <Cmt2300_ConfigDataRate+0x164>)
 80006ee:	189b      	adds	r3, r3, r2
 80006f0:	2218      	movs	r2, #24
 80006f2:	0019      	movs	r1, r3
 80006f4:	2020      	movs	r0, #32
 80006f6:	f000 f9b3 	bl	8000a60 <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781a      	ldrb	r2, [r3, #0]
 80006fe:	494a      	ldr	r1, [pc, #296]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 8000700:	0013      	movs	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	189b      	adds	r3, r3, r2
 8000706:	5c5b      	ldrb	r3, [r3, r1]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	220f      	movs	r2, #15
 800070c:	4393      	bics	r3, r2
 800070e:	b25a      	sxtb	r2, r3
 8000710:	193b      	adds	r3, r7, r4
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b25b      	sxtb	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	0019      	movs	r1, r3
 800071e:	2004      	movs	r0, #4
 8000720:	f000 f9ed 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	493f      	ldr	r1, [pc, #252]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 800072a:	0013      	movs	r3, r2
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	189b      	adds	r3, r3, r2
 8000730:	18cb      	adds	r3, r1, r3
 8000732:	3301      	adds	r3, #1
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	0019      	movs	r1, r3
 8000738:	2055      	movs	r0, #85	; 0x55
 800073a:	f000 f9e0 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	4939      	ldr	r1, [pc, #228]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 8000744:	0013      	movs	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	189b      	adds	r3, r3, r2
 800074a:	18cb      	adds	r3, r1, r3
 800074c:	3302      	adds	r3, #2
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	0019      	movs	r1, r3
 8000752:	2056      	movs	r0, #86	; 0x56
 8000754:	f000 f9d3 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	4932      	ldr	r1, [pc, #200]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 800075e:	0013      	movs	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	189b      	adds	r3, r3, r2
 8000764:	18cb      	adds	r3, r1, r3
 8000766:	3303      	adds	r3, #3
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	0019      	movs	r1, r3
 800076c:	2057      	movs	r0, #87	; 0x57
 800076e:	f000 f9c6 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	492c      	ldr	r1, [pc, #176]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 8000778:	0013      	movs	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	189b      	adds	r3, r3, r2
 800077e:	18cb      	adds	r3, r1, r3
 8000780:	3304      	adds	r3, #4
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	2058      	movs	r0, #88	; 0x58
 8000788:	f000 f9b9 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	4925      	ldr	r1, [pc, #148]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 8000792:	0013      	movs	r3, r2
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	189b      	adds	r3, r3, r2
 8000798:	18cb      	adds	r3, r1, r3
 800079a:	3305      	adds	r3, #5
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0019      	movs	r1, r3
 80007a0:	2059      	movs	r0, #89	; 0x59
 80007a2:	f000 f9ac 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	491f      	ldr	r1, [pc, #124]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 80007ac:	0013      	movs	r3, r2
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	189b      	adds	r3, r3, r2
 80007b2:	18cb      	adds	r3, r1, r3
 80007b4:	3306      	adds	r3, #6
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	0019      	movs	r1, r3
 80007ba:	205a      	movs	r0, #90	; 0x5a
 80007bc:	f000 f99f 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4918      	ldr	r1, [pc, #96]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 80007c6:	0013      	movs	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	189b      	adds	r3, r3, r2
 80007cc:	18cb      	adds	r3, r1, r3
 80007ce:	3307      	adds	r3, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0019      	movs	r1, r3
 80007d4:	205b      	movs	r0, #91	; 0x5b
 80007d6:	f000 f992 	bl	8000afe <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 80007da:	205e      	movs	r0, #94	; 0x5e
 80007dc:	f000 f978 	bl	8000ad0 <Cmt2300_ReadReg>
 80007e0:	0003      	movs	r3, r0
 80007e2:	0019      	movs	r1, r3
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	223f      	movs	r2, #63	; 0x3f
 80007e8:	400a      	ands	r2, r1
 80007ea:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	490d      	ldr	r1, [pc, #52]	; (8000828 <Cmt2300_ConfigDataRate+0x168>)
 80007f2:	0013      	movs	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	189b      	adds	r3, r3, r2
 80007f8:	18cb      	adds	r3, r1, r3
 80007fa:	3308      	adds	r3, #8
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	223f      	movs	r2, #63	; 0x3f
 8000802:	4393      	bics	r3, r2
 8000804:	b25a      	sxtb	r2, r3
 8000806:	193b      	adds	r3, r7, r4
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b25b      	sxtb	r3, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	0019      	movs	r1, r3
 8000814:	205e      	movs	r0, #94	; 0x5e
 8000816:	f000 f972 	bl	8000afe <Cmt2300_WriteReg>
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b005      	add	sp, #20
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	08004a00 	.word	0x08004a00
 8000828:	08004ac0 	.word	0x08004ac0

0800082c <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 8000838:	2038      	movs	r0, #56	; 0x38
 800083a:	f000 f949 	bl	8000ad0 <Cmt2300_ReadReg>
 800083e:	0003      	movs	r3, r0
 8000840:	0019      	movs	r1, r3
 8000842:	200f      	movs	r0, #15
 8000844:	183b      	adds	r3, r7, r0
 8000846:	2203      	movs	r2, #3
 8000848:	4391      	bics	r1, r2
 800084a:	000a      	movs	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 800084e:	183a      	adds	r2, r7, r0
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	7812      	ldrb	r2, [r2, #0]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4313      	orrs	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	0019      	movs	r1, r3
 800085c:	2038      	movs	r0, #56	; 0x38
 800085e:	f000 f94e 	bl	8000afe <Cmt2300_WriteReg>
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	0002      	movs	r2, r0
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f929 	bl	8000ad0 <Cmt2300_ReadReg>
 800087e:	0003      	movs	r3, r0
 8000880:	0019      	movs	r1, r3
 8000882:	230f      	movs	r3, #15
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	2201      	movs	r2, #1
 8000888:	4391      	bics	r1, r2
 800088a:	000a      	movs	r2, r1
 800088c:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b07      	cmp	r3, #7
 8000894:	d902      	bls.n	800089c <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	2207      	movs	r2, #7
 800089a:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <Cmt2300_ConfigTxPower+0xcc>)
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	2201      	movs	r2, #1
 80008aa:	4013      	ands	r3, r2
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	240f      	movs	r4, #15
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	0019      	movs	r1, r3
 80008be:	2003      	movs	r0, #3
 80008c0:	f000 f91d 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <Cmt2300_ConfigTxPower+0xcc>)
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	18d3      	adds	r3, r2, r3
 80008ce:	3301      	adds	r3, #1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0019      	movs	r1, r3
 80008d4:	205c      	movs	r0, #92	; 0x5c
 80008d6:	f000 f912 	bl	8000afe <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <Cmt2300_ConfigTxPower+0xcc>)
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	3302      	adds	r3, #2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	0019      	movs	r1, r3
 80008ea:	205d      	movs	r0, #93	; 0x5d
 80008ec:	f000 f907 	bl	8000afe <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 80008f0:	205e      	movs	r0, #94	; 0x5e
 80008f2:	f000 f8ed 	bl	8000ad0 <Cmt2300_ReadReg>
 80008f6:	0003      	movs	r3, r0
 80008f8:	0019      	movs	r1, r3
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	223f      	movs	r2, #63	; 0x3f
 80008fe:	4391      	bics	r1, r2
 8000900:	000a      	movs	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <Cmt2300_ConfigTxPower+0xcc>)
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	18d3      	adds	r3, r2, r3
 800090e:	3303      	adds	r3, #3
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b25b      	sxtb	r3, r3
 8000914:	223f      	movs	r2, #63	; 0x3f
 8000916:	4013      	ands	r3, r2
 8000918:	b25a      	sxtb	r2, r3
 800091a:	193b      	adds	r3, r7, r4
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b25b      	sxtb	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	0019      	movs	r1, r3
 8000928:	205e      	movs	r0, #94	; 0x5e
 800092a:	f000 f8e8 	bl	8000afe <Cmt2300_WriteReg>
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b005      	add	sp, #20
 8000934:	bd90      	pop	{r4, r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	08004b08 	.word	0x08004b08

0800093c <Cmt2300_IsExist>:
* @name    Cmt2300_IsExist
* @desc    Chip indentify.
* @return  true: chip is exist, false: chip not found
* *********************************************************/
bool Cmt2300_IsExist(void)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
    uint8_t back, dat;

    back = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000942:	1dfc      	adds	r4, r7, #7
 8000944:	2048      	movs	r0, #72	; 0x48
 8000946:	f000 f8c3 	bl	8000ad0 <Cmt2300_ReadReg>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, 0xAA);
 800094e:	21aa      	movs	r1, #170	; 0xaa
 8000950:	2048      	movs	r0, #72	; 0x48
 8000952:	f000 f8d4 	bl	8000afe <Cmt2300_WriteReg>

    // system_delay_us(5*20);

    dat = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000956:	1dbc      	adds	r4, r7, #6
 8000958:	2048      	movs	r0, #72	; 0x48
 800095a:	f000 f8b9 	bl	8000ad0 <Cmt2300_ReadReg>
 800095e:	0003      	movs	r3, r0
 8000960:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, back);
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0019      	movs	r1, r3
 8000968:	2048      	movs	r0, #72	; 0x48
 800096a:	f000 f8c8 	bl	8000afe <Cmt2300_WriteReg>

    if (0xAA == dat)
 800096e:	1dbb      	adds	r3, r7, #6
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2baa      	cmp	r3, #170	; 0xaa
 8000974:	d101      	bne.n	800097a <Cmt2300_IsExist+0x3e>
        return true;
 8000976:	2301      	movs	r3, #1
 8000978:	e000      	b.n	800097c <Cmt2300_IsExist+0x40>

    return false;
 800097a:	2300      	movs	r3, #0
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b003      	add	sp, #12
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	0002      	movs	r2, r0
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000990:	250f      	movs	r5, #15
 8000992:	197c      	adds	r4, r7, r5
 8000994:	200d      	movs	r0, #13
 8000996:	f000 f89b 	bl	8000ad0 <Cmt2300_ReadReg>
 800099a:	0003      	movs	r3, r0
 800099c:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d013      	beq.n	80009ce <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 80009a6:	197b      	adds	r3, r7, r5
 80009a8:	197a      	adds	r2, r7, r5
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	4249      	negs	r1, r1
 80009b0:	430a      	orrs	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 80009b4:	197b      	adds	r3, r7, r5
 80009b6:	197a      	adds	r2, r7, r5
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	430a      	orrs	r2, r1
 80009be:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 80009c0:	197b      	adds	r3, r7, r5
 80009c2:	197a      	adds	r2, r7, r5
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	2120      	movs	r1, #32
 80009c8:	430a      	orrs	r2, r1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e012      	b.n	80009f4 <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 80009ce:	200f      	movs	r0, #15
 80009d0:	183b      	adds	r3, r7, r0
 80009d2:	183a      	adds	r2, r7, r0
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	217f      	movs	r1, #127	; 0x7f
 80009d8:	400a      	ands	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	183a      	adds	r2, r7, r0
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	438a      	bics	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 80009e8:	183b      	adds	r3, r7, r0
 80009ea:	183a      	adds	r2, r7, r0
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	2120      	movs	r1, #32
 80009f0:	438a      	bics	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 80009f4:	230f      	movs	r3, #15
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	0019      	movs	r1, r3
 80009fc:	200d      	movs	r0, #13
 80009fe:	f000 f87e 	bl	8000afe <Cmt2300_WriteReg>
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}

08000a0a <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000a0a:	b590      	push	{r4, r7, lr}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000a10:	f7ff fc06 	bl	8000220 <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f000 fa73 	bl	8000f00 <Delay_Ms>
   
    Cmt2300_GoStby();
 8000a1a:	f7ff fc6c 	bl	80002f6 <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000a1e:	1dfc      	adds	r4, r7, #7
 8000a20:	2061      	movs	r0, #97	; 0x61
 8000a22:	f000 f855 	bl	8000ad0 <Cmt2300_ReadReg>
 8000a26:	0003      	movs	r3, r0
 8000a28:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	1dfa      	adds	r2, r7, #7
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	2110      	movs	r1, #16
 8000a32:	430a      	orrs	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	1dfa      	adds	r2, r7, #7
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	438a      	bics	r2, r1
 8000a40:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0019      	movs	r1, r3
 8000a48:	2061      	movs	r0, #97	; 0x61
 8000a4a:	f000 f858 	bl	8000afe <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff ff98 	bl	8000984 <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000a54:	f7ff fd26 	bl	80004a4 <Cmt2300_ClearInterruptFlags>
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b003      	add	sp, #12
 8000a5e:	bd90      	pop	{r4, r7, pc}

08000a60 <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6039      	str	r1, [r7, #0]
 8000a68:	0011      	movs	r1, r2
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	1c02      	adds	r2, r0, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	1c0a      	adds	r2, r1, #0
 8000a74:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000a76:	230f      	movs	r3, #15
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e014      	b.n	8000aaa <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000a80:	210f      	movs	r1, #15
 8000a82:	187a      	adds	r2, r7, r1
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	18d3      	adds	r3, r2, r3
 8000a8c:	b2d8      	uxtb	r0, r3
 8000a8e:	000c      	movs	r4, r1
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	18d3      	adds	r3, r2, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	f000 f82f 	bl	8000afe <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	3201      	adds	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	230f      	movs	r3, #15
 8000aac:	18fa      	adds	r2, r7, r3
 8000aae:	1dbb      	adds	r3, r7, #6
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d3e3      	bcc.n	8000a80 <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	0018      	movs	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b005      	add	sp, #20
 8000ac0:	bd90      	pop	{r4, r7, pc}

08000ac2 <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000ac6:	f000 f83f 	bl	8000b48 <cmt_spi3_init>
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000adc:	240f      	movs	r4, #15
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000ae4:	193a      	adds	r2, r7, r4
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 f93d 	bl	8000d6c <cmt_spi3_read>

    return dat;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	781b      	ldrb	r3, [r3, #0]
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b005      	add	sp, #20
 8000afc:	bd90      	pop	{r4, r7, pc}

08000afe <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	0002      	movs	r2, r0
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	1dbb      	adds	r3, r7, #6
 8000b0c:	1c0a      	adds	r2, r1, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	0011      	movs	r1, r2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f8b2 	bl	8000c84 <cmt_spi3_write>
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	607b      	str	r3, [r7, #4]
    while (n--)
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	1e5a      	subs	r2, r3, #1
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1fa      	bne.n	8000b34 <cmt_spi3_delay+0xc>
        ;
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <cmt_spi3_init>:
    while (n--)
        ;
}

void cmt_spi3_init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000b4c:	f000 f9fc 	bl	8000f48 <spi_gpio_init>
    cmt_spi3_sda_in();
 8000b50:	f000 fa32 	bl	8000fb8 <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000b54:	f7ff ffe8 	bl	8000b28 <cmt_spi3_delay>
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	0002      	movs	r2, r0
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e034      	b.n	8000bde <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	0119      	lsls	r1, r3, #4
 8000b78:	2390      	movs	r3, #144	; 0x90
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fc73 	bl	800246a <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da08      	bge.n	8000ba0 <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	0059      	lsls	r1, r3, #1
 8000b92:	2390      	movs	r3, #144	; 0x90
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	2201      	movs	r2, #1
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 fc66 	bl	800246a <HAL_GPIO_WritePin>
 8000b9e:	e007      	b.n	8000bb0 <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	0059      	lsls	r1, r3, #1
 8000ba4:	2390      	movs	r3, #144	; 0x90
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	2200      	movs	r2, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 fc5d 	bl	800246a <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8000bb0:	f7ff ffba 	bl	8000b28 <cmt_spi3_delay>

        data8 <<= 1;
 8000bb4:	1dfa      	adds	r2, r7, #7
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	18db      	adds	r3, r3, r3
 8000bbc:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	0119      	lsls	r1, r3, #4
 8000bc2:	2390      	movs	r3, #144	; 0x90
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 fc4e 	bl	800246a <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000bce:	f7ff ffab 	bl	8000b28 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	3201      	adds	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	230f      	movs	r3, #15
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d9c5      	bls.n	8000b74 <cmt_spi3_send+0x16>
    }
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b004      	add	sp, #16
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 8000bf8:	1dbb      	adds	r3, r7, #6
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	e034      	b.n	8000c70 <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	0119      	lsls	r1, r3, #4
 8000c0a:	2390      	movs	r3, #144	; 0x90
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	2200      	movs	r2, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fc2a 	bl	800246a <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000c16:	f7ff ff87 	bl	8000b28 <cmt_spi3_delay>
        data8 <<= 1;
 8000c1a:	1dba      	adds	r2, r7, #6
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	18db      	adds	r3, r3, r3
 8000c22:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	0119      	lsls	r1, r3, #4
 8000c28:	2390      	movs	r3, #144	; 0x90
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 fc1b 	bl	800246a <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	005a      	lsls	r2, r3, #1
 8000c38:	2390      	movs	r3, #144	; 0x90
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 fbf6 	bl	8002430 <HAL_GPIO_ReadPin>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d006      	beq.n	8000c56 <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 8000c48:	1dbb      	adds	r3, r7, #6
 8000c4a:	1dba      	adds	r2, r7, #6
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	2101      	movs	r1, #1
 8000c50:	430a      	orrs	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e005      	b.n	8000c62 <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 8000c56:	1dbb      	adds	r3, r7, #6
 8000c58:	1dba      	adds	r2, r7, #6
 8000c5a:	7812      	ldrb	r2, [r2, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	438a      	bics	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 8000c62:	f7ff ff61 	bl	8000b28 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	3201      	adds	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	d9c6      	bls.n	8000c06 <cmt_spi3_recv+0x14>
    }

    return data8;
 8000c78:	1dbb      	adds	r3, r7, #6
 8000c7a:	781b      	ldrb	r3, [r3, #0]
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	1dbb      	adds	r3, r7, #6
 8000c92:	1c0a      	adds	r2, r1, #0
 8000c94:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8000c96:	f000 f95d 	bl	8000f54 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	0059      	lsls	r1, r3, #1
 8000c9e:	2390      	movs	r3, #144	; 0x90
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f001 fbe0 	bl	800246a <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	0119      	lsls	r1, r3, #4
 8000cae:	2390      	movs	r3, #144	; 0x90
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 fbd8 	bl	800246a <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	0119      	lsls	r1, r3, #4
 8000cbe:	2390      	movs	r3, #144	; 0x90
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 fbd0 	bl	800246a <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	01db      	lsls	r3, r3, #7
 8000cce:	4826      	ldr	r0, [pc, #152]	; (8000d68 <cmt_spi3_write+0xe4>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	f001 fbc9 	bl	800246a <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	01db      	lsls	r3, r3, #7
 8000cdc:	4822      	ldr	r0, [pc, #136]	; (8000d68 <cmt_spi3_write+0xe4>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	f001 fbc2 	bl	800246a <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	481f      	ldr	r0, [pc, #124]	; (8000d68 <cmt_spi3_write+0xe4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	0019      	movs	r1, r3
 8000cf0:	f001 fbbb 	bl	800246a <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000cf4:	f7ff ff18 	bl	8000b28 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000cf8:	f7ff ff16 	bl	8000b28 <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	227f      	movs	r2, #127	; 0x7f
 8000d02:	4013      	ands	r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff ff29 	bl	8000b5e <cmt_spi3_send>

    cmt_spi3_send(dat);
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ff24 	bl	8000b5e <cmt_spi3_send>

    cmt_spi3_scl_0();
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	0119      	lsls	r1, r3, #4
 8000d1a:	2390      	movs	r3, #144	; 0x90
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	2200      	movs	r2, #0
 8000d20:	0018      	movs	r0, r3
 8000d22:	f001 fba2 	bl	800246a <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000d26:	f7ff feff 	bl	8000b28 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000d2a:	f7ff fefd 	bl	8000b28 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <cmt_spi3_write+0xe4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	0019      	movs	r1, r3
 8000d38:	f001 fb97 	bl	800246a <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	0059      	lsls	r1, r3, #1
 8000d40:	2390      	movs	r3, #144	; 0x90
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2201      	movs	r2, #1
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 fb8f 	bl	800246a <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8000d4c:	f000 f934 	bl	8000fb8 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	01db      	lsls	r3, r3, #7
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <cmt_spi3_write+0xe4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	0019      	movs	r1, r3
 8000d5a:	f001 fb86 	bl	800246a <HAL_GPIO_WritePin>
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	48000400 	.word	0x48000400

08000d6c <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8000d7a:	f000 f8eb 	bl	8000f54 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	0059      	lsls	r1, r3, #1
 8000d82:	2390      	movs	r3, #144	; 0x90
 8000d84:	05db      	lsls	r3, r3, #23
 8000d86:	2201      	movs	r2, #1
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f001 fb6e 	bl	800246a <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	0119      	lsls	r1, r3, #4
 8000d92:	2390      	movs	r3, #144	; 0x90
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	2200      	movs	r2, #0
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f001 fb66 	bl	800246a <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	0119      	lsls	r1, r3, #4
 8000da2:	2390      	movs	r3, #144	; 0x90
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	2200      	movs	r2, #0
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 fb5e 	bl	800246a <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	01db      	lsls	r3, r3, #7
 8000db2:	4828      	ldr	r0, [pc, #160]	; (8000e54 <cmt_spi3_read+0xe8>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	0019      	movs	r1, r3
 8000db8:	f001 fb57 	bl	800246a <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	01db      	lsls	r3, r3, #7
 8000dc0:	4824      	ldr	r0, [pc, #144]	; (8000e54 <cmt_spi3_read+0xe8>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	f001 fb50 	bl	800246a <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	4821      	ldr	r0, [pc, #132]	; (8000e54 <cmt_spi3_read+0xe8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	f001 fb49 	bl	800246a <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000dd8:	f7ff fea6 	bl	8000b28 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000ddc:	f7ff fea4 	bl	8000b28 <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	4252      	negs	r2, r2
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff feb6 	bl	8000b5e <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 8000df2:	f000 f8e1 	bl	8000fb8 <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 8000df6:	f7ff fefc 	bl	8000bf2 <cmt_spi3_recv>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	0119      	lsls	r1, r3, #4
 8000e06:	2390      	movs	r3, #144	; 0x90
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 fb2c 	bl	800246a <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000e12:	f7ff fe89 	bl	8000b28 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000e16:	f7ff fe87 	bl	8000b28 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <cmt_spi3_read+0xe8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	0019      	movs	r1, r3
 8000e24:	f001 fb21 	bl	800246a <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	0059      	lsls	r1, r3, #1
 8000e2c:	2390      	movs	r3, #144	; 0x90
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	2201      	movs	r2, #1
 8000e32:	0018      	movs	r0, r3
 8000e34:	f001 fb19 	bl	800246a <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8000e38:	f000 f8be 	bl	8000fb8 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	01db      	lsls	r3, r3, #7
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <cmt_spi3_read+0xe8>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	0019      	movs	r1, r3
 8000e46:	f001 fb10 	bl	800246a <HAL_GPIO_WritePin>
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	48000400 	.word	0x48000400

08000e58 <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 8000e5c:	f7ff fe31 	bl	8000ac2 <Cmt2300_InitGpio>
    Cmt2300_Init();
 8000e60:	f7ff fdd3 	bl	8000a0a <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <RF_Init+0x60>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	0019      	movs	r1, r3
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fdf8 	bl	8000a60 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <RF_Init+0x64>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	0019      	movs	r1, r3
 8000e76:	200c      	movs	r0, #12
 8000e78:	f7ff fdf2 	bl	8000a60 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <RF_Init+0x68>)
 8000e7e:	2208      	movs	r2, #8
 8000e80:	0019      	movs	r1, r3
 8000e82:	2018      	movs	r0, #24
 8000e84:	f7ff fdec 	bl	8000a60 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <RF_Init+0x6c>)
 8000e8a:	2218      	movs	r2, #24
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	2020      	movs	r0, #32
 8000e90:	f7ff fde6 	bl	8000a60 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <RF_Init+0x70>)
 8000e96:	221d      	movs	r2, #29
 8000e98:	0019      	movs	r1, r3
 8000e9a:	2038      	movs	r0, #56	; 0x38
 8000e9c:	f7ff fde0 	bl	8000a60 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <RF_Init+0x74>)
 8000ea2:	220b      	movs	r2, #11
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	2055      	movs	r0, #85	; 0x55
 8000ea8:	f7ff fdda 	bl	8000a60 <Cmt2300_ConfigRegBank>

    RF_Config();
 8000eac:	f000 f810 	bl	8000ed0 <RF_Config>
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	08004b28 	.word	0x08004b28
 8000ebc:	08004b34 	.word	0x08004b34
 8000ec0:	08004b40 	.word	0x08004b40
 8000ec4:	08004b48 	.word	0x08004b48
 8000ec8:	08004b60 	.word	0x08004b60
 8000ecc:	08004b80 	.word	0x08004b80

08000ed0 <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff fa70 	bl	80003ba <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 8000eda:	2020      	movs	r0, #32
 8000edc:	f7ff fa18 	bl	8000310 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f7ff fa24 	bl	8000330 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 8000ee8:	203f      	movs	r0, #63	; 0x3f
 8000eea:	f7ff faa1 	bl	8000430 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff fd48 	bl	8000984 <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 8000ef4:	f7ff f9f2 	bl	80002dc <Cmt2300_GoSleep>
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e00c      	b.n	8000f30 <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	e002      	b.n	8000f22 <Delay_Ms+0x22>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <Delay_Ms+0x44>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d9f8      	bls.n	8000f1c <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3ee      	bcc.n	8000f16 <Delay_Ms+0x16>
  }
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	000011bb 	.word	0x000011bb

08000f48 <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	2314      	movs	r3, #20
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f003 fd37 	bl	80049d6 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <cmt_spi3_sda_out+0x60>)
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <cmt_spi3_sda_out+0x60>)
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	0289      	lsls	r1, r1, #10
 8000f72:	430a      	orrs	r2, r1
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <cmt_spi3_sda_out+0x60>)
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	029b      	lsls	r3, r3, #10
 8000f7e:	4013      	ands	r3, r2
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	0052      	lsls	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2201      	movs	r2, #1
 8000f90:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	2390      	movs	r3, #144	; 0x90
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 f802 	bl	8001fb0 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b006      	add	sp, #24
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2314      	movs	r3, #20
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f003 fd05 	bl	80049d6 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <cmt_spi3_sda_in+0x5c>)
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <cmt_spi3_sda_in+0x5c>)
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	0289      	lsls	r1, r1, #10
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <cmt_spi3_sda_in+0x5c>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	029b      	lsls	r3, r3, #10
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	0052      	lsls	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	1d3a      	adds	r2, r7, #4
 8000ffe:	2390      	movs	r3, #144	; 0x90
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f000 ffd3 	bl	8001fb0 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b006      	add	sp, #24
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_GPIO_EXTI_Callback>:
#endif
}

#ifdef USE_CUBEIDE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	0002      	movs	r2, r0
 8001020:	1dbb      	adds	r3, r7, #6
 8001022:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	429a      	cmp	r2, r3
 800102e:	d102      	bne.n	8001036 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		cmt2300_irq_request = 1;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GPIO_EXTI_Callback+0x28>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
	}
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20000038 	.word	0x20000038

08001044 <HAL_TIM_PeriodElapsedCallback>:
 * 
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim16.Instance)
    //	{
    //		time100ms_flag = 1;
    //		timer100InterruptHandler();
    //	}
    if (htim->Instance == htim17.Instance) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d103      	bne.n	8001060 <HAL_TIM_PeriodElapsedCallback+0x1c>
        uartTimerIrqHandler(htim);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0018      	movs	r0, r3
 800105c:	f000 f964 	bl	8001328 <uartTimerIrqHandler>
    }
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000164 	.word	0x20000164

0800106c <HAL_SysTick_Handler>:
 * 
 * @param None
 * @retval None
 */
void HAL_SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_SysTick_Handler+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_SysTick_Handler+0x14>)
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000003c 	.word	0x2000003c

08001084 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	609a      	str	r2, [r3, #8]
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <uartInitRxFifo>:
 * 
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	0002      	movs	r2, r0
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	011a      	lsls	r2, r3, #4
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <uartInitRxFifo+0x34>)
 80010b8:	18d0      	adds	r0, r2, r3
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	021a      	lsls	r2, r3, #8
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <uartInitRxFifo+0x38>)
 80010c2:	18d3      	adds	r3, r2, r3
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	0052      	lsls	r2, r2, #1
 80010c8:	0019      	movs	r1, r3
 80010ca:	f003 fbe9 	bl	80048a0 <kfifo_init>
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	20000144 	.word	0x20000144
 80010dc:	20000044 	.word	0x20000044

080010e0 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	1dbb      	adds	r3, r7, #6
 80010ec:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80010ee:	2517      	movs	r5, #23
 80010f0:	197b      	adds	r3, r7, r5
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 80010f6:	197c      	adds	r4, r7, r5
 80010f8:	1dbb      	adds	r3, r7, #6
 80010fa:	881a      	ldrh	r2, [r3, #0]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	0018      	movs	r0, r3
 8001102:	f002 fa31 	bl	8003568 <HAL_UART_Receive_IT>
 8001106:	0003      	movs	r3, r0
 8001108:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800110a:	197b      	adds	r3, r7, r5
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	2120      	movs	r1, #32
 8001118:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2278      	movs	r2, #120	; 0x78
 800111e:	2100      	movs	r1, #0
 8001120:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8001122:	2317      	movs	r3, #23
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b006      	add	sp, #24
 800112e:	bdb0      	pop	{r4, r5, r7, pc}

08001130 <uartInit>:
 * 
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	0002      	movs	r2, r0
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ffaf 	bl	80010a4 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <uartInit+0x60>)
 800114c:	0052      	lsls	r2, r2, #1
 800114e:	2100      	movs	r1, #0
 8001150:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <uartInit+0x64>)
 8001158:	0052      	lsls	r2, r2, #1
 800115a:	2100      	movs	r1, #0
 800115c:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <uartInit+0x68>)
 8001160:	2200      	movs	r2, #0
 8001162:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <uartInit+0x6c>)
 8001166:	2200      	movs	r2, #0
 8001168:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <uartInit+0x70>)
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	18d3      	adds	r3, r2, r3
 8001174:	3304      	adds	r3, #4
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <uartInit+0x74>)
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	2201      	movs	r2, #1
 8001182:	0019      	movs	r1, r3
 8001184:	f7ff ffac 	bl	80010e0 <UART_Receive_IT>
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000154 	.word	0x20000154
 8001194:	20000158 	.word	0x20000158
 8001198:	2000015c 	.word	0x2000015c
 800119c:	20000160 	.word	0x20000160
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000040 	.word	0x20000040

080011a8 <uartRecovery>:
 * 
 * @param channel 
 * @retval None
 */
static void uartRecovery(uartChannel_t channel)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	0002      	movs	r2, r0
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4a08      	ldr	r2, [pc, #32]	; (80011dc <uartRecovery+0x34>)
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	3304      	adds	r3, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0018      	movs	r0, r3
 80011c4:	f002 f992 	bl	80034ec <HAL_UART_DeInit>
    uartInit(channel);
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff ffaf 	bl	8001130 <uartInit>
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	20000000 	.word	0x20000000

080011e0 <HAL_UART_TxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e015      	b.n	800121e <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 80011f2:	210f      	movs	r1, #15
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_UART_TxCpltCallback+0x54>)
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	58d2      	ldr	r2, [r2, r3]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d105      	bne.n	8001212 <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 8001206:	187b      	adds	r3, r7, r1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_UART_TxCpltCallback+0x58>)
 800120c:	2102      	movs	r1, #2
 800120e:	54d1      	strb	r1, [r2, r3]
            break;
 8001210:	e00b      	b.n	800122a <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001212:	210f      	movs	r1, #15
 8001214:	187b      	adds	r3, r7, r1
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	187b      	adds	r3, r7, r1
 800121a:	3201      	adds	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0e4      	beq.n	80011f2 <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	20000000 	.word	0x20000000
 8001238:	2000015c 	.word	0x2000015c

0800123c <HAL_UART_RxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001244:	230f      	movs	r3, #15
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e059      	b.n	8001302 <HAL_UART_RxCpltCallback+0xc6>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 800124e:	240f      	movs	r4, #15
 8001250:	193b      	adds	r3, r7, r4
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_UART_RxCpltCallback+0xd8>)
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	58d2      	ldr	r2, [r2, r3]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d149      	bne.n	80012f6 <HAL_UART_RxCpltCallback+0xba>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 8001262:	193b      	adds	r3, r7, r4
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4a2c      	ldr	r2, [pc, #176]	; (8001318 <HAL_UART_RxCpltCallback+0xdc>)
 8001268:	2103      	movs	r1, #3
 800126a:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 800126c:	193b      	adds	r3, r7, r4
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4a28      	ldr	r2, [pc, #160]	; (8001314 <HAL_UART_RxCpltCallback+0xd8>)
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	18d3      	adds	r3, r2, r3
 8001276:	3308      	adds	r3, #8
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4a24      	ldr	r2, [pc, #144]	; (8001314 <HAL_UART_RxCpltCallback+0xd8>)
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	18d3      	adds	r3, r2, r3
 8001288:	3308      	adds	r3, #8
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001290:	193b      	adds	r3, r7, r4
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_UART_RxCpltCallback+0xd8>)
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	18d3      	adds	r3, r2, r3
 800129a:	330c      	adds	r3, #12
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	f001 fe9a 	bl	8002fd8 <HAL_TIM_Base_Start_IT>
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	011a      	lsls	r2, r3, #4
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_UART_RxCpltCallback+0xe0>)
 80012ac:	18d0      	adds	r0, r2, r3
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_UART_RxCpltCallback+0xe4>)
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	2201      	movs	r2, #1
 80012b8:	0019      	movs	r1, r3
 80012ba:	f003 fb38 	bl	800492e <kfifo_in>
            uart_rx_counter[i]++;
 80012be:	0020      	movs	r0, r4
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_UART_RxCpltCallback+0xe8>)
 80012c6:	0059      	lsls	r1, r3, #1
 80012c8:	5a8a      	ldrh	r2, [r1, r2]
 80012ca:	3201      	adds	r2, #1
 80012cc:	b291      	uxth	r1, r2
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <HAL_UART_RxCpltCallback+0xe8>)
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 80012d4:	0001      	movs	r1, r0
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_UART_RxCpltCallback+0xd8>)
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	18d3      	adds	r3, r2, r3
 80012e0:	3304      	adds	r3, #4
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_UART_RxCpltCallback+0xe4>)
 80012ea:	18d3      	adds	r3, r2, r3
 80012ec:	2201      	movs	r2, #1
 80012ee:	0019      	movs	r1, r3
 80012f0:	f7ff fef6 	bl	80010e0 <UART_Receive_IT>
            return;
 80012f4:	e00a      	b.n	800130c <HAL_UART_RxCpltCallback+0xd0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80012f6:	210f      	movs	r1, #15
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	3201      	adds	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	230f      	movs	r3, #15
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0a0      	beq.n	800124e <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 800130c:	46bd      	mov	sp, r7
 800130e:	b005      	add	sp, #20
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	20000000 	.word	0x20000000
 8001318:	20000160 	.word	0x20000160
 800131c:	20000144 	.word	0x20000144
 8001320:	20000040 	.word	0x20000040
 8001324:	20000154 	.word	0x20000154

08001328 <uartTimerIrqHandler>:
 * 
 * @param htim 
 * @retval None
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e05d      	b.n	80013f6 <uartTimerIrqHandler+0xce>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 800133a:	210f      	movs	r1, #15
 800133c:	187b      	adds	r3, r7, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4a32      	ldr	r2, [pc, #200]	; (800140c <uartTimerIrqHandler+0xe4>)
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	3308      	adds	r3, #8
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d14b      	bne.n	80013ea <uartTimerIrqHandler+0xc2>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 8001352:	000c      	movs	r4, r1
 8001354:	187b      	adds	r3, r7, r1
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4a2c      	ldr	r2, [pc, #176]	; (800140c <uartTimerIrqHandler+0xe4>)
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	18d3      	adds	r3, r2, r3
 800135e:	330c      	adds	r3, #12
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	f001 fe84 	bl	8003070 <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8001368:	0020      	movs	r0, r4
 800136a:	183b      	adds	r3, r7, r0
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4a28      	ldr	r2, [pc, #160]	; (8001410 <uartTimerIrqHandler+0xe8>)
 8001370:	2104      	movs	r1, #4
 8001372:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8001374:	183b      	adds	r3, r7, r0
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <uartTimerIrqHandler+0xec>)
 800137a:	0052      	lsls	r2, r2, #1
 800137c:	5ad1      	ldrh	r1, [r2, r3]
 800137e:	183b      	adds	r3, r7, r0
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <uartTimerIrqHandler+0xf0>)
 8001384:	0052      	lsls	r2, r2, #1
 8001386:	5ad3      	ldrh	r3, [r2, r3]
 8001388:	183a      	adds	r2, r7, r0
 800138a:	7812      	ldrb	r2, [r2, #0]
 800138c:	18cb      	adds	r3, r1, r3
 800138e:	b299      	uxth	r1, r3
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <uartTimerIrqHandler+0xec>)
 8001392:	0052      	lsls	r2, r2, #1
 8001394:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 8001396:	183b      	adds	r3, r7, r0
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <uartTimerIrqHandler+0xec>)
 800139c:	0052      	lsls	r2, r2, #1
 800139e:	5ad2      	ldrh	r2, [r2, r3]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d918      	bls.n	80013da <uartTimerIrqHandler+0xb2>
            {
            	uart_rx_size[i] = uart_rx_counter[i];
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	7819      	ldrb	r1, [r3, #0]
 80013ac:	183b      	adds	r3, r7, r0
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <uartTimerIrqHandler+0xf0>)
 80013b2:	0049      	lsls	r1, r1, #1
 80013b4:	5ac9      	ldrh	r1, [r1, r3]
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <uartTimerIrqHandler+0xec>)
 80013b8:	0052      	lsls	r2, r2, #1
 80013ba:	52d1      	strh	r1, [r2, r3]
            	kfifo_reset(&uart_rx_fifo[i]);
 80013bc:	0004      	movs	r4, r0
 80013be:	183b      	adds	r3, r7, r0
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	011a      	lsls	r2, r3, #4
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <uartTimerIrqHandler+0xf4>)
 80013c6:	18d3      	adds	r3, r2, r3
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff fe5b 	bl	8001084 <kfifo_reset>
            	uart_rx_size[i] = 0;
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <uartTimerIrqHandler+0xec>)
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	2100      	movs	r1, #0
 80013d8:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 80013da:	230f      	movs	r3, #15
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <uartTimerIrqHandler+0xf0>)
 80013e2:	0052      	lsls	r2, r2, #1
 80013e4:	2100      	movs	r1, #0
 80013e6:	52d1      	strh	r1, [r2, r3]
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 80013e8:	e00b      	b.n	8001402 <uartTimerIrqHandler+0xda>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 80013ea:	210f      	movs	r1, #15
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	3201      	adds	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	230f      	movs	r3, #15
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d09c      	beq.n	800133a <uartTimerIrqHandler+0x12>
        }
    }
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b005      	add	sp, #20
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	20000000 	.word	0x20000000
 8001410:	20000160 	.word	0x20000160
 8001414:	20000158 	.word	0x20000158
 8001418:	20000154 	.word	0x20000154
 800141c:	20000144 	.word	0x20000144

08001420 <HAL_UART_ErrorCallback>:
 * 
 * @param huart
 * @retval None 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001428:	230f      	movs	r3, #15
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e014      	b.n	800145c <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 8001432:	210f      	movs	r1, #15
 8001434:	187b      	adds	r3, r7, r1
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_UART_ErrorCallback+0x50>)
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	58d2      	ldr	r2, [r2, r3]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d104      	bne.n	8001450 <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 8001446:	187b      	adds	r3, r7, r1
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff feac 	bl	80011a8 <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001450:	210f      	movs	r1, #15
 8001452:	187b      	adds	r3, r7, r1
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	187b      	adds	r3, r7, r1
 8001458:	3201      	adds	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	230f      	movs	r3, #15
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0e5      	beq.n	8001432 <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0c2      	sub	sp, #264	; 0x108
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buffer[256] = { 0 };
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <main+0x8c>)
 800147c:	2284      	movs	r2, #132	; 0x84
 800147e:	0052      	lsls	r2, r2, #1
 8001480:	189b      	adds	r3, r3, r2
 8001482:	19db      	adds	r3, r3, r7
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	3304      	adds	r3, #4
 800148a:	22fc      	movs	r2, #252	; 0xfc
 800148c:	2100      	movs	r1, #0
 800148e:	0018      	movs	r0, r3
 8001490:	f003 faa1 	bl	80049d6 <memset>
  uint32_t bufferSize = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	1d7a      	adds	r2, r7, #5
 8001498:	32ff      	adds	r2, #255	; 0xff
 800149a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 fb96 	bl	8001bcc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 f832 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f000 f918 	bl	80016d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014a8:	f000 f8b6 	bl	8001618 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014ac:	f000 f8e4 	bl	8001678 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80014b0:	f000 f88a 	bl	80015c8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  uartInit(BSP_TTL_CHANNEL1);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fe3b 	bl	8001130 <uartInit>
  RF_Init();
 80014ba:	f7ff fccd 	bl	8000e58 <RF_Init>
  /* check rf is inited ok */
  if (Cmt2300_IsExist())
 80014be:	f7ff fa3d 	bl	800093c <Cmt2300_IsExist>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d006      	beq.n	80014d4 <main+0x60>
  {
	  led1On();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <main+0x90>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	2110      	movs	r1, #16
 80014cc:	0018      	movs	r0, r3
 80014ce:	f000 ffcc 	bl	800246a <HAL_GPIO_WritePin>
 80014d2:	e005      	b.n	80014e0 <main+0x6c>
  }
  else
  {
	  led2On();
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <main+0x90>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	2120      	movs	r1, #32
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 ffc5 	bl	800246a <HAL_GPIO_WritePin>
  }

  /* level7: 20dbm */
  Cmt2300_ConfigTxPower(7);
 80014e0:	2007      	movs	r0, #7
 80014e2:	f7ff f9c3 	bl	800086c <Cmt2300_ConfigTxPower>
  /* rate:1.2kbps */
  Cmt2300_ConfigDataRate(rf_rate_1K2);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff f8ea 	bl	80006c0 <Cmt2300_ConfigDataRate>
  /* packet type */
  Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7fe fed6 	bl	800029e <Cmt2300_ConfigPktLenthType>
  /* packet mode */
  Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 80014f2:	2002      	movs	r0, #2
 80014f4:	f7ff f99a 	bl	800082c <Cmt2300_ConfigDataMode>
  /* enable fifo */
  Cmt2300_EnableFifoMerge(true);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7fe ffa9 	bl	8000450 <Cmt2300_EnableFifoMerge>
//  messageQueueTest();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <main+0x8a>
 8001500:	fffffefc 	.word	0xfffffefc
 8001504:	48000400 	.word	0x48000400

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b095      	sub	sp, #84	; 0x54
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	2420      	movs	r4, #32
 8001510:	193b      	adds	r3, r7, r4
 8001512:	0018      	movs	r0, r3
 8001514:	2330      	movs	r3, #48	; 0x30
 8001516:	001a      	movs	r2, r3
 8001518:	2100      	movs	r1, #0
 800151a:	f003 fa5c 	bl	80049d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151e:	2310      	movs	r3, #16
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	0018      	movs	r0, r3
 8001524:	2310      	movs	r3, #16
 8001526:	001a      	movs	r2, r3
 8001528:	2100      	movs	r1, #0
 800152a:	f003 fa54 	bl	80049d6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152e:	003b      	movs	r3, r7
 8001530:	0018      	movs	r0, r3
 8001532:	2310      	movs	r3, #16
 8001534:	001a      	movs	r2, r3
 8001536:	2100      	movs	r1, #0
 8001538:	f003 fa4d 	bl	80049d6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	0021      	movs	r1, r4
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2201      	movs	r2, #1
 8001548:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2202      	movs	r2, #2
 800154e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	0252      	lsls	r2, r2, #9
 8001556:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	02d2      	lsls	r2, r2, #11
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2200      	movs	r2, #0
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001566:	187b      	adds	r3, r7, r1
 8001568:	0018      	movs	r0, r3
 800156a:	f000 ffb7 	bl	80024dc <HAL_RCC_OscConfig>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001572:	f000 f99f 	bl	80018b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	2110      	movs	r1, #16
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2207      	movs	r2, #7
 800157c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2202      	movs	r2, #2
 8001582:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2101      	movs	r1, #1
 8001594:	0018      	movs	r0, r3
 8001596:	f001 fabb 	bl	8002b10 <HAL_RCC_ClockConfig>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800159e:	f000 f989 	bl	80018b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015a2:	003b      	movs	r3, r7
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015a8:	003b      	movs	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ae:	003b      	movs	r3, r7
 80015b0:	0018      	movs	r0, r3
 80015b2:	f001 fbf3 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80015ba:	f000 f97b 	bl	80018b4 <Error_Handler>
  }
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b015      	add	sp, #84	; 0x54
 80015c4:	bd90      	pop	{r4, r7, pc}
	...

080015c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_TIM17_Init+0x44>)
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <MX_TIM17_Init+0x48>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_TIM17_Init+0x44>)
 80015d4:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <MX_TIM17_Init+0x4c>)
 80015d6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_TIM17_Init+0x44>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_TIM17_Init+0x44>)
 80015e0:	2223      	movs	r2, #35	; 0x23
 80015e2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_TIM17_Init+0x44>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_TIM17_Init+0x44>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_TIM17_Init+0x44>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <MX_TIM17_Init+0x44>)
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 fc9d 	bl	8002f38 <HAL_TIM_Base_Init>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001602:	f000 f957 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000164 	.word	0x20000164
 8001610:	40014800 	.word	0x40014800
 8001614:	000012bf 	.word	0x000012bf

08001618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <MX_USART1_UART_Init+0x5c>)
 8001620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001624:	22e1      	movs	r2, #225	; 0xe1
 8001626:	0252      	lsls	r2, r2, #9
 8001628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800165c:	0018      	movs	r0, r3
 800165e:	f001 fef1 	bl	8003444 <HAL_UART_Init>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d001      	beq.n	800166a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001666:	f000 f925 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200001ac 	.word	0x200001ac
 8001674:	40013800 	.word	0x40013800

08001678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <MX_USART2_UART_Init+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001684:	22e1      	movs	r2, #225	; 0xe1
 8001686:	0252      	lsls	r2, r2, #9
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016bc:	0018      	movs	r0, r3
 80016be:	f001 fec1 	bl	8003444 <HAL_UART_Init>
 80016c2:	1e03      	subs	r3, r0, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f000 f8f5 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000234 	.word	0x20000234
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	240c      	movs	r4, #12
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	0018      	movs	r0, r3
 80016e4:	2314      	movs	r3, #20
 80016e6:	001a      	movs	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	f003 f974 	bl	80049d6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ee:	4b6e      	ldr	r3, [pc, #440]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	03c9      	lsls	r1, r1, #15
 80016f8:	430a      	orrs	r2, r1
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	03db      	lsls	r3, r3, #15
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0289      	lsls	r1, r1, #10
 8001714:	430a      	orrs	r2, r1
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	029b      	lsls	r3, r3, #10
 8001720:	4013      	ands	r3, r2
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	02c9      	lsls	r1, r1, #11
 8001730:	430a      	orrs	r2, r1
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	02db      	lsls	r3, r3, #11
 800173c:	4013      	ands	r3, r2
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 8001742:	2381      	movs	r3, #129	; 0x81
 8001744:	0119      	lsls	r1, r3, #4
 8001746:	2390      	movs	r3, #144	; 0x90
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	2200      	movs	r2, #0
 800174c:	0018      	movs	r0, r3
 800174e:	f000 fe8c 	bl	800246a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 8001752:	4956      	ldr	r1, [pc, #344]	; (80018ac <MX_GPIO_Init+0x1d4>)
 8001754:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <MX_GPIO_Init+0x1d8>)
 8001756:	2200      	movs	r2, #0
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fe86 	bl	800246a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2210      	movs	r2, #16
 8001762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	193b      	adds	r3, r7, r4
 8001766:	2201      	movs	r2, #1
 8001768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2201      	movs	r2, #1
 8001774:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8001776:	193a      	adds	r2, r7, r4
 8001778:	2390      	movs	r3, #144	; 0x90
 800177a:	05db      	lsls	r3, r3, #23
 800177c:	0011      	movs	r1, r2
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fc16 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 8001784:	0021      	movs	r1, r4
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	0152      	lsls	r2, r2, #5
 800178c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178e:	000c      	movs	r4, r1
 8001790:	193b      	adds	r3, r7, r4
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	193b      	adds	r3, r7, r4
 8001798:	2201      	movs	r2, #1
 800179a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 800179c:	193b      	adds	r3, r7, r4
 800179e:	4a44      	ldr	r2, [pc, #272]	; (80018b0 <MX_GPIO_Init+0x1d8>)
 80017a0:	0019      	movs	r1, r3
 80017a2:	0010      	movs	r0, r2
 80017a4:	f000 fc04 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 80017a8:	0021      	movs	r1, r4
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0192      	lsls	r2, r2, #6
 80017b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2288      	movs	r2, #136	; 0x88
 80017b6:	0352      	lsls	r2, r2, #13
 80017b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	2201      	movs	r2, #1
 80017be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 80017c0:	000c      	movs	r4, r1
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	4a3a      	ldr	r2, [pc, #232]	; (80018b0 <MX_GPIO_Init+0x1d8>)
 80017c6:	0019      	movs	r1, r3
 80017c8:	0010      	movs	r0, r2
 80017ca:	f000 fbf1 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 80017ce:	0021      	movs	r1, r4
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	22c0      	movs	r2, #192	; 0xc0
 80017d4:	0212      	lsls	r2, r2, #8
 80017d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	000c      	movs	r4, r1
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	2201      	movs	r2, #1
 80017de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	2203      	movs	r2, #3
 80017ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	4a30      	ldr	r2, [pc, #192]	; (80018b0 <MX_GPIO_Init+0x1d8>)
 80017f0:	0019      	movs	r1, r3
 80017f2:	0010      	movs	r0, r2
 80017f4:	f000 fbdc 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	193b      	adds	r3, r7, r4
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 800180c:	193a      	adds	r2, r7, r4
 800180e:	2390      	movs	r3, #144	; 0x90
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f000 fbcb 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 800181a:	0021      	movs	r1, r4
 800181c:	187b      	adds	r3, r7, r1
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	000c      	movs	r4, r1
 8001826:	193b      	adds	r3, r7, r4
 8001828:	2201      	movs	r2, #1
 800182a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	193b      	adds	r3, r7, r4
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	193b      	adds	r3, r7, r4
 8001834:	2203      	movs	r2, #3
 8001836:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 8001838:	193a      	adds	r2, r7, r4
 800183a:	2390      	movs	r3, #144	; 0x90
 800183c:	05db      	lsls	r3, r3, #23
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f000 fbb5 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	0152      	lsls	r2, r2, #5
 800184c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2288      	movs	r2, #136	; 0x88
 8001852:	0352      	lsls	r2, r2, #13
 8001854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2201      	movs	r2, #1
 800185a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 800185c:	193a      	adds	r2, r7, r4
 800185e:	2390      	movs	r3, #144	; 0x90
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f000 fba3 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 800186a:	0021      	movs	r1, r4
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2230      	movs	r2, #48	; 0x30
 8001870:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2201      	movs	r2, #1
 8001876:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2201      	movs	r2, #1
 8001882:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	187b      	adds	r3, r7, r1
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <MX_GPIO_Init+0x1d8>)
 8001888:	0019      	movs	r1, r3
 800188a:	0010      	movs	r0, r2
 800188c:	f000 fb90 	bl	8001fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	2007      	movs	r0, #7
 8001896:	f000 facb 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800189a:	2007      	movs	r0, #7
 800189c:	f000 fadd 	bl	8001e5a <HAL_NVIC_EnableIRQ>

}
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b009      	add	sp, #36	; 0x24
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	0000c030 	.word	0x0000c030
 80018b0:	48000400 	.word	0x48000400

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_MspInit+0x44>)
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_MspInit+0x44>)
 80018cc:	2101      	movs	r1, #1
 80018ce:	430a      	orrs	r2, r1
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_MspInit+0x44>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2201      	movs	r2, #1
 80018d8:	4013      	ands	r3, r2
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_MspInit+0x44>)
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_MspInit+0x44>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0549      	lsls	r1, r1, #21
 80018e8:	430a      	orrs	r2, r1
 80018ea:	61da      	str	r2, [r3, #28]
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_MspInit+0x44>)
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	055b      	lsls	r3, r3, #21
 80018f4:	4013      	ands	r3, r2
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_TIM_Base_MspInit+0x48>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d115      	bne.n	8001946 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_TIM_Base_MspInit+0x4c>)
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_TIM_Base_MspInit+0x4c>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	02c9      	lsls	r1, r1, #11
 8001924:	430a      	orrs	r2, r1
 8001926:	619a      	str	r2, [r3, #24]
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_TIM_Base_MspInit+0x4c>)
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	02db      	lsls	r3, r3, #11
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2016      	movs	r0, #22
 800193c:	f000 fa78 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001940:	2016      	movs	r0, #22
 8001942:	f000 fa8a 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b004      	add	sp, #16
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40014800 	.word	0x40014800
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b08d      	sub	sp, #52	; 0x34
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	241c      	movs	r4, #28
 8001962:	193b      	adds	r3, r7, r4
 8001964:	0018      	movs	r0, r3
 8001966:	2314      	movs	r3, #20
 8001968:	001a      	movs	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	f003 f833 	bl	80049d6 <memset>
  if(huart->Instance==USART1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <HAL_UART_MspInit+0x114>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d13c      	bne.n	80019f4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_UART_MspInit+0x118>)
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <HAL_UART_MspInit+0x118>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	01c9      	lsls	r1, r1, #7
 8001984:	430a      	orrs	r2, r1
 8001986:	619a      	str	r2, [r3, #24]
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_UART_MspInit+0x118>)
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_UART_MspInit+0x118>)
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_UART_MspInit+0x118>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0289      	lsls	r1, r1, #10
 80019a0:	430a      	orrs	r2, r1
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_UART_MspInit+0x118>)
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	4013      	ands	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	22c0      	movs	r2, #192	; 0xc0
 80019b6:	00d2      	lsls	r2, r2, #3
 80019b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	0021      	movs	r1, r4
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2202      	movs	r2, #2
 80019c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	2203      	movs	r2, #3
 80019cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	2201      	movs	r2, #1
 80019d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	187a      	adds	r2, r7, r1
 80019d6:	2390      	movs	r3, #144	; 0x90
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 fae7 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2101      	movs	r1, #1
 80019e6:	201b      	movs	r0, #27
 80019e8:	f000 fa22 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ec:	201b      	movs	r0, #27
 80019ee:	f000 fa34 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f2:	e037      	b.n	8001a64 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_UART_MspInit+0x11c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d132      	bne.n	8001a64 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_UART_MspInit+0x118>)
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_UART_MspInit+0x118>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	0289      	lsls	r1, r1, #10
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0x118>)
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0x118>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0x118>)
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	0289      	lsls	r1, r1, #10
 8001a24:	430a      	orrs	r2, r1
 8001a26:	615a      	str	r2, [r3, #20]
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x118>)
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	029b      	lsls	r3, r3, #10
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a36:	211c      	movs	r1, #28
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	2202      	movs	r2, #2
 8001a42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2201      	movs	r2, #1
 8001a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	187a      	adds	r2, r7, r1
 8001a58:	2390      	movs	r3, #144	; 0x90
 8001a5a:	05db      	lsls	r3, r3, #23
 8001a5c:	0011      	movs	r1, r2
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 faa6 	bl	8001fb0 <HAL_GPIO_Init>
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b00d      	add	sp, #52	; 0x34
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40004400 	.word	0x40004400

08001a78 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <HAL_UART_MspDeInit+0x60>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d111      	bne.n	8001aae <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_UART_MspDeInit+0x64>)
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_UART_MspDeInit+0x64>)
 8001a90:	4913      	ldr	r1, [pc, #76]	; (8001ae0 <HAL_UART_MspDeInit+0x68>)
 8001a92:	400a      	ands	r2, r1
 8001a94:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001a96:	23c0      	movs	r3, #192	; 0xc0
 8001a98:	00da      	lsls	r2, r3, #3
 8001a9a:	2390      	movs	r3, #144	; 0x90
 8001a9c:	05db      	lsls	r3, r3, #23
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 fbf5 	bl	8002290 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001aa6:	201b      	movs	r0, #27
 8001aa8:	f000 f9e7 	bl	8001e7a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001aac:	e010      	b.n	8001ad0 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_UART_MspDeInit+0x6c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_UART_MspDeInit+0x64>)
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <HAL_UART_MspDeInit+0x64>)
 8001abe:	490a      	ldr	r1, [pc, #40]	; (8001ae8 <HAL_UART_MspDeInit+0x70>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001ac4:	2390      	movs	r3, #144	; 0x90
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	210c      	movs	r1, #12
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fbe0 	bl	8002290 <HAL_GPIO_DeInit>
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	ffffbfff 	.word	0xffffbfff
 8001ae4:	40004400 	.word	0x40004400
 8001ae8:	fffdffff 	.word	0xfffdffff

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f8a4 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 8001b14:	f7ff faaa 	bl	800106c <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	015b      	lsls	r3, r3, #5
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 fcbc 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	019b      	lsls	r3, r3, #6
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 fcb7 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <TIM17_IRQHandler+0x14>)
 8001b42:	0018      	movs	r0, r3
 8001b44:	f001 fac2 	bl	80030cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	20000164 	.word	0x20000164

08001b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <USART1_IRQHandler+0x14>)
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f001 fd5c 	bl	8003618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	200001ac 	.word	0x200001ac

08001b6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b7c:	f7ff fff6 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b82:	490d      	ldr	r1, [pc, #52]	; (8001bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <LoopForever+0xe>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b98:	4c0a      	ldr	r4, [pc, #40]	; (8001bc4 <LoopForever+0x16>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ba6:	f002 fee9 	bl	800497c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001baa:	f7ff fc63 	bl	8001474 <main>

08001bae <LoopForever>:

LoopForever:
    b LoopForever
 8001bae:	e7fe      	b.n	8001bae <LoopForever>
  ldr   r0, =_estack
 8001bb0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001bbc:	08004bcc 	.word	0x08004bcc
  ldr r2, =_sbss
 8001bc0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001bc4:	200002c0 	.word	0x200002c0

08001bc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC1_IRQHandler>
	...

08001bcc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_Init+0x24>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_Init+0x24>)
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f000 f809 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be2:	f7ff fe6d 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_InitTick+0x5c>)
 8001bfe:	681c      	ldr	r4, [r3, #0]
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_InitTick+0x60>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	0019      	movs	r1, r3
 8001c06:	23fa      	movs	r3, #250	; 0xfa
 8001c08:	0098      	lsls	r0, r3, #2
 8001c0a:	f7fe fa7d 	bl	8000108 <__udivsi3>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	0019      	movs	r1, r3
 8001c12:	0020      	movs	r0, r4
 8001c14:	f7fe fa78 	bl	8000108 <__udivsi3>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 f93d 	bl	8001e9a <HAL_SYSTICK_Config>
 8001c20:	1e03      	subs	r3, r0, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e00f      	b.n	8001c48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d80b      	bhi.n	8001c46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	2301      	movs	r3, #1
 8001c32:	425b      	negs	r3, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	0018      	movs	r0, r3
 8001c38:	f000 f8fa 	bl	8001e30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_InitTick+0x64>)
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b003      	add	sp, #12
 8001c4e:	bd90      	pop	{r4, r7, pc}
 8001c50:	20000010 	.word	0x20000010
 8001c54:	20000018 	.word	0x20000018
 8001c58:	20000014 	.word	0x20000014

08001c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_IncTick+0x1c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	001a      	movs	r2, r3
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_IncTick+0x20>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	18d2      	adds	r2, r2, r3
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_IncTick+0x20>)
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	20000018 	.word	0x20000018
 8001c7c:	200002bc 	.word	0x200002bc

08001c80 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <HAL_GetTick+0x10>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	200002bc 	.word	0x200002bc

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	1dfb      	adds	r3, r7, #7
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca6:	d809      	bhi.n	8001cbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	001a      	movs	r2, r3
 8001cae:	231f      	movs	r3, #31
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_EnableIRQ+0x30>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4091      	lsls	r1, r2
 8001cb8:	000a      	movs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
  }
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	0002      	movs	r2, r0
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cda:	d810      	bhi.n	8001cfe <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_DisableIRQ+0x40>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf2:	f3bf 8f4f 	dsb	sy
}
 8001cf6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001cf8:	f3bf 8f6f 	isb	sy
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	0002      	movs	r2, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d20:	d828      	bhi.n	8001d74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <__NVIC_SetPriority+0xd4>)
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	33c0      	adds	r3, #192	; 0xc0
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	589b      	ldr	r3, [r3, r2]
 8001d32:	1dfa      	adds	r2, r7, #7
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	0011      	movs	r1, r2
 8001d38:	2203      	movs	r2, #3
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	00d2      	lsls	r2, r2, #3
 8001d3e:	21ff      	movs	r1, #255	; 0xff
 8001d40:	4091      	lsls	r1, r2
 8001d42:	000a      	movs	r2, r1
 8001d44:	43d2      	mvns	r2, r2
 8001d46:	401a      	ands	r2, r3
 8001d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	22ff      	movs	r2, #255	; 0xff
 8001d50:	401a      	ands	r2, r3
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	0018      	movs	r0, r3
 8001d58:	2303      	movs	r3, #3
 8001d5a:	4003      	ands	r3, r0
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d60:	481f      	ldr	r0, [pc, #124]	; (8001de0 <__NVIC_SetPriority+0xd4>)
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	33c0      	adds	r3, #192	; 0xc0
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d72:	e031      	b.n	8001dd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <__NVIC_SetPriority+0xd8>)
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	400b      	ands	r3, r1
 8001d80:	3b08      	subs	r3, #8
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3306      	adds	r3, #6
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	18d3      	adds	r3, r2, r3
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1dfa      	adds	r2, r7, #7
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	0011      	movs	r1, r2
 8001d94:	2203      	movs	r2, #3
 8001d96:	400a      	ands	r2, r1
 8001d98:	00d2      	lsls	r2, r2, #3
 8001d9a:	21ff      	movs	r1, #255	; 0xff
 8001d9c:	4091      	lsls	r1, r2
 8001d9e:	000a      	movs	r2, r1
 8001da0:	43d2      	mvns	r2, r2
 8001da2:	401a      	ands	r2, r3
 8001da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	019b      	lsls	r3, r3, #6
 8001daa:	22ff      	movs	r2, #255	; 0xff
 8001dac:	401a      	ands	r2, r3
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	0018      	movs	r0, r3
 8001db4:	2303      	movs	r3, #3
 8001db6:	4003      	ands	r3, r0
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <__NVIC_SetPriority+0xd8>)
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	001c      	movs	r4, r3
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	4023      	ands	r3, r4
 8001dc8:	3b08      	subs	r3, #8
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	3306      	adds	r3, #6
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	18c3      	adds	r3, r0, r3
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b003      	add	sp, #12
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	1e5a      	subs	r2, r3, #1
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	045b      	lsls	r3, r3, #17
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d301      	bcc.n	8001e00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e010      	b.n	8001e22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <SysTick_Config+0x44>)
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	3a01      	subs	r2, #1
 8001e06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e08:	2301      	movs	r3, #1
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	2103      	movs	r1, #3
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff ff7c 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x44>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x44>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	1c02      	adds	r2, r0, #0
 8001e40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7ff ff5d 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	0002      	movs	r2, r0
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff ff11 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b002      	add	sp, #8
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	0002      	movs	r2, r0
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff ff1b 	bl	8001cc8 <__NVIC_DisableIRQ>
}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff ff9f 	bl	8001de8 <SysTick_Config>
 8001eaa:	0003      	movs	r3, r0
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2221      	movs	r2, #33	; 0x21
 8001ec0:	5c9b      	ldrb	r3, [r3, r2]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d008      	beq.n	8001eda <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e020      	b.n	8001f1c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	210e      	movs	r1, #14
 8001ee6:	438a      	bics	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2101      	movs	r1, #1
 8001f04:	4091      	lsls	r1, r2
 8001f06:	000a      	movs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2221      	movs	r2, #33	; 0x21
 8001f0e:	2101      	movs	r1, #1
 8001f10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2221      	movs	r2, #33	; 0x21
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d006      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2204      	movs	r2, #4
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e028      	b.n	8001fa0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	210e      	movs	r1, #14
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	438a      	bics	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2101      	movs	r1, #1
 8001f78:	4091      	lsls	r1, r2
 8001f7a:	000a      	movs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2221      	movs	r2, #33	; 0x21
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d004      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	4798      	blx	r3
    }
  }
  return status;
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e14f      	b.n	8002260 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4091      	lsls	r1, r2
 8001fca:	000a      	movs	r2, r1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d100      	bne.n	8001fd8 <HAL_GPIO_Init+0x28>
 8001fd6:	e140      	b.n	800225a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	0013      	movs	r3, r2
 8002000:	43da      	mvns	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	0013      	movs	r3, r2
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	2201      	movs	r2, #1
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
 8002044:	0013      	movs	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2203      	movs	r2, #3
 8002058:	4013      	ands	r3, r2
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	43da      	mvns	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	409a      	lsls	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2203      	movs	r2, #3
 8002094:	4013      	ands	r3, r2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	58d3      	ldr	r3, [r2, r3]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2207      	movs	r2, #7
 80020ac:	4013      	ands	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	409a      	lsls	r2, r3
 80020b4:	0013      	movs	r3, r2
 80020b6:	43da      	mvns	r2, r3
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2107      	movs	r1, #7
 80020c6:	400b      	ands	r3, r1
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	409a      	lsls	r2, r3
 80020cc:	0013      	movs	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	409a      	lsls	r2, r3
 80020f0:	0013      	movs	r3, r2
 80020f2:	43da      	mvns	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	401a      	ands	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	409a      	lsls	r2, r3
 8002108:	0013      	movs	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	4013      	ands	r3, r2
 8002120:	d100      	bne.n	8002124 <HAL_GPIO_Init+0x174>
 8002122:	e09a      	b.n	800225a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_GPIO_Init+0x2c8>)
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_GPIO_Init+0x2c8>)
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	619a      	str	r2, [r3, #24]
 8002130:	4b51      	ldr	r3, [pc, #324]	; (8002278 <HAL_GPIO_Init+0x2c8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2201      	movs	r2, #1
 8002136:	4013      	ands	r3, r2
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a4f      	ldr	r2, [pc, #316]	; (800227c <HAL_GPIO_Init+0x2cc>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	589b      	ldr	r3, [r3, r2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2203      	movs	r2, #3
 800214e:	4013      	ands	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	409a      	lsls	r2, r3
 8002156:	0013      	movs	r3, r2
 8002158:	43da      	mvns	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	2390      	movs	r3, #144	; 0x90
 8002164:	05db      	lsls	r3, r3, #23
 8002166:	429a      	cmp	r2, r3
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0x1e2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a44      	ldr	r2, [pc, #272]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00d      	beq.n	800218e <HAL_GPIO_Init+0x1de>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a43      	ldr	r2, [pc, #268]	; (8002284 <HAL_GPIO_Init+0x2d4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x1da>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a42      	ldr	r2, [pc, #264]	; (8002288 <HAL_GPIO_Init+0x2d8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_GPIO_Init+0x1d6>
 8002182:	2303      	movs	r3, #3
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x1e4>
 8002186:	2305      	movs	r3, #5
 8002188:	e004      	b.n	8002194 <HAL_GPIO_Init+0x1e4>
 800218a:	2302      	movs	r3, #2
 800218c:	e002      	b.n	8002194 <HAL_GPIO_Init+0x1e4>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_GPIO_Init+0x1e4>
 8002192:	2300      	movs	r3, #0
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	2103      	movs	r1, #3
 8002198:	400a      	ands	r2, r1
 800219a:	0092      	lsls	r2, r2, #2
 800219c:	4093      	lsls	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021a4:	4935      	ldr	r1, [pc, #212]	; (800227c <HAL_GPIO_Init+0x2cc>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <HAL_GPIO_Init+0x2dc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43da      	mvns	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	035b      	lsls	r3, r3, #13
 80021ca:	4013      	ands	r3, r2
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_GPIO_Init+0x2dc>)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_GPIO_Init+0x2dc>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	039b      	lsls	r3, r3, #14
 80021f4:	4013      	ands	r3, r2
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_GPIO_Init+0x2dc>)
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_GPIO_Init+0x2dc>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43da      	mvns	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	029b      	lsls	r3, r3, #10
 800221e:	4013      	ands	r3, r2
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_GPIO_Init+0x2dc>)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002230:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_GPIO_Init+0x2dc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43da      	mvns	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	025b      	lsls	r3, r3, #9
 8002248:	4013      	ands	r3, r2
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_GPIO_Init+0x2dc>)
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3301      	adds	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	40da      	lsrs	r2, r3
 8002268:	1e13      	subs	r3, r2, #0
 800226a:	d000      	beq.n	800226e <HAL_GPIO_Init+0x2be>
 800226c:	e6a8      	b.n	8001fc0 <HAL_GPIO_Init+0x10>
  } 
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b006      	add	sp, #24
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	40010000 	.word	0x40010000
 8002280:	48000400 	.word	0x48000400
 8002284:	48000800 	.word	0x48000800
 8002288:	48000c00 	.word	0x48000c00
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800229e:	e0b1      	b.n	8002404 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022a0:	2201      	movs	r2, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	409a      	lsls	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d100      	bne.n	80022b4 <HAL_GPIO_DeInit+0x24>
 80022b2:	e0a4      	b.n	80023fe <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80022b4:	4a59      	ldr	r2, [pc, #356]	; (800241c <HAL_GPIO_DeInit+0x18c>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	589b      	ldr	r3, [r3, r2]
 80022c0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2203      	movs	r2, #3
 80022c6:	4013      	ands	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	409a      	lsls	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	2390      	movs	r3, #144	; 0x90
 80022d8:	05db      	lsls	r3, r3, #23
 80022da:	429a      	cmp	r2, r3
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_DeInit+0x76>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4f      	ldr	r2, [pc, #316]	; (8002420 <HAL_GPIO_DeInit+0x190>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_DeInit+0x72>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <HAL_GPIO_DeInit+0x194>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_DeInit+0x6e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4d      	ldr	r2, [pc, #308]	; (8002428 <HAL_GPIO_DeInit+0x198>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_DeInit+0x6a>
 80022f6:	2303      	movs	r3, #3
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_DeInit+0x78>
 80022fa:	2305      	movs	r3, #5
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_DeInit+0x78>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_DeInit+0x78>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_DeInit+0x78>
 8002306:	2300      	movs	r3, #0
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	2103      	movs	r1, #3
 800230c:	400a      	ands	r2, r1
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d132      	bne.n	800237e <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002318:	4b44      	ldr	r3, [pc, #272]	; (800242c <HAL_GPIO_DeInit+0x19c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43d9      	mvns	r1, r3
 8002320:	4b42      	ldr	r3, [pc, #264]	; (800242c <HAL_GPIO_DeInit+0x19c>)
 8002322:	400a      	ands	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_GPIO_DeInit+0x19c>)
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43d9      	mvns	r1, r3
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_GPIO_DeInit+0x19c>)
 8002330:	400a      	ands	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002334:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_GPIO_DeInit+0x19c>)
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43d9      	mvns	r1, r3
 800233c:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_GPIO_DeInit+0x19c>)
 800233e:	400a      	ands	r2, r1
 8002340:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002342:	4b3a      	ldr	r3, [pc, #232]	; (800242c <HAL_GPIO_DeInit+0x19c>)
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43d9      	mvns	r1, r3
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_GPIO_DeInit+0x19c>)
 800234c:	400a      	ands	r2, r1
 800234e:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2203      	movs	r2, #3
 8002354:	4013      	ands	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002360:	4a2e      	ldr	r2, [pc, #184]	; (800241c <HAL_GPIO_DeInit+0x18c>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	589a      	ldr	r2, [r3, r2]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43d9      	mvns	r1, r3
 8002370:	482a      	ldr	r0, [pc, #168]	; (800241c <HAL_GPIO_DeInit+0x18c>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	400a      	ands	r2, r1
 8002378:	3302      	adds	r3, #2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	0052      	lsls	r2, r2, #1
 8002386:	2103      	movs	r1, #3
 8002388:	4091      	lsls	r1, r2
 800238a:	000a      	movs	r2, r1
 800238c:	43d2      	mvns	r2, r2
 800238e:	401a      	ands	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	58d3      	ldr	r3, [r2, r3]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	2107      	movs	r1, #7
 80023a4:	400a      	ands	r2, r1
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	210f      	movs	r1, #15
 80023aa:	4091      	lsls	r1, r2
 80023ac:	000a      	movs	r2, r1
 80023ae:	43d1      	mvns	r1, r2
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	08d2      	lsrs	r2, r2, #3
 80023b4:	4019      	ands	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3208      	adds	r2, #8
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	0052      	lsls	r2, r2, #1
 80023c6:	2103      	movs	r1, #3
 80023c8:	4091      	lsls	r1, r2
 80023ca:	000a      	movs	r2, r1
 80023cc:	43d2      	mvns	r2, r2
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2101      	movs	r1, #1
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4091      	lsls	r1, r2
 80023de:	000a      	movs	r2, r1
 80023e0:	43d2      	mvns	r2, r2
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	0052      	lsls	r2, r2, #1
 80023f0:	2103      	movs	r1, #3
 80023f2:	4091      	lsls	r1, r2
 80023f4:	000a      	movs	r2, r1
 80023f6:	43d2      	mvns	r2, r2
 80023f8:	401a      	ands	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	609a      	str	r2, [r3, #8]

    }

    position++;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	40da      	lsrs	r2, r3
 800240a:	1e13      	subs	r3, r2, #0
 800240c:	d000      	beq.n	8002410 <HAL_GPIO_DeInit+0x180>
 800240e:	e747      	b.n	80022a0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b006      	add	sp, #24
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	40010000 	.word	0x40010000
 8002420:	48000400 	.word	0x48000400
 8002424:	48000800 	.word	0x48000800
 8002428:	48000c00 	.word	0x48000c00
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	000a      	movs	r2, r1
 800243a:	1cbb      	adds	r3, r7, #2
 800243c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	1cba      	adds	r2, r7, #2
 8002444:	8812      	ldrh	r2, [r2, #0]
 8002446:	4013      	ands	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800244a:	230f      	movs	r3, #15
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e003      	b.n	800245c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002454:	230f      	movs	r3, #15
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800245c:	230f      	movs	r3, #15
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	781b      	ldrb	r3, [r3, #0]
  }
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	0008      	movs	r0, r1
 8002474:	0011      	movs	r1, r2
 8002476:	1cbb      	adds	r3, r7, #2
 8002478:	1c02      	adds	r2, r0, #0
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	1c7b      	adds	r3, r7, #1
 800247e:	1c0a      	adds	r2, r1, #0
 8002480:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002482:	1c7b      	adds	r3, r7, #1
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002492:	e003      	b.n	800249c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002494:	1cbb      	adds	r3, r7, #2
 8002496:	881a      	ldrh	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b002      	add	sp, #8
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	0002      	movs	r2, r0
 80024ac:	1dbb      	adds	r3, r7, #6
 80024ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	1dba      	adds	r2, r7, #6
 80024b6:	8812      	ldrh	r2, [r2, #0]
 80024b8:	4013      	ands	r3, r2
 80024ba:	d008      	beq.n	80024ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80024be:	1dba      	adds	r2, r7, #6
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c4:	1dbb      	adds	r3, r7, #6
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe fda5 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	40010400 	.word	0x40010400

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e301      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	d100      	bne.n	80024fa <HAL_RCC_OscConfig+0x1e>
 80024f8:	e08d      	b.n	8002616 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024fa:	4bc3      	ldr	r3, [pc, #780]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	220c      	movs	r2, #12
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d00e      	beq.n	8002524 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002506:	4bc0      	ldr	r3, [pc, #768]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	220c      	movs	r2, #12
 800250c:	4013      	ands	r3, r2
 800250e:	2b08      	cmp	r3, #8
 8002510:	d116      	bne.n	8002540 <HAL_RCC_OscConfig+0x64>
 8002512:	4bbd      	ldr	r3, [pc, #756]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	025b      	lsls	r3, r3, #9
 800251a:	401a      	ands	r2, r3
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	025b      	lsls	r3, r3, #9
 8002520:	429a      	cmp	r2, r3
 8002522:	d10d      	bne.n	8002540 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4bb8      	ldr	r3, [pc, #736]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	029b      	lsls	r3, r3, #10
 800252c:	4013      	ands	r3, r2
 800252e:	d100      	bne.n	8002532 <HAL_RCC_OscConfig+0x56>
 8002530:	e070      	b.n	8002614 <HAL_RCC_OscConfig+0x138>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d000      	beq.n	800253c <HAL_RCC_OscConfig+0x60>
 800253a:	e06b      	b.n	8002614 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e2d8      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_RCC_OscConfig+0x7c>
 8002548:	4baf      	ldr	r3, [pc, #700]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4bae      	ldr	r3, [pc, #696]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	0249      	lsls	r1, r1, #9
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e02f      	b.n	80025b8 <HAL_RCC_OscConfig+0xdc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x9e>
 8002560:	4ba9      	ldr	r3, [pc, #676]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4ba8      	ldr	r3, [pc, #672]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002566:	49a9      	ldr	r1, [pc, #676]	; (800280c <HAL_RCC_OscConfig+0x330>)
 8002568:	400a      	ands	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	4ba6      	ldr	r3, [pc, #664]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4ba5      	ldr	r3, [pc, #660]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002572:	49a7      	ldr	r1, [pc, #668]	; (8002810 <HAL_RCC_OscConfig+0x334>)
 8002574:	400a      	ands	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e01e      	b.n	80025b8 <HAL_RCC_OscConfig+0xdc>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d10e      	bne.n	80025a0 <HAL_RCC_OscConfig+0xc4>
 8002582:	4ba1      	ldr	r3, [pc, #644]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4ba0      	ldr	r3, [pc, #640]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	02c9      	lsls	r1, r1, #11
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b9d      	ldr	r3, [pc, #628]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b9c      	ldr	r3, [pc, #624]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0249      	lsls	r1, r1, #9
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xdc>
 80025a0:	4b99      	ldr	r3, [pc, #612]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b98      	ldr	r3, [pc, #608]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80025a6:	4999      	ldr	r1, [pc, #612]	; (800280c <HAL_RCC_OscConfig+0x330>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	4b96      	ldr	r3, [pc, #600]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b95      	ldr	r3, [pc, #596]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	4997      	ldr	r1, [pc, #604]	; (8002810 <HAL_RCC_OscConfig+0x334>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d014      	beq.n	80025ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fb5e 	bl	8001c80 <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ca:	f7ff fb59 	bl	8001c80 <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b64      	cmp	r3, #100	; 0x64
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e28a      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025dc:	4b8a      	ldr	r3, [pc, #552]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	029b      	lsls	r3, r3, #10
 80025e4:	4013      	ands	r3, r2
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0xee>
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff fb49 	bl	8001c80 <HAL_GetTick>
 80025ee:	0003      	movs	r3, r0
 80025f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff fb44 	bl	8001c80 <HAL_GetTick>
 80025f8:	0002      	movs	r2, r0
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e275      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b80      	ldr	r3, [pc, #512]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	029b      	lsls	r3, r3, #10
 800260e:	4013      	ands	r3, r2
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x118>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d100      	bne.n	8002622 <HAL_RCC_OscConfig+0x146>
 8002620:	e069      	b.n	80026f6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002622:	4b79      	ldr	r3, [pc, #484]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	220c      	movs	r2, #12
 8002628:	4013      	ands	r3, r2
 800262a:	d00b      	beq.n	8002644 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800262c:	4b76      	ldr	r3, [pc, #472]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	220c      	movs	r2, #12
 8002632:	4013      	ands	r3, r2
 8002634:	2b08      	cmp	r3, #8
 8002636:	d11c      	bne.n	8002672 <HAL_RCC_OscConfig+0x196>
 8002638:	4b73      	ldr	r3, [pc, #460]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	4013      	ands	r3, r2
 8002642:	d116      	bne.n	8002672 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002644:	4b70      	ldr	r3, [pc, #448]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2202      	movs	r2, #2
 800264a:	4013      	ands	r3, r2
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e24b      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b6b      	ldr	r3, [pc, #428]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	22f8      	movs	r2, #248	; 0xf8
 8002660:	4393      	bics	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	00da      	lsls	r2, r3, #3
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002670:	e041      	b.n	80026f6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d024      	beq.n	80026c4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b62      	ldr	r3, [pc, #392]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002680:	2101      	movs	r1, #1
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff fafb 	bl	8001c80 <HAL_GetTick>
 800268a:	0003      	movs	r3, r0
 800268c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002690:	f7ff faf6 	bl	8001c80 <HAL_GetTick>
 8002694:	0002      	movs	r2, r0
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e227      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b59      	ldr	r3, [pc, #356]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	d0f1      	beq.n	8002690 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	22f8      	movs	r2, #248	; 0xf8
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00da      	lsls	r2, r3, #3
 80026bc:	4b52      	ldr	r3, [pc, #328]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e018      	b.n	80026f6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	438a      	bics	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fad6 	bl	8001c80 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026da:	f7ff fad1 	bl	8001c80 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e202      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ec:	4b46      	ldr	r3, [pc, #280]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	d1f1      	bne.n	80026da <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2208      	movs	r2, #8
 80026fc:	4013      	ands	r3, r2
 80026fe:	d036      	beq.n	800276e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d019      	beq.n	800273c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002708:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800270a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270c:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800270e:	2101      	movs	r1, #1
 8002710:	430a      	orrs	r2, r1
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7ff fab4 	bl	8001c80 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271e:	f7ff faaf 	bl	8001c80 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1e0      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002730:	4b35      	ldr	r3, [pc, #212]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	2202      	movs	r2, #2
 8002736:	4013      	ands	r3, r2
 8002738:	d0f1      	beq.n	800271e <HAL_RCC_OscConfig+0x242>
 800273a:	e018      	b.n	800276e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800273e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002742:	2101      	movs	r1, #1
 8002744:	438a      	bics	r2, r1
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7ff fa9a 	bl	8001c80 <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002752:	f7ff fa95 	bl	8001c80 <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1c6      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b28      	ldr	r3, [pc, #160]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d1f1      	bne.n	8002752 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2204      	movs	r2, #4
 8002774:	4013      	ands	r3, r2
 8002776:	d100      	bne.n	800277a <HAL_RCC_OscConfig+0x29e>
 8002778:	e0b4      	b.n	80028e4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	201f      	movs	r0, #31
 800277c:	183b      	adds	r3, r7, r0
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	055b      	lsls	r3, r3, #21
 800278a:	4013      	ands	r3, r2
 800278c:	d110      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	0549      	lsls	r1, r1, #21
 8002798:	430a      	orrs	r2, r1
 800279a:	61da      	str	r2, [r3, #28]
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4013      	ands	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027aa:	183b      	adds	r3, r7, r0
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_RCC_OscConfig+0x338>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d11a      	bne.n	80027f2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_RCC_OscConfig+0x338>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_RCC_OscConfig+0x338>)
 80027c2:	2180      	movs	r1, #128	; 0x80
 80027c4:	0049      	lsls	r1, r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7ff fa59 	bl	8001c80 <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d4:	f7ff fa54 	bl	8001c80 <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e185      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_OscConfig+0x338>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10e      	bne.n	8002818 <HAL_RCC_OscConfig+0x33c>
 80027fa:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_RCC_OscConfig+0x32c>)
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	621a      	str	r2, [r3, #32]
 8002806:	e035      	b.n	8002874 <HAL_RCC_OscConfig+0x398>
 8002808:	40021000 	.word	0x40021000
 800280c:	fffeffff 	.word	0xfffeffff
 8002810:	fffbffff 	.word	0xfffbffff
 8002814:	40007000 	.word	0x40007000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x35e>
 8002820:	4bb6      	ldr	r3, [pc, #728]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002822:	6a1a      	ldr	r2, [r3, #32]
 8002824:	4bb5      	ldr	r3, [pc, #724]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002826:	2101      	movs	r1, #1
 8002828:	438a      	bics	r2, r1
 800282a:	621a      	str	r2, [r3, #32]
 800282c:	4bb3      	ldr	r3, [pc, #716]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	4bb2      	ldr	r3, [pc, #712]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002832:	2104      	movs	r1, #4
 8002834:	438a      	bics	r2, r1
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	e01c      	b.n	8002874 <HAL_RCC_OscConfig+0x398>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b05      	cmp	r3, #5
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0x380>
 8002842:	4bae      	ldr	r3, [pc, #696]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002844:	6a1a      	ldr	r2, [r3, #32]
 8002846:	4bad      	ldr	r3, [pc, #692]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002848:	2104      	movs	r1, #4
 800284a:	430a      	orrs	r2, r1
 800284c:	621a      	str	r2, [r3, #32]
 800284e:	4bab      	ldr	r3, [pc, #684]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002850:	6a1a      	ldr	r2, [r3, #32]
 8002852:	4baa      	ldr	r3, [pc, #680]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	621a      	str	r2, [r3, #32]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0x398>
 800285c:	4ba7      	ldr	r3, [pc, #668]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800285e:	6a1a      	ldr	r2, [r3, #32]
 8002860:	4ba6      	ldr	r3, [pc, #664]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002862:	2101      	movs	r1, #1
 8002864:	438a      	bics	r2, r1
 8002866:	621a      	str	r2, [r3, #32]
 8002868:	4ba4      	ldr	r3, [pc, #656]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	4ba3      	ldr	r3, [pc, #652]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800286e:	2104      	movs	r1, #4
 8002870:	438a      	bics	r2, r1
 8002872:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d014      	beq.n	80028a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7ff fa00 	bl	8001c80 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e009      	b.n	800289a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7ff f9fb 	bl	8001c80 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	4a9b      	ldr	r2, [pc, #620]	; (8002b00 <HAL_RCC_OscConfig+0x624>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e12b      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	4b98      	ldr	r3, [pc, #608]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	2202      	movs	r2, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x3aa>
 80028a4:	e013      	b.n	80028ce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7ff f9eb 	bl	8001c80 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	e009      	b.n	80028c4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7ff f9e6 	bl	8001c80 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	4a91      	ldr	r2, [pc, #580]	; (8002b00 <HAL_RCC_OscConfig+0x624>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e116      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	4b8d      	ldr	r3, [pc, #564]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	2202      	movs	r2, #2
 80028ca:	4013      	ands	r3, r2
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ce:	231f      	movs	r3, #31
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d8:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	4b87      	ldr	r3, [pc, #540]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80028de:	4989      	ldr	r1, [pc, #548]	; (8002b04 <HAL_RCC_OscConfig+0x628>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2210      	movs	r2, #16
 80028ea:	4013      	ands	r3, r2
 80028ec:	d063      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d12a      	bne.n	800294c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028f6:	4b81      	ldr	r3, [pc, #516]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80028f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fa:	4b80      	ldr	r3, [pc, #512]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80028fc:	2104      	movs	r1, #4
 80028fe:	430a      	orrs	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002902:	4b7e      	ldr	r3, [pc, #504]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002906:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002908:	2101      	movs	r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7ff f9b7 	bl	8001c80 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002918:	f7ff f9b2 	bl	8001c80 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0e3      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800292a:	4b74      	ldr	r3, [pc, #464]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d0f1      	beq.n	8002918 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002934:	4b71      	ldr	r3, [pc, #452]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	22f8      	movs	r2, #248	; 0xf8
 800293a:	4393      	bics	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	00da      	lsls	r2, r3, #3
 8002944:	4b6d      	ldr	r3, [pc, #436]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002946:	430a      	orrs	r2, r1
 8002948:	635a      	str	r2, [r3, #52]	; 0x34
 800294a:	e034      	b.n	80029b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	3305      	adds	r3, #5
 8002952:	d111      	bne.n	8002978 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002954:	4b69      	ldr	r3, [pc, #420]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800295a:	2104      	movs	r1, #4
 800295c:	438a      	bics	r2, r1
 800295e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002960:	4b66      	ldr	r3, [pc, #408]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002964:	22f8      	movs	r2, #248	; 0xf8
 8002966:	4393      	bics	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	00da      	lsls	r2, r3, #3
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002972:	430a      	orrs	r2, r1
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
 8002976:	e01e      	b.n	80029b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002978:	4b60      	ldr	r3, [pc, #384]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800297a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297c:	4b5f      	ldr	r3, [pc, #380]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800297e:	2104      	movs	r1, #4
 8002980:	430a      	orrs	r2, r1
 8002982:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002984:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002988:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 800298a:	2101      	movs	r1, #1
 800298c:	438a      	bics	r2, r1
 800298e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002990:	f7ff f976 	bl	8001c80 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800299a:	f7ff f971 	bl	8001c80 <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0a2      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	2202      	movs	r2, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d1f1      	bne.n	800299a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d100      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4e4>
 80029be:	e097      	b.n	8002af0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c0:	4b4e      	ldr	r3, [pc, #312]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	220c      	movs	r2, #12
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d100      	bne.n	80029ce <HAL_RCC_OscConfig+0x4f2>
 80029cc:	e06b      	b.n	8002aa6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d14c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b48      	ldr	r3, [pc, #288]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 80029dc:	494a      	ldr	r1, [pc, #296]	; (8002b08 <HAL_RCC_OscConfig+0x62c>)
 80029de:	400a      	ands	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7ff f94d 	bl	8001c80 <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7ff f948 	bl	8001c80 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e079      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	049b      	lsls	r3, r3, #18
 8002a06:	4013      	ands	r3, r2
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	220f      	movs	r2, #15
 8002a10:	4393      	bics	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	4b38      	ldr	r3, [pc, #224]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a3a      	ldr	r2, [pc, #232]	; (8002b0c <HAL_RCC_OscConfig+0x630>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	431a      	orrs	r2, r3
 8002a32:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a3e:	2180      	movs	r1, #128	; 0x80
 8002a40:	0449      	lsls	r1, r1, #17
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7ff f91b 	bl	8001c80 <HAL_GetTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7ff f916 	bl	8001c80 <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e047      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	049b      	lsls	r3, r3, #18
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x574>
 8002a6e:	e03f      	b.n	8002af0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a70:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a76:	4924      	ldr	r1, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x62c>)
 8002a78:	400a      	ands	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff f900 	bl	8001c80 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7ff f8fb 	bl	8001c80 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e02c      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	049b      	lsls	r3, r3, #18
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x5aa>
 8002aa4:	e024      	b.n	8002af0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e01f      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10e      	bne.n	8002aec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	220f      	movs	r2, #15
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	23f0      	movs	r3, #240	; 0xf0
 8002ae0:	039b      	lsls	r3, r3, #14
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b008      	add	sp, #32
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	40021000 	.word	0x40021000
 8002b00:	00001388 	.word	0x00001388
 8002b04:	efffffff 	.word	0xefffffff
 8002b08:	feffffff 	.word	0xfeffffff
 8002b0c:	ffc2ffff 	.word	0xffc2ffff

08002b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b3      	b.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <HAL_RCC_ClockConfig+0x184>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d911      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <HAL_RCC_ClockConfig+0x184>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4393      	bics	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	4b55      	ldr	r3, [pc, #340]	; (8002c94 <HAL_RCC_ClockConfig+0x184>)
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_ClockConfig+0x184>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e09a      	b.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2204      	movs	r2, #4
 8002b66:	4013      	ands	r3, r2
 8002b68:	d006      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002b70:	21e0      	movs	r1, #224	; 0xe0
 8002b72:	00c9      	lsls	r1, r1, #3
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	22f0      	movs	r2, #240	; 0xf0
 8002b7e:	4393      	bics	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	d040      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	029b      	lsls	r3, r3, #10
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d114      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06e      	b.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	049b      	lsls	r3, r3, #18
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e062      	b.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e05b      	b.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd4:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	4393      	bics	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7ff f84a 	bl	8001c80 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf0:	e009      	b.n	8002c06 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf2:	f7ff f845 	bl	8001c80 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <HAL_RCC_ClockConfig+0x18c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e042      	b.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1ec      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCC_ClockConfig+0x184>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4013      	ands	r3, r2
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d211      	bcs.n	8002c4a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_ClockConfig+0x184>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	0019      	movs	r1, r3
 8002c30:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <HAL_RCC_ClockConfig+0x184>)
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_ClockConfig+0x184>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e020      	b.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	d009      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <HAL_RCC_ClockConfig+0x190>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c68:	f000 f820 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6c:	0001      	movs	r1, r0
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x188>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	220f      	movs	r2, #15
 8002c76:	4013      	ands	r3, r2
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_RCC_ClockConfig+0x194>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	000a      	movs	r2, r1
 8002c7e:	40da      	lsrs	r2, r3
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x198>)
 8002c82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fe ffb5 	bl	8001bf4 <HAL_InitTick>
  
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40022000 	.word	0x40022000
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	00001388 	.word	0x00001388
 8002ca0:	fffff8ff 	.word	0xfffff8ff
 8002ca4:	08004b8c 	.word	0x08004b8c
 8002ca8:	20000010 	.word	0x20000010

08002cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	220c      	movs	r2, #12
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x30>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cda:	e02c      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	e02c      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	4013      	ands	r3, r2
 8002cea:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	025b      	lsls	r3, r3, #9
 8002d04:	4013      	ands	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	4810      	ldr	r0, [pc, #64]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d0c:	f7fd f9fc 	bl	8000108 <__udivsi3>
 8002d10:	0003      	movs	r3, r0
 8002d12:	001a      	movs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4353      	muls	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e009      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	000a      	movs	r2, r1
 8002d20:	0152      	lsls	r2, r2, #5
 8002d22:	1a52      	subs	r2, r2, r1
 8002d24:	0193      	lsls	r3, r2, #6
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	185b      	adds	r3, r3, r1
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
      break;
 8002d34:	e002      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d38:	613b      	str	r3, [r7, #16]
      break;
 8002d3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d3c:	693b      	ldr	r3, [r7, #16]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b006      	add	sp, #24
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	08004ba4 	.word	0x08004ba4
 8002d54:	08004bb4 	.word	0x08004bb4
 8002d58:	007a1200 	.word	0x007a1200

08002d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	20000010 	.word	0x20000010

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d74:	f7ff fff2 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d78:	0001      	movs	r1, r0
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	2207      	movs	r2, #7
 8002d82:	4013      	ands	r3, r2
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	40d9      	lsrs	r1, r3
 8002d8a:	000b      	movs	r3, r1
}    
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08004b9c 	.word	0x08004b9c

08002d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	025b      	lsls	r3, r3, #9
 8002db4:	4013      	ands	r3, r2
 8002db6:	d100      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002db8:	e08e      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2017      	movs	r0, #23
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc2:	4b57      	ldr	r3, [pc, #348]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	055b      	lsls	r3, r3, #21
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d110      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0549      	lsls	r1, r1, #21
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	61da      	str	r2, [r3, #28]
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	055b      	lsls	r3, r3, #21
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d11a      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfc:	4b49      	ldr	r3, [pc, #292]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e02:	2180      	movs	r1, #128	; 0x80
 8002e04:	0049      	lsls	r1, r1, #1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe ff39 	bl	8001c80 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	e008      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe ff34 	bl	8001c80 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e077      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	23c0      	movs	r3, #192	; 0xc0
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d034      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	23c0      	movs	r3, #192	; 0xc0
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d02c      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a33      	ldr	r2, [pc, #204]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	0249      	lsls	r1, r1, #9
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e72:	492e      	ldr	r1, [pc, #184]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	4013      	ands	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fefb 	bl	8001c80 <HAL_GetTick>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fef6 	bl	8001c80 <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e038      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ec2:	2317      	movs	r3, #23
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ed2:	4918      	ldr	r1, [pc, #96]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	4393      	bics	r3, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2220      	movs	r2, #32
 8002efc:	4013      	ands	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	2210      	movs	r2, #16
 8002f06:	4393      	bics	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f10:	430a      	orrs	r2, r1
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b006      	add	sp, #24
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	fffffcff 	.word	0xfffffcff
 8002f2c:	fffeffff 	.word	0xfffeffff
 8002f30:	00001388 	.word	0x00001388
 8002f34:	efffffff 	.word	0xefffffff

08002f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e042      	b.n	8002fd0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	223d      	movs	r2, #61	; 0x3d
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	223c      	movs	r2, #60	; 0x3c
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7fe fcd1 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	223d      	movs	r2, #61	; 0x3d
 8002f6a:	2102      	movs	r1, #2
 8002f6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	0019      	movs	r1, r3
 8002f78:	0010      	movs	r0, r2
 8002f7a:	f000 f9dd 	bl	8003338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2246      	movs	r2, #70	; 0x46
 8002f82:	2101      	movs	r1, #1
 8002f84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	223e      	movs	r2, #62	; 0x3e
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	223f      	movs	r2, #63	; 0x3f
 8002f92:	2101      	movs	r1, #1
 8002f94:	5499      	strb	r1, [r3, r2]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2240      	movs	r2, #64	; 0x40
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	5499      	strb	r1, [r3, r2]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2241      	movs	r2, #65	; 0x41
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2242      	movs	r2, #66	; 0x42
 8002faa:	2101      	movs	r1, #1
 8002fac:	5499      	strb	r1, [r3, r2]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2243      	movs	r2, #67	; 0x43
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	5499      	strb	r1, [r3, r2]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2244      	movs	r2, #68	; 0x44
 8002fba:	2101      	movs	r1, #1
 8002fbc:	5499      	strb	r1, [r3, r2]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2245      	movs	r2, #69	; 0x45
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	223d      	movs	r2, #61	; 0x3d
 8002fca:	2101      	movs	r1, #1
 8002fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	223d      	movs	r2, #61	; 0x3d
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d001      	beq.n	8002ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e035      	b.n	800305c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	223d      	movs	r2, #61	; 0x3d
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2101      	movs	r1, #1
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a15      	ldr	r2, [pc, #84]	; (8003064 <HAL_TIM_Base_Start_IT+0x8c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_TIM_Base_Start_IT+0x4e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_TIM_Base_Start_IT+0x90>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_TIM_Base_Start_IT+0x4e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_TIM_Base_Start_IT+0x94>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d111      	bne.n	800304a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2207      	movs	r2, #7
 800302e:	4013      	ands	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b06      	cmp	r3, #6
 8003036:	d010      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2101      	movs	r1, #1
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003048:	e007      	b.n	800305a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40000400 	.word	0x40000400
 800306c:	40014000 	.word	0x40014000

08003070 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2101      	movs	r1, #1
 8003084:	438a      	bics	r2, r1
 8003086:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <HAL_TIM_Base_Stop_IT+0x54>)
 8003090:	4013      	ands	r3, r2
 8003092:	d10d      	bne.n	80030b0 <HAL_TIM_Base_Stop_IT+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <HAL_TIM_Base_Stop_IT+0x58>)
 800309c:	4013      	ands	r3, r2
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_Base_Stop_IT+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	438a      	bics	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	223d      	movs	r2, #61	; 0x3d
 80030b4:	2101      	movs	r1, #1
 80030b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b002      	add	sp, #8
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	00001111 	.word	0x00001111
 80030c8:	00000444 	.word	0x00000444

080030cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2202      	movs	r2, #2
 80030dc:	4013      	ands	r3, r2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d124      	bne.n	800312c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d11d      	bne.n	800312c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2203      	movs	r2, #3
 80030f6:	4252      	negs	r2, r2
 80030f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2203      	movs	r2, #3
 8003108:	4013      	ands	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0018      	movs	r0, r3
 8003110:	f000 f8fa 	bl	8003308 <HAL_TIM_IC_CaptureCallback>
 8003114:	e007      	b.n	8003126 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f8ed 	bl	80032f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 f8f9 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2204      	movs	r2, #4
 8003134:	4013      	ands	r3, r2
 8003136:	2b04      	cmp	r3, #4
 8003138:	d125      	bne.n	8003186 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2204      	movs	r2, #4
 8003142:	4013      	ands	r3, r2
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11e      	bne.n	8003186 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2205      	movs	r2, #5
 800314e:	4252      	negs	r2, r2
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	23c0      	movs	r3, #192	; 0xc0
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4013      	ands	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	0018      	movs	r0, r3
 800316a:	f000 f8cd 	bl	8003308 <HAL_TIM_IC_CaptureCallback>
 800316e:	e007      	b.n	8003180 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	0018      	movs	r0, r3
 8003174:	f000 f8c0 	bl	80032f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	0018      	movs	r0, r3
 800317c:	f000 f8cc 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2208      	movs	r2, #8
 800318e:	4013      	ands	r3, r2
 8003190:	2b08      	cmp	r3, #8
 8003192:	d124      	bne.n	80031de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2208      	movs	r2, #8
 800319c:	4013      	ands	r3, r2
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d11d      	bne.n	80031de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2209      	movs	r2, #9
 80031a8:	4252      	negs	r2, r2
 80031aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2204      	movs	r2, #4
 80031b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2203      	movs	r2, #3
 80031ba:	4013      	ands	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f8a1 	bl	8003308 <HAL_TIM_IC_CaptureCallback>
 80031c6:	e007      	b.n	80031d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f894 	bl	80032f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 f8a0 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2210      	movs	r2, #16
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d125      	bne.n	8003238 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2210      	movs	r2, #16
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d11e      	bne.n	8003238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2211      	movs	r2, #17
 8003200:	4252      	negs	r2, r2
 8003202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2208      	movs	r2, #8
 8003208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	23c0      	movs	r3, #192	; 0xc0
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4013      	ands	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	0018      	movs	r0, r3
 800321c:	f000 f874 	bl	8003308 <HAL_TIM_IC_CaptureCallback>
 8003220:	e007      	b.n	8003232 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0018      	movs	r0, r3
 8003226:	f000 f867 	bl	80032f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 f873 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2201      	movs	r2, #1
 8003240:	4013      	ands	r3, r2
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10f      	bne.n	8003266 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	2b01      	cmp	r3, #1
 8003252:	d108      	bne.n	8003266 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2202      	movs	r2, #2
 800325a:	4252      	negs	r2, r2
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f7fd feef 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	4013      	ands	r3, r2
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d10f      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	4013      	ands	r3, r2
 800327e:	2b80      	cmp	r3, #128	; 0x80
 8003280:	d108      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2281      	movs	r2, #129	; 0x81
 8003288:	4252      	negs	r2, r2
 800328a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f000 f8d0 	bl	8003434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2240      	movs	r2, #64	; 0x40
 800329c:	4013      	ands	r3, r2
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d10f      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2240      	movs	r2, #64	; 0x40
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d108      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2241      	movs	r2, #65	; 0x41
 80032b6:	4252      	negs	r2, r2
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f833 	bl	8003328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2220      	movs	r2, #32
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d10f      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	4013      	ands	r3, r2
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d108      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2221      	movs	r2, #33	; 0x21
 80032e4:	4252      	negs	r2, r2
 80032e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 f89a 	bl	8003424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <TIM_Base_SetConfig+0xd0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0x20>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a2e      	ldr	r2, [pc, #184]	; (800340c <TIM_Base_SetConfig+0xd4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d108      	bne.n	800336a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2270      	movs	r2, #112	; 0x70
 800335c:	4393      	bics	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a26      	ldr	r2, [pc, #152]	; (8003408 <TIM_Base_SetConfig+0xd0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a25      	ldr	r2, [pc, #148]	; (800340c <TIM_Base_SetConfig+0xd4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00f      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <TIM_Base_SetConfig+0xd8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <TIM_Base_SetConfig+0xdc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a22      	ldr	r2, [pc, #136]	; (8003418 <TIM_Base_SetConfig+0xe0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a21      	ldr	r2, [pc, #132]	; (800341c <TIM_Base_SetConfig+0xe4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a20      	ldr	r2, [pc, #128]	; (8003420 <TIM_Base_SetConfig+0xe8>)
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	4393      	bics	r3, r2
 80033b2:	001a      	movs	r2, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <TIM_Base_SetConfig+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <TIM_Base_SetConfig+0xba>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <TIM_Base_SetConfig+0xdc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <TIM_Base_SetConfig+0xba>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <TIM_Base_SetConfig+0xe0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_Base_SetConfig+0xba>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a0b      	ldr	r2, [pc, #44]	; (800341c <TIM_Base_SetConfig+0xe4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d103      	bne.n	80033fa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	615a      	str	r2, [r3, #20]
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b004      	add	sp, #16
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40000400 	.word	0x40000400
 8003410:	40002000 	.word	0x40002000
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800
 8003420:	fffffcff 	.word	0xfffffcff

08003424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e044      	b.n	80034e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d107      	bne.n	800346e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2278      	movs	r2, #120	; 0x78
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f7fe fa75 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2224      	movs	r2, #36	; 0x24
 8003472:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2101      	movs	r1, #1
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0018      	movs	r0, r3
 8003488:	f000 fb9a 	bl	8003bc0 <UART_SetConfig>
 800348c:	0003      	movs	r3, r0
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e024      	b.n	80034e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fccd 	bl	8003e40 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	490d      	ldr	r1, [pc, #52]	; (80034e8 <HAL_UART_Init+0xa4>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2108      	movs	r1, #8
 80034c2:	438a      	bics	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 fd65 	bl	8003fa8 <UART_CheckIdleState>
 80034de:	0003      	movs	r3, r0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	fffff7ff 	.word	0xfffff7ff

080034ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e030      	b.n	8003560 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2224      	movs	r2, #36	; 0x24
 8003502:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2200      	movs	r2, #0
 8003522:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f7fe faa2 	bl	8001a78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2284      	movs	r2, #132	; 0x84
 8003538:	2100      	movs	r1, #0
 800353a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	2100      	movs	r1, #0
 8003548:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2278      	movs	r2, #120	; 0x78
 800355a:	2100      	movs	r1, #0
 800355c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	1dbb      	adds	r3, r7, #6
 8003574:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	589b      	ldr	r3, [r3, r2]
 800357c:	2b20      	cmp	r3, #32
 800357e:	d145      	bne.n	800360c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_UART_Receive_IT+0x26>
 8003586:	1dbb      	adds	r3, r7, #6
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e03d      	b.n	800360e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	015b      	lsls	r3, r3, #5
 800359a:	429a      	cmp	r2, r3
 800359c:	d109      	bne.n	80035b2 <HAL_UART_Receive_IT+0x4a>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2201      	movs	r2, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	d001      	beq.n	80035b2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e02d      	b.n	800360e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	4013      	ands	r3, r2
 80035c4:	d019      	beq.n	80035fa <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ca:	613b      	str	r3, [r7, #16]
  return(result);
 80035cc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	2301      	movs	r3, #1
 80035d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f383 8810 	msr	PRIMASK, r3
}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	04c9      	lsls	r1, r1, #19
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035fa:	1dbb      	adds	r3, r7, #6
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 fde2 	bl	80041cc <UART_Start_Receive_IT>
 8003608:	0003      	movs	r3, r0
 800360a:	e000      	b.n	800360e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b008      	add	sp, #32
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b0ab      	sub	sp, #172	; 0xac
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	22a4      	movs	r2, #164	; 0xa4
 8003628:	18b9      	adds	r1, r7, r2
 800362a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	20a0      	movs	r0, #160	; 0xa0
 8003634:	1839      	adds	r1, r7, r0
 8003636:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	219c      	movs	r1, #156	; 0x9c
 8003640:	1879      	adds	r1, r7, r1
 8003642:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003644:	0011      	movs	r1, r2
 8003646:	18bb      	adds	r3, r7, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a99      	ldr	r2, [pc, #612]	; (80038b0 <HAL_UART_IRQHandler+0x298>)
 800364c:	4013      	ands	r3, r2
 800364e:	2298      	movs	r2, #152	; 0x98
 8003650:	18bc      	adds	r4, r7, r2
 8003652:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003654:	18bb      	adds	r3, r7, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d114      	bne.n	8003686 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800365c:	187b      	adds	r3, r7, r1
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2220      	movs	r2, #32
 8003662:	4013      	ands	r3, r2
 8003664:	d00f      	beq.n	8003686 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003666:	183b      	adds	r3, r7, r0
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2220      	movs	r2, #32
 800366c:	4013      	ands	r3, r2
 800366e:	d00a      	beq.n	8003686 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003674:	2b00      	cmp	r3, #0
 8003676:	d100      	bne.n	800367a <HAL_UART_IRQHandler+0x62>
 8003678:	e286      	b.n	8003b88 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	0010      	movs	r0, r2
 8003682:	4798      	blx	r3
      }
      return;
 8003684:	e280      	b.n	8003b88 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003686:	2398      	movs	r3, #152	; 0x98
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <HAL_UART_IRQHandler+0x7a>
 8003690:	e114      	b.n	80038bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003692:	239c      	movs	r3, #156	; 0x9c
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	d106      	bne.n	80036ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800369e:	23a0      	movs	r3, #160	; 0xa0
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a83      	ldr	r2, [pc, #524]	; (80038b4 <HAL_UART_IRQHandler+0x29c>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	d100      	bne.n	80036ac <HAL_UART_IRQHandler+0x94>
 80036aa:	e107      	b.n	80038bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036ac:	23a4      	movs	r3, #164	; 0xa4
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4013      	ands	r3, r2
 80036b6:	d012      	beq.n	80036de <HAL_UART_IRQHandler+0xc6>
 80036b8:	23a0      	movs	r3, #160	; 0xa0
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	d00b      	beq.n	80036de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2284      	movs	r2, #132	; 0x84
 80036d2:	589b      	ldr	r3, [r3, r2]
 80036d4:	2201      	movs	r2, #1
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2184      	movs	r1, #132	; 0x84
 80036dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036de:	23a4      	movs	r3, #164	; 0xa4
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2202      	movs	r2, #2
 80036e6:	4013      	ands	r3, r2
 80036e8:	d011      	beq.n	800370e <HAL_UART_IRQHandler+0xf6>
 80036ea:	239c      	movs	r3, #156	; 0x9c
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2201      	movs	r2, #1
 80036f2:	4013      	ands	r3, r2
 80036f4:	d00b      	beq.n	800370e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2202      	movs	r2, #2
 80036fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2284      	movs	r2, #132	; 0x84
 8003702:	589b      	ldr	r3, [r3, r2]
 8003704:	2204      	movs	r2, #4
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2184      	movs	r1, #132	; 0x84
 800370c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800370e:	23a4      	movs	r3, #164	; 0xa4
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2204      	movs	r2, #4
 8003716:	4013      	ands	r3, r2
 8003718:	d011      	beq.n	800373e <HAL_UART_IRQHandler+0x126>
 800371a:	239c      	movs	r3, #156	; 0x9c
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2201      	movs	r2, #1
 8003722:	4013      	ands	r3, r2
 8003724:	d00b      	beq.n	800373e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2204      	movs	r2, #4
 800372c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2284      	movs	r2, #132	; 0x84
 8003732:	589b      	ldr	r3, [r3, r2]
 8003734:	2202      	movs	r2, #2
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2184      	movs	r1, #132	; 0x84
 800373c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800373e:	23a4      	movs	r3, #164	; 0xa4
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2208      	movs	r2, #8
 8003746:	4013      	ands	r3, r2
 8003748:	d017      	beq.n	800377a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800374a:	23a0      	movs	r3, #160	; 0xa0
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2220      	movs	r2, #32
 8003752:	4013      	ands	r3, r2
 8003754:	d105      	bne.n	8003762 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003756:	239c      	movs	r3, #156	; 0x9c
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2208      	movs	r2, #8
 8003768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2284      	movs	r2, #132	; 0x84
 800376e:	589b      	ldr	r3, [r3, r2]
 8003770:	2208      	movs	r2, #8
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2184      	movs	r1, #132	; 0x84
 8003778:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800377a:	23a4      	movs	r3, #164	; 0xa4
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4013      	ands	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_UART_IRQHandler+0x198>
 8003788:	23a0      	movs	r3, #160	; 0xa0
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	04db      	lsls	r3, r3, #19
 8003792:	4013      	ands	r3, r2
 8003794:	d00c      	beq.n	80037b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2284      	movs	r2, #132	; 0x84
 80037a4:	589b      	ldr	r3, [r3, r2]
 80037a6:	2220      	movs	r2, #32
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2184      	movs	r1, #132	; 0x84
 80037ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2284      	movs	r2, #132	; 0x84
 80037b4:	589b      	ldr	r3, [r3, r2]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d100      	bne.n	80037bc <HAL_UART_IRQHandler+0x1a4>
 80037ba:	e1e7      	b.n	8003b8c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037bc:	23a4      	movs	r3, #164	; 0xa4
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2220      	movs	r2, #32
 80037c4:	4013      	ands	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037c8:	23a0      	movs	r3, #160	; 0xa0
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2220      	movs	r2, #32
 80037d0:	4013      	ands	r3, r2
 80037d2:	d008      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	0010      	movs	r0, r2
 80037e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2284      	movs	r2, #132	; 0x84
 80037ea:	589b      	ldr	r3, [r3, r2]
 80037ec:	2194      	movs	r1, #148	; 0x94
 80037ee:	187a      	adds	r2, r7, r1
 80037f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2240      	movs	r2, #64	; 0x40
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d004      	beq.n	800380a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003800:	187b      	adds	r3, r7, r1
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2228      	movs	r2, #40	; 0x28
 8003806:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003808:	d047      	beq.n	800389a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 fd93 	bl	8004338 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2240      	movs	r2, #64	; 0x40
 800381a:	4013      	ands	r3, r2
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d137      	bne.n	8003890 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003820:	f3ef 8310 	mrs	r3, PRIMASK
 8003824:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003828:	2090      	movs	r0, #144	; 0x90
 800382a:	183a      	adds	r2, r7, r0
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	2301      	movs	r3, #1
 8003830:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	438a      	bics	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	183b      	adds	r3, r7, r0
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003852:	f383 8810 	msr	PRIMASK, r3
}
 8003856:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385c:	2b00      	cmp	r3, #0
 800385e:	d012      	beq.n	8003886 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <HAL_UART_IRQHandler+0x2a0>)
 8003866:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386c:	0018      	movs	r0, r3
 800386e:	f7fe fb59 	bl	8001f24 <HAL_DMA_Abort_IT>
 8003872:	1e03      	subs	r3, r0, #0
 8003874:	d01a      	beq.n	80038ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	0018      	movs	r0, r3
 8003882:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003884:	e012      	b.n	80038ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f7fd fdc9 	bl	8001420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388e:	e00d      	b.n	80038ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	0018      	movs	r0, r3
 8003894:	f7fd fdc4 	bl	8001420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	e008      	b.n	80038ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	0018      	movs	r0, r3
 800389e:	f7fd fdbf 	bl	8001420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2284      	movs	r2, #132	; 0x84
 80038a6:	2100      	movs	r1, #0
 80038a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038aa:	e16f      	b.n	8003b8c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	46c0      	nop			; (mov r8, r8)
    return;
 80038ae:	e16d      	b.n	8003b8c <HAL_UART_IRQHandler+0x574>
 80038b0:	0000080f 	.word	0x0000080f
 80038b4:	04000120 	.word	0x04000120
 80038b8:	08004401 	.word	0x08004401

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d000      	beq.n	80038c6 <HAL_UART_IRQHandler+0x2ae>
 80038c4:	e139      	b.n	8003b3a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038c6:	23a4      	movs	r3, #164	; 0xa4
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2210      	movs	r2, #16
 80038ce:	4013      	ands	r3, r2
 80038d0:	d100      	bne.n	80038d4 <HAL_UART_IRQHandler+0x2bc>
 80038d2:	e132      	b.n	8003b3a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038d4:	23a0      	movs	r3, #160	; 0xa0
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2210      	movs	r2, #16
 80038dc:	4013      	ands	r3, r2
 80038de:	d100      	bne.n	80038e2 <HAL_UART_IRQHandler+0x2ca>
 80038e0:	e12b      	b.n	8003b3a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2210      	movs	r2, #16
 80038e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2240      	movs	r2, #64	; 0x40
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d000      	beq.n	80038fa <HAL_UART_IRQHandler+0x2e2>
 80038f8:	e09f      	b.n	8003a3a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	217e      	movs	r1, #126	; 0x7e
 8003904:	187b      	adds	r3, r7, r1
 8003906:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003908:	187b      	adds	r3, r7, r1
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d100      	bne.n	8003912 <HAL_UART_IRQHandler+0x2fa>
 8003910:	e13e      	b.n	8003b90 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2258      	movs	r2, #88	; 0x58
 8003916:	5a9b      	ldrh	r3, [r3, r2]
 8003918:	187a      	adds	r2, r7, r1
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d300      	bcc.n	8003922 <HAL_UART_IRQHandler+0x30a>
 8003920:	e136      	b.n	8003b90 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	187a      	adds	r2, r7, r1
 8003926:	215a      	movs	r1, #90	; 0x5a
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b20      	cmp	r3, #32
 8003934:	d06f      	beq.n	8003a16 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003936:	f3ef 8310 	mrs	r3, PRIMASK
 800393a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800393e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003940:	2301      	movs	r3, #1
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	f383 8810 	msr	PRIMASK, r3
}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4992      	ldr	r1, [pc, #584]	; (8003ba0 <HAL_UART_IRQHandler+0x588>)
 8003958:	400a      	ands	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800395e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	f383 8810 	msr	PRIMASK, r3
}
 8003966:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003968:	f3ef 8310 	mrs	r3, PRIMASK
 800396c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003970:	677b      	str	r3, [r7, #116]	; 0x74
 8003972:	2301      	movs	r3, #1
 8003974:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003978:	f383 8810 	msr	PRIMASK, r3
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2101      	movs	r1, #1
 800398a:	438a      	bics	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003990:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003994:	f383 8810 	msr	PRIMASK, r3
}
 8003998:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80039a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	673b      	str	r3, [r7, #112]	; 0x70
 80039a4:	2301      	movs	r3, #1
 80039a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2140      	movs	r1, #64	; 0x40
 80039bc:	438a      	bics	r2, r1
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2280      	movs	r2, #128	; 0x80
 80039d0:	2120      	movs	r1, #32
 80039d2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8310 	mrs	r3, PRIMASK
 80039de:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80039e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039e4:	2301      	movs	r3, #1
 80039e6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2110      	movs	r1, #16
 80039fc:	438a      	bics	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fe fa4f 	bl	8001eb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2258      	movs	r2, #88	; 0x58
 8003a20:	5a9a      	ldrh	r2, [r3, r2]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	215a      	movs	r1, #90	; 0x5a
 8003a26:	5a5b      	ldrh	r3, [r3, r1]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0011      	movs	r1, r2
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 f8b8 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a38:	e0aa      	b.n	8003b90 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2258      	movs	r2, #88	; 0x58
 8003a3e:	5a99      	ldrh	r1, [r3, r2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	225a      	movs	r2, #90	; 0x5a
 8003a44:	5a9b      	ldrh	r3, [r3, r2]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	208e      	movs	r0, #142	; 0x8e
 8003a4a:	183b      	adds	r3, r7, r0
 8003a4c:	1a8a      	subs	r2, r1, r2
 8003a4e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	225a      	movs	r2, #90	; 0x5a
 8003a54:	5a9b      	ldrh	r3, [r3, r2]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d100      	bne.n	8003a5e <HAL_UART_IRQHandler+0x446>
 8003a5c:	e09a      	b.n	8003b94 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8003a5e:	183b      	adds	r3, r7, r0
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d100      	bne.n	8003a68 <HAL_UART_IRQHandler+0x450>
 8003a66:	e095      	b.n	8003b94 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a68:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a70:	2488      	movs	r4, #136	; 0x88
 8003a72:	193a      	adds	r2, r7, r4
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	2301      	movs	r3, #1
 8003a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4945      	ldr	r1, [pc, #276]	; (8003ba4 <HAL_UART_IRQHandler+0x58c>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aa6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa8:	2484      	movs	r4, #132	; 0x84
 8003aaa:	193a      	adds	r2, r7, r4
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f383 8810 	msr	PRIMASK, r3
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	438a      	bics	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	2120      	movs	r1, #32
 8003ade:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aec:	f3ef 8310 	mrs	r3, PRIMASK
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af4:	2480      	movs	r4, #128	; 0x80
 8003af6:	193a      	adds	r2, r7, r4
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	2301      	movs	r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2110      	movs	r1, #16
 8003b12:	438a      	bics	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b2a:	183b      	adds	r3, r7, r0
 8003b2c:	881a      	ldrh	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f838 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b38:	e02c      	b.n	8003b94 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b3a:	23a4      	movs	r3, #164	; 0xa4
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	4013      	ands	r3, r2
 8003b44:	d00f      	beq.n	8003b66 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b46:	23a0      	movs	r3, #160	; 0xa0
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2280      	movs	r2, #128	; 0x80
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01e      	beq.n	8003b98 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	0010      	movs	r0, r2
 8003b62:	4798      	blx	r3
    }
    return;
 8003b64:	e018      	b.n	8003b98 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b66:	23a4      	movs	r3, #164	; 0xa4
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2240      	movs	r2, #64	; 0x40
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_UART_IRQHandler+0x582>
 8003b72:	23a0      	movs	r3, #160	; 0xa0
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2240      	movs	r2, #64	; 0x40
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00d      	beq.n	8003b9a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 fc54 	bl	800442e <UART_EndTransmit_IT>
    return;
 8003b86:	e008      	b.n	8003b9a <HAL_UART_IRQHandler+0x582>
      return;
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	e006      	b.n	8003b9a <HAL_UART_IRQHandler+0x582>
    return;
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	e004      	b.n	8003b9a <HAL_UART_IRQHandler+0x582>
      return;
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	e002      	b.n	8003b9a <HAL_UART_IRQHandler+0x582>
      return;
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	e000      	b.n	8003b9a <HAL_UART_IRQHandler+0x582>
    return;
 8003b98:	46c0      	nop			; (mov r8, r8)
  }

}
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b02b      	add	sp, #172	; 0xac
 8003b9e:	bd90      	pop	{r4, r7, pc}
 8003ba0:	fffffeff 	.word	0xfffffeff
 8003ba4:	fffffedf 	.word	0xfffffedf

08003ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	000a      	movs	r2, r1
 8003bb2:	1cbb      	adds	r3, r7, #2
 8003bb4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b002      	add	sp, #8
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc8:	231e      	movs	r3, #30
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a8d      	ldr	r2, [pc, #564]	; (8003e24 <UART_SetConfig+0x264>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a88      	ldr	r2, [pc, #544]	; (8003e28 <UART_SetConfig+0x268>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a7f      	ldr	r2, [pc, #508]	; (8003e2c <UART_SetConfig+0x26c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a7b      	ldr	r2, [pc, #492]	; (8003e30 <UART_SetConfig+0x270>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d127      	bne.n	8003c96 <UART_SetConfig+0xd6>
 8003c46:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <UART_SetConfig+0x274>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d00d      	beq.n	8003c6e <UART_SetConfig+0xae>
 8003c52:	d81b      	bhi.n	8003c8c <UART_SetConfig+0xcc>
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d014      	beq.n	8003c82 <UART_SetConfig+0xc2>
 8003c58:	d818      	bhi.n	8003c8c <UART_SetConfig+0xcc>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <UART_SetConfig+0xa4>
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d00a      	beq.n	8003c78 <UART_SetConfig+0xb8>
 8003c62:	e013      	b.n	8003c8c <UART_SetConfig+0xcc>
 8003c64:	231f      	movs	r3, #31
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e021      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c6e:	231f      	movs	r3, #31
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2202      	movs	r2, #2
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e01c      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c78:	231f      	movs	r3, #31
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e017      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c82:	231f      	movs	r3, #31
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2208      	movs	r2, #8
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e012      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c8c:	231f      	movs	r3, #31
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2210      	movs	r2, #16
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e00d      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a67      	ldr	r2, [pc, #412]	; (8003e38 <UART_SetConfig+0x278>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d104      	bne.n	8003caa <UART_SetConfig+0xea>
 8003ca0:	231f      	movs	r3, #31
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e003      	b.n	8003cb2 <UART_SetConfig+0xf2>
 8003caa:	231f      	movs	r3, #31
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	2210      	movs	r2, #16
 8003cb0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d15c      	bne.n	8003d78 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003cbe:	231f      	movs	r3, #31
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d015      	beq.n	8003cf4 <UART_SetConfig+0x134>
 8003cc8:	dc18      	bgt.n	8003cfc <UART_SetConfig+0x13c>
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d00d      	beq.n	8003cea <UART_SetConfig+0x12a>
 8003cce:	dc15      	bgt.n	8003cfc <UART_SetConfig+0x13c>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <UART_SetConfig+0x11a>
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d005      	beq.n	8003ce4 <UART_SetConfig+0x124>
 8003cd8:	e010      	b.n	8003cfc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cda:	f7ff f849 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	61bb      	str	r3, [r7, #24]
        break;
 8003ce2:	e012      	b.n	8003d0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <UART_SetConfig+0x27c>)
 8003ce6:	61bb      	str	r3, [r7, #24]
        break;
 8003ce8:	e00f      	b.n	8003d0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe ffdf 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	61bb      	str	r3, [r7, #24]
        break;
 8003cf2:	e00a      	b.n	8003d0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	61bb      	str	r3, [r7, #24]
        break;
 8003cfa:	e006      	b.n	8003d0a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d00:	231e      	movs	r3, #30
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
        break;
 8003d08:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d100      	bne.n	8003d12 <UART_SetConfig+0x152>
 8003d10:	e07a      	b.n	8003e08 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	005a      	lsls	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	18d2      	adds	r2, r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	0019      	movs	r1, r3
 8003d24:	0010      	movs	r0, r2
 8003d26:	f7fc f9ef 	bl	8000108 <__udivsi3>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b0f      	cmp	r3, #15
 8003d32:	d91c      	bls.n	8003d6e <UART_SetConfig+0x1ae>
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	025b      	lsls	r3, r3, #9
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d217      	bcs.n	8003d6e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	200e      	movs	r0, #14
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	210f      	movs	r1, #15
 8003d48:	438a      	bics	r2, r1
 8003d4a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2207      	movs	r2, #7
 8003d54:	4013      	ands	r3, r2
 8003d56:	b299      	uxth	r1, r3
 8003d58:	183b      	adds	r3, r7, r0
 8003d5a:	183a      	adds	r2, r7, r0
 8003d5c:	8812      	ldrh	r2, [r2, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	183a      	adds	r2, r7, r0
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	e04c      	b.n	8003e08 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003d6e:	231e      	movs	r3, #30
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e047      	b.n	8003e08 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d78:	231f      	movs	r3, #31
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d015      	beq.n	8003dae <UART_SetConfig+0x1ee>
 8003d82:	dc18      	bgt.n	8003db6 <UART_SetConfig+0x1f6>
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d00d      	beq.n	8003da4 <UART_SetConfig+0x1e4>
 8003d88:	dc15      	bgt.n	8003db6 <UART_SetConfig+0x1f6>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <UART_SetConfig+0x1d4>
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d005      	beq.n	8003d9e <UART_SetConfig+0x1de>
 8003d92:	e010      	b.n	8003db6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe ffec 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	61bb      	str	r3, [r7, #24]
        break;
 8003d9c:	e012      	b.n	8003dc4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <UART_SetConfig+0x27c>)
 8003da0:	61bb      	str	r3, [r7, #24]
        break;
 8003da2:	e00f      	b.n	8003dc4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da4:	f7fe ff82 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8003da8:	0003      	movs	r3, r0
 8003daa:	61bb      	str	r3, [r7, #24]
        break;
 8003dac:	e00a      	b.n	8003dc4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	61bb      	str	r3, [r7, #24]
        break;
 8003db4:	e006      	b.n	8003dc4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dba:	231e      	movs	r3, #30
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
        break;
 8003dc2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01e      	beq.n	8003e08 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085a      	lsrs	r2, r3, #1
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	18d2      	adds	r2, r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	0019      	movs	r1, r3
 8003dda:	0010      	movs	r0, r2
 8003ddc:	f7fc f994 	bl	8000108 <__udivsi3>
 8003de0:	0003      	movs	r3, r0
 8003de2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	d90a      	bls.n	8003e00 <UART_SetConfig+0x240>
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	025b      	lsls	r3, r3, #9
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d205      	bcs.n	8003e00 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	e003      	b.n	8003e08 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003e00:	231e      	movs	r3, #30
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e14:	231e      	movs	r3, #30
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	781b      	ldrb	r3, [r3, #0]
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b008      	add	sp, #32
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	ffff69f3 	.word	0xffff69f3
 8003e28:	ffffcfff 	.word	0xffffcfff
 8003e2c:	fffff4ff 	.word	0xfffff4ff
 8003e30:	40013800 	.word	0x40013800
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40004400 	.word	0x40004400
 8003e3c:	007a1200 	.word	0x007a1200

08003e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a4a      	ldr	r2, [pc, #296]	; (8003f84 <UART_AdvFeatureConfig+0x144>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2202      	movs	r2, #2
 8003e70:	4013      	ands	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4a43      	ldr	r2, [pc, #268]	; (8003f88 <UART_AdvFeatureConfig+0x148>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	0019      	movs	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	2204      	movs	r2, #4
 8003e92:	4013      	ands	r3, r2
 8003e94:	d00b      	beq.n	8003eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <UART_AdvFeatureConfig+0x14c>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <UART_AdvFeatureConfig+0x150>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <UART_AdvFeatureConfig+0x154>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <UART_AdvFeatureConfig+0x158>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2240      	movs	r2, #64	; 0x40
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <UART_AdvFeatureConfig+0x15c>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	0019      	movs	r1, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	035b      	lsls	r3, r3, #13
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d10b      	bne.n	8003f5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <UART_AdvFeatureConfig+0x160>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	4013      	ands	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <UART_AdvFeatureConfig+0x164>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	fffdffff 	.word	0xfffdffff
 8003f88:	fffeffff 	.word	0xfffeffff
 8003f8c:	fffbffff 	.word	0xfffbffff
 8003f90:	ffff7fff 	.word	0xffff7fff
 8003f94:	ffffefff 	.word	0xffffefff
 8003f98:	ffffdfff 	.word	0xffffdfff
 8003f9c:	ffefffff 	.word	0xffefffff
 8003fa0:	ff9fffff 	.word	0xff9fffff
 8003fa4:	fff7ffff 	.word	0xfff7ffff

08003fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b092      	sub	sp, #72	; 0x48
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2284      	movs	r2, #132	; 0x84
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fb8:	f7fd fe62 	bl	8001c80 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d12c      	bne.n	8004028 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	0391      	lsls	r1, r2, #14
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4a46      	ldr	r2, [pc, #280]	; (80040f0 <UART_CheckIdleState+0x148>)
 8003fd8:	9200      	str	r2, [sp, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f000 f88c 	bl	80040f8 <UART_WaitOnFlagUntilTimeout>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d021      	beq.n	8004028 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fee:	2301      	movs	r3, #1
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	f383 8810 	msr	PRIMASK, r3
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	438a      	bics	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2278      	movs	r2, #120	; 0x78
 8004020:	2100      	movs	r1, #0
 8004022:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e05f      	b.n	80040e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2204      	movs	r2, #4
 8004030:	4013      	ands	r3, r2
 8004032:	2b04      	cmp	r3, #4
 8004034:	d146      	bne.n	80040c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	03d1      	lsls	r1, r2, #15
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <UART_CheckIdleState+0x148>)
 8004040:	9200      	str	r2, [sp, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	f000 f858 	bl	80040f8 <UART_WaitOnFlagUntilTimeout>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d03b      	beq.n	80040c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404c:	f3ef 8310 	mrs	r3, PRIMASK
 8004050:	60fb      	str	r3, [r7, #12]
  return(result);
 8004052:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	2301      	movs	r3, #1
 8004058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f383 8810 	msr	PRIMASK, r3
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4921      	ldr	r1, [pc, #132]	; (80040f4 <UART_CheckIdleState+0x14c>)
 800406e:	400a      	ands	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004074:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f383 8810 	msr	PRIMASK, r3
}
 800407c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407e:	f3ef 8310 	mrs	r3, PRIMASK
 8004082:	61bb      	str	r3, [r7, #24]
  return(result);
 8004084:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
 8004088:	2301      	movs	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f383 8810 	msr	PRIMASK, r3
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2101      	movs	r1, #1
 80040a0:	438a      	bics	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	2120      	movs	r1, #32
 80040b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2278      	movs	r2, #120	; 0x78
 80040bc:	2100      	movs	r1, #0
 80040be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e011      	b.n	80040e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	2120      	movs	r1, #32
 80040d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2278      	movs	r2, #120	; 0x78
 80040e2:	2100      	movs	r1, #0
 80040e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b010      	add	sp, #64	; 0x40
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	01ffffff 	.word	0x01ffffff
 80040f4:	fffffedf 	.word	0xfffffedf

080040f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	1dfb      	adds	r3, r7, #7
 8004106:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004108:	e04b      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3301      	adds	r3, #1
 800410e:	d048      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004110:	f7fd fdb6 	bl	8001c80 <HAL_GetTick>
 8004114:	0002      	movs	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04b      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2204      	movs	r2, #4
 8004132:	4013      	ands	r3, r2
 8004134:	d035      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2208      	movs	r2, #8
 800413e:	4013      	ands	r3, r2
 8004140:	2b08      	cmp	r3, #8
 8004142:	d111      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2208      	movs	r2, #8
 800414a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	0018      	movs	r0, r3
 8004150:	f000 f8f2 	bl	8004338 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2284      	movs	r2, #132	; 0x84
 8004158:	2108      	movs	r1, #8
 800415a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2278      	movs	r2, #120	; 0x78
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e02c      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	401a      	ands	r2, r3
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	429a      	cmp	r2, r3
 800417a:	d112      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 f8d5 	bl	8004338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2284      	movs	r2, #132	; 0x84
 8004192:	2120      	movs	r1, #32
 8004194:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2278      	movs	r2, #120	; 0x78
 800419a:	2100      	movs	r1, #0
 800419c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e00f      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	425a      	negs	r2, r3
 80041b2:	4153      	adcs	r3, r2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	001a      	movs	r2, r3
 80041b8:	1dfb      	adds	r3, r7, #7
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d0a4      	beq.n	800410a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b004      	add	sp, #16
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b090      	sub	sp, #64	; 0x40
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	1dbb      	adds	r3, r7, #6
 80041d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1dba      	adds	r2, r7, #6
 80041e4:	2158      	movs	r1, #88	; 0x58
 80041e6:	8812      	ldrh	r2, [r2, #0]
 80041e8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1dba      	adds	r2, r7, #6
 80041ee:	215a      	movs	r1, #90	; 0x5a
 80041f0:	8812      	ldrh	r2, [r2, #0]
 80041f2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	015b      	lsls	r3, r3, #5
 8004202:	429a      	cmp	r2, r3
 8004204:	d10d      	bne.n	8004222 <UART_Start_Receive_IT+0x56>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d104      	bne.n	8004218 <UART_Start_Receive_IT+0x4c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	225c      	movs	r2, #92	; 0x5c
 8004212:	4946      	ldr	r1, [pc, #280]	; (800432c <UART_Start_Receive_IT+0x160>)
 8004214:	5299      	strh	r1, [r3, r2]
 8004216:	e01a      	b.n	800424e <UART_Start_Receive_IT+0x82>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	225c      	movs	r2, #92	; 0x5c
 800421c:	21ff      	movs	r1, #255	; 0xff
 800421e:	5299      	strh	r1, [r3, r2]
 8004220:	e015      	b.n	800424e <UART_Start_Receive_IT+0x82>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <UART_Start_Receive_IT+0x7a>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <UART_Start_Receive_IT+0x70>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	225c      	movs	r2, #92	; 0x5c
 8004236:	21ff      	movs	r1, #255	; 0xff
 8004238:	5299      	strh	r1, [r3, r2]
 800423a:	e008      	b.n	800424e <UART_Start_Receive_IT+0x82>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	225c      	movs	r2, #92	; 0x5c
 8004240:	217f      	movs	r1, #127	; 0x7f
 8004242:	5299      	strh	r1, [r3, r2]
 8004244:	e003      	b.n	800424e <UART_Start_Receive_IT+0x82>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	225c      	movs	r2, #92	; 0x5c
 800424a:	2100      	movs	r1, #0
 800424c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2284      	movs	r2, #132	; 0x84
 8004252:	2100      	movs	r1, #0
 8004254:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	2122      	movs	r1, #34	; 0x22
 800425c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425e:	f3ef 8310 	mrs	r3, PRIMASK
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004268:	2301      	movs	r3, #1
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2101      	movs	r1, #1
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004286:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	f383 8810 	msr	PRIMASK, r3
}
 800428e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	015b      	lsls	r3, r3, #5
 8004298:	429a      	cmp	r2, r3
 800429a:	d107      	bne.n	80042ac <UART_Start_Receive_IT+0xe0>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a22      	ldr	r2, [pc, #136]	; (8004330 <UART_Start_Receive_IT+0x164>)
 80042a8:	669a      	str	r2, [r3, #104]	; 0x68
 80042aa:	e002      	b.n	80042b2 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a21      	ldr	r2, [pc, #132]	; (8004334 <UART_Start_Receive_IT+0x168>)
 80042b0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d019      	beq.n	80042ee <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ba:	f3ef 8310 	mrs	r3, PRIMASK
 80042be:	61fb      	str	r3, [r7, #28]
  return(result);
 80042c0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
 80042c4:	2301      	movs	r3, #1
 80042c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	f383 8810 	msr	PRIMASK, r3
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2190      	movs	r1, #144	; 0x90
 80042dc:	0049      	lsls	r1, r1, #1
 80042de:	430a      	orrs	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	f383 8810 	msr	PRIMASK, r3
}
 80042ec:	e018      	b.n	8004320 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ee:	f3ef 8310 	mrs	r3, PRIMASK
 80042f2:	613b      	str	r3, [r7, #16]
  return(result);
 80042f4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f8:	2301      	movs	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f383 8810 	msr	PRIMASK, r3
}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2120      	movs	r1, #32
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f383 8810 	msr	PRIMASK, r3
}
 800431e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b010      	add	sp, #64	; 0x40
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	000001ff 	.word	0x000001ff
 8004330:	0800463d 	.word	0x0800463d
 8004334:	08004485 	.word	0x08004485

08004338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08e      	sub	sp, #56	; 0x38
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004340:	f3ef 8310 	mrs	r3, PRIMASK
 8004344:	617b      	str	r3, [r7, #20]
  return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
 800434a:	2301      	movs	r3, #1
 800434c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4926      	ldr	r1, [pc, #152]	; (80043fc <UART_EndRxTransfer+0xc4>)
 8004362:	400a      	ands	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f383 8810 	msr	PRIMASK, r3
}
 8004370:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004372:	f3ef 8310 	mrs	r3, PRIMASK
 8004376:	623b      	str	r3, [r7, #32]
  return(result);
 8004378:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
 800437c:	2301      	movs	r3, #1
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	f383 8810 	msr	PRIMASK, r3
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2101      	movs	r1, #1
 8004394:	438a      	bics	r2, r1
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d118      	bne.n	80043de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ac:	f3ef 8310 	mrs	r3, PRIMASK
 80043b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80043b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b6:	2301      	movs	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2110      	movs	r1, #16
 80043ce:	438a      	bics	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f383 8810 	msr	PRIMASK, r3
}
 80043dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2280      	movs	r2, #128	; 0x80
 80043e2:	2120      	movs	r1, #32
 80043e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b00e      	add	sp, #56	; 0x38
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	fffffedf 	.word	0xfffffedf

08004400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	225a      	movs	r2, #90	; 0x5a
 8004412:	2100      	movs	r1, #0
 8004414:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2252      	movs	r2, #82	; 0x52
 800441a:	2100      	movs	r1, #0
 800441c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	0018      	movs	r0, r3
 8004422:	f7fc fffd 	bl	8001420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b004      	add	sp, #16
 800442c:	bd80      	pop	{r7, pc}

0800442e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004436:	f3ef 8310 	mrs	r3, PRIMASK
 800443a:	60bb      	str	r3, [r7, #8]
  return(result);
 800443c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	2301      	movs	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f383 8810 	msr	PRIMASK, r3
}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2140      	movs	r1, #64	; 0x40
 8004458:	438a      	bics	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f383 8810 	msr	PRIMASK, r3
}
 8004466:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	0018      	movs	r0, r3
 8004478:	f7fc feb2 	bl	80011e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b006      	add	sp, #24
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b094      	sub	sp, #80	; 0x50
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800448c:	204e      	movs	r0, #78	; 0x4e
 800448e:	183b      	adds	r3, r7, r0
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	215c      	movs	r1, #92	; 0x5c
 8004494:	5a52      	ldrh	r2, [r2, r1]
 8004496:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	589b      	ldr	r3, [r3, r2]
 800449e:	2b22      	cmp	r3, #34	; 0x22
 80044a0:	d000      	beq.n	80044a4 <UART_RxISR_8BIT+0x20>
 80044a2:	e0ba      	b.n	800461a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	214c      	movs	r1, #76	; 0x4c
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80044ae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	183b      	adds	r3, r7, r0
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b2d9      	uxtb	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	400a      	ands	r2, r1
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	225a      	movs	r2, #90	; 0x5a
 80044d4:	5a9b      	ldrh	r3, [r3, r2]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b299      	uxth	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	225a      	movs	r2, #90	; 0x5a
 80044e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	225a      	movs	r2, #90	; 0x5a
 80044e6:	5a9b      	ldrh	r3, [r3, r2]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d000      	beq.n	80044f0 <UART_RxISR_8BIT+0x6c>
 80044ee:	e09c      	b.n	800462a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f0:	f3ef 8310 	mrs	r3, PRIMASK
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044fa:	2301      	movs	r3, #1
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	f383 8810 	msr	PRIMASK, r3
}
 8004504:	46c0      	nop			; (mov r8, r8)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4948      	ldr	r1, [pc, #288]	; (8004634 <UART_RxISR_8BIT+0x1b0>)
 8004512:	400a      	ands	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	f383 8810 	msr	PRIMASK, r3
}
 8004520:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004522:	f3ef 8310 	mrs	r3, PRIMASK
 8004526:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452a:	647b      	str	r3, [r7, #68]	; 0x44
 800452c:	2301      	movs	r3, #1
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004532:	f383 8810 	msr	PRIMASK, r3
}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2101      	movs	r1, #1
 8004544:	438a      	bics	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800454a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	f383 8810 	msr	PRIMASK, r3
}
 8004552:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	2120      	movs	r1, #32
 800455a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	4013      	ands	r3, r2
 8004574:	d018      	beq.n	80045a8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004576:	f3ef 8310 	mrs	r3, PRIMASK
 800457a:	61bb      	str	r3, [r7, #24]
  return(result);
 800457c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800457e:	643b      	str	r3, [r7, #64]	; 0x40
 8004580:	2301      	movs	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f383 8810 	msr	PRIMASK, r3
}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4928      	ldr	r1, [pc, #160]	; (8004638 <UART_RxISR_8BIT+0x1b4>)
 8004598:	400a      	ands	r2, r1
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	f383 8810 	msr	PRIMASK, r3
}
 80045a6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d12f      	bne.n	8004610 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b6:	f3ef 8310 	mrs	r3, PRIMASK
 80045ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80045bc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c0:	2301      	movs	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f383 8810 	msr	PRIMASK, r3
}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2110      	movs	r1, #16
 80045d8:	438a      	bics	r2, r1
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f383 8810 	msr	PRIMASK, r3
}
 80045e6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	2210      	movs	r2, #16
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d103      	bne.n	80045fe <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2210      	movs	r2, #16
 80045fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2258      	movs	r2, #88	; 0x58
 8004602:	5a9a      	ldrh	r2, [r3, r2]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	0011      	movs	r1, r2
 8004608:	0018      	movs	r0, r3
 800460a:	f7ff facd 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800460e:	e00c      	b.n	800462a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	0018      	movs	r0, r3
 8004614:	f7fc fe12 	bl	800123c <HAL_UART_RxCpltCallback>
}
 8004618:	e007      	b.n	800462a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699a      	ldr	r2, [r3, #24]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2108      	movs	r1, #8
 8004626:	430a      	orrs	r2, r1
 8004628:	619a      	str	r2, [r3, #24]
}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	b014      	add	sp, #80	; 0x50
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	fffffedf 	.word	0xfffffedf
 8004638:	fbffffff 	.word	0xfbffffff

0800463c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b094      	sub	sp, #80	; 0x50
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004644:	204e      	movs	r0, #78	; 0x4e
 8004646:	183b      	adds	r3, r7, r0
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	215c      	movs	r1, #92	; 0x5c
 800464c:	5a52      	ldrh	r2, [r2, r1]
 800464e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2280      	movs	r2, #128	; 0x80
 8004654:	589b      	ldr	r3, [r3, r2]
 8004656:	2b22      	cmp	r3, #34	; 0x22
 8004658:	d000      	beq.n	800465c <UART_RxISR_16BIT+0x20>
 800465a:	e0ba      	b.n	80047d2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	214c      	movs	r1, #76	; 0x4c
 8004662:	187b      	adds	r3, r7, r1
 8004664:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004666:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800466e:	187b      	adds	r3, r7, r1
 8004670:	183a      	adds	r2, r7, r0
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	8812      	ldrh	r2, [r2, #0]
 8004676:	4013      	ands	r3, r2
 8004678:	b29a      	uxth	r2, r3
 800467a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	225a      	movs	r2, #90	; 0x5a
 800468c:	5a9b      	ldrh	r3, [r3, r2]
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b299      	uxth	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	225a      	movs	r2, #90	; 0x5a
 8004698:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	225a      	movs	r2, #90	; 0x5a
 800469e:	5a9b      	ldrh	r3, [r3, r2]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d000      	beq.n	80046a8 <UART_RxISR_16BIT+0x6c>
 80046a6:	e09c      	b.n	80047e2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a8:	f3ef 8310 	mrs	r3, PRIMASK
 80046ac:	623b      	str	r3, [r7, #32]
  return(result);
 80046ae:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b0:	647b      	str	r3, [r7, #68]	; 0x44
 80046b2:	2301      	movs	r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	f383 8810 	msr	PRIMASK, r3
}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4948      	ldr	r1, [pc, #288]	; (80047ec <UART_RxISR_16BIT+0x1b0>)
 80046ca:	400a      	ands	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046da:	f3ef 8310 	mrs	r3, PRIMASK
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e2:	643b      	str	r3, [r7, #64]	; 0x40
 80046e4:	2301      	movs	r3, #1
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	f383 8810 	msr	PRIMASK, r3
}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	438a      	bics	r2, r1
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	f383 8810 	msr	PRIMASK, r3
}
 800470a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2280      	movs	r2, #128	; 0x80
 8004710:	2120      	movs	r1, #32
 8004712:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	041b      	lsls	r3, r3, #16
 800472a:	4013      	ands	r3, r2
 800472c:	d018      	beq.n	8004760 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472e:	f3ef 8310 	mrs	r3, PRIMASK
 8004732:	617b      	str	r3, [r7, #20]
  return(result);
 8004734:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004738:	2301      	movs	r3, #1
 800473a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f383 8810 	msr	PRIMASK, r3
}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4928      	ldr	r1, [pc, #160]	; (80047f0 <UART_RxISR_16BIT+0x1b4>)
 8004750:	400a      	ands	r2, r1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004756:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f383 8810 	msr	PRIMASK, r3
}
 800475e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004764:	2b01      	cmp	r3, #1
 8004766:	d12f      	bne.n	80047c8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476e:	f3ef 8310 	mrs	r3, PRIMASK
 8004772:	60bb      	str	r3, [r7, #8]
  return(result);
 8004774:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
 8004778:	2301      	movs	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2110      	movs	r1, #16
 8004790:	438a      	bics	r2, r1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2210      	movs	r2, #16
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d103      	bne.n	80047b6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2210      	movs	r2, #16
 80047b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2258      	movs	r2, #88	; 0x58
 80047ba:	5a9a      	ldrh	r2, [r3, r2]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0011      	movs	r1, r2
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff f9f1 	bl	8003ba8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047c6:	e00c      	b.n	80047e2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7fc fd36 	bl	800123c <HAL_UART_RxCpltCallback>
}
 80047d0:	e007      	b.n	80047e2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2108      	movs	r1, #8
 80047de:	430a      	orrs	r2, r1
 80047e0:	619a      	str	r2, [r3, #24]
}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b014      	add	sp, #80	; 0x50
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	fffffedf 	.word	0xfffffedf
 80047f0:	fbffffff 	.word	0xfbffffff

080047f4 <kfifo_reset>:
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]
}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	46bd      	mov	sp, r7
 800480e:	b002      	add	sp, #8
 8004810:	bd80      	pop	{r7, pc}

08004812 <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
	return fifo->size;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}

08004826 <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 8004826:	b590      	push	{r4, r7, lr}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	1b1b      	subs	r3, r3, r4
}
 8004838:	0018      	movs	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	b003      	add	sp, #12
 800483e:	bd90      	pop	{r4, r7, pc}

08004840 <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	0018      	movs	r0, r3
 800484c:	f7ff ffe1 	bl	8004812 <kfifo_size>
 8004850:	0004      	movs	r4, r0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f7ff ffe6 	bl	8004826 <kfifo_len>
 800485a:	0003      	movs	r3, r0
 800485c:	1ae3      	subs	r3, r4, r3
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b003      	add	sp, #12
 8004864:	bd90      	pop	{r4, r7, pc}

08004866 <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	18d2      	adds	r2, r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	609a      	str	r2, [r3, #8]
}
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	46bd      	mov	sp, r7
 8004880:	b002      	add	sp, #8
 8004882:	bd80      	pop	{r7, pc}

08004884 <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	3b01      	subs	r3, #1
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	4013      	ands	r3, r2
}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f7ff ff9a 	bl	80047f4 <kfifo_reset>
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	18d2      	adds	r2, r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	0011      	movs	r1, r2
 80048e2:	0018      	movs	r0, r3
 80048e4:	f7ff ffce 	bl	8004884 <__kfifo_off>
 80048e8:	0003      	movs	r3, r0
 80048ea:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d900      	bls.n	80048fc <__kfifo_in_data+0x34>
 80048fa:	0013      	movs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	18d3      	adds	r3, r2, r3
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	0018      	movs	r0, r3
 800490c:	f000 f85a 	bl	80049c4 <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	18d1      	adds	r1, r2, r3
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	001a      	movs	r2, r3
 8004922:	f000 f84f 	bl	80049c4 <memcpy>
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b006      	add	sp, #24
 800492c:	bd80      	pop	{r7, pc}

0800492e <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	0018      	movs	r0, r3
 800493e:	f7ff ff7f 	bl	8004840 <kfifo_avail>
 8004942:	0002      	movs	r2, r0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4293      	cmp	r3, r2
 8004948:	d905      	bls.n	8004956 <kfifo_in+0x28>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	0018      	movs	r0, r3
 800494e:	f7ff ff77 	bl	8004840 <kfifo_avail>
 8004952:	0003      	movs	r3, r0
 8004954:	e000      	b.n	8004958 <kfifo_in+0x2a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	2300      	movs	r3, #0
 8004962:	f7ff ffb1 	bl	80048c8 <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	0011      	movs	r1, r2
 800496c:	0018      	movs	r0, r3
 800496e:	f7ff ff7a 	bl	8004866 <__kfifo_add_in>
	return len;
 8004972:	687b      	ldr	r3, [r7, #4]
}
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b004      	add	sp, #16
 800497a:	bd80      	pop	{r7, pc}

0800497c <__libc_init_array>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	2600      	movs	r6, #0
 8004980:	4d0c      	ldr	r5, [pc, #48]	; (80049b4 <__libc_init_array+0x38>)
 8004982:	4c0d      	ldr	r4, [pc, #52]	; (80049b8 <__libc_init_array+0x3c>)
 8004984:	1b64      	subs	r4, r4, r5
 8004986:	10a4      	asrs	r4, r4, #2
 8004988:	42a6      	cmp	r6, r4
 800498a:	d109      	bne.n	80049a0 <__libc_init_array+0x24>
 800498c:	2600      	movs	r6, #0
 800498e:	f000 f82b 	bl	80049e8 <_init>
 8004992:	4d0a      	ldr	r5, [pc, #40]	; (80049bc <__libc_init_array+0x40>)
 8004994:	4c0a      	ldr	r4, [pc, #40]	; (80049c0 <__libc_init_array+0x44>)
 8004996:	1b64      	subs	r4, r4, r5
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	42a6      	cmp	r6, r4
 800499c:	d105      	bne.n	80049aa <__libc_init_array+0x2e>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	00b3      	lsls	r3, r6, #2
 80049a2:	58eb      	ldr	r3, [r5, r3]
 80049a4:	4798      	blx	r3
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7ee      	b.n	8004988 <__libc_init_array+0xc>
 80049aa:	00b3      	lsls	r3, r6, #2
 80049ac:	58eb      	ldr	r3, [r5, r3]
 80049ae:	4798      	blx	r3
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7f2      	b.n	800499a <__libc_init_array+0x1e>
 80049b4:	08004bc4 	.word	0x08004bc4
 80049b8:	08004bc4 	.word	0x08004bc4
 80049bc:	08004bc4 	.word	0x08004bc4
 80049c0:	08004bc8 	.word	0x08004bc8

080049c4 <memcpy>:
 80049c4:	2300      	movs	r3, #0
 80049c6:	b510      	push	{r4, lr}
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d100      	bne.n	80049ce <memcpy+0xa>
 80049cc:	bd10      	pop	{r4, pc}
 80049ce:	5ccc      	ldrb	r4, [r1, r3]
 80049d0:	54c4      	strb	r4, [r0, r3]
 80049d2:	3301      	adds	r3, #1
 80049d4:	e7f8      	b.n	80049c8 <memcpy+0x4>

080049d6 <memset>:
 80049d6:	0003      	movs	r3, r0
 80049d8:	1882      	adds	r2, r0, r2
 80049da:	4293      	cmp	r3, r2
 80049dc:	d100      	bne.n	80049e0 <memset+0xa>
 80049de:	4770      	bx	lr
 80049e0:	7019      	strb	r1, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	e7f9      	b.n	80049da <memset+0x4>
	...

080049e8 <_init>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr

080049f4 <_fini>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr
