
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea8  08003ea8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ea8  08003ea8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ea8  08003ea8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000001c  08003ecc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08003ecc  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed45  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ac  00000000  00000000  0002ed89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00030f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00031c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000201d  00000000  00000000  00032860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001067a  00000000  00000000  0003487d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064901  00000000  00000000  00044ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a97f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e44  00000000  00000000  000a9848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e58 	.word	0x08003e58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003e58 	.word	0x08003e58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Delay_nMs>:
    for(j=0;j<4540;j++);
  }
}

void HAL_Delay_nMs(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick( );
 800022c:	f000 fe8e 	bl	8000f4c <HAL_GetTick>
 8000230:	0003      	movs	r3, r0
 8000232:	60fb      	str	r3, [r7, #12]
    while( ( HAL_GetTick( ) - tickstart ) < Delay );
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	f000 fe89 	bl	8000f4c <HAL_GetTick>
 800023a:	0002      	movs	r2, r0
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	429a      	cmp	r2, r3
 8000244:	d8f7      	bhi.n	8000236 <HAL_Delay_nMs+0x16>
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b004      	add	sp, #16
 800024e:	bd80      	pop	{r7, pc}

08000250 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer interrupt callback function
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim16.Instance)
    //	{
    //		time100ms_flag = 1;
    //		timer100InterruptHandler();
    //	}
    if (htim->Instance == htim17.Instance) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	429a      	cmp	r2, r3
 8000262:	d103      	bne.n	800026c <HAL_TIM_PeriodElapsedCallback+0x1c>
        uartTimerIrqHandler(htim);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	0018      	movs	r0, r3
 8000268:	f000 f9da 	bl	8000620 <uartTimerIrqHandler>
    }
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000015c 	.word	0x2000015c

08000278 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	68da      	ldr	r2, [r3, #12]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	609a      	str	r2, [r3, #8]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b002      	add	sp, #8
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <uartInitRxFifo>:
 * @brief Init uart fifo
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	0002      	movs	r2, r0
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	011a      	lsls	r2, r3, #4
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <uartInitRxFifo+0x34>)
 80002ac:	18d0      	adds	r0, r2, r3
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	021a      	lsls	r2, r3, #8
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <uartInitRxFifo+0x38>)
 80002b6:	18d3      	adds	r3, r2, r3
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	0052      	lsls	r2, r2, #1
 80002bc:	0019      	movs	r1, r3
 80002be:	f003 fccc 	bl	8003c5a <kfifo_init>
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b002      	add	sp, #8
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	2000013c 	.word	0x2000013c
 80002d0:	2000003c 	.word	0x2000003c

080002d4 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80002d4:	b5b0      	push	{r4, r5, r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	1dbb      	adds	r3, r7, #6
 80002e0:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80002e2:	2517      	movs	r5, #23
 80002e4:	197b      	adds	r3, r7, r5
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 80002ea:	197c      	adds	r4, r7, r5
 80002ec:	1dbb      	adds	r3, r7, #6
 80002ee:	881a      	ldrh	r2, [r3, #0]
 80002f0:	68b9      	ldr	r1, [r7, #8]
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	0018      	movs	r0, r3
 80002f6:	f002 fb05 	bl	8002904 <HAL_UART_Receive_IT>
 80002fa:	0003      	movs	r3, r0
 80002fc:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80002fe:	197b      	adds	r3, r7, r5
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d007      	beq.n	8000316 <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	2120      	movs	r1, #32
 800030c:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2278      	movs	r2, #120	; 0x78
 8000312:	2100      	movs	r1, #0
 8000314:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8000316:	2317      	movs	r3, #23
 8000318:	18fb      	adds	r3, r7, r3
 800031a:	781b      	ldrb	r3, [r3, #0]
}
 800031c:	0018      	movs	r0, r3
 800031e:	46bd      	mov	sp, r7
 8000320:	b006      	add	sp, #24
 8000322:	bdb0      	pop	{r4, r5, r7, pc}

08000324 <uartInit>:
 * @brief Uart init
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	0002      	movs	r2, r0
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	0018      	movs	r0, r3
 8000336:	f7ff ffaf 	bl	8000298 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <uartInit+0x60>)
 8000340:	0052      	lsls	r2, r2, #1
 8000342:	2100      	movs	r1, #0
 8000344:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <uartInit+0x64>)
 800034c:	0052      	lsls	r2, r2, #1
 800034e:	2100      	movs	r1, #0
 8000350:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <uartInit+0x68>)
 8000354:	2200      	movs	r2, #0
 8000356:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <uartInit+0x6c>)
 800035a:	2200      	movs	r2, #0
 800035c:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <uartInit+0x70>)
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	18d3      	adds	r3, r2, r3
 8000368:	3304      	adds	r3, #4
 800036a:	6818      	ldr	r0, [r3, #0]
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <uartInit+0x74>)
 8000372:	18d3      	adds	r3, r2, r3
 8000374:	2201      	movs	r2, #1
 8000376:	0019      	movs	r1, r3
 8000378:	f7ff ffac 	bl	80002d4 <UART_Receive_IT>
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}
 8000384:	2000014c 	.word	0x2000014c
 8000388:	20000150 	.word	0x20000150
 800038c:	20000154 	.word	0x20000154
 8000390:	20000158 	.word	0x20000158
 8000394:	20000000 	.word	0x20000000
 8000398:	20000038 	.word	0x20000038

0800039c <uartRecovery>:
/**
 * @brief uart recovery mode
 * @param channel 
 */
static void uartRecovery(uartChannel_t channel)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	0002      	movs	r2, r0
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <uartRecovery+0x34>)
 80003ae:	011b      	lsls	r3, r3, #4
 80003b0:	18d3      	adds	r3, r2, r3
 80003b2:	3304      	adds	r3, #4
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	0018      	movs	r0, r3
 80003b8:	f002 f9c6 	bl	8002748 <HAL_UART_DeInit>
    uartInit(channel);
 80003bc:	1dfb      	adds	r3, r7, #7
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	0018      	movs	r0, r3
 80003c2:	f7ff ffaf 	bl	8000324 <uartInit>
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b002      	add	sp, #8
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	20000000 	.word	0x20000000

080003d4 <uartSendData>:
 * @param data
 * @param length
 * @retval None
 */
void uartSendData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 80003d4:	b590      	push	{r4, r7, lr}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6039      	str	r1, [r7, #0]
 80003dc:	0011      	movs	r1, r2
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	1c02      	adds	r2, r0, #0
 80003e2:	701a      	strb	r2, [r3, #0]
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	1c0a      	adds	r2, r1, #0
 80003e8:	801a      	strh	r2, [r3, #0]
    uart_tx_status[channel] = BSP_UART_TX_START;
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <uartSendData+0x54>)
 80003f0:	2101      	movs	r1, #1
 80003f2:	54d1      	strb	r1, [r2, r3]
	// if (HAL_UART_Transmit_DMA(uartPara[channel].uart_handle_addr, data, length) != HAL_OK)
	/* use IT mode send data */
	// if (HAL_UART_Transmit_IT( uartPara[channel].uart_handle_addr, data, length ) != HAL_OK)
	/* use poll mode send data */
	if (HAL_UART_Transmit(uartPara[channel].uart_handle_addr, data, length, 0xFFFF) != HAL_OK)
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <uartSendData+0x58>)
 80003fa:	011b      	lsls	r3, r3, #4
 80003fc:	18d3      	adds	r3, r2, r3
 80003fe:	3304      	adds	r3, #4
 8000400:	6818      	ldr	r0, [r3, #0]
 8000402:	4c0b      	ldr	r4, [pc, #44]	; (8000430 <uartSendData+0x5c>)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	881a      	ldrh	r2, [r3, #0]
 8000408:	6839      	ldr	r1, [r7, #0]
 800040a:	0023      	movs	r3, r4
 800040c:	f002 f9da 	bl	80027c4 <HAL_UART_Transmit>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d004      	beq.n	800041e <uartSendData+0x4a>
    {
        uartRecovery(channel);
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	0018      	movs	r0, r3
 800041a:	f7ff ffbf 	bl	800039c <uartRecovery>
    }
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b003      	add	sp, #12
 8000424:	bd90      	pop	{r4, r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	20000154 	.word	0x20000154
 800042c:	20000000 	.word	0x20000000
 8000430:	0000ffff 	.word	0x0000ffff

08000434 <HAL_UART_TxCpltCallback>:
 * @brief uart send done callback function
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 800043c:	230f      	movs	r3, #15
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
 8000444:	e015      	b.n	8000472 <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 8000446:	210f      	movs	r1, #15
 8000448:	187b      	adds	r3, r7, r1
 800044a:	781a      	ldrb	r2, [r3, #0]
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <HAL_UART_TxCpltCallback+0x54>)
 800044e:	0112      	lsls	r2, r2, #4
 8000450:	58d2      	ldr	r2, [r2, r3]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	429a      	cmp	r2, r3
 8000458:	d105      	bne.n	8000466 <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 800045a:	187b      	adds	r3, r7, r1
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4a0b      	ldr	r2, [pc, #44]	; (800048c <HAL_UART_TxCpltCallback+0x58>)
 8000460:	2102      	movs	r1, #2
 8000462:	54d1      	strb	r1, [r2, r3]
            break;
 8000464:	e00b      	b.n	800047e <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8000466:	210f      	movs	r1, #15
 8000468:	187b      	adds	r3, r7, r1
 800046a:	781a      	ldrb	r2, [r3, #0]
 800046c:	187b      	adds	r3, r7, r1
 800046e:	3201      	adds	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	230f      	movs	r3, #15
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0e4      	beq.n	8000446 <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b004      	add	sp, #16
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000000 	.word	0x20000000
 800048c:	20000154 	.word	0x20000154

08000490 <uartGetData>:
 * @param data 
 * @param length 
 * @return uint32_t 
 */
uint32_t uartGetData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6039      	str	r1, [r7, #0]
 8000498:	0011      	movs	r1, r2
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	1c02      	adds	r2, r0, #0
 800049e:	701a      	strb	r2, [r3, #0]
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	1c0a      	adds	r2, r1, #0
 80004a4:	801a      	strh	r2, [r3, #0]
    uint32_t ret = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]

    if (BSP_UART_RX_COMPLETED == uart_rx_status[channel]) 
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <uartGetData+0x54>)
 80004b0:	5cd3      	ldrb	r3, [r2, r3]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d10d      	bne.n	80004d4 <uartGetData+0x44>
	{
		ret = kfifo_out(&uart_rx_fifo[channel], data, length);
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	011a      	lsls	r2, r3, #4
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <uartGetData+0x58>)
 80004c0:	18d0      	adds	r0, r2, r3
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	881a      	ldrh	r2, [r3, #0]
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	0019      	movs	r1, r3
 80004ca:	f003 fc67 	bl	8003d9c <kfifo_out>
 80004ce:	0003      	movs	r3, r0
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	e001      	b.n	80004d8 <uartGetData+0x48>
	}    
	else
	{
		ret = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
	}

    return ret;
 80004d8:	68fb      	ldr	r3, [r7, #12]
}
 80004da:	0018      	movs	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000158 	.word	0x20000158
 80004e8:	2000013c 	.word	0x2000013c

080004ec <uartResetData>:
 * @brief Reset uart fifo data
 * @param channel 
 * @retval None
 */
void uartResetData(uartChannel_t channel)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
    kfifo_reset(&uart_rx_fifo[channel]);
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	011a      	lsls	r2, r3, #4
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <uartResetData+0x3c>)
 8000500:	18d3      	adds	r3, r2, r3
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff feb8 	bl	8000278 <kfifo_reset>
    uart_rx_size[channel] = 0;
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <uartResetData+0x40>)
 800050e:	0052      	lsls	r2, r2, #1
 8000510:	2100      	movs	r1, #0
 8000512:	52d1      	strh	r1, [r2, r3]
    uart_rx_status[channel] = BSP_UART_IDLE;
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <uartResetData+0x44>)
 800051a:	2100      	movs	r1, #0
 800051c:	54d1      	strb	r1, [r2, r3]
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	2000013c 	.word	0x2000013c
 800052c:	20000150 	.word	0x20000150
 8000530:	20000158 	.word	0x20000158

08000534 <HAL_UART_RxCpltCallback>:
/**
 * @brief Uart rx callback
 * @param huart 
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 800053c:	230f      	movs	r3, #15
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
 8000544:	e059      	b.n	80005fa <HAL_UART_RxCpltCallback+0xc6>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8000546:	240f      	movs	r4, #15
 8000548:	193b      	adds	r3, r7, r4
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	4b2f      	ldr	r3, [pc, #188]	; (800060c <HAL_UART_RxCpltCallback+0xd8>)
 800054e:	0112      	lsls	r2, r2, #4
 8000550:	58d2      	ldr	r2, [r2, r3]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d149      	bne.n	80005ee <HAL_UART_RxCpltCallback+0xba>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 800055a:	193b      	adds	r3, r7, r4
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4a2c      	ldr	r2, [pc, #176]	; (8000610 <HAL_UART_RxCpltCallback+0xdc>)
 8000560:	2103      	movs	r1, #3
 8000562:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8000564:	193b      	adds	r3, r7, r4
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4a28      	ldr	r2, [pc, #160]	; (800060c <HAL_UART_RxCpltCallback+0xd8>)
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	3308      	adds	r3, #8
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4a24      	ldr	r2, [pc, #144]	; (800060c <HAL_UART_RxCpltCallback+0xd8>)
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	18d3      	adds	r3, r2, r3
 8000580:	3308      	adds	r3, #8
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2201      	movs	r2, #1
 8000586:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8000588:	193b      	adds	r3, r7, r4
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4a1f      	ldr	r2, [pc, #124]	; (800060c <HAL_UART_RxCpltCallback+0xd8>)
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	18d3      	adds	r3, r2, r3
 8000592:	330c      	adds	r3, #12
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fe4c 	bl	8002234 <HAL_TIM_Base_Start_IT>
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 800059c:	193b      	adds	r3, r7, r4
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	011a      	lsls	r2, r3, #4
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <HAL_UART_RxCpltCallback+0xe0>)
 80005a4:	18d0      	adds	r0, r2, r3
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_UART_RxCpltCallback+0xe4>)
 80005ac:	18d3      	adds	r3, r2, r3
 80005ae:	2201      	movs	r2, #1
 80005b0:	0019      	movs	r1, r3
 80005b2:	f003 fbcc 	bl	8003d4e <kfifo_in>
            uart_rx_counter[i]++;
 80005b6:	0020      	movs	r0, r4
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <HAL_UART_RxCpltCallback+0xe8>)
 80005be:	0059      	lsls	r1, r3, #1
 80005c0:	5a8a      	ldrh	r2, [r1, r2]
 80005c2:	3201      	adds	r2, #1
 80005c4:	b291      	uxth	r1, r2
 80005c6:	4a15      	ldr	r2, [pc, #84]	; (800061c <HAL_UART_RxCpltCallback+0xe8>)
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 80005cc:	0001      	movs	r1, r0
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_UART_RxCpltCallback+0xd8>)
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	18d3      	adds	r3, r2, r3
 80005d8:	3304      	adds	r3, #4
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <HAL_UART_RxCpltCallback+0xe4>)
 80005e2:	18d3      	adds	r3, r2, r3
 80005e4:	2201      	movs	r2, #1
 80005e6:	0019      	movs	r1, r3
 80005e8:	f7ff fe74 	bl	80002d4 <UART_Receive_IT>
            return;
 80005ec:	e00a      	b.n	8000604 <HAL_UART_RxCpltCallback+0xd0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80005ee:	210f      	movs	r1, #15
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	3201      	adds	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	230f      	movs	r3, #15
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0a0      	beq.n	8000546 <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 8000604:	46bd      	mov	sp, r7
 8000606:	b005      	add	sp, #20
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000000 	.word	0x20000000
 8000610:	20000158 	.word	0x20000158
 8000614:	2000013c 	.word	0x2000013c
 8000618:	20000038 	.word	0x20000038
 800061c:	2000014c 	.word	0x2000014c

08000620 <uartTimerIrqHandler>:
/**
 * @brief Uart rx timeout callback
 * @param htim 
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8000628:	230f      	movs	r3, #15
 800062a:	18fb      	adds	r3, r7, r3
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e05d      	b.n	80006ee <uartTimerIrqHandler+0xce>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 8000632:	210f      	movs	r1, #15
 8000634:	187b      	adds	r3, r7, r1
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4a32      	ldr	r2, [pc, #200]	; (8000704 <uartTimerIrqHandler+0xe4>)
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	3308      	adds	r3, #8
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	429a      	cmp	r2, r3
 8000648:	d14b      	bne.n	80006e2 <uartTimerIrqHandler+0xc2>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 800064a:	000c      	movs	r4, r1
 800064c:	187b      	adds	r3, r7, r1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4a2c      	ldr	r2, [pc, #176]	; (8000704 <uartTimerIrqHandler+0xe4>)
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	18d3      	adds	r3, r2, r3
 8000656:	330c      	adds	r3, #12
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	0018      	movs	r0, r3
 800065c:	f001 fe36 	bl	80022cc <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8000660:	0020      	movs	r0, r4
 8000662:	183b      	adds	r3, r7, r0
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4a28      	ldr	r2, [pc, #160]	; (8000708 <uartTimerIrqHandler+0xe8>)
 8000668:	2104      	movs	r1, #4
 800066a:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 800066c:	183b      	adds	r3, r7, r0
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <uartTimerIrqHandler+0xec>)
 8000672:	0052      	lsls	r2, r2, #1
 8000674:	5ad1      	ldrh	r1, [r2, r3]
 8000676:	183b      	adds	r3, r7, r0
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <uartTimerIrqHandler+0xf0>)
 800067c:	0052      	lsls	r2, r2, #1
 800067e:	5ad3      	ldrh	r3, [r2, r3]
 8000680:	183a      	adds	r2, r7, r0
 8000682:	7812      	ldrb	r2, [r2, #0]
 8000684:	18cb      	adds	r3, r1, r3
 8000686:	b299      	uxth	r1, r3
 8000688:	4b20      	ldr	r3, [pc, #128]	; (800070c <uartTimerIrqHandler+0xec>)
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 800068e:	183b      	adds	r3, r7, r0
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <uartTimerIrqHandler+0xec>)
 8000694:	0052      	lsls	r2, r2, #1
 8000696:	5ad2      	ldrh	r2, [r2, r3]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	429a      	cmp	r2, r3
 800069e:	d918      	bls.n	80006d2 <uartTimerIrqHandler+0xb2>
            {
            	uart_rx_size[i] = uart_rx_counter[i];
 80006a0:	183b      	adds	r3, r7, r0
 80006a2:	7819      	ldrb	r1, [r3, #0]
 80006a4:	183b      	adds	r3, r7, r0
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <uartTimerIrqHandler+0xf0>)
 80006aa:	0049      	lsls	r1, r1, #1
 80006ac:	5ac9      	ldrh	r1, [r1, r3]
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <uartTimerIrqHandler+0xec>)
 80006b0:	0052      	lsls	r2, r2, #1
 80006b2:	52d1      	strh	r1, [r2, r3]
            	kfifo_reset(&uart_rx_fifo[i]);
 80006b4:	0004      	movs	r4, r0
 80006b6:	183b      	adds	r3, r7, r0
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	011a      	lsls	r2, r3, #4
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <uartTimerIrqHandler+0xf4>)
 80006be:	18d3      	adds	r3, r2, r3
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff fdd9 	bl	8000278 <kfifo_reset>
            	uart_rx_size[i] = 0;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <uartTimerIrqHandler+0xec>)
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	2100      	movs	r1, #0
 80006d0:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <uartTimerIrqHandler+0xf0>)
 80006da:	0052      	lsls	r2, r2, #1
 80006dc:	2100      	movs	r1, #0
 80006de:	52d1      	strh	r1, [r2, r3]
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 80006e0:	e00b      	b.n	80006fa <uartTimerIrqHandler+0xda>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 80006e2:	210f      	movs	r1, #15
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	3201      	adds	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	230f      	movs	r3, #15
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d09c      	beq.n	8000632 <uartTimerIrqHandler+0x12>
        }
    }
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b005      	add	sp, #20
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000000 	.word	0x20000000
 8000708:	20000158 	.word	0x20000158
 800070c:	20000150 	.word	0x20000150
 8000710:	2000014c 	.word	0x2000014c
 8000714:	2000013c 	.word	0x2000013c

08000718 <HAL_UART_ErrorCallback>:
/**
 * @brief uart error callback
 * @param huart 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8000720:	230f      	movs	r3, #15
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	e014      	b.n	8000754 <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 800072a:	210f      	movs	r1, #15
 800072c:	187b      	adds	r3, r7, r1
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_UART_ErrorCallback+0x50>)
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	58d2      	ldr	r2, [r2, r3]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	429a      	cmp	r2, r3
 800073c:	d104      	bne.n	8000748 <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 800073e:	187b      	adds	r3, r7, r1
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff fe2a 	bl	800039c <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8000748:	210f      	movs	r1, #15
 800074a:	187b      	adds	r3, r7, r1
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	187b      	adds	r3, r7, r1
 8000750:	3201      	adds	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	230f      	movs	r3, #15
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0e5      	beq.n	800072a <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b004      	add	sp, #16
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000000 	.word	0x20000000

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0c2      	sub	sp, #264	; 0x108
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buffer[256] = { 0 };
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <main+0x94>)
 8000774:	2284      	movs	r2, #132	; 0x84
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	189b      	adds	r3, r3, r2
 800077a:	19db      	adds	r3, r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	3304      	adds	r3, #4
 8000782:	22fc      	movs	r2, #252	; 0xfc
 8000784:	2100      	movs	r1, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f003 fb5d 	bl	8003e46 <memset>
  uint32_t bufferSize = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	1d7a      	adds	r2, r7, #5
 8000790:	32ff      	adds	r2, #255	; 0xff
 8000792:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fb80 	bl	8000e98 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f834 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 f91a 	bl	80009d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a0:	f000 f8b8 	bl	8000914 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007a4:	f000 f8e6 	bl	8000974 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80007a8:	f000 f88c 	bl	80008c4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  uartInit(BSP_TTL_CHANNEL1);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fdb9 	bl	8000324 <uartInit>

    /* USER CODE BEGIN 3 */
#if BSP_TEST_ENABLE
	  bspTest();
#endif
	bufferSize = uartGetData(BSP_TTL_CHANNEL1, buffer, 256);
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	005a      	lsls	r2, r3, #1
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	0019      	movs	r1, r3
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff fe68 	bl	8000490 <uartGetData>
 80007c0:	0003      	movs	r3, r0
 80007c2:	1d7a      	adds	r2, r7, #5
 80007c4:	32ff      	adds	r2, #255	; 0xff
 80007c6:	6013      	str	r3, [r2, #0]
	if (bufferSize)
 80007c8:	1d7b      	adds	r3, r7, #5
 80007ca:	33ff      	adds	r3, #255	; 0xff
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0ef      	beq.n	80007b2 <main+0x46>
	{
		/* send the buffer data to uart1 */
		uartSendData(BSP_TTL_CHANNEL1, buffer, bufferSize);
 80007d2:	1d7b      	adds	r3, r7, #5
 80007d4:	33ff      	adds	r3, #255	; 0xff
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	0019      	movs	r1, r3
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff fdf8 	bl	80003d4 <uartSendData>
		HAL_Delay_nMs(1000);
 80007e4:	23fa      	movs	r3, #250	; 0xfa
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fd19 	bl	8000220 <HAL_Delay_nMs>

		/* reset the value */
		bufferSize = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	1d7a      	adds	r2, r7, #5
 80007f2:	32ff      	adds	r2, #255	; 0xff
 80007f4:	6013      	str	r3, [r2, #0]
		uartResetData(BSP_TTL_CHANNEL1);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fe78 	bl	80004ec <uartResetData>
	bufferSize = uartGetData(BSP_TTL_CHANNEL1, buffer, 256);
 80007fc:	e7d9      	b.n	80007b2 <main+0x46>
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	fffffefc 	.word	0xfffffefc

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b095      	sub	sp, #84	; 0x54
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	2420      	movs	r4, #32
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	2330      	movs	r3, #48	; 0x30
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f003 fb16 	bl	8003e46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081a:	2310      	movs	r3, #16
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	2310      	movs	r3, #16
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f003 fb0e 	bl	8003e46 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2310      	movs	r3, #16
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f003 fb07 	bl	8003e46 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	0021      	movs	r1, r4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	0252      	lsls	r2, r2, #9
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	02d2      	lsls	r2, r2, #11
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	187b      	adds	r3, r7, r1
 8000864:	0018      	movs	r0, r3
 8000866:	f000 ff67 	bl	8001738 <HAL_RCC_OscConfig>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800086e:	f000 f997 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	2110      	movs	r1, #16
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2207      	movs	r2, #7
 8000878:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2202      	movs	r2, #2
 800087e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2101      	movs	r1, #1
 8000890:	0018      	movs	r0, r3
 8000892:	f001 fa6b 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800089a:	f000 f981 	bl	8000ba0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800089e:	003b      	movs	r3, r7
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008aa:	003b      	movs	r3, r7
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fba3 	bl	8001ff8 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008b6:	f000 f973 	bl	8000ba0 <Error_Handler>
  }
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b015      	add	sp, #84	; 0x54
 80008c0:	bd90      	pop	{r4, r7, pc}
	...

080008c4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_TIM17_Init+0x44>)
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <MX_TIM17_Init+0x48>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_TIM17_Init+0x44>)
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <MX_TIM17_Init+0x4c>)
 80008d2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_TIM17_Init+0x44>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_TIM17_Init+0x44>)
 80008dc:	2223      	movs	r2, #35	; 0x23
 80008de:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_TIM17_Init+0x44>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_TIM17_Init+0x44>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_TIM17_Init+0x44>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <MX_TIM17_Init+0x44>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fc4d 	bl	8002194 <HAL_TIM_Base_Init>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80008fe:	f000 f94f 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000015c 	.word	0x2000015c
 800090c:	40014800 	.word	0x40014800
 8000910:	000012bf 	.word	0x000012bf

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART1_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART1_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000920:	22e1      	movs	r2, #225	; 0xe1
 8000922:	0252      	lsls	r2, r2, #9
 8000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART1_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART1_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART1_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <MX_USART1_UART_Init+0x58>)
 8000958:	0018      	movs	r0, r3
 800095a:	f001 fea1 	bl	80026a0 <HAL_UART_Init>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f91d 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200001a4 	.word	0x200001a4
 8000970:	40013800 	.word	0x40013800

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART2_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_USART2_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART2_UART_Init+0x58>)
 8000980:	22e1      	movs	r2, #225	; 0xe1
 8000982:	0252      	lsls	r2, r2, #9
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 fe71 	bl	80026a0 <HAL_UART_Init>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f8ed 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000022c 	.word	0x2000022c
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	240c      	movs	r4, #12
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	0018      	movs	r0, r3
 80009e0:	2314      	movs	r3, #20
 80009e2:	001a      	movs	r2, r3
 80009e4:	2100      	movs	r1, #0
 80009e6:	f003 fa2e 	bl	8003e46 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ea:	4b6a      	ldr	r3, [pc, #424]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	4b69      	ldr	r3, [pc, #420]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	03c9      	lsls	r1, r1, #15
 80009f4:	430a      	orrs	r2, r1
 80009f6:	615a      	str	r2, [r3, #20]
 80009f8:	4b66      	ldr	r3, [pc, #408]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 80009fa:	695a      	ldr	r2, [r3, #20]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	03db      	lsls	r3, r3, #15
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b63      	ldr	r3, [pc, #396]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a08:	695a      	ldr	r2, [r3, #20]
 8000a0a:	4b62      	ldr	r3, [pc, #392]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	0289      	lsls	r1, r1, #10
 8000a10:	430a      	orrs	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	4b5f      	ldr	r3, [pc, #380]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	029b      	lsls	r3, r3, #10
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b5c      	ldr	r3, [pc, #368]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a24:	695a      	ldr	r2, [r3, #20]
 8000a26:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	02c9      	lsls	r1, r1, #11
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	615a      	str	r2, [r3, #20]
 8000a30:	4b58      	ldr	r3, [pc, #352]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a32:	695a      	ldr	r2, [r3, #20]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	02db      	lsls	r3, r3, #11
 8000a38:	4013      	ands	r3, r2
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 8000a3e:	2381      	movs	r3, #129	; 0x81
 8000a40:	0119      	lsls	r1, r3, #4
 8000a42:	2390      	movs	r3, #144	; 0x90
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	2200      	movs	r2, #0
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 fe57 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 8000a4e:	4952      	ldr	r1, [pc, #328]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a50:	4b52      	ldr	r3, [pc, #328]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fe51 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2210      	movs	r2, #16
 8000a5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2201      	movs	r2, #1
 8000a64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2201      	movs	r2, #1
 8000a70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8000a72:	193a      	adds	r2, r7, r4
 8000a74:	2390      	movs	r3, #144	; 0x90
 8000a76:	05db      	lsls	r3, r3, #23
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fbfe 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 8000a80:	0021      	movs	r1, r4
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0152      	lsls	r2, r2, #5
 8000a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	000c      	movs	r4, r1
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2201      	movs	r2, #1
 8000a96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	4a40      	ldr	r2, [pc, #256]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	0010      	movs	r0, r2
 8000aa0:	f000 fbec 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 8000aa4:	0021      	movs	r1, r4
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	0192      	lsls	r2, r2, #6
 8000aac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2288      	movs	r2, #136	; 0x88
 8000ab2:	0352      	lsls	r2, r2, #13
 8000ab4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8000abc:	000c      	movs	r4, r1
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	4a36      	ldr	r2, [pc, #216]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	f000 fbd9 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 8000aca:	0021      	movs	r1, r4
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	22c0      	movs	r2, #192	; 0xc0
 8000ad0:	0212      	lsls	r2, r2, #8
 8000ad2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2201      	movs	r2, #1
 8000ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	4a2c      	ldr	r2, [pc, #176]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000aec:	0019      	movs	r1, r3
 8000aee:	0010      	movs	r0, r2
 8000af0:	f000 fbc4 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8000b08:	193a      	adds	r2, r7, r4
 8000b0a:	2390      	movs	r3, #144	; 0x90
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fbb3 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 8000b16:	0021      	movs	r1, r4
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	000c      	movs	r4, r1
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2201      	movs	r2, #1
 8000b26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2203      	movs	r2, #3
 8000b32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b34:	193a      	adds	r2, r7, r4
 8000b36:	2390      	movs	r3, #144	; 0x90
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fb9d 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	0152      	lsls	r2, r2, #5
 8000b48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2288      	movs	r2, #136	; 0x88
 8000b4e:	0352      	lsls	r2, r2, #13
 8000b50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2201      	movs	r2, #1
 8000b56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000b58:	193a      	adds	r2, r7, r4
 8000b5a:	2390      	movs	r3, #144	; 0x90
 8000b5c:	05db      	lsls	r3, r3, #23
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fb8b 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 8000b66:	0021      	movs	r1, r4
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2201      	movs	r2, #1
 8000b72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000b84:	0019      	movs	r1, r3
 8000b86:	0010      	movs	r0, r2
 8000b88:	f000 fb78 	bl	800127c <HAL_GPIO_Init>

}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b009      	add	sp, #36	; 0x24
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	0000c030 	.word	0x0000c030
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bcc:	69da      	ldr	r2, [r3, #28]
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0549      	lsls	r1, r1, #21
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	61da      	str	r2, [r3, #28]
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bda:	69da      	ldr	r2, [r3, #28]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	055b      	lsls	r3, r3, #21
 8000be0:	4013      	ands	r3, r2
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_TIM_Base_MspInit+0x48>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d115      	bne.n	8000c32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_TIM_Base_MspInit+0x4c>)
 8000c08:	699a      	ldr	r2, [r3, #24]
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_TIM_Base_MspInit+0x4c>)
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	02c9      	lsls	r1, r1, #11
 8000c10:	430a      	orrs	r2, r1
 8000c12:	619a      	str	r2, [r3, #24]
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_TIM_Base_MspInit+0x4c>)
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	02db      	lsls	r3, r3, #11
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2016      	movs	r0, #22
 8000c28:	f000 fa68 	bl	80010fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000c2c:	2016      	movs	r0, #22
 8000c2e:	f000 fa7a 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40014800 	.word	0x40014800
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b08d      	sub	sp, #52	; 0x34
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	241c      	movs	r4, #28
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	2314      	movs	r3, #20
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f003 f8f5 	bl	8003e46 <memset>
  if(huart->Instance==USART1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a3d      	ldr	r2, [pc, #244]	; (8000d58 <HAL_UART_MspInit+0x114>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d13c      	bne.n	8000ce0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c66:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000c68:	699a      	ldr	r2, [r3, #24]
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	01c9      	lsls	r1, r1, #7
 8000c70:	430a      	orrs	r2, r1
 8000c72:	619a      	str	r2, [r3, #24]
 8000c74:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000c76:	699a      	ldr	r2, [r3, #24]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	01db      	lsls	r3, r3, #7
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0289      	lsls	r1, r1, #10
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	615a      	str	r2, [r3, #20]
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	029b      	lsls	r3, r3, #10
 8000c98:	4013      	ands	r3, r2
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	22c0      	movs	r2, #192	; 0xc0
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	0021      	movs	r1, r4
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2202      	movs	r2, #2
 8000cac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	187a      	adds	r2, r7, r1
 8000cc2:	2390      	movs	r3, #144	; 0x90
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fad7 	bl	800127c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	201b      	movs	r0, #27
 8000cd4:	f000 fa12 	bl	80010fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd8:	201b      	movs	r0, #27
 8000cda:	f000 fa24 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cde:	e037      	b.n	8000d50 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <HAL_UART_MspInit+0x11c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d132      	bne.n	8000d50 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000cec:	69da      	ldr	r2, [r3, #28]
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	0289      	lsls	r1, r1, #10
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	61da      	str	r2, [r3, #28]
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000cfa:	69da      	ldr	r2, [r3, #28]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	029b      	lsls	r3, r3, #10
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0289      	lsls	r1, r1, #10
 8000d10:	430a      	orrs	r2, r1
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_UART_MspInit+0x118>)
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d22:	211c      	movs	r1, #28
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2201      	movs	r2, #1
 8000d40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	187a      	adds	r2, r7, r1
 8000d44:	2390      	movs	r3, #144	; 0x90
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	0011      	movs	r1, r2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fa96 	bl	800127c <HAL_GPIO_Init>
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b00d      	add	sp, #52	; 0x34
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	40013800 	.word	0x40013800
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40004400 	.word	0x40004400

08000d64 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <HAL_UART_MspDeInit+0x60>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d111      	bne.n	8000d9a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspDeInit+0x64>)
 8000d78:	699a      	ldr	r2, [r3, #24]
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_UART_MspDeInit+0x64>)
 8000d7c:	4913      	ldr	r1, [pc, #76]	; (8000dcc <HAL_UART_MspDeInit+0x68>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000d82:	23c0      	movs	r3, #192	; 0xc0
 8000d84:	00da      	lsls	r2, r3, #3
 8000d86:	2390      	movs	r3, #144	; 0x90
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 fbe5 	bl	800155c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000d92:	201b      	movs	r0, #27
 8000d94:	f000 f9d7 	bl	8001146 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000d98:	e010      	b.n	8000dbc <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_UART_MspDeInit+0x6c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d10b      	bne.n	8000dbc <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_UART_MspDeInit+0x64>)
 8000da6:	69da      	ldr	r2, [r3, #28]
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_UART_MspDeInit+0x64>)
 8000daa:	490a      	ldr	r1, [pc, #40]	; (8000dd4 <HAL_UART_MspDeInit+0x70>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000db0:	2390      	movs	r3, #144	; 0x90
 8000db2:	05db      	lsls	r3, r3, #23
 8000db4:	210c      	movs	r1, #12
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 fbd0 	bl	800155c <HAL_GPIO_DeInit>
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40013800 	.word	0x40013800
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	ffffbfff 	.word	0xffffbfff
 8000dd0:	40004400 	.word	0x40004400
 8000dd4:	fffdffff 	.word	0xfffdffff

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f894 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <TIM17_IRQHandler+0x14>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 fa8a 	bl	8002328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	2000015c 	.word	0x2000015c

08000e20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <USART1_IRQHandler+0x14>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f001 fdc4 	bl	80029b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	200001a4 	.word	0x200001a4

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e48:	f7ff fff6 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	; (8000e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <LoopForever+0xe>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	; (8000e90 <LoopForever+0x16>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e72:	f002 ffbb 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e76:	f7ff fc79 	bl	800076c <main>

08000e7a <LoopForever>:

LoopForever:
    b LoopForever
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
  ldr   r0, =_estack
 8000e7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e88:	08003eb0 	.word	0x08003eb0
  ldr r2, =_sbss
 8000e8c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e90:	200002b8 	.word	0x200002b8

08000e94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_IRQHandler>
	...

08000e98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_Init+0x24>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_Init+0x24>)
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 f809 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eae:	f7ff fe7d 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_InitTick+0x5c>)
 8000eca:	681c      	ldr	r4, [r3, #0]
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_InitTick+0x60>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	23fa      	movs	r3, #250	; 0xfa
 8000ed4:	0098      	lsls	r0, r3, #2
 8000ed6:	f7ff f917 	bl	8000108 <__udivsi3>
 8000eda:	0003      	movs	r3, r0
 8000edc:	0019      	movs	r1, r3
 8000ede:	0020      	movs	r0, r4
 8000ee0:	f7ff f912 	bl	8000108 <__udivsi3>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 f93d 	bl	8001166 <HAL_SYSTICK_Config>
 8000eec:	1e03      	subs	r3, r0, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e00f      	b.n	8000f14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d80b      	bhi.n	8000f12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	2301      	movs	r3, #1
 8000efe:	425b      	negs	r3, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 f8fa 	bl	80010fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_InitTick+0x64>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b003      	add	sp, #12
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	20000018 	.word	0x20000018
 8000f24:	20000014 	.word	0x20000014

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	001a      	movs	r2, r3
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	18d2      	adds	r2, r2, r3
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_IncTick+0x20>)
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	20000018 	.word	0x20000018
 8000f48:	200002b4 	.word	0x200002b4

08000f4c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <HAL_GetTick+0x10>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	200002b4 	.word	0x200002b4

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	0002      	movs	r2, r0
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b7f      	cmp	r3, #127	; 0x7f
 8000f72:	d809      	bhi.n	8000f88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	001a      	movs	r2, r3
 8000f7a:	231f      	movs	r3, #31
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_EnableIRQ+0x30>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	4091      	lsls	r1, r2
 8000f84:	000a      	movs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
  }
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa6:	d810      	bhi.n	8000fca <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	001a      	movs	r2, r3
 8000fae:	231f      	movs	r3, #31
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_DisableIRQ+0x40>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fbe:	f3bf 8f4f 	dsb	sy
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000fc4:	f3bf 8f6f 	isb	sy
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b7f      	cmp	r3, #127	; 0x7f
 8000fec:	d828      	bhi.n	8001040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <__NVIC_SetPriority+0xd4>)
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	33c0      	adds	r3, #192	; 0xc0
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	589b      	ldr	r3, [r3, r2]
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	0011      	movs	r1, r2
 8001004:	2203      	movs	r2, #3
 8001006:	400a      	ands	r2, r1
 8001008:	00d2      	lsls	r2, r2, #3
 800100a:	21ff      	movs	r1, #255	; 0xff
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	43d2      	mvns	r2, r2
 8001012:	401a      	ands	r2, r3
 8001014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	019b      	lsls	r3, r3, #6
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	401a      	ands	r2, r3
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	0018      	movs	r0, r3
 8001024:	2303      	movs	r3, #3
 8001026:	4003      	ands	r3, r0
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	481f      	ldr	r0, [pc, #124]	; (80010ac <__NVIC_SetPriority+0xd4>)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	430a      	orrs	r2, r1
 8001038:	33c0      	adds	r3, #192	; 0xc0
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800103e:	e031      	b.n	80010a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <__NVIC_SetPriority+0xd8>)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0019      	movs	r1, r3
 8001048:	230f      	movs	r3, #15
 800104a:	400b      	ands	r3, r1
 800104c:	3b08      	subs	r3, #8
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3306      	adds	r3, #6
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1dfa      	adds	r2, r7, #7
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	0011      	movs	r1, r2
 8001060:	2203      	movs	r2, #3
 8001062:	400a      	ands	r2, r1
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	21ff      	movs	r1, #255	; 0xff
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	43d2      	mvns	r2, r2
 800106e:	401a      	ands	r2, r3
 8001070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	019b      	lsls	r3, r3, #6
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	401a      	ands	r2, r3
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	2303      	movs	r3, #3
 8001082:	4003      	ands	r3, r0
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <__NVIC_SetPriority+0xd8>)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	001c      	movs	r4, r3
 8001090:	230f      	movs	r3, #15
 8001092:	4023      	ands	r3, r4
 8001094:	3b08      	subs	r3, #8
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	430a      	orrs	r2, r1
 800109a:	3306      	adds	r3, #6
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	18c3      	adds	r3, r0, r3
 80010a0:	3304      	adds	r3, #4
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b003      	add	sp, #12
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	045b      	lsls	r3, r3, #17
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d301      	bcc.n	80010cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c8:	2301      	movs	r3, #1
 80010ca:	e010      	b.n	80010ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SysTick_Config+0x44>)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	3a01      	subs	r2, #1
 80010d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d4:	2301      	movs	r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	2103      	movs	r1, #3
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff ff7c 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x44>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x44>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	210f      	movs	r1, #15
 8001108:	187b      	adds	r3, r7, r1
 800110a:	1c02      	adds	r2, r0, #0
 800110c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	187b      	adds	r3, r7, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b004      	add	sp, #16
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	0002      	movs	r2, r0
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b25b      	sxtb	r3, r3
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff ff11 	bl	8000f60 <__NVIC_EnableIRQ>
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	0002      	movs	r2, r0
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b25b      	sxtb	r3, r3
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff ff1b 	bl	8000f94 <__NVIC_DisableIRQ>
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff9f 	bl	80010b4 <SysTick_Config>
 8001176:	0003      	movs	r3, r0
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2221      	movs	r2, #33	; 0x21
 800118c:	5c9b      	ldrb	r3, [r3, r2]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d008      	beq.n	80011a6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2204      	movs	r2, #4
 8001198:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2220      	movs	r2, #32
 800119e:	2100      	movs	r1, #0
 80011a0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e020      	b.n	80011e8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	210e      	movs	r1, #14
 80011b2:	438a      	bics	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	438a      	bics	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ce:	2101      	movs	r1, #1
 80011d0:	4091      	lsls	r1, r2
 80011d2:	000a      	movs	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2221      	movs	r2, #33	; 0x21
 80011da:	2101      	movs	r1, #1
 80011dc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2220      	movs	r2, #32
 80011e2:	2100      	movs	r1, #0
 80011e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f8:	210f      	movs	r1, #15
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2221      	movs	r2, #33	; 0x21
 8001204:	5c9b      	ldrb	r3, [r3, r2]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d006      	beq.n	800121a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2204      	movs	r2, #4
 8001210:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	e028      	b.n	800126c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	210e      	movs	r1, #14
 8001226:	438a      	bics	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2101      	movs	r1, #1
 8001236:	438a      	bics	r2, r1
 8001238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001242:	2101      	movs	r1, #1
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2221      	movs	r2, #33	; 0x21
 800124e:	2101      	movs	r1, #1
 8001250:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2220      	movs	r2, #32
 8001256:	2100      	movs	r1, #0
 8001258:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	0010      	movs	r0, r2
 800126a:	4798      	blx	r3
    }
  }
  return status;
 800126c:	230f      	movs	r3, #15
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	781b      	ldrb	r3, [r3, #0]
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e14f      	b.n	800152c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4091      	lsls	r1, r2
 8001296:	000a      	movs	r2, r1
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <HAL_GPIO_Init+0x28>
 80012a2:	e140      	b.n	8001526 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d005      	beq.n	80012bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	2201      	movs	r2, #1
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	4013      	ands	r3, r2
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2203      	movs	r2, #3
 8001360:	4013      	ands	r3, r2
 8001362:	2b02      	cmp	r3, #2
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	58d3      	ldr	r3, [r2, r3]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2207      	movs	r2, #7
 8001378:	4013      	ands	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2107      	movs	r1, #7
 8001392:	400b      	ands	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	6939      	ldr	r1, [r7, #16]
 80013ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	43da      	mvns	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	029b      	lsls	r3, r3, #10
 80013ea:	4013      	ands	r3, r2
 80013ec:	d100      	bne.n	80013f0 <HAL_GPIO_Init+0x174>
 80013ee:	e09a      	b.n	8001526 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f0:	4b54      	ldr	r3, [pc, #336]	; (8001544 <HAL_GPIO_Init+0x2c8>)
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_GPIO_Init+0x2c8>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_GPIO_Init+0x2c8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x2cc>)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	589b      	ldr	r3, [r3, r2]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2203      	movs	r2, #3
 800141a:	4013      	ands	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	409a      	lsls	r2, r3
 8001422:	0013      	movs	r3, r2
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	2390      	movs	r3, #144	; 0x90
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	429a      	cmp	r2, r3
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x1e2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a44      	ldr	r2, [pc, #272]	; (800154c <HAL_GPIO_Init+0x2d0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x1de>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a43      	ldr	r2, [pc, #268]	; (8001550 <HAL_GPIO_Init+0x2d4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x1da>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a42      	ldr	r2, [pc, #264]	; (8001554 <HAL_GPIO_Init+0x2d8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x1d6>
 800144e:	2303      	movs	r3, #3
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x1e4>
 8001452:	2305      	movs	r3, #5
 8001454:	e004      	b.n	8001460 <HAL_GPIO_Init+0x1e4>
 8001456:	2302      	movs	r3, #2
 8001458:	e002      	b.n	8001460 <HAL_GPIO_Init+0x1e4>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x1e4>
 800145e:	2300      	movs	r3, #0
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	2103      	movs	r1, #3
 8001464:	400a      	ands	r2, r1
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	4093      	lsls	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001470:	4935      	ldr	r1, [pc, #212]	; (8001548 <HAL_GPIO_Init+0x2cc>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	035b      	lsls	r3, r3, #13
 8001496:	4013      	ands	r3, r2
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43da      	mvns	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	039b      	lsls	r3, r3, #14
 80014c0:	4013      	ands	r3, r2
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43da      	mvns	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	029b      	lsls	r3, r3, #10
 80014ea:	4013      	ands	r3, r2
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43da      	mvns	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	025b      	lsls	r3, r3, #9
 8001514:	4013      	ands	r3, r2
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	40da      	lsrs	r2, r3
 8001534:	1e13      	subs	r3, r2, #0
 8001536:	d000      	beq.n	800153a <HAL_GPIO_Init+0x2be>
 8001538:	e6a8      	b.n	800128c <HAL_GPIO_Init+0x10>
  } 
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b006      	add	sp, #24
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800156a:	e0b1      	b.n	80016d0 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800156c:	2201      	movs	r2, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	409a      	lsls	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d100      	bne.n	8001580 <HAL_GPIO_DeInit+0x24>
 800157e:	e0a4      	b.n	80016ca <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001580:	4a59      	ldr	r2, [pc, #356]	; (80016e8 <HAL_GPIO_DeInit+0x18c>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	589b      	ldr	r3, [r3, r2]
 800158c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2203      	movs	r2, #3
 8001592:	4013      	ands	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	409a      	lsls	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	2390      	movs	r3, #144	; 0x90
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_DeInit+0x76>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <HAL_GPIO_DeInit+0x190>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_DeInit+0x72>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_GPIO_DeInit+0x194>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_DeInit+0x6e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4d      	ldr	r2, [pc, #308]	; (80016f4 <HAL_GPIO_DeInit+0x198>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_DeInit+0x6a>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_DeInit+0x78>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_DeInit+0x78>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_DeInit+0x78>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_DeInit+0x78>
 80015d2:	2300      	movs	r3, #0
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	2103      	movs	r1, #3
 80015d8:	400a      	ands	r2, r1
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d132      	bne.n	800164a <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80015e4:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <HAL_GPIO_DeInit+0x19c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	4b42      	ldr	r3, [pc, #264]	; (80016f8 <HAL_GPIO_DeInit+0x19c>)
 80015ee:	400a      	ands	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_GPIO_DeInit+0x19c>)
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43d9      	mvns	r1, r3
 80015fa:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <HAL_GPIO_DeInit+0x19c>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001600:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <HAL_GPIO_DeInit+0x19c>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43d9      	mvns	r1, r3
 8001608:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_GPIO_DeInit+0x19c>)
 800160a:	400a      	ands	r2, r1
 800160c:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <HAL_GPIO_DeInit+0x19c>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43d9      	mvns	r1, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_GPIO_DeInit+0x19c>)
 8001618:	400a      	ands	r2, r1
 800161a:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2203      	movs	r2, #3
 8001620:	4013      	ands	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <HAL_GPIO_DeInit+0x18c>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	589a      	ldr	r2, [r3, r2]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43d9      	mvns	r1, r3
 800163c:	482a      	ldr	r0, [pc, #168]	; (80016e8 <HAL_GPIO_DeInit+0x18c>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	400a      	ands	r2, r1
 8001644:	3302      	adds	r3, #2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	0052      	lsls	r2, r2, #1
 8001652:	2103      	movs	r1, #3
 8001654:	4091      	lsls	r1, r2
 8001656:	000a      	movs	r2, r1
 8001658:	43d2      	mvns	r2, r2
 800165a:	401a      	ands	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	58d3      	ldr	r3, [r2, r3]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	2107      	movs	r1, #7
 8001670:	400a      	ands	r2, r1
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	210f      	movs	r1, #15
 8001676:	4091      	lsls	r1, r2
 8001678:	000a      	movs	r2, r1
 800167a:	43d1      	mvns	r1, r2
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	08d2      	lsrs	r2, r2, #3
 8001680:	4019      	ands	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	0052      	lsls	r2, r2, #1
 8001692:	2103      	movs	r1, #3
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	43d2      	mvns	r2, r2
 800169a:	401a      	ands	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2101      	movs	r1, #1
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4091      	lsls	r1, r2
 80016aa:	000a      	movs	r2, r1
 80016ac:	43d2      	mvns	r2, r2
 80016ae:	401a      	ands	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	2103      	movs	r1, #3
 80016be:	4091      	lsls	r1, r2
 80016c0:	000a      	movs	r2, r1
 80016c2:	43d2      	mvns	r2, r2
 80016c4:	401a      	ands	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]

    }

    position++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	40da      	lsrs	r2, r3
 80016d6:	1e13      	subs	r3, r2, #0
 80016d8:	d000      	beq.n	80016dc <HAL_GPIO_DeInit+0x180>
 80016da:	e747      	b.n	800156c <HAL_GPIO_DeInit+0x10>
  }
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b006      	add	sp, #24
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40010000 	.word	0x40010000
 80016ec:	48000400 	.word	0x48000400
 80016f0:	48000800 	.word	0x48000800
 80016f4:	48000c00 	.word	0x48000c00
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	0008      	movs	r0, r1
 8001706:	0011      	movs	r1, r2
 8001708:	1cbb      	adds	r3, r7, #2
 800170a:	1c02      	adds	r2, r0, #0
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	1c7b      	adds	r3, r7, #1
 8001710:	1c0a      	adds	r2, r1, #0
 8001712:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001714:	1c7b      	adds	r3, r7, #1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171c:	1cbb      	adds	r3, r7, #2
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001726:	1cbb      	adds	r3, r7, #2
 8001728:	881a      	ldrh	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e301      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d100      	bne.n	8001756 <HAL_RCC_OscConfig+0x1e>
 8001754:	e08d      	b.n	8001872 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001756:	4bc3      	ldr	r3, [pc, #780]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	220c      	movs	r2, #12
 800175c:	4013      	ands	r3, r2
 800175e:	2b04      	cmp	r3, #4
 8001760:	d00e      	beq.n	8001780 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001762:	4bc0      	ldr	r3, [pc, #768]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	220c      	movs	r2, #12
 8001768:	4013      	ands	r3, r2
 800176a:	2b08      	cmp	r3, #8
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x64>
 800176e:	4bbd      	ldr	r3, [pc, #756]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	401a      	ands	r2, r3
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	429a      	cmp	r2, r3
 800177e:	d10d      	bne.n	800179c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	4bb8      	ldr	r3, [pc, #736]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	4013      	ands	r3, r2
 800178a:	d100      	bne.n	800178e <HAL_RCC_OscConfig+0x56>
 800178c:	e070      	b.n	8001870 <HAL_RCC_OscConfig+0x138>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d000      	beq.n	8001798 <HAL_RCC_OscConfig+0x60>
 8001796:	e06b      	b.n	8001870 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e2d8      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x7c>
 80017a4:	4baf      	ldr	r3, [pc, #700]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4bae      	ldr	r3, [pc, #696]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	0249      	lsls	r1, r1, #9
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e02f      	b.n	8001814 <HAL_RCC_OscConfig+0xdc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x9e>
 80017bc:	4ba9      	ldr	r3, [pc, #676]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4ba8      	ldr	r3, [pc, #672]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	49a9      	ldr	r1, [pc, #676]	; (8001a68 <HAL_RCC_OscConfig+0x330>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	4ba6      	ldr	r3, [pc, #664]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4ba5      	ldr	r3, [pc, #660]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	49a7      	ldr	r1, [pc, #668]	; (8001a6c <HAL_RCC_OscConfig+0x334>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e01e      	b.n	8001814 <HAL_RCC_OscConfig+0xdc>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d10e      	bne.n	80017fc <HAL_RCC_OscConfig+0xc4>
 80017de:	4ba1      	ldr	r3, [pc, #644]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4ba0      	ldr	r3, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	02c9      	lsls	r1, r1, #11
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	4b9d      	ldr	r3, [pc, #628]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b9c      	ldr	r3, [pc, #624]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	0249      	lsls	r1, r1, #9
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0xdc>
 80017fc:	4b99      	ldr	r3, [pc, #612]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b98      	ldr	r3, [pc, #608]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001802:	4999      	ldr	r1, [pc, #612]	; (8001a68 <HAL_RCC_OscConfig+0x330>)
 8001804:	400a      	ands	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	4b96      	ldr	r3, [pc, #600]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b95      	ldr	r3, [pc, #596]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800180e:	4997      	ldr	r1, [pc, #604]	; (8001a6c <HAL_RCC_OscConfig+0x334>)
 8001810:	400a      	ands	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d014      	beq.n	8001846 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fb96 	bl	8000f4c <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001826:	f7ff fb91 	bl	8000f4c <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e28a      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001838:	4b8a      	ldr	r3, [pc, #552]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0xee>
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fb81 	bl	8000f4c <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb7c 	bl	8000f4c <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e275      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b80      	ldr	r3, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	029b      	lsls	r3, r3, #10
 800186a:	4013      	ands	r3, r2
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x118>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x146>
 800187c:	e069      	b.n	8001952 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800187e:	4b79      	ldr	r3, [pc, #484]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	220c      	movs	r2, #12
 8001884:	4013      	ands	r3, r2
 8001886:	d00b      	beq.n	80018a0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001888:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	220c      	movs	r2, #12
 800188e:	4013      	ands	r3, r2
 8001890:	2b08      	cmp	r3, #8
 8001892:	d11c      	bne.n	80018ce <HAL_RCC_OscConfig+0x196>
 8001894:	4b73      	ldr	r3, [pc, #460]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	025b      	lsls	r3, r3, #9
 800189c:	4013      	ands	r3, r2
 800189e:	d116      	bne.n	80018ce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a0:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d005      	beq.n	80018b6 <HAL_RCC_OscConfig+0x17e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e24b      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b6:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	22f8      	movs	r2, #248	; 0xf8
 80018bc:	4393      	bics	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	00da      	lsls	r2, r3, #3
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018cc:	e041      	b.n	8001952 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d024      	beq.n	8001920 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	2101      	movs	r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb33 	bl	8000f4c <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb2e 	bl	8000f4c <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e227      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d0f1      	beq.n	80018ec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	22f8      	movs	r2, #248	; 0xf8
 800190e:	4393      	bics	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00da      	lsls	r2, r3, #3
 8001918:	4b52      	ldr	r3, [pc, #328]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e018      	b.n	8001952 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001920:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fb0e 	bl	8000f4c <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff fb09 	bl	8000f4c <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e202      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001948:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d1f1      	bne.n	8001936 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2208      	movs	r2, #8
 8001958:	4013      	ands	r3, r2
 800195a:	d036      	beq.n	80019ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d019      	beq.n	8001998 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001964:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001968:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800196a:	2101      	movs	r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff faec 	bl	8000f4c <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff fae7 	bl	8000f4c <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e1e0      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198c:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d0f1      	beq.n	800197a <HAL_RCC_OscConfig+0x242>
 8001996:	e018      	b.n	80019ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800199a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199c:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800199e:	2101      	movs	r1, #1
 80019a0:	438a      	bics	r2, r1
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7ff fad2 	bl	8000f4c <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ae:	f7ff facd 	bl	8000f4c <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1c6      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f1      	bne.n	80019ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2204      	movs	r2, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_OscConfig+0x29e>
 80019d4:	e0b4      	b.n	8001b40 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	201f      	movs	r0, #31
 80019d8:	183b      	adds	r3, r7, r0
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	055b      	lsls	r3, r3, #21
 80019e6:	4013      	ands	r3, r2
 80019e8:	d110      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	0549      	lsls	r1, r1, #21
 80019f4:	430a      	orrs	r2, r1
 80019f6:	61da      	str	r2, [r3, #28]
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4013      	ands	r3, r2
 8001a16:	d11a      	bne.n	8001a4e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0049      	lsls	r1, r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa91 	bl	8000f4c <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a30:	f7ff fa8c 	bl	8000f4c <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e185      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x33c>
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	621a      	str	r2, [r3, #32]
 8001a62:	e035      	b.n	8001ad0 <HAL_RCC_OscConfig+0x398>
 8001a64:	40021000 	.word	0x40021000
 8001a68:	fffeffff 	.word	0xfffeffff
 8001a6c:	fffbffff 	.word	0xfffbffff
 8001a70:	40007000 	.word	0x40007000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x35e>
 8001a7c:	4bb6      	ldr	r3, [pc, #728]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	4bb5      	ldr	r3, [pc, #724]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	438a      	bics	r2, r1
 8001a86:	621a      	str	r2, [r3, #32]
 8001a88:	4bb3      	ldr	r3, [pc, #716]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	4bb2      	ldr	r3, [pc, #712]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001a8e:	2104      	movs	r1, #4
 8001a90:	438a      	bics	r2, r1
 8001a92:	621a      	str	r2, [r3, #32]
 8001a94:	e01c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x398>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x380>
 8001a9e:	4bae      	ldr	r3, [pc, #696]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	4bad      	ldr	r3, [pc, #692]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	621a      	str	r2, [r3, #32]
 8001aaa:	4bab      	ldr	r3, [pc, #684]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	4baa      	ldr	r3, [pc, #680]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	621a      	str	r2, [r3, #32]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x398>
 8001ab8:	4ba7      	ldr	r3, [pc, #668]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	4ba6      	ldr	r3, [pc, #664]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	621a      	str	r2, [r3, #32]
 8001ac4:	4ba4      	ldr	r3, [pc, #656]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	4ba3      	ldr	r3, [pc, #652]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001aca:	2104      	movs	r1, #4
 8001acc:	438a      	bics	r2, r1
 8001ace:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d014      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fa38 	bl	8000f4c <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fa33 	bl	8000f4c <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a9b      	ldr	r2, [pc, #620]	; (8001d5c <HAL_RCC_OscConfig+0x624>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e12b      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	4b98      	ldr	r3, [pc, #608]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	2202      	movs	r2, #2
 8001afc:	4013      	ands	r3, r2
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x3aa>
 8001b00:	e013      	b.n	8001b2a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa23 	bl	8000f4c <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	e009      	b.n	8001b20 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fa1e 	bl	8000f4c <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	4a91      	ldr	r2, [pc, #580]	; (8001d5c <HAL_RCC_OscConfig+0x624>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e116      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	4b8d      	ldr	r3, [pc, #564]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	2202      	movs	r2, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b2a:	231f      	movs	r3, #31
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4b88      	ldr	r3, [pc, #544]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	4b87      	ldr	r3, [pc, #540]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b3a:	4989      	ldr	r1, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x628>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2210      	movs	r2, #16
 8001b46:	4013      	ands	r3, r2
 8001b48:	d063      	beq.n	8001c12 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d12a      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b52:	4b81      	ldr	r3, [pc, #516]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b56:	4b80      	ldr	r3, [pc, #512]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b58:	2104      	movs	r1, #4
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b5e:	4b7e      	ldr	r3, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b62:	4b7d      	ldr	r3, [pc, #500]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f9ef 	bl	8000f4c <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b74:	f7ff f9ea 	bl	8000f4c <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0e3      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b86:	4b74      	ldr	r3, [pc, #464]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d0f1      	beq.n	8001b74 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b90:	4b71      	ldr	r3, [pc, #452]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b94:	22f8      	movs	r2, #248	; 0xf8
 8001b96:	4393      	bics	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	00da      	lsls	r2, r3, #3
 8001ba0:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba6:	e034      	b.n	8001c12 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	3305      	adds	r3, #5
 8001bae:	d111      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bb0:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	438a      	bics	r2, r1
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc0:	22f8      	movs	r2, #248	; 0xf8
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	00da      	lsls	r2, r3, #3
 8001bcc:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd2:	e01e      	b.n	8001c12 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bd4:	4b60      	ldr	r3, [pc, #384]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd8:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001bda:	2104      	movs	r1, #4
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001be0:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be4:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	438a      	bics	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff f9ae 	bl	8000f4c <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bf6:	f7ff f9a9 	bl	8000f4c <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0a2      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d1f1      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d100      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4e4>
 8001c1a:	e097      	b.n	8001d4c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1c:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	220c      	movs	r2, #12
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d100      	bne.n	8001c2a <HAL_RCC_OscConfig+0x4f2>
 8001c28:	e06b      	b.n	8001d02 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d14c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c38:	494a      	ldr	r1, [pc, #296]	; (8001d64 <HAL_RCC_OscConfig+0x62c>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f985 	bl	8000f4c <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f980 	bl	8000f4c <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e079      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	049b      	lsls	r3, r3, #18
 8001c62:	4013      	ands	r3, r2
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c66:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c76:	430a      	orrs	r2, r1
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c7a:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a3a      	ldr	r2, [pc, #232]	; (8001d68 <HAL_RCC_OscConfig+0x630>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0449      	lsls	r1, r1, #17
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f953 	bl	8000f4c <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff f94e 	bl	8000f4c <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e047      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	049b      	lsls	r3, r3, #18
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x574>
 8001cca:	e03f      	b.n	8001d4c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001cd2:	4924      	ldr	r1, [pc, #144]	; (8001d64 <HAL_RCC_OscConfig+0x62c>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f938 	bl	8000f4c <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff f933 	bl	8000f4c <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e02c      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	049b      	lsls	r3, r3, #18
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5aa>
 8001d00:	e024      	b.n	8001d4c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e01f      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_RCC_OscConfig+0x620>)
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	025b      	lsls	r3, r3, #9
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d10e      	bne.n	8001d48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	23f0      	movs	r3, #240	; 0xf0
 8001d3c:	039b      	lsls	r3, r3, #14
 8001d3e:	401a      	ands	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b008      	add	sp, #32
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	00001388 	.word	0x00001388
 8001d60:	efffffff 	.word	0xefffffff
 8001d64:	feffffff 	.word	0xfeffffff
 8001d68:	ffc2ffff 	.word	0xffc2ffff

08001d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0b3      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <HAL_RCC_ClockConfig+0x184>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d911      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b58      	ldr	r3, [pc, #352]	; (8001ef0 <HAL_RCC_ClockConfig+0x184>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	4b55      	ldr	r3, [pc, #340]	; (8001ef0 <HAL_RCC_ClockConfig+0x184>)
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_ClockConfig+0x184>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e09a      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d015      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d006      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dc6:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001dcc:	21e0      	movs	r1, #224	; 0xe0
 8001dce:	00c9      	lsls	r1, r1, #3
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	22f0      	movs	r2, #240	; 0xf0
 8001dda:	4393      	bics	r3, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	d040      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	4013      	ands	r3, r2
 8001e04:	d114      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06e      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	049b      	lsls	r3, r3, #18
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e062      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e05b      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e30:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	4393      	bics	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e44:	f7ff f882 	bl	8000f4c <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7ff f87d 	bl	8000f4c <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a27      	ldr	r2, [pc, #156]	; (8001ef8 <HAL_RCC_ClockConfig+0x18c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e042      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	220c      	movs	r2, #12
 8001e68:	401a      	ands	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1ec      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_RCC_ClockConfig+0x184>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d211      	bcs.n	8001ea6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_ClockConfig+0x184>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4393      	bics	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <HAL_RCC_ClockConfig+0x184>)
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_RCC_ClockConfig+0x184>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e020      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	4013      	ands	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_RCC_ClockConfig+0x190>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ec4:	f000 f820 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec8:	0001      	movs	r1, r0
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x188>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_RCC_ClockConfig+0x194>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	000a      	movs	r2, r1
 8001eda:	40da      	lsrs	r2, r3
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x198>)
 8001ede:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7fe ffed 	bl	8000ec0 <HAL_InitTick>
  
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b004      	add	sp, #16
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	00001388 	.word	0x00001388
 8001efc:	fffff8ff 	.word	0xfffff8ff
 8001f00:	08003e70 	.word	0x08003e70
 8001f04:	20000010 	.word	0x20000010

08001f08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x30>
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x36>
 8001f36:	e02c      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f3a:	613b      	str	r3, [r7, #16]
      break;
 8001f3c:	e02c      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	220f      	movs	r2, #15
 8001f44:	4013      	ands	r3, r2
 8001f46:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	220f      	movs	r2, #15
 8001f52:	4013      	ands	r3, r2
 8001f54:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	4013      	ands	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	4810      	ldr	r0, [pc, #64]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f68:	f7fe f8ce 	bl	8000108 <__udivsi3>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	001a      	movs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4353      	muls	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e009      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	000a      	movs	r2, r1
 8001f7c:	0152      	lsls	r2, r2, #5
 8001f7e:	1a52      	subs	r2, r2, r1
 8001f80:	0193      	lsls	r3, r2, #6
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	185b      	adds	r3, r3, r1
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	e002      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f94:	613b      	str	r3, [r7, #16]
      break;
 8001f96:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f98:	693b      	ldr	r3, [r7, #16]
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b006      	add	sp, #24
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	08003e88 	.word	0x08003e88
 8001fb0:	08003e98 	.word	0x08003e98
 8001fb4:	007a1200 	.word	0x007a1200

08001fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	20000010 	.word	0x20000010

08001fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fd0:	f7ff fff2 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001fd4:	0001      	movs	r1, r0
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	2207      	movs	r2, #7
 8001fde:	4013      	ands	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	40d9      	lsrs	r1, r3
 8001fe6:	000b      	movs	r3, r1
}    
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003e80 	.word	0x08003e80

08001ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	025b      	lsls	r3, r3, #9
 8002010:	4013      	ands	r3, r2
 8002012:	d100      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002014:	e08e      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2017      	movs	r0, #23
 8002018:	183b      	adds	r3, r7, r0
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	055b      	lsls	r3, r3, #21
 8002026:	4013      	ands	r3, r2
 8002028:	d110      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0549      	lsls	r1, r1, #21
 8002034:	430a      	orrs	r2, r1
 8002036:	61da      	str	r2, [r3, #28]
 8002038:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	055b      	lsls	r3, r3, #21
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	183b      	adds	r3, r7, r0
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b4c      	ldr	r3, [pc, #304]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d11a      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	0049      	lsls	r1, r1, #1
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7fe ff71 	bl	8000f4c <HAL_GetTick>
 800206a:	0003      	movs	r3, r0
 800206c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	e008      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002070:	f7fe ff6c 	bl	8000f4c <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e077      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d0f0      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	23c0      	movs	r3, #192	; 0xc0
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d034      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	23c0      	movs	r3, #192	; 0xc0
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d02c      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020b0:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a33      	ldr	r2, [pc, #204]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	0249      	lsls	r1, r1, #9
 80020c4:	430a      	orrs	r2, r1
 80020c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020c8:	4b2c      	ldr	r3, [pc, #176]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ca:	6a1a      	ldr	r2, [r3, #32]
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ce:	492e      	ldr	r1, [pc, #184]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe ff33 	bl	8000f4c <HAL_GetTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	e009      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe ff2e 	bl	8000f4c <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	4a25      	ldr	r2, [pc, #148]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e038      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d0f0      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800211a:	430a      	orrs	r2, r1
 800211c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800211e:	2317      	movs	r3, #23
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800212e:	4918      	ldr	r1, [pc, #96]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002130:	400a      	ands	r2, r1
 8002132:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2201      	movs	r2, #1
 800213a:	4013      	ands	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	2203      	movs	r2, #3
 8002144:	4393      	bics	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800214e:	430a      	orrs	r2, r1
 8002150:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2220      	movs	r2, #32
 8002158:	4013      	ands	r3, r2
 800215a:	d009      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	2210      	movs	r2, #16
 8002162:	4393      	bics	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800216c:	430a      	orrs	r2, r1
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b006      	add	sp, #24
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
 8002184:	fffffcff 	.word	0xfffffcff
 8002188:	fffeffff 	.word	0xfffeffff
 800218c:	00001388 	.word	0x00001388
 8002190:	efffffff 	.word	0xefffffff

08002194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e042      	b.n	800222c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	223d      	movs	r2, #61	; 0x3d
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	223c      	movs	r2, #60	; 0x3c
 80021b6:	2100      	movs	r1, #0
 80021b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7fe fd19 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	223d      	movs	r2, #61	; 0x3d
 80021c6:	2102      	movs	r1, #2
 80021c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3304      	adds	r3, #4
 80021d2:	0019      	movs	r1, r3
 80021d4:	0010      	movs	r0, r2
 80021d6:	f000 f9dd 	bl	8002594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2246      	movs	r2, #70	; 0x46
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	223e      	movs	r2, #62	; 0x3e
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	223f      	movs	r2, #63	; 0x3f
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2240      	movs	r2, #64	; 0x40
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2241      	movs	r2, #65	; 0x41
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2242      	movs	r2, #66	; 0x42
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2243      	movs	r2, #67	; 0x43
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2244      	movs	r2, #68	; 0x44
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2245      	movs	r2, #69	; 0x45
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	223d      	movs	r2, #61	; 0x3d
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	223d      	movs	r2, #61	; 0x3d
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e035      	b.n	80022b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	223d      	movs	r2, #61	; 0x3d
 8002250:	2102      	movs	r1, #2
 8002252:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <HAL_TIM_Base_Start_IT+0x8c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d009      	beq.n	8002282 <HAL_TIM_Base_Start_IT+0x4e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <HAL_TIM_Base_Start_IT+0x90>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d004      	beq.n	8002282 <HAL_TIM_Base_Start_IT+0x4e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <HAL_TIM_Base_Start_IT+0x94>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d111      	bne.n	80022a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2207      	movs	r2, #7
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d010      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2101      	movs	r1, #1
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a4:	e007      	b.n	80022b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b004      	add	sp, #16
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40014000 	.word	0x40014000

080022cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	438a      	bics	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_TIM_Base_Stop_IT+0x54>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	d10d      	bne.n	800230c <HAL_TIM_Base_Stop_IT+0x40>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_TIM_Base_Stop_IT+0x58>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	d107      	bne.n	800230c <HAL_TIM_Base_Stop_IT+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	438a      	bics	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	223d      	movs	r2, #61	; 0x3d
 8002310:	2101      	movs	r1, #1
 8002312:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	00001111 	.word	0x00001111
 8002324:	00000444 	.word	0x00000444

08002328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2202      	movs	r2, #2
 8002338:	4013      	ands	r3, r2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d124      	bne.n	8002388 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2202      	movs	r2, #2
 8002346:	4013      	ands	r3, r2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d11d      	bne.n	8002388 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2203      	movs	r2, #3
 8002352:	4252      	negs	r2, r2
 8002354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2203      	movs	r2, #3
 8002364:	4013      	ands	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f8fa 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 8002370:	e007      	b.n	8002382 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f8ed 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0018      	movs	r0, r3
 800237e:	f000 f8f9 	bl	8002574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2204      	movs	r2, #4
 8002390:	4013      	ands	r3, r2
 8002392:	2b04      	cmp	r3, #4
 8002394:	d125      	bne.n	80023e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2204      	movs	r2, #4
 800239e:	4013      	ands	r3, r2
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d11e      	bne.n	80023e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2205      	movs	r2, #5
 80023aa:	4252      	negs	r2, r2
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	23c0      	movs	r3, #192	; 0xc0
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4013      	ands	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f8cd 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 80023ca:	e007      	b.n	80023dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f8c0 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f8cc 	bl	8002574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2208      	movs	r2, #8
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d124      	bne.n	800243a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2208      	movs	r2, #8
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d11d      	bne.n	800243a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2209      	movs	r2, #9
 8002404:	4252      	negs	r2, r2
 8002406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2204      	movs	r2, #4
 800240c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2203      	movs	r2, #3
 8002416:	4013      	ands	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f8a1 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 8002422:	e007      	b.n	8002434 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	0018      	movs	r0, r3
 8002428:	f000 f894 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 f8a0 	bl	8002574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2210      	movs	r2, #16
 8002442:	4013      	ands	r3, r2
 8002444:	2b10      	cmp	r3, #16
 8002446:	d125      	bne.n	8002494 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2210      	movs	r2, #16
 8002450:	4013      	ands	r3, r2
 8002452:	2b10      	cmp	r3, #16
 8002454:	d11e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2211      	movs	r2, #17
 800245c:	4252      	negs	r2, r2
 800245e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2208      	movs	r2, #8
 8002464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	23c0      	movs	r3, #192	; 0xc0
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f874 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 800247c:	e007      	b.n	800248e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f867 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f000 f873 	bl	8002574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2201      	movs	r2, #1
 800249c:	4013      	ands	r3, r2
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10f      	bne.n	80024c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d108      	bne.n	80024c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2202      	movs	r2, #2
 80024b6:	4252      	negs	r2, r2
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fd fec7 	bl	8000250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	d10f      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	4013      	ands	r3, r2
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d108      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2281      	movs	r2, #129	; 0x81
 80024e4:	4252      	negs	r2, r2
 80024e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f8d0 	bl	8002690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2240      	movs	r2, #64	; 0x40
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d10f      	bne.n	800251e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2240      	movs	r2, #64	; 0x40
 8002506:	4013      	ands	r3, r2
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d108      	bne.n	800251e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2241      	movs	r2, #65	; 0x41
 8002512:	4252      	negs	r2, r2
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f833 	bl	8002584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2220      	movs	r2, #32
 8002526:	4013      	ands	r3, r2
 8002528:	2b20      	cmp	r3, #32
 800252a:	d10f      	bne.n	800254c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	4013      	ands	r3, r2
 8002536:	2b20      	cmp	r3, #32
 8002538:	d108      	bne.n	800254c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2221      	movs	r2, #33	; 0x21
 8002540:	4252      	negs	r2, r2
 8002542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	0018      	movs	r0, r3
 8002548:	f000 f89a 	bl	8002680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b002      	add	sp, #8
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <TIM_Base_SetConfig+0xd0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <TIM_Base_SetConfig+0x20>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a2e      	ldr	r2, [pc, #184]	; (8002668 <TIM_Base_SetConfig+0xd4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d108      	bne.n	80025c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2270      	movs	r2, #112	; 0x70
 80025b8:	4393      	bics	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <TIM_Base_SetConfig+0xd0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <TIM_Base_SetConfig+0x62>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a25      	ldr	r2, [pc, #148]	; (8002668 <TIM_Base_SetConfig+0xd4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00f      	beq.n	80025f6 <TIM_Base_SetConfig+0x62>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <TIM_Base_SetConfig+0xd8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00b      	beq.n	80025f6 <TIM_Base_SetConfig+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a23      	ldr	r2, [pc, #140]	; (8002670 <TIM_Base_SetConfig+0xdc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <TIM_Base_SetConfig+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <TIM_Base_SetConfig+0xe0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d003      	beq.n	80025f6 <TIM_Base_SetConfig+0x62>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a21      	ldr	r2, [pc, #132]	; (8002678 <TIM_Base_SetConfig+0xe4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d108      	bne.n	8002608 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a20      	ldr	r2, [pc, #128]	; (800267c <TIM_Base_SetConfig+0xe8>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	4393      	bics	r3, r2
 800260e:	001a      	movs	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <TIM_Base_SetConfig+0xd0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00b      	beq.n	800264e <TIM_Base_SetConfig+0xba>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <TIM_Base_SetConfig+0xdc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <TIM_Base_SetConfig+0xba>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <TIM_Base_SetConfig+0xe0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_Base_SetConfig+0xba>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <TIM_Base_SetConfig+0xe4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d103      	bne.n	8002656 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	615a      	str	r2, [r3, #20]
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40000400 	.word	0x40000400
 800266c:	40002000 	.word	0x40002000
 8002670:	40014000 	.word	0x40014000
 8002674:	40014400 	.word	0x40014400
 8002678:	40014800 	.word	0x40014800
 800267c:	fffffcff 	.word	0xfffffcff

08002680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e044      	b.n	800273c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d107      	bne.n	80026ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2278      	movs	r2, #120	; 0x78
 80026be:	2100      	movs	r1, #0
 80026c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fe fabd 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2224      	movs	r2, #36	; 0x24
 80026ce:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2101      	movs	r1, #1
 80026dc:	438a      	bics	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 fc3a 	bl	8002f5c <UART_SetConfig>
 80026e8:	0003      	movs	r3, r0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e024      	b.n	800273c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 fd6d 	bl	80031dc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	490d      	ldr	r1, [pc, #52]	; (8002744 <HAL_UART_Init+0xa4>)
 800270e:	400a      	ands	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2108      	movs	r1, #8
 800271e:	438a      	bics	r2, r1
 8002720:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f000 fe05 	bl	8003344 <UART_CheckIdleState>
 800273a:	0003      	movs	r3, r0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}
 8002744:	fffff7ff 	.word	0xfffff7ff

08002748 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e030      	b.n	80027bc <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2224      	movs	r2, #36	; 0x24
 800275e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2101      	movs	r1, #1
 800276c:	438a      	bics	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0018      	movs	r0, r3
 800278c:	f7fe faea 	bl	8000d64 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2284      	movs	r2, #132	; 0x84
 8002794:	2100      	movs	r1, #0
 8002796:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	2100      	movs	r1, #0
 80027a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2278      	movs	r2, #120	; 0x78
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	1dbb      	adds	r3, r7, #6
 80027d2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d000      	beq.n	80027de <HAL_UART_Transmit+0x1a>
 80027dc:	e08d      	b.n	80028fa <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_UART_Transmit+0x28>
 80027e4:	1dbb      	adds	r3, r7, #6
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e085      	b.n	80028fc <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	015b      	lsls	r3, r3, #5
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d109      	bne.n	8002810 <HAL_UART_Transmit+0x4c>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d105      	bne.n	8002810 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2201      	movs	r2, #1
 8002808:	4013      	ands	r3, r2
 800280a:	d001      	beq.n	8002810 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e075      	b.n	80028fc <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2284      	movs	r2, #132	; 0x84
 8002814:	2100      	movs	r1, #0
 8002816:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2221      	movs	r2, #33	; 0x21
 800281c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281e:	f7fe fb95 	bl	8000f4c <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1dba      	adds	r2, r7, #6
 800282a:	2150      	movs	r1, #80	; 0x50
 800282c:	8812      	ldrh	r2, [r2, #0]
 800282e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1dba      	adds	r2, r7, #6
 8002834:	2152      	movs	r1, #82	; 0x52
 8002836:	8812      	ldrh	r2, [r2, #0]
 8002838:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	015b      	lsls	r3, r3, #5
 8002842:	429a      	cmp	r2, r3
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x94>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002860:	e030      	b.n	80028c4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	0013      	movs	r3, r2
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	f000 fe10 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 8002874:	1e03      	subs	r3, r0, #0
 8002876:	d004      	beq.n	8002882 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e03c      	b.n	80028fc <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	05d2      	lsls	r2, r2, #23
 8002892:	0dd2      	lsrs	r2, r2, #23
 8002894:	b292      	uxth	r2, r2
 8002896:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	3302      	adds	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e008      	b.n	80028b2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b292      	uxth	r2, r2
 80028aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2252      	movs	r2, #82	; 0x52
 80028b6:	5a9b      	ldrh	r3, [r3, r2]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b299      	uxth	r1, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2252      	movs	r2, #82	; 0x52
 80028c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2252      	movs	r2, #82	; 0x52
 80028c8:	5a9b      	ldrh	r3, [r3, r2]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1c8      	bne.n	8002862 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	0013      	movs	r3, r2
 80028da:	2200      	movs	r2, #0
 80028dc:	2140      	movs	r1, #64	; 0x40
 80028de:	f000 fdd9 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d004      	beq.n	80028f0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e005      	b.n	80028fc <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e000      	b.n	80028fc <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
  }
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b008      	add	sp, #32
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	589b      	ldr	r3, [r3, r2]
 8002918:	2b20      	cmp	r3, #32
 800291a:	d145      	bne.n	80029a8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_UART_Receive_IT+0x26>
 8002922:	1dbb      	adds	r3, r7, #6
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e03d      	b.n	80029aa <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	015b      	lsls	r3, r3, #5
 8002936:	429a      	cmp	r2, r3
 8002938:	d109      	bne.n	800294e <HAL_UART_Receive_IT+0x4a>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	d001      	beq.n	800294e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e02d      	b.n	80029aa <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	4013      	ands	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002962:	f3ef 8310 	mrs	r3, PRIMASK
 8002966:	613b      	str	r3, [r7, #16]
  return(result);
 8002968:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	2301      	movs	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	04c9      	lsls	r1, r1, #19
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f383 8810 	msr	PRIMASK, r3
}
 8002994:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002996:	1dbb      	adds	r3, r7, #6
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 fde2 	bl	8003568 <UART_Start_Receive_IT>
 80029a4:	0003      	movs	r3, r0
 80029a6:	e000      	b.n	80029aa <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b008      	add	sp, #32
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b0ab      	sub	sp, #172	; 0xac
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	22a4      	movs	r2, #164	; 0xa4
 80029c4:	18b9      	adds	r1, r7, r2
 80029c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	20a0      	movs	r0, #160	; 0xa0
 80029d0:	1839      	adds	r1, r7, r0
 80029d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	219c      	movs	r1, #156	; 0x9c
 80029dc:	1879      	adds	r1, r7, r1
 80029de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029e0:	0011      	movs	r1, r2
 80029e2:	18bb      	adds	r3, r7, r2
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a99      	ldr	r2, [pc, #612]	; (8002c4c <HAL_UART_IRQHandler+0x298>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	2298      	movs	r2, #152	; 0x98
 80029ec:	18bc      	adds	r4, r7, r2
 80029ee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80029f0:	18bb      	adds	r3, r7, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d114      	bne.n	8002a22 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	4013      	ands	r3, r2
 8002a00:	d00f      	beq.n	8002a22 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a02:	183b      	adds	r3, r7, r0
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2220      	movs	r2, #32
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d00a      	beq.n	8002a22 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <HAL_UART_IRQHandler+0x62>
 8002a14:	e286      	b.n	8002f24 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	4798      	blx	r3
      }
      return;
 8002a20:	e280      	b.n	8002f24 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a22:	2398      	movs	r3, #152	; 0x98
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d100      	bne.n	8002a2e <HAL_UART_IRQHandler+0x7a>
 8002a2c:	e114      	b.n	8002c58 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a2e:	239c      	movs	r3, #156	; 0x9c
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2201      	movs	r2, #1
 8002a36:	4013      	ands	r3, r2
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a3a:	23a0      	movs	r3, #160	; 0xa0
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_UART_IRQHandler+0x29c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	d100      	bne.n	8002a48 <HAL_UART_IRQHandler+0x94>
 8002a46:	e107      	b.n	8002c58 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a48:	23a4      	movs	r3, #164	; 0xa4
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d012      	beq.n	8002a7a <HAL_UART_IRQHandler+0xc6>
 8002a54:	23a0      	movs	r3, #160	; 0xa0
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2284      	movs	r2, #132	; 0x84
 8002a6e:	589b      	ldr	r3, [r3, r2]
 8002a70:	2201      	movs	r2, #1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2184      	movs	r1, #132	; 0x84
 8002a78:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a7a:	23a4      	movs	r3, #164	; 0xa4
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d011      	beq.n	8002aaa <HAL_UART_IRQHandler+0xf6>
 8002a86:	239c      	movs	r3, #156	; 0x9c
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2202      	movs	r2, #2
 8002a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2284      	movs	r2, #132	; 0x84
 8002a9e:	589b      	ldr	r3, [r3, r2]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2184      	movs	r1, #132	; 0x84
 8002aa8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aaa:	23a4      	movs	r3, #164	; 0xa4
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d011      	beq.n	8002ada <HAL_UART_IRQHandler+0x126>
 8002ab6:	239c      	movs	r3, #156	; 0x9c
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2284      	movs	r2, #132	; 0x84
 8002ace:	589b      	ldr	r3, [r3, r2]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2184      	movs	r1, #132	; 0x84
 8002ad8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ada:	23a4      	movs	r3, #164	; 0xa4
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d017      	beq.n	8002b16 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ae6:	23a0      	movs	r3, #160	; 0xa0
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	4013      	ands	r3, r2
 8002af0:	d105      	bne.n	8002afe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002af2:	239c      	movs	r3, #156	; 0x9c
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002afc:	d00b      	beq.n	8002b16 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2208      	movs	r2, #8
 8002b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2284      	movs	r2, #132	; 0x84
 8002b0a:	589b      	ldr	r3, [r3, r2]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2184      	movs	r1, #132	; 0x84
 8002b14:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b16:	23a4      	movs	r3, #164	; 0xa4
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4013      	ands	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_UART_IRQHandler+0x198>
 8002b24:	23a0      	movs	r3, #160	; 0xa0
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	04db      	lsls	r3, r3, #19
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d00c      	beq.n	8002b4c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2284      	movs	r2, #132	; 0x84
 8002b40:	589b      	ldr	r3, [r3, r2]
 8002b42:	2220      	movs	r2, #32
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2184      	movs	r1, #132	; 0x84
 8002b4a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2284      	movs	r2, #132	; 0x84
 8002b50:	589b      	ldr	r3, [r3, r2]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d100      	bne.n	8002b58 <HAL_UART_IRQHandler+0x1a4>
 8002b56:	e1e7      	b.n	8002f28 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b58:	23a4      	movs	r3, #164	; 0xa4
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	4013      	ands	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b64:	23a0      	movs	r3, #160	; 0xa0
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d008      	beq.n	8002b82 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	0010      	movs	r0, r2
 8002b80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2284      	movs	r2, #132	; 0x84
 8002b86:	589b      	ldr	r3, [r3, r2]
 8002b88:	2194      	movs	r1, #148	; 0x94
 8002b8a:	187a      	adds	r2, r7, r1
 8002b8c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d004      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2228      	movs	r2, #40	; 0x28
 8002ba2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ba4:	d047      	beq.n	8002c36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fd93 	bl	80036d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d137      	bne.n	8002c2c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	2090      	movs	r0, #144	; 0x90
 8002bc6:	183a      	adds	r2, r7, r0
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd0:	f383 8810 	msr	PRIMASK, r3
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2140      	movs	r1, #64	; 0x40
 8002be2:	438a      	bics	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	183b      	adds	r3, r7, r0
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <HAL_UART_IRQHandler+0x2a0>)
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7fe faf1 	bl	80011f0 <HAL_DMA_Abort_IT>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d01a      	beq.n	8002c48 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	e012      	b.n	8002c48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7fd fd77 	bl	8000718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2a:	e00d      	b.n	8002c48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7fd fd72 	bl	8000718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e008      	b.n	8002c48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7fd fd6d 	bl	8000718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2284      	movs	r2, #132	; 0x84
 8002c42:	2100      	movs	r1, #0
 8002c44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c46:	e16f      	b.n	8002f28 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	46c0      	nop			; (mov r8, r8)
    return;
 8002c4a:	e16d      	b.n	8002f28 <HAL_UART_IRQHandler+0x574>
 8002c4c:	0000080f 	.word	0x0000080f
 8002c50:	04000120 	.word	0x04000120
 8002c54:	0800379d 	.word	0x0800379d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d000      	beq.n	8002c62 <HAL_UART_IRQHandler+0x2ae>
 8002c60:	e139      	b.n	8002ed6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c62:	23a4      	movs	r3, #164	; 0xa4
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d100      	bne.n	8002c70 <HAL_UART_IRQHandler+0x2bc>
 8002c6e:	e132      	b.n	8002ed6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <HAL_UART_IRQHandler+0x2ca>
 8002c7c:	e12b      	b.n	8002ed6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2210      	movs	r2, #16
 8002c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d000      	beq.n	8002c96 <HAL_UART_IRQHandler+0x2e2>
 8002c94:	e09f      	b.n	8002dd6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	217e      	movs	r1, #126	; 0x7e
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d100      	bne.n	8002cae <HAL_UART_IRQHandler+0x2fa>
 8002cac:	e13e      	b.n	8002f2c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2258      	movs	r2, #88	; 0x58
 8002cb2:	5a9b      	ldrh	r3, [r3, r2]
 8002cb4:	187a      	adds	r2, r7, r1
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d300      	bcc.n	8002cbe <HAL_UART_IRQHandler+0x30a>
 8002cbc:	e136      	b.n	8002f2c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	187a      	adds	r2, r7, r1
 8002cc2:	215a      	movs	r1, #90	; 0x5a
 8002cc4:	8812      	ldrh	r2, [r2, #0]
 8002cc6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d06f      	beq.n	8002db2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cda:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cdc:	2301      	movs	r3, #1
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	f383 8810 	msr	PRIMASK, r3
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4992      	ldr	r1, [pc, #584]	; (8002f3c <HAL_UART_IRQHandler+0x588>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	f383 8810 	msr	PRIMASK, r3
}
 8002d02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d04:	f3ef 8310 	mrs	r3, PRIMASK
 8002d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d0e:	2301      	movs	r3, #1
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	f383 8810 	msr	PRIMASK, r3
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	438a      	bics	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	f383 8810 	msr	PRIMASK, r3
}
 8002d34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d36:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d40:	2301      	movs	r3, #1
 8002d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2140      	movs	r1, #64	; 0x40
 8002d58:	438a      	bics	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d5e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d62:	f383 8810 	msr	PRIMASK, r3
}
 8002d66:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	2120      	movs	r1, #32
 8002d6e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d76:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d80:	2301      	movs	r3, #1
 8002d82:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d86:	f383 8810 	msr	PRIMASK, r3
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2110      	movs	r1, #16
 8002d98:	438a      	bics	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fe f9e7 	bl	8001180 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2258      	movs	r2, #88	; 0x58
 8002dbc:	5a9a      	ldrh	r2, [r3, r2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	215a      	movs	r1, #90	; 0x5a
 8002dc2:	5a5b      	ldrh	r3, [r3, r1]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0011      	movs	r1, r2
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f8b8 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dd4:	e0aa      	b.n	8002f2c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2258      	movs	r2, #88	; 0x58
 8002dda:	5a99      	ldrh	r1, [r3, r2]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	225a      	movs	r2, #90	; 0x5a
 8002de0:	5a9b      	ldrh	r3, [r3, r2]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	208e      	movs	r0, #142	; 0x8e
 8002de6:	183b      	adds	r3, r7, r0
 8002de8:	1a8a      	subs	r2, r1, r2
 8002dea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	225a      	movs	r2, #90	; 0x5a
 8002df0:	5a9b      	ldrh	r3, [r3, r2]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d100      	bne.n	8002dfa <HAL_UART_IRQHandler+0x446>
 8002df8:	e09a      	b.n	8002f30 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002dfa:	183b      	adds	r3, r7, r0
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d100      	bne.n	8002e04 <HAL_UART_IRQHandler+0x450>
 8002e02:	e095      	b.n	8002f30 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e04:	f3ef 8310 	mrs	r3, PRIMASK
 8002e08:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0c:	2488      	movs	r4, #136	; 0x88
 8002e0e:	193a      	adds	r2, r7, r4
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	2301      	movs	r3, #1
 8002e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4945      	ldr	r1, [pc, #276]	; (8002f40 <HAL_UART_IRQHandler+0x58c>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e40:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e42:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e44:	2484      	movs	r4, #132	; 0x84
 8002e46:	193a      	adds	r2, r7, r4
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	438a      	bics	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	2120      	movs	r1, #32
 8002e7a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e88:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e90:	2480      	movs	r4, #128	; 0x80
 8002e92:	193a      	adds	r2, r7, r4
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	2301      	movs	r3, #1
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2110      	movs	r1, #16
 8002eae:	438a      	bics	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	193b      	adds	r3, r7, r4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ec6:	183b      	adds	r3, r7, r0
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 f838 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ed4:	e02c      	b.n	8002f30 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ed6:	23a4      	movs	r3, #164	; 0xa4
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00f      	beq.n	8002f02 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ee2:	23a0      	movs	r3, #160	; 0xa0
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	4013      	ands	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01e      	beq.n	8002f34 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	0010      	movs	r0, r2
 8002efe:	4798      	blx	r3
    }
    return;
 8002f00:	e018      	b.n	8002f34 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f02:	23a4      	movs	r3, #164	; 0xa4
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2240      	movs	r2, #64	; 0x40
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_UART_IRQHandler+0x582>
 8002f0e:	23a0      	movs	r3, #160	; 0xa0
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	4013      	ands	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fc54 	bl	80037ca <UART_EndTransmit_IT>
    return;
 8002f22:	e008      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
      return;
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	e006      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
    return;
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	e004      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
      return;
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	e002      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
      return;
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	e000      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
    return;
 8002f34:	46c0      	nop			; (mov r8, r8)
  }

}
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b02b      	add	sp, #172	; 0xac
 8002f3a:	bd90      	pop	{r4, r7, pc}
 8002f3c:	fffffeff 	.word	0xfffffeff
 8002f40:	fffffedf 	.word	0xfffffedf

08002f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	1cbb      	adds	r3, r7, #2
 8002f50:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f64:	231e      	movs	r3, #30
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a8d      	ldr	r2, [pc, #564]	; (80031c0 <UART_SetConfig+0x264>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a88      	ldr	r2, [pc, #544]	; (80031c4 <UART_SetConfig+0x268>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a7f      	ldr	r2, [pc, #508]	; (80031c8 <UART_SetConfig+0x26c>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a7b      	ldr	r2, [pc, #492]	; (80031cc <UART_SetConfig+0x270>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d127      	bne.n	8003032 <UART_SetConfig+0xd6>
 8002fe2:	4b7b      	ldr	r3, [pc, #492]	; (80031d0 <UART_SetConfig+0x274>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d00d      	beq.n	800300a <UART_SetConfig+0xae>
 8002fee:	d81b      	bhi.n	8003028 <UART_SetConfig+0xcc>
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d014      	beq.n	800301e <UART_SetConfig+0xc2>
 8002ff4:	d818      	bhi.n	8003028 <UART_SetConfig+0xcc>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <UART_SetConfig+0xa4>
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d00a      	beq.n	8003014 <UART_SetConfig+0xb8>
 8002ffe:	e013      	b.n	8003028 <UART_SetConfig+0xcc>
 8003000:	231f      	movs	r3, #31
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e021      	b.n	800304e <UART_SetConfig+0xf2>
 800300a:	231f      	movs	r3, #31
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	2202      	movs	r2, #2
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e01c      	b.n	800304e <UART_SetConfig+0xf2>
 8003014:	231f      	movs	r3, #31
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2204      	movs	r2, #4
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e017      	b.n	800304e <UART_SetConfig+0xf2>
 800301e:	231f      	movs	r3, #31
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	2208      	movs	r2, #8
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	e012      	b.n	800304e <UART_SetConfig+0xf2>
 8003028:	231f      	movs	r3, #31
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2210      	movs	r2, #16
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e00d      	b.n	800304e <UART_SetConfig+0xf2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a67      	ldr	r2, [pc, #412]	; (80031d4 <UART_SetConfig+0x278>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d104      	bne.n	8003046 <UART_SetConfig+0xea>
 800303c:	231f      	movs	r3, #31
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	e003      	b.n	800304e <UART_SetConfig+0xf2>
 8003046:	231f      	movs	r3, #31
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	2210      	movs	r2, #16
 800304c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	429a      	cmp	r2, r3
 8003058:	d15c      	bne.n	8003114 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800305a:	231f      	movs	r3, #31
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d015      	beq.n	8003090 <UART_SetConfig+0x134>
 8003064:	dc18      	bgt.n	8003098 <UART_SetConfig+0x13c>
 8003066:	2b04      	cmp	r3, #4
 8003068:	d00d      	beq.n	8003086 <UART_SetConfig+0x12a>
 800306a:	dc15      	bgt.n	8003098 <UART_SetConfig+0x13c>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <UART_SetConfig+0x11a>
 8003070:	2b02      	cmp	r3, #2
 8003072:	d005      	beq.n	8003080 <UART_SetConfig+0x124>
 8003074:	e010      	b.n	8003098 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003076:	f7fe ffa9 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 800307a:	0003      	movs	r3, r0
 800307c:	61bb      	str	r3, [r7, #24]
        break;
 800307e:	e012      	b.n	80030a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003080:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <UART_SetConfig+0x27c>)
 8003082:	61bb      	str	r3, [r7, #24]
        break;
 8003084:	e00f      	b.n	80030a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003086:	f7fe ff3f 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 800308a:	0003      	movs	r3, r0
 800308c:	61bb      	str	r3, [r7, #24]
        break;
 800308e:	e00a      	b.n	80030a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	61bb      	str	r3, [r7, #24]
        break;
 8003096:	e006      	b.n	80030a6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800309c:	231e      	movs	r3, #30
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
        break;
 80030a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d100      	bne.n	80030ae <UART_SetConfig+0x152>
 80030ac:	e07a      	b.n	80031a4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	005a      	lsls	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	18d2      	adds	r2, r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0019      	movs	r1, r3
 80030c0:	0010      	movs	r0, r2
 80030c2:	f7fd f821 	bl	8000108 <__udivsi3>
 80030c6:	0003      	movs	r3, r0
 80030c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b0f      	cmp	r3, #15
 80030ce:	d91c      	bls.n	800310a <UART_SetConfig+0x1ae>
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	025b      	lsls	r3, r3, #9
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d217      	bcs.n	800310a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	200e      	movs	r0, #14
 80030e0:	183b      	adds	r3, r7, r0
 80030e2:	210f      	movs	r1, #15
 80030e4:	438a      	bics	r2, r1
 80030e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2207      	movs	r2, #7
 80030f0:	4013      	ands	r3, r2
 80030f2:	b299      	uxth	r1, r3
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	183a      	adds	r2, r7, r0
 80030f8:	8812      	ldrh	r2, [r2, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	183a      	adds	r2, r7, r0
 8003104:	8812      	ldrh	r2, [r2, #0]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	e04c      	b.n	80031a4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800310a:	231e      	movs	r3, #30
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e047      	b.n	80031a4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003114:	231f      	movs	r3, #31
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d015      	beq.n	800314a <UART_SetConfig+0x1ee>
 800311e:	dc18      	bgt.n	8003152 <UART_SetConfig+0x1f6>
 8003120:	2b04      	cmp	r3, #4
 8003122:	d00d      	beq.n	8003140 <UART_SetConfig+0x1e4>
 8003124:	dc15      	bgt.n	8003152 <UART_SetConfig+0x1f6>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <UART_SetConfig+0x1d4>
 800312a:	2b02      	cmp	r3, #2
 800312c:	d005      	beq.n	800313a <UART_SetConfig+0x1de>
 800312e:	e010      	b.n	8003152 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7fe ff4c 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8003134:	0003      	movs	r3, r0
 8003136:	61bb      	str	r3, [r7, #24]
        break;
 8003138:	e012      	b.n	8003160 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <UART_SetConfig+0x27c>)
 800313c:	61bb      	str	r3, [r7, #24]
        break;
 800313e:	e00f      	b.n	8003160 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003140:	f7fe fee2 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8003144:	0003      	movs	r3, r0
 8003146:	61bb      	str	r3, [r7, #24]
        break;
 8003148:	e00a      	b.n	8003160 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	61bb      	str	r3, [r7, #24]
        break;
 8003150:	e006      	b.n	8003160 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003156:	231e      	movs	r3, #30
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
        break;
 800315e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01e      	beq.n	80031a4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	085a      	lsrs	r2, r3, #1
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	18d2      	adds	r2, r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	0019      	movs	r1, r3
 8003176:	0010      	movs	r0, r2
 8003178:	f7fc ffc6 	bl	8000108 <__udivsi3>
 800317c:	0003      	movs	r3, r0
 800317e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b0f      	cmp	r3, #15
 8003184:	d90a      	bls.n	800319c <UART_SetConfig+0x240>
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	025b      	lsls	r3, r3, #9
 800318c:	429a      	cmp	r2, r3
 800318e:	d205      	bcs.n	800319c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	e003      	b.n	80031a4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800319c:	231e      	movs	r3, #30
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031b0:	231e      	movs	r3, #30
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	781b      	ldrb	r3, [r3, #0]
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b008      	add	sp, #32
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	ffff69f3 	.word	0xffff69f3
 80031c4:	ffffcfff 	.word	0xffffcfff
 80031c8:	fffff4ff 	.word	0xfffff4ff
 80031cc:	40013800 	.word	0x40013800
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40004400 	.word	0x40004400
 80031d8:	007a1200 	.word	0x007a1200

080031dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d00b      	beq.n	8003206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a4a      	ldr	r2, [pc, #296]	; (8003320 <UART_AdvFeatureConfig+0x144>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	d00b      	beq.n	8003228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a43      	ldr	r2, [pc, #268]	; (8003324 <UART_AdvFeatureConfig+0x148>)
 8003218:	4013      	ands	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	2204      	movs	r2, #4
 800322e:	4013      	ands	r3, r2
 8003230:	d00b      	beq.n	800324a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a3b      	ldr	r2, [pc, #236]	; (8003328 <UART_AdvFeatureConfig+0x14c>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	2208      	movs	r2, #8
 8003250:	4013      	ands	r3, r2
 8003252:	d00b      	beq.n	800326c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a34      	ldr	r2, [pc, #208]	; (800332c <UART_AdvFeatureConfig+0x150>)
 800325c:	4013      	ands	r3, r2
 800325e:	0019      	movs	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2210      	movs	r2, #16
 8003272:	4013      	ands	r3, r2
 8003274:	d00b      	beq.n	800328e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <UART_AdvFeatureConfig+0x154>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2220      	movs	r2, #32
 8003294:	4013      	ands	r3, r2
 8003296:	d00b      	beq.n	80032b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4a25      	ldr	r2, [pc, #148]	; (8003334 <UART_AdvFeatureConfig+0x158>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2240      	movs	r2, #64	; 0x40
 80032b6:	4013      	ands	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <UART_AdvFeatureConfig+0x15c>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	0019      	movs	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	035b      	lsls	r3, r3, #13
 80032da:	429a      	cmp	r2, r3
 80032dc:	d10b      	bne.n	80032f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a15      	ldr	r2, [pc, #84]	; (800333c <UART_AdvFeatureConfig+0x160>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	4013      	ands	r3, r2
 80032fe:	d00b      	beq.n	8003318 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <UART_AdvFeatureConfig+0x164>)
 8003308:	4013      	ands	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}
 8003320:	fffdffff 	.word	0xfffdffff
 8003324:	fffeffff 	.word	0xfffeffff
 8003328:	fffbffff 	.word	0xfffbffff
 800332c:	ffff7fff 	.word	0xffff7fff
 8003330:	ffffefff 	.word	0xffffefff
 8003334:	ffffdfff 	.word	0xffffdfff
 8003338:	ffefffff 	.word	0xffefffff
 800333c:	ff9fffff 	.word	0xff9fffff
 8003340:	fff7ffff 	.word	0xfff7ffff

08003344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b092      	sub	sp, #72	; 0x48
 8003348:	af02      	add	r7, sp, #8
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2284      	movs	r2, #132	; 0x84
 8003350:	2100      	movs	r1, #0
 8003352:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003354:	f7fd fdfa 	bl	8000f4c <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2208      	movs	r2, #8
 8003364:	4013      	ands	r3, r2
 8003366:	2b08      	cmp	r3, #8
 8003368:	d12c      	bne.n	80033c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336c:	2280      	movs	r2, #128	; 0x80
 800336e:	0391      	lsls	r1, r2, #14
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4a46      	ldr	r2, [pc, #280]	; (800348c <UART_CheckIdleState+0x148>)
 8003374:	9200      	str	r2, [sp, #0]
 8003376:	2200      	movs	r2, #0
 8003378:	f000 f88c 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d021      	beq.n	80033c4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003380:	f3ef 8310 	mrs	r3, PRIMASK
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
 800338a:	2301      	movs	r3, #1
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	f383 8810 	msr	PRIMASK, r3
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	438a      	bics	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	f383 8810 	msr	PRIMASK, r3
}
 80033b0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2278      	movs	r2, #120	; 0x78
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e05f      	b.n	8003484 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2204      	movs	r2, #4
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d146      	bne.n	8003460 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	03d1      	lsls	r1, r2, #15
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4a2c      	ldr	r2, [pc, #176]	; (800348c <UART_CheckIdleState+0x148>)
 80033dc:	9200      	str	r2, [sp, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	f000 f858 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d03b      	beq.n	8003460 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
 80033f2:	2301      	movs	r3, #1
 80033f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4921      	ldr	r1, [pc, #132]	; (8003490 <UART_CheckIdleState+0x14c>)
 800340a:	400a      	ands	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341a:	f3ef 8310 	mrs	r3, PRIMASK
 800341e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003420:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	633b      	str	r3, [r7, #48]	; 0x30
 8003424:	2301      	movs	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	2120      	movs	r1, #32
 8003452:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2278      	movs	r2, #120	; 0x78
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e011      	b.n	8003484 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	2120      	movs	r1, #32
 800346c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2278      	movs	r2, #120	; 0x78
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b010      	add	sp, #64	; 0x40
 800348a:	bd80      	pop	{r7, pc}
 800348c:	01ffffff 	.word	0x01ffffff
 8003490:	fffffedf 	.word	0xfffffedf

08003494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a4:	e04b      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	3301      	adds	r3, #1
 80034aa:	d048      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fd fd4e 	bl	8000f4c <HAL_GetTick>
 80034b0:	0002      	movs	r2, r0
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e04b      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2204      	movs	r2, #4
 80034ce:	4013      	ands	r3, r2
 80034d0:	d035      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2208      	movs	r2, #8
 80034da:	4013      	ands	r3, r2
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d111      	bne.n	8003504 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2208      	movs	r2, #8
 80034e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 f8f2 	bl	80036d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2284      	movs	r2, #132	; 0x84
 80034f4:	2108      	movs	r1, #8
 80034f6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2278      	movs	r2, #120	; 0x78
 80034fc:	2100      	movs	r1, #0
 80034fe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e02c      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	401a      	ands	r2, r3
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	429a      	cmp	r2, r3
 8003516:	d112      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 f8d5 	bl	80036d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2284      	movs	r2, #132	; 0x84
 800352e:	2120      	movs	r1, #32
 8003530:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2278      	movs	r2, #120	; 0x78
 8003536:	2100      	movs	r1, #0
 8003538:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e00f      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	425a      	negs	r2, r3
 800354e:	4153      	adcs	r3, r2
 8003550:	b2db      	uxtb	r3, r3
 8003552:	001a      	movs	r2, r3
 8003554:	1dfb      	adds	r3, r7, #7
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d0a4      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b090      	sub	sp, #64	; 0x40
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	1dbb      	adds	r3, r7, #6
 8003574:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1dba      	adds	r2, r7, #6
 8003580:	2158      	movs	r1, #88	; 0x58
 8003582:	8812      	ldrh	r2, [r2, #0]
 8003584:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1dba      	adds	r2, r7, #6
 800358a:	215a      	movs	r1, #90	; 0x5a
 800358c:	8812      	ldrh	r2, [r2, #0]
 800358e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	015b      	lsls	r3, r3, #5
 800359e:	429a      	cmp	r2, r3
 80035a0:	d10d      	bne.n	80035be <UART_Start_Receive_IT+0x56>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <UART_Start_Receive_IT+0x4c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	225c      	movs	r2, #92	; 0x5c
 80035ae:	4946      	ldr	r1, [pc, #280]	; (80036c8 <UART_Start_Receive_IT+0x160>)
 80035b0:	5299      	strh	r1, [r3, r2]
 80035b2:	e01a      	b.n	80035ea <UART_Start_Receive_IT+0x82>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	225c      	movs	r2, #92	; 0x5c
 80035b8:	21ff      	movs	r1, #255	; 0xff
 80035ba:	5299      	strh	r1, [r3, r2]
 80035bc:	e015      	b.n	80035ea <UART_Start_Receive_IT+0x82>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10d      	bne.n	80035e2 <UART_Start_Receive_IT+0x7a>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <UART_Start_Receive_IT+0x70>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	225c      	movs	r2, #92	; 0x5c
 80035d2:	21ff      	movs	r1, #255	; 0xff
 80035d4:	5299      	strh	r1, [r3, r2]
 80035d6:	e008      	b.n	80035ea <UART_Start_Receive_IT+0x82>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	225c      	movs	r2, #92	; 0x5c
 80035dc:	217f      	movs	r1, #127	; 0x7f
 80035de:	5299      	strh	r1, [r3, r2]
 80035e0:	e003      	b.n	80035ea <UART_Start_Receive_IT+0x82>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	225c      	movs	r2, #92	; 0x5c
 80035e6:	2100      	movs	r1, #0
 80035e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2284      	movs	r2, #132	; 0x84
 80035ee:	2100      	movs	r1, #0
 80035f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	2122      	movs	r1, #34	; 0x22
 80035f8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fa:	f3ef 8310 	mrs	r3, PRIMASK
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	2301      	movs	r3, #1
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	f383 8810 	msr	PRIMASK, r3
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2101      	movs	r1, #1
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	f383 8810 	msr	PRIMASK, r3
}
 800362a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	015b      	lsls	r3, r3, #5
 8003634:	429a      	cmp	r2, r3
 8003636:	d107      	bne.n	8003648 <UART_Start_Receive_IT+0xe0>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a22      	ldr	r2, [pc, #136]	; (80036cc <UART_Start_Receive_IT+0x164>)
 8003644:	669a      	str	r2, [r3, #104]	; 0x68
 8003646:	e002      	b.n	800364e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a21      	ldr	r2, [pc, #132]	; (80036d0 <UART_Start_Receive_IT+0x168>)
 800364c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d019      	beq.n	800368a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003656:	f3ef 8310 	mrs	r3, PRIMASK
 800365a:	61fb      	str	r3, [r7, #28]
  return(result);
 800365c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
 8003660:	2301      	movs	r3, #1
 8003662:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f383 8810 	msr	PRIMASK, r3
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2190      	movs	r1, #144	; 0x90
 8003678:	0049      	lsls	r1, r1, #1
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	e018      	b.n	80036bc <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800368a:	f3ef 8310 	mrs	r3, PRIMASK
 800368e:	613b      	str	r3, [r7, #16]
  return(result);
 8003690:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
 8003694:	2301      	movs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f383 8810 	msr	PRIMASK, r3
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2120      	movs	r1, #32
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f383 8810 	msr	PRIMASK, r3
}
 80036ba:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b010      	add	sp, #64	; 0x40
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	000001ff 	.word	0x000001ff
 80036cc:	080039d9 	.word	0x080039d9
 80036d0:	08003821 	.word	0x08003821

080036d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08e      	sub	sp, #56	; 0x38
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036dc:	f3ef 8310 	mrs	r3, PRIMASK
 80036e0:	617b      	str	r3, [r7, #20]
  return(result);
 80036e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
 80036e6:	2301      	movs	r3, #1
 80036e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4926      	ldr	r1, [pc, #152]	; (8003798 <UART_EndRxTransfer+0xc4>)
 80036fe:	400a      	ands	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f383 8810 	msr	PRIMASK, r3
}
 800370c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370e:	f3ef 8310 	mrs	r3, PRIMASK
 8003712:	623b      	str	r3, [r7, #32]
  return(result);
 8003714:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
 8003718:	2301      	movs	r3, #1
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	f383 8810 	msr	PRIMASK, r3
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	f383 8810 	msr	PRIMASK, r3
}
 800373e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	2b01      	cmp	r3, #1
 8003746:	d118      	bne.n	800377a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003748:	f3ef 8310 	mrs	r3, PRIMASK
 800374c:	60bb      	str	r3, [r7, #8]
  return(result);
 800374e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003752:	2301      	movs	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f383 8810 	msr	PRIMASK, r3
}
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2110      	movs	r1, #16
 800376a:	438a      	bics	r2, r1
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f383 8810 	msr	PRIMASK, r3
}
 8003778:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	2120      	movs	r1, #32
 8003780:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	46bd      	mov	sp, r7
 8003792:	b00e      	add	sp, #56	; 0x38
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	fffffedf 	.word	0xfffffedf

0800379c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	225a      	movs	r2, #90	; 0x5a
 80037ae:	2100      	movs	r1, #0
 80037b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2252      	movs	r2, #82	; 0x52
 80037b6:	2100      	movs	r1, #0
 80037b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0018      	movs	r0, r3
 80037be:	f7fc ffab 	bl	8000718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d2:	f3ef 8310 	mrs	r3, PRIMASK
 80037d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80037d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	2301      	movs	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f383 8810 	msr	PRIMASK, r3
}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2140      	movs	r1, #64	; 0x40
 80037f4:	438a      	bics	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f383 8810 	msr	PRIMASK, r3
}
 8003802:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0018      	movs	r0, r3
 8003814:	f7fc fe0e 	bl	8000434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b006      	add	sp, #24
 800381e:	bd80      	pop	{r7, pc}

08003820 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b094      	sub	sp, #80	; 0x50
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003828:	204e      	movs	r0, #78	; 0x4e
 800382a:	183b      	adds	r3, r7, r0
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	215c      	movs	r1, #92	; 0x5c
 8003830:	5a52      	ldrh	r2, [r2, r1]
 8003832:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2280      	movs	r2, #128	; 0x80
 8003838:	589b      	ldr	r3, [r3, r2]
 800383a:	2b22      	cmp	r3, #34	; 0x22
 800383c:	d000      	beq.n	8003840 <UART_RxISR_8BIT+0x20>
 800383e:	e0ba      	b.n	80039b6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	214c      	movs	r1, #76	; 0x4c
 8003846:	187b      	adds	r3, r7, r1
 8003848:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800384a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800384c:	187b      	adds	r3, r7, r1
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	183b      	adds	r3, r7, r0
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b2d9      	uxtb	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	400a      	ands	r2, r1
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	225a      	movs	r2, #90	; 0x5a
 8003870:	5a9b      	ldrh	r3, [r3, r2]
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b299      	uxth	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	225a      	movs	r2, #90	; 0x5a
 800387c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	225a      	movs	r2, #90	; 0x5a
 8003882:	5a9b      	ldrh	r3, [r3, r2]
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d000      	beq.n	800388c <UART_RxISR_8BIT+0x6c>
 800388a:	e09c      	b.n	80039c6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
 8003896:	2301      	movs	r3, #1
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	f383 8810 	msr	PRIMASK, r3
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4948      	ldr	r1, [pc, #288]	; (80039d0 <UART_RxISR_8BIT+0x1b0>)
 80038ae:	400a      	ands	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038be:	f3ef 8310 	mrs	r3, PRIMASK
 80038c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	647b      	str	r3, [r7, #68]	; 0x44
 80038c8:	2301      	movs	r3, #1
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	f383 8810 	msr	PRIMASK, r3
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2101      	movs	r1, #1
 80038e0:	438a      	bics	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	2120      	movs	r1, #32
 80038f6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	4013      	ands	r3, r2
 8003910:	d018      	beq.n	8003944 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003912:	f3ef 8310 	mrs	r3, PRIMASK
 8003916:	61bb      	str	r3, [r7, #24]
  return(result);
 8003918:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800391a:	643b      	str	r3, [r7, #64]	; 0x40
 800391c:	2301      	movs	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f383 8810 	msr	PRIMASK, r3
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4928      	ldr	r1, [pc, #160]	; (80039d4 <UART_RxISR_8BIT+0x1b4>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003948:	2b01      	cmp	r3, #1
 800394a:	d12f      	bne.n	80039ac <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003952:	f3ef 8310 	mrs	r3, PRIMASK
 8003956:	60fb      	str	r3, [r7, #12]
  return(result);
 8003958:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800395c:	2301      	movs	r3, #1
 800395e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f383 8810 	msr	PRIMASK, r3
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2110      	movs	r1, #16
 8003974:	438a      	bics	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f383 8810 	msr	PRIMASK, r3
}
 8003982:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	2210      	movs	r2, #16
 800398c:	4013      	ands	r3, r2
 800398e:	2b10      	cmp	r3, #16
 8003990:	d103      	bne.n	800399a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2210      	movs	r2, #16
 8003998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2258      	movs	r2, #88	; 0x58
 800399e:	5a9a      	ldrh	r2, [r3, r2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff facd 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039aa:	e00c      	b.n	80039c6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7fc fdc0 	bl	8000534 <HAL_UART_RxCpltCallback>
}
 80039b4:	e007      	b.n	80039c6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2108      	movs	r1, #8
 80039c2:	430a      	orrs	r2, r1
 80039c4:	619a      	str	r2, [r3, #24]
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b014      	add	sp, #80	; 0x50
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	fffffedf 	.word	0xfffffedf
 80039d4:	fbffffff 	.word	0xfbffffff

080039d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b094      	sub	sp, #80	; 0x50
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039e0:	204e      	movs	r0, #78	; 0x4e
 80039e2:	183b      	adds	r3, r7, r0
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	215c      	movs	r1, #92	; 0x5c
 80039e8:	5a52      	ldrh	r2, [r2, r1]
 80039ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	589b      	ldr	r3, [r3, r2]
 80039f2:	2b22      	cmp	r3, #34	; 0x22
 80039f4:	d000      	beq.n	80039f8 <UART_RxISR_16BIT+0x20>
 80039f6:	e0ba      	b.n	8003b6e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	214c      	movs	r1, #76	; 0x4c
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003a02:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	183a      	adds	r2, r7, r0
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	8812      	ldrh	r2, [r2, #0]
 8003a12:	4013      	ands	r3, r2
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	1c9a      	adds	r2, r3, #2
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	225a      	movs	r2, #90	; 0x5a
 8003a28:	5a9b      	ldrh	r3, [r3, r2]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b299      	uxth	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	225a      	movs	r2, #90	; 0x5a
 8003a34:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	225a      	movs	r2, #90	; 0x5a
 8003a3a:	5a9b      	ldrh	r3, [r3, r2]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d000      	beq.n	8003a44 <UART_RxISR_16BIT+0x6c>
 8003a42:	e09c      	b.n	8003b7e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a44:	f3ef 8310 	mrs	r3, PRIMASK
 8003a48:	623b      	str	r3, [r7, #32]
  return(result);
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4e:	2301      	movs	r3, #1
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f383 8810 	msr	PRIMASK, r3
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4948      	ldr	r1, [pc, #288]	; (8003b88 <UART_RxISR_16BIT+0x1b0>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	f383 8810 	msr	PRIMASK, r3
}
 8003a74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a76:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a80:	2301      	movs	r3, #1
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	f383 8810 	msr	PRIMASK, r3
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2101      	movs	r1, #1
 8003a98:	438a      	bics	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	2120      	movs	r1, #32
 8003aae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d018      	beq.n	8003afc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ace:	617b      	str	r3, [r7, #20]
  return(result);
 8003ad0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f383 8810 	msr	PRIMASK, r3
}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4928      	ldr	r1, [pc, #160]	; (8003b8c <UART_RxISR_16BIT+0x1b4>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d12f      	bne.n	8003b64 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b10:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b14:	2301      	movs	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2110      	movs	r1, #16
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2210      	movs	r2, #16
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d103      	bne.n	8003b52 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2210      	movs	r2, #16
 8003b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2258      	movs	r2, #88	; 0x58
 8003b56:	5a9a      	ldrh	r2, [r3, r2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0011      	movs	r1, r2
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff f9f1 	bl	8002f44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b62:	e00c      	b.n	8003b7e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7fc fce4 	bl	8000534 <HAL_UART_RxCpltCallback>
}
 8003b6c:	e007      	b.n	8003b7e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2108      	movs	r1, #8
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	619a      	str	r2, [r3, #24]
}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b014      	add	sp, #80	; 0x50
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	fffffedf 	.word	0xfffffedf
 8003b8c:	fbffffff 	.word	0xfbffffff

08003b90 <kfifo_reset>:
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b002      	add	sp, #8
 8003bac:	bd80      	pop	{r7, pc}

08003bae <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
	return fifo->size;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 8003bc2:	b590      	push	{r4, r7, lr}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	1b1b      	subs	r3, r3, r4
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b003      	add	sp, #12
 8003bda:	bd90      	pop	{r4, r7, pc}

08003bdc <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7ff ffe1 	bl	8003bae <kfifo_size>
 8003bec:	0004      	movs	r4, r0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7ff ffe6 	bl	8003bc2 <kfifo_len>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	1ae3      	subs	r3, r4, r3
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b003      	add	sp, #12
 8003c00:	bd90      	pop	{r4, r7, pc}

08003c02 <__kfifo_add_out>:
/*
 * __kfifo_add_out internal helper function for updating the out offset
 */
static __inline void __kfifo_add_out(struct kfifo *fifo,
				unsigned int off)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
	fifo->out += off;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	18d2      	adds	r2, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	18d2      	adds	r2, r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	4013      	ands	r3, r2
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b002      	add	sp, #8
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7ff ff8b 	bl	8003b90 <kfifo_reset>
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b086      	sub	sp, #24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	18d2      	adds	r2, r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff ffce 	bl	8003c3e <__kfifo_off>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	1ad2      	subs	r2, r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d900      	bls.n	8003cb6 <__kfifo_in_data+0x34>
 8003cb4:	0013      	movs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f8b5 	bl	8003e34 <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	18d1      	adds	r1, r2, r3
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	001a      	movs	r2, r3
 8003cdc:	f000 f8aa 	bl	8003e34 <memcpy>
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b006      	add	sp, #24
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <__kfifo_out_data>:

static __inline void __kfifo_out_data(struct kfifo *fifo,
		void *to, unsigned int len, unsigned int off)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->in index -before- we
	 * start removing bytes from the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->out + off);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	18d2      	adds	r2, r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	0011      	movs	r1, r2
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7ff ff9b 	bl	8003c3e <__kfifo_off>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	603b      	str	r3, [r7, #0]

	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - off);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	1ad2      	subs	r2, r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d900      	bls.n	8003d1c <__kfifo_out_data+0x34>
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
	memcpy( (char*)to, fifo->buffer + off, l);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	18d1      	adds	r1, r2, r3
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 f882 	bl	8003e34 <memcpy>

	/* then get the rest (if any) from the beginning of the buffer */
	memcpy( (char*)to + l, fifo->buffer, len - l);
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	18d0      	adds	r0, r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	001a      	movs	r2, r3
 8003d42:	f000 f877 	bl	8003e34 <memcpy>
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b006      	add	sp, #24
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7ff ff3d 	bl	8003bdc <kfifo_avail>
 8003d62:	0002      	movs	r2, r0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d905      	bls.n	8003d76 <kfifo_in+0x28>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7ff ff35 	bl	8003bdc <kfifo_avail>
 8003d72:	0003      	movs	r3, r0
 8003d74:	e000      	b.n	8003d78 <kfifo_in+0x2a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	2300      	movs	r3, #0
 8003d82:	f7ff ff7e 	bl	8003c82 <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7ff ff47 	bl	8003c20 <__kfifo_add_in>
	return len;
 8003d92:	687b      	ldr	r3, [r7, #4]
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b004      	add	sp, #16
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <kfifo_out>:
 *
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
	len = min(kfifo_len(fifo), len);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7ff ff09 	bl	8003bc2 <kfifo_len>
 8003db0:	0002      	movs	r2, r0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d905      	bls.n	8003dc4 <kfifo_out+0x28>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff ff01 	bl	8003bc2 <kfifo_len>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	e000      	b.n	8003dc6 <kfifo_out+0x2a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	607b      	str	r3, [r7, #4]

	__kfifo_out_data(fifo, to, len, 0);
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f7ff ff8a 	bl	8003ce8 <__kfifo_out_data>
	__kfifo_add_out(fifo, len);
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff ff11 	bl	8003c02 <__kfifo_add_out>

	return len;
 8003de0:	687b      	ldr	r3, [r7, #4]
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	2600      	movs	r6, #0
 8003df0:	4d0c      	ldr	r5, [pc, #48]	; (8003e24 <__libc_init_array+0x38>)
 8003df2:	4c0d      	ldr	r4, [pc, #52]	; (8003e28 <__libc_init_array+0x3c>)
 8003df4:	1b64      	subs	r4, r4, r5
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	f000 f82b 	bl	8003e58 <_init>
 8003e02:	4d0a      	ldr	r5, [pc, #40]	; (8003e2c <__libc_init_array+0x40>)
 8003e04:	4c0a      	ldr	r4, [pc, #40]	; (8003e30 <__libc_init_array+0x44>)
 8003e06:	1b64      	subs	r4, r4, r5
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	00b3      	lsls	r3, r6, #2
 8003e12:	58eb      	ldr	r3, [r5, r3]
 8003e14:	4798      	blx	r3
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	00b3      	lsls	r3, r6, #2
 8003e1c:	58eb      	ldr	r3, [r5, r3]
 8003e1e:	4798      	blx	r3
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	08003ea8 	.word	0x08003ea8
 8003e28:	08003ea8 	.word	0x08003ea8
 8003e2c:	08003ea8 	.word	0x08003ea8
 8003e30:	08003eac 	.word	0x08003eac

08003e34 <memcpy>:
 8003e34:	2300      	movs	r3, #0
 8003e36:	b510      	push	{r4, lr}
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d100      	bne.n	8003e3e <memcpy+0xa>
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	5ccc      	ldrb	r4, [r1, r3]
 8003e40:	54c4      	strb	r4, [r0, r3]
 8003e42:	3301      	adds	r3, #1
 8003e44:	e7f8      	b.n	8003e38 <memcpy+0x4>

08003e46 <memset>:
 8003e46:	0003      	movs	r3, r0
 8003e48:	1882      	adds	r2, r0, r2
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d100      	bne.n	8003e50 <memset+0xa>
 8003e4e:	4770      	bx	lr
 8003e50:	7019      	strb	r1, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	e7f9      	b.n	8003e4a <memset+0x4>
	...

08003e58 <_init>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr

08003e64 <_fini>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr
