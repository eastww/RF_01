
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b34  08003b34  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b34  08003b34  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b34  08003b34  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000001c  08003b58  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08003b58  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed05  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d7  00000000  00000000  0002ed49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00030f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00031c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001eb0  00000000  00000000  00032838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102d2  00000000  00000000  000346e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000648f4  00000000  00000000  000449ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a92ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e24  00000000  00000000  000a9300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ae4 	.word	0x08003ae4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003ae4 	.word	0x08003ae4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Delay_nMs>:
    for(j=0;j<4540;j++);
  }
}

void HAL_Delay_nMs(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick( );
 800022c:	f000 fe14 	bl	8000e58 <HAL_GetTick>
 8000230:	0003      	movs	r3, r0
 8000232:	60fb      	str	r3, [r7, #12]
    while( ( HAL_GetTick( ) - tickstart ) < Delay );
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	f000 fe0f 	bl	8000e58 <HAL_GetTick>
 800023a:	0003      	movs	r3, r0
 800023c:	001a      	movs	r2, r3
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f6      	bhi.n	8000236 <HAL_Delay_nMs+0x16>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	b004      	add	sp, #16
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer interrupt callback function
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim16.Instance)
    //	{
    //		time100ms_flag = 1;
    //		timer100InterruptHandler();
    //	}
    if (htim->Instance == htim17.Instance) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	429a      	cmp	r2, r3
 8000266:	d103      	bne.n	8000270 <HAL_TIM_PeriodElapsedCallback+0x1c>
        uartTimerIrqHandler(htim);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	0018      	movs	r0, r3
 800026c:	f000 f9ba 	bl	80005e4 <uartTimerIrqHandler>
    }
}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}
 8000278:	2000015c 	.word	0x2000015c

0800027c <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	68da      	ldr	r2, [r3, #12]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	609a      	str	r2, [r3, #8]
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b002      	add	sp, #8
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <uartInitRxFifo>:
 * @brief Init uart fifo
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	0002      	movs	r2, r0
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 80002a8:	1dfb      	adds	r3, r7, #7
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	011a      	lsls	r2, r3, #4
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <uartInitRxFifo+0x34>)
 80002b0:	18d0      	adds	r0, r2, r3
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	021a      	lsls	r2, r3, #8
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <uartInitRxFifo+0x38>)
 80002ba:	18d3      	adds	r3, r2, r3
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0052      	lsls	r2, r2, #1
 80002c0:	0019      	movs	r1, r3
 80002c2:	f003 fb10 	bl	80038e6 <kfifo_init>
}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b002      	add	sp, #8
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	2000013c 	.word	0x2000013c
 80002d4:	2000003c 	.word	0x2000003c

080002d8 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80002d8:	b5b0      	push	{r4, r5, r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	1dbb      	adds	r3, r7, #6
 80002e4:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80002e6:	2517      	movs	r5, #23
 80002e8:	197b      	adds	r3, r7, r5
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 80002ee:	197c      	adds	r4, r7, r5
 80002f0:	1dbb      	adds	r3, r7, #6
 80002f2:	881a      	ldrh	r2, [r3, #0]
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	0018      	movs	r0, r3
 80002fa:	f002 f949 	bl	8002590 <HAL_UART_Receive_IT>
 80002fe:	0003      	movs	r3, r0
 8000300:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8000302:	197b      	adds	r3, r7, r5
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d007      	beq.n	800031a <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	2120      	movs	r1, #32
 8000310:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2278      	movs	r2, #120	; 0x78
 8000316:	2100      	movs	r1, #0
 8000318:	5499      	strb	r1, [r3, r2]
    }

    return status;
 800031a:	2317      	movs	r3, #23
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	781b      	ldrb	r3, [r3, #0]
}
 8000320:	0018      	movs	r0, r3
 8000322:	46bd      	mov	sp, r7
 8000324:	b006      	add	sp, #24
 8000326:	bdb0      	pop	{r4, r5, r7, pc}

08000328 <uartInit>:
 * @brief Uart init
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	0002      	movs	r2, r0
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	0018      	movs	r0, r3
 800033a:	f7ff ffaf 	bl	800029c <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <uartInit+0x60>)
 8000344:	0052      	lsls	r2, r2, #1
 8000346:	2100      	movs	r1, #0
 8000348:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	781a      	ldrb	r2, [r3, #0]
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <uartInit+0x64>)
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	2100      	movs	r1, #0
 8000354:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <uartInit+0x68>)
 8000358:	2200      	movs	r2, #0
 800035a:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <uartInit+0x6c>)
 800035e:	2200      	movs	r2, #0
 8000360:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 8000362:	1dfb      	adds	r3, r7, #7
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4a0c      	ldr	r2, [pc, #48]	; (8000398 <uartInit+0x70>)
 8000368:	011b      	lsls	r3, r3, #4
 800036a:	18d3      	adds	r3, r2, r3
 800036c:	3304      	adds	r3, #4
 800036e:	6818      	ldr	r0, [r3, #0]
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <uartInit+0x74>)
 8000376:	18d3      	adds	r3, r2, r3
 8000378:	2201      	movs	r2, #1
 800037a:	0019      	movs	r1, r3
 800037c:	f7ff ffac 	bl	80002d8 <UART_Receive_IT>
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000014c 	.word	0x2000014c
 800038c:	20000150 	.word	0x20000150
 8000390:	20000154 	.word	0x20000154
 8000394:	20000158 	.word	0x20000158
 8000398:	20000000 	.word	0x20000000
 800039c:	20000038 	.word	0x20000038

080003a0 <uartSendData>:
 * @param data
 * @param length
 * @retval None
 */
void uartSendData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6039      	str	r1, [r7, #0]
 80003a8:	0011      	movs	r1, r2
 80003aa:	1dfb      	adds	r3, r7, #7
 80003ac:	1c02      	adds	r2, r0, #0
 80003ae:	701a      	strb	r2, [r3, #0]
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	1c0a      	adds	r2, r1, #0
 80003b4:	801a      	strh	r2, [r3, #0]
    uart_tx_status[channel] = BSP_UART_TX_START;
 80003b6:	1dfb      	adds	r3, r7, #7
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	4a0c      	ldr	r2, [pc, #48]	; (80003ec <uartSendData+0x4c>)
 80003bc:	2101      	movs	r1, #1
 80003be:	54d1      	strb	r1, [r2, r3]
	// if (HAL_UART_Transmit_DMA(uartPara[channel].uart_handle_addr, data, length) != HAL_OK)
	/* use IT mode send data */
	// if (HAL_UART_Transmit_IT( uartPara[channel].uart_handle_addr, data, length ) != HAL_OK)
	/* use poll mode send data */
	if (HAL_UART_Transmit(uartPara[channel].uart_handle_addr, data, length, 0xFFFF) != HAL_OK)
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <uartSendData+0x50>)
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	18d3      	adds	r3, r2, r3
 80003ca:	3304      	adds	r3, #4
 80003cc:	6818      	ldr	r0, [r3, #0]
 80003ce:	4c09      	ldr	r4, [pc, #36]	; (80003f4 <uartSendData+0x54>)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	881a      	ldrh	r2, [r3, #0]
 80003d4:	6839      	ldr	r1, [r7, #0]
 80003d6:	0023      	movs	r3, r4
 80003d8:	f002 f83a 	bl	8002450 <HAL_UART_Transmit>
 80003dc:	1e03      	subs	r3, r0, #0
 80003de:	d001      	beq.n	80003e4 <uartSendData+0x44>
    {
        Error_Handler();
 80003e0:	f000 fb9e 	bl	8000b20 <Error_Handler>
    }
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b003      	add	sp, #12
 80003ea:	bd90      	pop	{r4, r7, pc}
 80003ec:	20000154 	.word	0x20000154
 80003f0:	20000000 	.word	0x20000000
 80003f4:	0000ffff 	.word	0x0000ffff

080003f8 <HAL_UART_TxCpltCallback>:
 * @brief uart send done callback function
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8000400:	230f      	movs	r3, #15
 8000402:	18fb      	adds	r3, r7, r3
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
 8000408:	e015      	b.n	8000436 <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 800040a:	210f      	movs	r1, #15
 800040c:	187b      	adds	r3, r7, r1
 800040e:	781a      	ldrb	r2, [r3, #0]
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <HAL_UART_TxCpltCallback+0x54>)
 8000412:	0112      	lsls	r2, r2, #4
 8000414:	58d2      	ldr	r2, [r2, r3]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	429a      	cmp	r2, r3
 800041c:	d105      	bne.n	800042a <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 800041e:	187b      	adds	r3, r7, r1
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <HAL_UART_TxCpltCallback+0x58>)
 8000424:	2102      	movs	r1, #2
 8000426:	54d1      	strb	r1, [r2, r3]
            break;
 8000428:	e00b      	b.n	8000442 <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 800042a:	210f      	movs	r1, #15
 800042c:	187b      	adds	r3, r7, r1
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	187b      	adds	r3, r7, r1
 8000432:	3201      	adds	r2, #1
 8000434:	701a      	strb	r2, [r3, #0]
 8000436:	230f      	movs	r3, #15
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0e4      	beq.n	800040a <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b004      	add	sp, #16
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	20000000 	.word	0x20000000
 8000450:	20000154 	.word	0x20000154

08000454 <uartGetData>:
 * @param data 
 * @param length 
 * @return uint32_t 
 */
uint32_t uartGetData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6039      	str	r1, [r7, #0]
 800045c:	0011      	movs	r1, r2
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	1c02      	adds	r2, r0, #0
 8000462:	701a      	strb	r2, [r3, #0]
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	1c0a      	adds	r2, r1, #0
 8000468:	801a      	strh	r2, [r3, #0]
    uint32_t ret = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]

    if (BSP_UART_RX_COMPLETED == uart_rx_status[channel]) 
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <uartGetData+0x54>)
 8000474:	5cd3      	ldrb	r3, [r2, r3]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b04      	cmp	r3, #4
 800047a:	d10d      	bne.n	8000498 <uartGetData+0x44>
	{
		ret = kfifo_out(&uart_rx_fifo[channel], data, length);
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	011a      	lsls	r2, r3, #4
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <uartGetData+0x58>)
 8000484:	18d0      	adds	r0, r2, r3
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	881a      	ldrh	r2, [r3, #0]
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	0019      	movs	r1, r3
 800048e:	f003 facb 	bl	8003a28 <kfifo_out>
 8000492:	0003      	movs	r3, r0
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	e001      	b.n	800049c <uartGetData+0x48>
	}    
	else
	{
		ret = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
	}

    return ret;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	0018      	movs	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b004      	add	sp, #16
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000158 	.word	0x20000158
 80004ac:	2000013c 	.word	0x2000013c

080004b0 <uartResetData>:
 * @brief Reset uart fifo data
 * @param channel 
 * @retval None
 */
void uartResetData(uartChannel_t channel)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	0002      	movs	r2, r0
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	701a      	strb	r2, [r3, #0]
    kfifo_reset(&uart_rx_fifo[channel]);
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	011a      	lsls	r2, r3, #4
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <uartResetData+0x3c>)
 80004c4:	18d3      	adds	r3, r2, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	f7ff fed8 	bl	800027c <kfifo_reset>
    uart_rx_size[channel] = 0;
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <uartResetData+0x40>)
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	2100      	movs	r1, #0
 80004d6:	52d1      	strh	r1, [r2, r3]
    uart_rx_status[channel] = BSP_UART_IDLE;
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <uartResetData+0x44>)
 80004de:	2100      	movs	r1, #0
 80004e0:	54d1      	strb	r1, [r2, r3]
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b002      	add	sp, #8
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	2000013c 	.word	0x2000013c
 80004f0:	20000150 	.word	0x20000150
 80004f4:	20000158 	.word	0x20000158

080004f8 <HAL_UART_RxCpltCallback>:
 * @brief Uart rx callback
 * 
 * @param huart 
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8000500:	230f      	movs	r3, #15
 8000502:	18fb      	adds	r3, r7, r3
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	e059      	b.n	80005be <HAL_UART_RxCpltCallback+0xc6>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 800050a:	240f      	movs	r4, #15
 800050c:	193b      	adds	r3, r7, r4
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <HAL_UART_RxCpltCallback+0xd8>)
 8000512:	0112      	lsls	r2, r2, #4
 8000514:	58d2      	ldr	r2, [r2, r3]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	429a      	cmp	r2, r3
 800051c:	d149      	bne.n	80005b2 <HAL_UART_RxCpltCallback+0xba>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 800051e:	193b      	adds	r3, r7, r4
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <HAL_UART_RxCpltCallback+0xdc>)
 8000524:	2103      	movs	r1, #3
 8000526:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8000528:	193b      	adds	r3, r7, r4
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <HAL_UART_RxCpltCallback+0xd8>)
 800052e:	011b      	lsls	r3, r3, #4
 8000530:	18d3      	adds	r3, r2, r3
 8000532:	3308      	adds	r3, #8
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	4a24      	ldr	r2, [pc, #144]	; (80005d0 <HAL_UART_RxCpltCallback+0xd8>)
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	18d3      	adds	r3, r2, r3
 8000544:	3308      	adds	r3, #8
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 800054c:	193b      	adds	r3, r7, r4
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4a1f      	ldr	r2, [pc, #124]	; (80005d0 <HAL_UART_RxCpltCallback+0xd8>)
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	18d3      	adds	r3, r2, r3
 8000556:	330c      	adds	r3, #12
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fcee 	bl	8001f3c <HAL_TIM_Base_Start_IT>
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 8000560:	193b      	adds	r3, r7, r4
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	011a      	lsls	r2, r3, #4
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <HAL_UART_RxCpltCallback+0xe0>)
 8000568:	18d0      	adds	r0, r2, r3
 800056a:	193b      	adds	r3, r7, r4
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <HAL_UART_RxCpltCallback+0xe4>)
 8000570:	18d3      	adds	r3, r2, r3
 8000572:	2201      	movs	r2, #1
 8000574:	0019      	movs	r1, r3
 8000576:	f003 fa30 	bl	80039da <kfifo_in>
            uart_rx_counter[i]++;
 800057a:	0020      	movs	r0, r4
 800057c:	193b      	adds	r3, r7, r4
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_UART_RxCpltCallback+0xe8>)
 8000582:	0059      	lsls	r1, r3, #1
 8000584:	5a8a      	ldrh	r2, [r1, r2]
 8000586:	3201      	adds	r2, #1
 8000588:	b291      	uxth	r1, r2
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <HAL_UART_RxCpltCallback+0xe8>)
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 8000590:	0001      	movs	r1, r0
 8000592:	187b      	adds	r3, r7, r1
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_UART_RxCpltCallback+0xd8>)
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	18d3      	adds	r3, r2, r3
 800059c:	3304      	adds	r3, #4
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <HAL_UART_RxCpltCallback+0xe4>)
 80005a6:	18d3      	adds	r3, r2, r3
 80005a8:	2201      	movs	r2, #1
 80005aa:	0019      	movs	r1, r3
 80005ac:	f7ff fe94 	bl	80002d8 <UART_Receive_IT>
            return;
 80005b0:	e00a      	b.n	80005c8 <HAL_UART_RxCpltCallback+0xd0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80005b2:	210f      	movs	r1, #15
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	3201      	adds	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	230f      	movs	r3, #15
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0a0      	beq.n	800050a <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b005      	add	sp, #20
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000158 	.word	0x20000158
 80005d8:	2000013c 	.word	0x2000013c
 80005dc:	20000038 	.word	0x20000038
 80005e0:	2000014c 	.word	0x2000014c

080005e4 <uartTimerIrqHandler>:
/**
 * @brief Uart rx timeout callback
 * @param htim 
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 80005ec:	230f      	movs	r3, #15
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e05d      	b.n	80006b2 <uartTimerIrqHandler+0xce>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 80005f6:	210f      	movs	r1, #15
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <uartTimerIrqHandler+0xe4>)
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	18d3      	adds	r3, r2, r3
 8000602:	3308      	adds	r3, #8
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	d14b      	bne.n	80006a6 <uartTimerIrqHandler+0xc2>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 800060e:	000c      	movs	r4, r1
 8000610:	187b      	adds	r3, r7, r1
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <uartTimerIrqHandler+0xe4>)
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	330c      	adds	r3, #12
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fcd8 	bl	8001fd4 <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8000624:	0020      	movs	r0, r4
 8000626:	183b      	adds	r3, r7, r0
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4a28      	ldr	r2, [pc, #160]	; (80006cc <uartTimerIrqHandler+0xe8>)
 800062c:	2104      	movs	r1, #4
 800062e:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8000630:	183b      	adds	r3, r7, r0
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <uartTimerIrqHandler+0xec>)
 8000636:	0052      	lsls	r2, r2, #1
 8000638:	5ad1      	ldrh	r1, [r2, r3]
 800063a:	183b      	adds	r3, r7, r0
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <uartTimerIrqHandler+0xf0>)
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	5ad3      	ldrh	r3, [r2, r3]
 8000644:	183a      	adds	r2, r7, r0
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	18cb      	adds	r3, r1, r3
 800064a:	b299      	uxth	r1, r3
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <uartTimerIrqHandler+0xec>)
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 8000652:	183b      	adds	r3, r7, r0
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <uartTimerIrqHandler+0xec>)
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	5ad2      	ldrh	r2, [r2, r3]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	429a      	cmp	r2, r3
 8000662:	d918      	bls.n	8000696 <uartTimerIrqHandler+0xb2>
            {
            	uart_rx_size[i] = uart_rx_counter[i];
 8000664:	183b      	adds	r3, r7, r0
 8000666:	7819      	ldrb	r1, [r3, #0]
 8000668:	183b      	adds	r3, r7, r0
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <uartTimerIrqHandler+0xf0>)
 800066e:	0049      	lsls	r1, r1, #1
 8000670:	5ac9      	ldrh	r1, [r1, r3]
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <uartTimerIrqHandler+0xec>)
 8000674:	0052      	lsls	r2, r2, #1
 8000676:	52d1      	strh	r1, [r2, r3]
            	kfifo_reset(&uart_rx_fifo[i]);
 8000678:	0004      	movs	r4, r0
 800067a:	183b      	adds	r3, r7, r0
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	011a      	lsls	r2, r3, #4
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <uartTimerIrqHandler+0xf4>)
 8000682:	18d3      	adds	r3, r2, r3
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff fdf9 	bl	800027c <kfifo_reset>
            	uart_rx_size[i] = 0;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <uartTimerIrqHandler+0xec>)
 8000690:	0052      	lsls	r2, r2, #1
 8000692:	2100      	movs	r1, #0
 8000694:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 8000696:	230f      	movs	r3, #15
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <uartTimerIrqHandler+0xf0>)
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	2100      	movs	r1, #0
 80006a2:	52d1      	strh	r1, [r2, r3]
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 80006a4:	e00b      	b.n	80006be <uartTimerIrqHandler+0xda>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 80006a6:	210f      	movs	r1, #15
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	3201      	adds	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	230f      	movs	r3, #15
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d09c      	beq.n	80005f6 <uartTimerIrqHandler+0x12>
        }
    }
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b005      	add	sp, #20
 80006c4:	bd90      	pop	{r4, r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000158 	.word	0x20000158
 80006d0:	20000150 	.word	0x20000150
 80006d4:	2000014c 	.word	0x2000014c
 80006d8:	2000013c 	.word	0x2000013c

080006dc <HAL_UART_ErrorCallback>:
 * @brief uart error callback
 * 
 * @param huart 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0c2      	sub	sp, #264	; 0x108
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buffer[256] = { 0 };
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <main+0x94>)
 80006f4:	2284      	movs	r2, #132	; 0x84
 80006f6:	0052      	lsls	r2, r2, #1
 80006f8:	189b      	adds	r3, r3, r2
 80006fa:	19db      	adds	r3, r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	3304      	adds	r3, #4
 8000702:	22fc      	movs	r2, #252	; 0xfc
 8000704:	2100      	movs	r1, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f003 f9e3 	bl	8003ad2 <memset>
  uint32_t bufferSize = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	1d7a      	adds	r2, r7, #5
 8000710:	32ff      	adds	r2, #255	; 0xff
 8000712:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fb46 	bl	8000da4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f834 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 f91a 	bl	8000954 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000720:	f000 f8b8 	bl	8000894 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000724:	f000 f8e6 	bl	80008f4 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000728:	f000 f88c 	bl	8000844 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  uartInit(BSP_TTL_CHANNEL1);
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff fdfb 	bl	8000328 <uartInit>

    /* USER CODE BEGIN 3 */
#if BSP_TEST_ENABLE
	  bspTest();
#endif
	bufferSize = uartGetData(BSP_TTL_CHANNEL1, buffer, 256);
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	005a      	lsls	r2, r3, #1
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	0019      	movs	r1, r3
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fe8a 	bl	8000454 <uartGetData>
 8000740:	0003      	movs	r3, r0
 8000742:	1d7a      	adds	r2, r7, #5
 8000744:	32ff      	adds	r2, #255	; 0xff
 8000746:	6013      	str	r3, [r2, #0]
	if (bufferSize)
 8000748:	1d7b      	adds	r3, r7, #5
 800074a:	33ff      	adds	r3, #255	; 0xff
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0ef      	beq.n	8000732 <main+0x46>
	{
		/* send the buffer data to uart1 */
		uartSendData(BSP_TTL_CHANNEL1, buffer, bufferSize);
 8000752:	1d7b      	adds	r3, r7, #5
 8000754:	33ff      	adds	r3, #255	; 0xff
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	b29a      	uxth	r2, r3
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	0019      	movs	r1, r3
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff fe1e 	bl	80003a0 <uartSendData>
		HAL_Delay_nMs(1000);
 8000764:	23fa      	movs	r3, #250	; 0xfa
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fd59 	bl	8000220 <HAL_Delay_nMs>

		/* reset the value */
		bufferSize = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	1d7a      	adds	r2, r7, #5
 8000772:	32ff      	adds	r2, #255	; 0xff
 8000774:	6013      	str	r3, [r2, #0]
		uartResetData(BSP_TTL_CHANNEL1);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff fe9a 	bl	80004b0 <uartResetData>
	bufferSize = uartGetData(BSP_TTL_CHANNEL1, buffer, 256);
 800077c:	e7d9      	b.n	8000732 <main+0x46>
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	fffffefc 	.word	0xfffffefc

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b095      	sub	sp, #84	; 0x54
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	2420      	movs	r4, #32
 800078c:	193b      	adds	r3, r7, r4
 800078e:	0018      	movs	r0, r3
 8000790:	2330      	movs	r3, #48	; 0x30
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f003 f99c 	bl	8003ad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079a:	2310      	movs	r3, #16
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	2310      	movs	r3, #16
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f003 f994 	bl	8003ad2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007aa:	003b      	movs	r3, r7
 80007ac:	0018      	movs	r0, r3
 80007ae:	2310      	movs	r3, #16
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f003 f98d 	bl	8003ad2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	0021      	movs	r1, r4
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2201      	movs	r2, #1
 80007c4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2202      	movs	r2, #2
 80007ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	0252      	lsls	r2, r2, #9
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	02d2      	lsls	r2, r2, #11
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fe2b 	bl	8001440 <HAL_RCC_OscConfig>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f997 	bl	8000b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	2110      	movs	r1, #16
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2207      	movs	r2, #7
 80007f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2202      	movs	r2, #2
 80007fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2101      	movs	r1, #1
 8000810:	0018      	movs	r0, r3
 8000812:	f001 f92f 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800081a:	f000 f981 	bl	8000b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800081e:	003b      	movs	r3, r7
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000824:	003b      	movs	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fa67 	bl	8001d00 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000836:	f000 f973 	bl	8000b20 <Error_Handler>
  }
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b015      	add	sp, #84	; 0x54
 8000840:	bd90      	pop	{r4, r7, pc}
	...

08000844 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_TIM17_Init+0x44>)
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <MX_TIM17_Init+0x48>)
 800084c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_TIM17_Init+0x44>)
 8000850:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <MX_TIM17_Init+0x4c>)
 8000852:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_TIM17_Init+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_TIM17_Init+0x44>)
 800085c:	2223      	movs	r2, #35	; 0x23
 800085e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_TIM17_Init+0x44>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_TIM17_Init+0x44>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_TIM17_Init+0x44>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <MX_TIM17_Init+0x44>)
 8000874:	0018      	movs	r0, r3
 8000876:	f001 fb11 	bl	8001e9c <HAL_TIM_Base_Init>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800087e:	f000 f94f 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000015c 	.word	0x2000015c
 800088c:	40014800 	.word	0x40014800
 8000890:	000012bf 	.word	0x000012bf

08000894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART1_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_USART1_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008a0:	22e1      	movs	r2, #225	; 0xe1
 80008a2:	0252      	lsls	r2, r2, #9
 80008a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fd65 	bl	80023a8 <HAL_UART_Init>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f91d 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001a4 	.word	0x200001a4
 80008f0:	40013800 	.word	0x40013800

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USART2_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <MX_USART2_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000900:	22e1      	movs	r2, #225	; 0xe1
 8000902:	0252      	lsls	r2, r2, #9
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000938:	0018      	movs	r0, r3
 800093a:	f001 fd35 	bl	80023a8 <HAL_UART_Init>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f8ed 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000022c 	.word	0x2000022c
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	240c      	movs	r4, #12
 800095c:	193b      	adds	r3, r7, r4
 800095e:	0018      	movs	r0, r3
 8000960:	2314      	movs	r3, #20
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f003 f8b4 	bl	8003ad2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096a:	4b6a      	ldr	r3, [pc, #424]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	4b69      	ldr	r3, [pc, #420]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	03c9      	lsls	r1, r1, #15
 8000974:	430a      	orrs	r2, r1
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	4b66      	ldr	r3, [pc, #408]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	03db      	lsls	r3, r3, #15
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b63      	ldr	r3, [pc, #396]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	4b62      	ldr	r3, [pc, #392]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0289      	lsls	r1, r1, #10
 8000990:	430a      	orrs	r2, r1
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	4b5f      	ldr	r3, [pc, #380]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	029b      	lsls	r3, r3, #10
 800099c:	4013      	ands	r3, r2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b5c      	ldr	r3, [pc, #368]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	02c9      	lsls	r1, r1, #11
 80009ac:	430a      	orrs	r2, r1
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	4b58      	ldr	r3, [pc, #352]	; (8000b14 <MX_GPIO_Init+0x1c0>)
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	02db      	lsls	r3, r3, #11
 80009b8:	4013      	ands	r3, r2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 80009be:	2381      	movs	r3, #129	; 0x81
 80009c0:	0119      	lsls	r1, r3, #4
 80009c2:	2390      	movs	r3, #144	; 0x90
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2200      	movs	r2, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fd1b 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 80009ce:	4952      	ldr	r1, [pc, #328]	; (8000b18 <MX_GPIO_Init+0x1c4>)
 80009d0:	4b52      	ldr	r3, [pc, #328]	; (8000b1c <MX_GPIO_Init+0x1c8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fd15 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2210      	movs	r2, #16
 80009de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2201      	movs	r2, #1
 80009e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2201      	movs	r2, #1
 80009f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80009f2:	193a      	adds	r2, r7, r4
 80009f4:	2390      	movs	r3, #144	; 0x90
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fb92 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 8000a00:	0021      	movs	r1, r4
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	0152      	lsls	r2, r2, #5
 8000a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2201      	movs	r2, #1
 8000a16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <MX_GPIO_Init+0x1c8>)
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0010      	movs	r0, r2
 8000a20:	f000 fb80 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 8000a24:	0021      	movs	r1, r4
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	0192      	lsls	r2, r2, #6
 8000a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2288      	movs	r2, #136	; 0x88
 8000a32:	0352      	lsls	r2, r2, #13
 8000a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	4a36      	ldr	r2, [pc, #216]	; (8000b1c <MX_GPIO_Init+0x1c8>)
 8000a42:	0019      	movs	r1, r3
 8000a44:	0010      	movs	r0, r2
 8000a46:	f000 fb6d 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 8000a4a:	0021      	movs	r1, r4
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	22c0      	movs	r2, #192	; 0xc0
 8000a50:	0212      	lsls	r2, r2, #8
 8000a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	000c      	movs	r4, r1
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2203      	movs	r2, #3
 8000a66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x1c8>)
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	0010      	movs	r0, r2
 8000a70:	f000 fb58 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	0052      	lsls	r2, r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8000a88:	193a      	adds	r2, r7, r4
 8000a8a:	2390      	movs	r3, #144	; 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fb47 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 8000a96:	0021      	movs	r1, r4
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	000c      	movs	r4, r1
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	193a      	adds	r2, r7, r4
 8000ab6:	2390      	movs	r3, #144	; 0x90
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fb31 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	0152      	lsls	r2, r2, #5
 8000ac8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2288      	movs	r2, #136	; 0x88
 8000ace:	0352      	lsls	r2, r2, #13
 8000ad0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	193a      	adds	r2, r7, r4
 8000ada:	2390      	movs	r3, #144	; 0x90
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fb1f 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 8000ae6:	0021      	movs	r1, r4
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2230      	movs	r2, #48	; 0x30
 8000aec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2201      	movs	r2, #1
 8000af2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <MX_GPIO_Init+0x1c8>)
 8000b04:	0019      	movs	r1, r3
 8000b06:	0010      	movs	r0, r2
 8000b08:	f000 fb0c 	bl	8001124 <HAL_GPIO_Init>

}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b009      	add	sp, #36	; 0x24
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	0000c030 	.word	0x0000c030
 8000b1c:	48000400 	.word	0x48000400

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	699a      	ldr	r2, [r3, #24]
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	619a      	str	r2, [r3, #24]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	2201      	movs	r2, #1
 8000b44:	4013      	ands	r3, r2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	69da      	ldr	r2, [r3, #28]
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0549      	lsls	r1, r1, #21
 8000b54:	430a      	orrs	r2, r1
 8000b56:	61da      	str	r2, [r3, #28]
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_MspInit+0x44>)
 8000b5a:	69da      	ldr	r2, [r3, #28]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	055b      	lsls	r3, r3, #21
 8000b60:	4013      	ands	r3, r2
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_TIM_Base_MspInit+0x48>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d115      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b88:	699a      	ldr	r2, [r3, #24]
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	02c9      	lsls	r1, r1, #11
 8000b90:	430a      	orrs	r2, r1
 8000b92:	619a      	str	r2, [r3, #24]
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b96:	699a      	ldr	r2, [r3, #24]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	02db      	lsls	r3, r3, #11
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2016      	movs	r0, #22
 8000ba8:	f000 fa0c 	bl	8000fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000bac:	2016      	movs	r0, #22
 8000bae:	f000 fa1e 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	40014800 	.word	0x40014800
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08d      	sub	sp, #52	; 0x34
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	241c      	movs	r4, #28
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f002 ff7b 	bl	8003ad2 <memset>
  if(huart->Instance==USART1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a3d      	ldr	r2, [pc, #244]	; (8000cd8 <HAL_UART_MspInit+0x114>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d13c      	bne.n	8000c60 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be6:	4b3d      	ldr	r3, [pc, #244]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000be8:	699a      	ldr	r2, [r3, #24]
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	01c9      	lsls	r1, r1, #7
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	619a      	str	r2, [r3, #24]
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000bf6:	699a      	ldr	r2, [r3, #24]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	01db      	lsls	r3, r3, #7
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	0289      	lsls	r1, r1, #10
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	029b      	lsls	r3, r3, #10
 8000c18:	4013      	ands	r3, r2
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	22c0      	movs	r2, #192	; 0xc0
 8000c22:	00d2      	lsls	r2, r2, #3
 8000c24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	0021      	movs	r1, r4
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2203      	movs	r2, #3
 8000c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	187a      	adds	r2, r7, r1
 8000c42:	2390      	movs	r3, #144	; 0x90
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f000 fa6b 	bl	8001124 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2101      	movs	r1, #1
 8000c52:	201b      	movs	r0, #27
 8000c54:	f000 f9b6 	bl	8000fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c58:	201b      	movs	r0, #27
 8000c5a:	f000 f9c8 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5e:	e037      	b.n	8000cd0 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x11c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d132      	bne.n	8000cd0 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c6c:	69da      	ldr	r2, [r3, #28]
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0289      	lsls	r1, r1, #10
 8000c74:	430a      	orrs	r2, r1
 8000c76:	61da      	str	r2, [r3, #28]
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c7a:	69da      	ldr	r2, [r3, #28]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	029b      	lsls	r3, r3, #10
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	0289      	lsls	r1, r1, #10
 8000c90:	430a      	orrs	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0x118>)
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	029b      	lsls	r3, r3, #10
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca2:	211c      	movs	r1, #28
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2202      	movs	r2, #2
 8000cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	187a      	adds	r2, r7, r1
 8000cc4:	2390      	movs	r3, #144	; 0x90
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fa2a 	bl	8001124 <HAL_GPIO_Init>
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b00d      	add	sp, #52	; 0x34
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f894 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <TIM17_IRQHandler+0x14>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 f988 	bl	8002030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	2000015c 	.word	0x2000015c

08000d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <USART1_IRQHandler+0x14>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 fc84 	bl	8002640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	200001a4 	.word	0x200001a4

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d54:	f7ff fff6 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	; (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	; (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7e:	f002 fe7b 	bl	8003a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d82:	f7ff fcb3 	bl	80006ec <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
  ldr   r0, =_estack
 8000d88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d94:	08003b3c 	.word	0x08003b3c
  ldr r2, =_sbss
 8000d98:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d9c:	200002b8 	.word	0x200002b8

08000da0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_IRQHandler>
	...

08000da4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_Init+0x24>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_Init+0x24>)
 8000dae:	2110      	movs	r1, #16
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 f809 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dba:	f7ff feb7 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_InitTick+0x5c>)
 8000dd6:	681c      	ldr	r4, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	23fa      	movs	r3, #250	; 0xfa
 8000de0:	0098      	lsls	r0, r3, #2
 8000de2:	f7ff f991 	bl	8000108 <__udivsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff f98c 	bl	8000108 <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 f90b 	bl	800100e <HAL_SYSTICK_Config>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e00f      	b.n	8000e20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d80b      	bhi.n	8000e1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f8d8 	bl	8000fc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_InitTick+0x64>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b003      	add	sp, #12
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	20000010 	.word	0x20000010
 8000e2c:	20000018 	.word	0x20000018
 8000e30:	20000014 	.word	0x20000014

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	18d2      	adds	r2, r2, r3
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	20000018 	.word	0x20000018
 8000e54:	200002b4 	.word	0x200002b4

08000e58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	200002b4 	.word	0x200002b4

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0002      	movs	r2, r0
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7e:	d809      	bhi.n	8000e94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	231f      	movs	r3, #31
 8000e88:	401a      	ands	r2, r3
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_EnableIRQ+0x30>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
  }
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb4:	d828      	bhi.n	8000f08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <__NVIC_SetPriority+0xd4>)
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	33c0      	adds	r3, #192	; 0xc0
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	589b      	ldr	r3, [r3, r2]
 8000ec6:	1dfa      	adds	r2, r7, #7
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	0011      	movs	r1, r2
 8000ecc:	2203      	movs	r2, #3
 8000ece:	400a      	ands	r2, r1
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	21ff      	movs	r1, #255	; 0xff
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	43d2      	mvns	r2, r2
 8000eda:	401a      	ands	r2, r3
 8000edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	2303      	movs	r3, #3
 8000eee:	4003      	ands	r3, r0
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef4:	481f      	ldr	r0, [pc, #124]	; (8000f74 <__NVIC_SetPriority+0xd4>)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	430a      	orrs	r2, r1
 8000f00:	33c0      	adds	r3, #192	; 0xc0
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f06:	e031      	b.n	8000f6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <__NVIC_SetPriority+0xd8>)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0019      	movs	r1, r3
 8000f10:	230f      	movs	r3, #15
 8000f12:	400b      	ands	r3, r1
 8000f14:	3b08      	subs	r3, #8
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3306      	adds	r3, #6
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	18d3      	adds	r3, r2, r3
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1dfa      	adds	r2, r7, #7
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	0011      	movs	r1, r2
 8000f28:	2203      	movs	r2, #3
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	00d2      	lsls	r2, r2, #3
 8000f2e:	21ff      	movs	r1, #255	; 0xff
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	43d2      	mvns	r2, r2
 8000f36:	401a      	ands	r2, r3
 8000f38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	401a      	ands	r2, r3
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0018      	movs	r0, r3
 8000f48:	2303      	movs	r3, #3
 8000f4a:	4003      	ands	r3, r0
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <__NVIC_SetPriority+0xd8>)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	001c      	movs	r4, r3
 8000f58:	230f      	movs	r3, #15
 8000f5a:	4023      	ands	r3, r4
 8000f5c:	3b08      	subs	r3, #8
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	430a      	orrs	r2, r1
 8000f62:	3306      	adds	r3, #6
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	18c3      	adds	r3, r0, r3
 8000f68:	3304      	adds	r3, #4
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b003      	add	sp, #12
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	045b      	lsls	r3, r3, #17
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d301      	bcc.n	8000f94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f90:	2301      	movs	r3, #1
 8000f92:	e010      	b.n	8000fb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <SysTick_Config+0x44>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	3a01      	subs	r2, #1
 8000f9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff ff7c 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x44>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x44>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	210f      	movs	r1, #15
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	1c02      	adds	r2, r0, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b004      	add	sp, #16
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	0002      	movs	r2, r0
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ff33 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ffaf 	bl	8000f7c <SysTick_Config>
 800101e:	0003      	movs	r3, r0
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2221      	movs	r2, #33	; 0x21
 8001034:	5c9b      	ldrb	r3, [r3, r2]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d008      	beq.n	800104e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2220      	movs	r2, #32
 8001046:	2100      	movs	r1, #0
 8001048:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e020      	b.n	8001090 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	210e      	movs	r1, #14
 800105a:	438a      	bics	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	438a      	bics	r2, r1
 800106c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001076:	2101      	movs	r1, #1
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2221      	movs	r2, #33	; 0x21
 8001082:	2101      	movs	r1, #1
 8001084:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2220      	movs	r2, #32
 800108a:	2100      	movs	r1, #0
 800108c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a0:	210f      	movs	r1, #15
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2221      	movs	r2, #33	; 0x21
 80010ac:	5c9b      	ldrb	r3, [r3, r2]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d006      	beq.n	80010c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e028      	b.n	8001114 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	210e      	movs	r1, #14
 80010ce:	438a      	bics	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	438a      	bics	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ea:	2101      	movs	r1, #1
 80010ec:	4091      	lsls	r1, r2
 80010ee:	000a      	movs	r2, r1
 80010f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2221      	movs	r2, #33	; 0x21
 80010f6:	2101      	movs	r1, #1
 80010f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	0010      	movs	r0, r2
 8001112:	4798      	blx	r3
    }
  }
  return status;
 8001114:	230f      	movs	r3, #15
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	781b      	ldrb	r3, [r3, #0]
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b004      	add	sp, #16
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e14f      	b.n	80013d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d100      	bne.n	800114c <HAL_GPIO_Init+0x28>
 800114a:	e140      	b.n	80013ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2203      	movs	r2, #3
 8001152:	4013      	ands	r3, r2
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	43da      	mvns	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	2201      	movs	r2, #1
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2203      	movs	r2, #3
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d017      	beq.n	8001202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	4013      	ands	r3, r2
 800120a:	2b02      	cmp	r3, #2
 800120c:	d123      	bne.n	8001256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	58d3      	ldr	r3, [r2, r3]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2207      	movs	r2, #7
 8001220:	4013      	ands	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2107      	movs	r1, #7
 800123a:	400b      	ands	r3, r1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	6939      	ldr	r1, [r7, #16]
 8001254:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2203      	movs	r2, #3
 8001274:	401a      	ands	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	23c0      	movs	r3, #192	; 0xc0
 8001290:	029b      	lsls	r3, r3, #10
 8001292:	4013      	ands	r3, r2
 8001294:	d100      	bne.n	8001298 <HAL_GPIO_Init+0x174>
 8001296:	e09a      	b.n	80013ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	4b54      	ldr	r3, [pc, #336]	; (80013ec <HAL_GPIO_Init+0x2c8>)
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_GPIO_Init+0x2c8>)
 800129e:	2101      	movs	r1, #1
 80012a0:	430a      	orrs	r2, r1
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	4b51      	ldr	r3, [pc, #324]	; (80013ec <HAL_GPIO_Init+0x2c8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b0:	4a4f      	ldr	r2, [pc, #316]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	589b      	ldr	r3, [r3, r2]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2203      	movs	r2, #3
 80012c2:	4013      	ands	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	2390      	movs	r3, #144	; 0x90
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	429a      	cmp	r2, r3
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x1e2>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a44      	ldr	r2, [pc, #272]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x1de>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a43      	ldr	r2, [pc, #268]	; (80013f8 <HAL_GPIO_Init+0x2d4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x1da>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a42      	ldr	r2, [pc, #264]	; (80013fc <HAL_GPIO_Init+0x2d8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x1d6>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x1e4>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x1e4>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x1e4>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x1e4>
 8001306:	2300      	movs	r3, #0
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	2103      	movs	r1, #3
 800130c:	400a      	ands	r2, r1
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43da      	mvns	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	035b      	lsls	r3, r3, #13
 800133e:	4013      	ands	r3, r2
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43da      	mvns	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	039b      	lsls	r3, r3, #14
 8001368:	4013      	ands	r3, r2
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001374:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	029b      	lsls	r3, r3, #10
 8001392:	4013      	ands	r3, r2
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	025b      	lsls	r3, r3, #9
 80013bc:	4013      	ands	r3, r2
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	40da      	lsrs	r2, r3
 80013dc:	1e13      	subs	r3, r2, #0
 80013de:	d000      	beq.n	80013e2 <HAL_GPIO_Init+0x2be>
 80013e0:	e6a8      	b.n	8001134 <HAL_GPIO_Init+0x10>
  } 
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b006      	add	sp, #24
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	48000400 	.word	0x48000400
 80013f8:	48000800 	.word	0x48000800
 80013fc:	48000c00 	.word	0x48000c00
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	0008      	movs	r0, r1
 800140e:	0011      	movs	r1, r2
 8001410:	1cbb      	adds	r3, r7, #2
 8001412:	1c02      	adds	r2, r0, #0
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	1c7b      	adds	r3, r7, #1
 8001418:	1c0a      	adds	r2, r1, #0
 800141a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141c:	1c7b      	adds	r3, r7, #1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001424:	1cbb      	adds	r3, r7, #2
 8001426:	881a      	ldrh	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142e:	1cbb      	adds	r3, r7, #2
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e301      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	4013      	ands	r3, r2
 800145a:	d100      	bne.n	800145e <HAL_RCC_OscConfig+0x1e>
 800145c:	e08d      	b.n	800157a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800145e:	4bc3      	ldr	r3, [pc, #780]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	220c      	movs	r2, #12
 8001464:	4013      	ands	r3, r2
 8001466:	2b04      	cmp	r3, #4
 8001468:	d00e      	beq.n	8001488 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800146a:	4bc0      	ldr	r3, [pc, #768]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	220c      	movs	r2, #12
 8001470:	4013      	ands	r3, r2
 8001472:	2b08      	cmp	r3, #8
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x64>
 8001476:	4bbd      	ldr	r3, [pc, #756]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	025b      	lsls	r3, r3, #9
 800147e:	401a      	ands	r2, r3
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	025b      	lsls	r3, r3, #9
 8001484:	429a      	cmp	r2, r3
 8001486:	d10d      	bne.n	80014a4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	4bb8      	ldr	r3, [pc, #736]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	029b      	lsls	r3, r3, #10
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x56>
 8001494:	e070      	b.n	8001578 <HAL_RCC_OscConfig+0x138>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d000      	beq.n	80014a0 <HAL_RCC_OscConfig+0x60>
 800149e:	e06b      	b.n	8001578 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e2d8      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d107      	bne.n	80014bc <HAL_RCC_OscConfig+0x7c>
 80014ac:	4baf      	ldr	r3, [pc, #700]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4bae      	ldr	r3, [pc, #696]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0249      	lsls	r1, r1, #9
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e02f      	b.n	800151c <HAL_RCC_OscConfig+0xdc>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x9e>
 80014c4:	4ba9      	ldr	r3, [pc, #676]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4ba8      	ldr	r3, [pc, #672]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014ca:	49a9      	ldr	r1, [pc, #676]	; (8001770 <HAL_RCC_OscConfig+0x330>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	4ba6      	ldr	r3, [pc, #664]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4ba5      	ldr	r3, [pc, #660]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014d6:	49a7      	ldr	r1, [pc, #668]	; (8001774 <HAL_RCC_OscConfig+0x334>)
 80014d8:	400a      	ands	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	e01e      	b.n	800151c <HAL_RCC_OscConfig+0xdc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d10e      	bne.n	8001504 <HAL_RCC_OscConfig+0xc4>
 80014e6:	4ba1      	ldr	r3, [pc, #644]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4ba0      	ldr	r3, [pc, #640]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	02c9      	lsls	r1, r1, #11
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	4b9d      	ldr	r3, [pc, #628]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b9c      	ldr	r3, [pc, #624]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80014fa:	2180      	movs	r1, #128	; 0x80
 80014fc:	0249      	lsls	r1, r1, #9
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0xdc>
 8001504:	4b99      	ldr	r3, [pc, #612]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b98      	ldr	r3, [pc, #608]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 800150a:	4999      	ldr	r1, [pc, #612]	; (8001770 <HAL_RCC_OscConfig+0x330>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	4b96      	ldr	r3, [pc, #600]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b95      	ldr	r3, [pc, #596]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001516:	4997      	ldr	r1, [pc, #604]	; (8001774 <HAL_RCC_OscConfig+0x334>)
 8001518:	400a      	ands	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d014      	beq.n	800154e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fc98 	bl	8000e58 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff fc93 	bl	8000e58 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e28a      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001540:	4b8a      	ldr	r3, [pc, #552]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0xee>
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fc83 	bl	8000e58 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fc7e 	bl	8000e58 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e275      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b80      	ldr	r3, [pc, #512]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	029b      	lsls	r3, r3, #10
 8001572:	4013      	ands	r3, r2
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x118>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d100      	bne.n	8001586 <HAL_RCC_OscConfig+0x146>
 8001584:	e069      	b.n	800165a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001586:	4b79      	ldr	r3, [pc, #484]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	220c      	movs	r2, #12
 800158c:	4013      	ands	r3, r2
 800158e:	d00b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001590:	4b76      	ldr	r3, [pc, #472]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	220c      	movs	r2, #12
 8001596:	4013      	ands	r3, r2
 8001598:	2b08      	cmp	r3, #8
 800159a:	d11c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x196>
 800159c:	4b73      	ldr	r3, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	4013      	ands	r3, r2
 80015a6:	d116      	bne.n	80015d6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a8:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x17e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d001      	beq.n	80015be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e24b      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	22f8      	movs	r2, #248	; 0xf8
 80015c4:	4393      	bics	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00da      	lsls	r2, r3, #3
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d4:	e041      	b.n	800165a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d024      	beq.n	8001628 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b62      	ldr	r3, [pc, #392]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fc35 	bl	8000e58 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc30 	bl	8000e58 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e227      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d0f1      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	22f8      	movs	r2, #248	; 0xf8
 8001616:	4393      	bics	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00da      	lsls	r2, r3, #3
 8001620:	4b52      	ldr	r3, [pc, #328]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e018      	b.n	800165a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b4f      	ldr	r3, [pc, #316]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 800162e:	2101      	movs	r1, #1
 8001630:	438a      	bics	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fc10 	bl	8000e58 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fc0b 	bl	8000e58 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e202      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2202      	movs	r2, #2
 8001656:	4013      	ands	r3, r2
 8001658:	d1f1      	bne.n	800163e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2208      	movs	r2, #8
 8001660:	4013      	ands	r3, r2
 8001662:	d036      	beq.n	80016d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d019      	beq.n	80016a0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166c:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 800166e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001670:	4b3e      	ldr	r3, [pc, #248]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001672:	2101      	movs	r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff fbee 	bl	8000e58 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff fbe9 	bl	8000e58 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e1e0      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d0f1      	beq.n	8001682 <HAL_RCC_OscConfig+0x242>
 800169e:	e018      	b.n	80016d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80016a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a4:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	438a      	bics	r2, r1
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff fbd4 	bl	8000e58 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fbcf 	bl	8000e58 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1c6      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f1      	bne.n	80016b6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2204      	movs	r2, #4
 80016d8:	4013      	ands	r3, r2
 80016da:	d100      	bne.n	80016de <HAL_RCC_OscConfig+0x29e>
 80016dc:	e0b4      	b.n	8001848 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016de:	201f      	movs	r0, #31
 80016e0:	183b      	adds	r3, r7, r0
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	055b      	lsls	r3, r3, #21
 80016ee:	4013      	ands	r3, r2
 80016f0:	d110      	bne.n	8001714 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0549      	lsls	r1, r1, #21
 80016fc:	430a      	orrs	r2, r1
 80016fe:	61da      	str	r2, [r3, #28]
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	055b      	lsls	r3, r3, #21
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800170e:	183b      	adds	r3, r7, r0
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4013      	ands	r3, r2
 800171e:	d11a      	bne.n	8001756 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	0049      	lsls	r1, r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172e:	f7ff fb93 	bl	8000e58 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001738:	f7ff fb8e 	bl	8000e58 <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e185      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_OscConfig+0x338>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4013      	ands	r3, r2
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d10e      	bne.n	800177c <HAL_RCC_OscConfig+0x33c>
 800175e:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_RCC_OscConfig+0x32c>)
 8001764:	2101      	movs	r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	621a      	str	r2, [r3, #32]
 800176a:	e035      	b.n	80017d8 <HAL_RCC_OscConfig+0x398>
 800176c:	40021000 	.word	0x40021000
 8001770:	fffeffff 	.word	0xfffeffff
 8001774:	fffbffff 	.word	0xfffbffff
 8001778:	40007000 	.word	0x40007000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10c      	bne.n	800179e <HAL_RCC_OscConfig+0x35e>
 8001784:	4bb6      	ldr	r3, [pc, #728]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	4bb5      	ldr	r3, [pc, #724]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800178a:	2101      	movs	r1, #1
 800178c:	438a      	bics	r2, r1
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	4bb3      	ldr	r3, [pc, #716]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	4bb2      	ldr	r3, [pc, #712]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001796:	2104      	movs	r1, #4
 8001798:	438a      	bics	r2, r1
 800179a:	621a      	str	r2, [r3, #32]
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x398>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x380>
 80017a6:	4bae      	ldr	r3, [pc, #696]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4bad      	ldr	r3, [pc, #692]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80017ac:	2104      	movs	r1, #4
 80017ae:	430a      	orrs	r2, r1
 80017b0:	621a      	str	r2, [r3, #32]
 80017b2:	4bab      	ldr	r3, [pc, #684]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80017b4:	6a1a      	ldr	r2, [r3, #32]
 80017b6:	4baa      	ldr	r3, [pc, #680]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	621a      	str	r2, [r3, #32]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x398>
 80017c0:	4ba7      	ldr	r3, [pc, #668]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4ba6      	ldr	r3, [pc, #664]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	621a      	str	r2, [r3, #32]
 80017cc:	4ba4      	ldr	r3, [pc, #656]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	4ba3      	ldr	r3, [pc, #652]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80017d2:	2104      	movs	r1, #4
 80017d4:	438a      	bics	r2, r1
 80017d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d014      	beq.n	800180a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fb3a 	bl	8000e58 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff fb35 	bl	8000e58 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a9b      	ldr	r2, [pc, #620]	; (8001a64 <HAL_RCC_OscConfig+0x624>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e12b      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4b98      	ldr	r3, [pc, #608]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	2202      	movs	r2, #2
 8001804:	4013      	ands	r3, r2
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x3aa>
 8001808:	e013      	b.n	8001832 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff fb25 	bl	8000e58 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	e009      	b.n	8001828 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fb20 	bl	8000e58 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	4a91      	ldr	r2, [pc, #580]	; (8001a64 <HAL_RCC_OscConfig+0x624>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e116      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	4b8d      	ldr	r3, [pc, #564]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001832:	231f      	movs	r3, #31
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	4b87      	ldr	r3, [pc, #540]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001842:	4989      	ldr	r1, [pc, #548]	; (8001a68 <HAL_RCC_OscConfig+0x628>)
 8001844:	400a      	ands	r2, r1
 8001846:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	4013      	ands	r3, r2
 8001850:	d063      	beq.n	800191a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d12a      	bne.n	80018b0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800185a:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800185c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185e:	4b80      	ldr	r3, [pc, #512]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001860:	2104      	movs	r1, #4
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001866:	4b7e      	ldr	r3, [pc, #504]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186a:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff faf1 	bl	8000e58 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800187c:	f7ff faec 	bl	8000e58 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0e3      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800188e:	4b74      	ldr	r3, [pc, #464]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d0f1      	beq.n	800187c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001898:	4b71      	ldr	r3, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	22f8      	movs	r2, #248	; 0xf8
 800189e:	4393      	bics	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	00da      	lsls	r2, r3, #3
 80018a8:	4b6d      	ldr	r3, [pc, #436]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018aa:	430a      	orrs	r2, r1
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34
 80018ae:	e034      	b.n	800191a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	3305      	adds	r3, #5
 80018b6:	d111      	bne.n	80018dc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018b8:	4b69      	ldr	r3, [pc, #420]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018bc:	4b68      	ldr	r3, [pc, #416]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018be:	2104      	movs	r1, #4
 80018c0:	438a      	bics	r2, r1
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018c4:	4b66      	ldr	r3, [pc, #408]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c8:	22f8      	movs	r2, #248	; 0xf8
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	00da      	lsls	r2, r3, #3
 80018d4:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34
 80018da:	e01e      	b.n	800191a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018dc:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e0:	4b5f      	ldr	r3, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018e2:	2104      	movs	r1, #4
 80018e4:	430a      	orrs	r2, r1
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018e8:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ec:	4b5c      	ldr	r3, [pc, #368]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	438a      	bics	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fab0 	bl	8000e58 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018fe:	f7ff faab 	bl	8000e58 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0a2      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	2202      	movs	r2, #2
 8001916:	4013      	ands	r3, r2
 8001918:	d1f1      	bne.n	80018fe <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <HAL_RCC_OscConfig+0x4e4>
 8001922:	e097      	b.n	8001a54 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	4b4e      	ldr	r3, [pc, #312]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	220c      	movs	r2, #12
 800192a:	4013      	ands	r3, r2
 800192c:	2b08      	cmp	r3, #8
 800192e:	d100      	bne.n	8001932 <HAL_RCC_OscConfig+0x4f2>
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d14c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b48      	ldr	r3, [pc, #288]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001940:	494a      	ldr	r1, [pc, #296]	; (8001a6c <HAL_RCC_OscConfig+0x62c>)
 8001942:	400a      	ands	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fa87 	bl	8000e58 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff fa82 	bl	8000e58 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e079      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	049b      	lsls	r3, r3, #18
 800196a:	4013      	ands	r3, r2
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	220f      	movs	r2, #15
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197c:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <HAL_RCC_OscConfig+0x630>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	431a      	orrs	r2, r3
 8001996:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	0449      	lsls	r1, r1, #17
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa55 	bl	8000e58 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fa50 	bl	8000e58 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e047      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	049b      	lsls	r3, r3, #18
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x574>
 80019d2:	e03f      	b.n	8001a54 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80019da:	4924      	ldr	r1, [pc, #144]	; (8001a6c <HAL_RCC_OscConfig+0x62c>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fa3a 	bl	8000e58 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fa35 	bl	8000e58 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e02c      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	049b      	lsls	r3, r3, #18
 8001a04:	4013      	ands	r3, r2
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x5aa>
 8001a08:	e024      	b.n	8001a54 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e01f      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_OscConfig+0x620>)
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	401a      	ands	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10e      	bne.n	8001a50 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	220f      	movs	r2, #15
 8001a36:	401a      	ands	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	23f0      	movs	r3, #240	; 0xf0
 8001a44:	039b      	lsls	r3, r3, #14
 8001a46:	401a      	ands	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b008      	add	sp, #32
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40021000 	.word	0x40021000
 8001a64:	00001388 	.word	0x00001388
 8001a68:	efffffff 	.word	0xefffffff
 8001a6c:	feffffff 	.word	0xfeffffff
 8001a70:	ffc2ffff 	.word	0xffc2ffff

08001a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b3      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d911      	bls.n	8001aba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e09a      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d015      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4013      	ands	r3, r2
 8001acc:	d006      	beq.n	8001adc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ace:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001ad4:	21e0      	movs	r1, #224	; 0xe0
 8001ad6:	00c9      	lsls	r1, r1, #3
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	22f0      	movs	r2, #240	; 0xf0
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	d040      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	029b      	lsls	r3, r3, #10
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d114      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06e      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	049b      	lsls	r3, r3, #18
 8001b22:	4013      	ands	r3, r2
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e062      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e05b      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b38:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	4393      	bics	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7ff f984 	bl	8000e58 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b54:	e009      	b.n	8001b6a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b56:	f7ff f97f 	bl	8000e58 <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <HAL_RCC_ClockConfig+0x18c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e042      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	220c      	movs	r2, #12
 8001b70:	401a      	ands	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1ec      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d211      	bcs.n	8001bae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4393      	bics	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x184>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e020      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d009      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <HAL_RCC_ClockConfig+0x190>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bcc:	f000 f820 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bd0:	0001      	movs	r1, r0
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x188>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	220f      	movs	r2, #15
 8001bda:	4013      	ands	r3, r2
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x194>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	000a      	movs	r2, r1
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x198>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff f8ef 	bl	8000dcc <HAL_InitTick>
  
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	00001388 	.word	0x00001388
 8001c04:	fffff8ff 	.word	0xfffff8ff
 8001c08:	08003afc 	.word	0x08003afc
 8001c0c:	20000010 	.word	0x20000010

08001c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	220c      	movs	r2, #12
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x36>
 8001c3e:	e02c      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c42:	613b      	str	r3, [r7, #16]
      break;
 8001c44:	e02c      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	0c9b      	lsrs	r3, r3, #18
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	220f      	movs	r2, #15
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c70:	f7fe fa4a 	bl	8000108 <__udivsi3>
 8001c74:	0003      	movs	r3, r0
 8001c76:	001a      	movs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4353      	muls	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e009      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	000a      	movs	r2, r1
 8001c84:	0152      	lsls	r2, r2, #5
 8001c86:	1a52      	subs	r2, r2, r1
 8001c88:	0193      	lsls	r3, r2, #6
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	185b      	adds	r3, r3, r1
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	e002      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xac>)
 8001c9c:	613b      	str	r3, [r7, #16]
      break;
 8001c9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ca0:	693b      	ldr	r3, [r7, #16]
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b006      	add	sp, #24
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	08003b14 	.word	0x08003b14
 8001cb8:	08003b24 	.word	0x08003b24
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	20000010 	.word	0x20000010

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cd8:	f7ff fff2 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001cdc:	0001      	movs	r1, r0
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	000b      	movs	r3, r1
}    
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08003b0c 	.word	0x08003b0c

08001d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	025b      	lsls	r3, r3, #9
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d1c:	e08e      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	2017      	movs	r0, #23
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	055b      	lsls	r3, r3, #21
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d110      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0549      	lsls	r1, r1, #21
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	61da      	str	r2, [r3, #28]
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d11a      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d60:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f873 	bl	8000e58 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	e008      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7ff f86e 	bl	8000e58 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e077      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d034      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	23c0      	movs	r3, #192	; 0xc0
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d02c      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc4:	6a1a      	ldr	r2, [r3, #32]
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc8:	2180      	movs	r1, #128	; 0x80
 8001dca:	0249      	lsls	r1, r1, #9
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd6:	492e      	ldr	r1, [pc, #184]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff f835 	bl	8000e58 <HAL_GetTick>
 8001dee:	0003      	movs	r3, r0
 8001df0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e009      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff f830 	bl	8000e58 <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e038      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e26:	2317      	movs	r3, #23
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e36:	4918      	ldr	r1, [pc, #96]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	4013      	ands	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	2210      	movs	r2, #16
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b006      	add	sp, #24
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	fffffcff 	.word	0xfffffcff
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	00001388 	.word	0x00001388
 8001e98:	efffffff 	.word	0xefffffff

08001e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e042      	b.n	8001f34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223d      	movs	r2, #61	; 0x3d
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d107      	bne.n	8001eca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	223c      	movs	r2, #60	; 0x3c
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7fe fe55 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	223d      	movs	r2, #61	; 0x3d
 8001ece:	2102      	movs	r1, #2
 8001ed0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	0019      	movs	r1, r3
 8001edc:	0010      	movs	r0, r2
 8001ede:	f000 f9dd 	bl	800229c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2246      	movs	r2, #70	; 0x46
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	223e      	movs	r2, #62	; 0x3e
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	223f      	movs	r2, #63	; 0x3f
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2241      	movs	r2, #65	; 0x41
 8001f06:	2101      	movs	r1, #1
 8001f08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2242      	movs	r2, #66	; 0x42
 8001f0e:	2101      	movs	r1, #1
 8001f10:	5499      	strb	r1, [r3, r2]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2243      	movs	r2, #67	; 0x43
 8001f16:	2101      	movs	r1, #1
 8001f18:	5499      	strb	r1, [r3, r2]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2244      	movs	r2, #68	; 0x44
 8001f1e:	2101      	movs	r1, #1
 8001f20:	5499      	strb	r1, [r3, r2]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2245      	movs	r2, #69	; 0x45
 8001f26:	2101      	movs	r1, #1
 8001f28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	223d      	movs	r2, #61	; 0x3d
 8001f2e:	2101      	movs	r1, #1
 8001f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	223d      	movs	r2, #61	; 0x3d
 8001f48:	5c9b      	ldrb	r3, [r3, r2]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d001      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e035      	b.n	8001fc0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	223d      	movs	r2, #61	; 0x3d
 8001f58:	2102      	movs	r1, #2
 8001f5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2101      	movs	r1, #1
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_TIM_Base_Start_IT+0x8c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_TIM_Base_Start_IT+0x4e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <HAL_TIM_Base_Start_IT+0x90>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d004      	beq.n	8001f8a <HAL_TIM_Base_Start_IT+0x4e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <HAL_TIM_Base_Start_IT+0x94>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d111      	bne.n	8001fae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2207      	movs	r2, #7
 8001f92:	4013      	ands	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b06      	cmp	r3, #6
 8001f9a:	d010      	beq.n	8001fbe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fac:	e007      	b.n	8001fbe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b004      	add	sp, #16
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40014000 	.word	0x40014000

08001fd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	438a      	bics	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_TIM_Base_Stop_IT+0x54>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d10d      	bne.n	8002014 <HAL_TIM_Base_Stop_IT+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_TIM_Base_Stop_IT+0x58>)
 8002000:	4013      	ands	r3, r2
 8002002:	d107      	bne.n	8002014 <HAL_TIM_Base_Stop_IT+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	438a      	bics	r2, r1
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	223d      	movs	r2, #61	; 0x3d
 8002018:	2101      	movs	r1, #1
 800201a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b002      	add	sp, #8
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	00001111 	.word	0x00001111
 800202c:	00000444 	.word	0x00000444

08002030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2202      	movs	r2, #2
 8002040:	4013      	ands	r3, r2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d124      	bne.n	8002090 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	2b02      	cmp	r3, #2
 8002052:	d11d      	bne.n	8002090 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2203      	movs	r2, #3
 800205a:	4252      	negs	r2, r2
 800205c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2203      	movs	r2, #3
 800206c:	4013      	ands	r3, r2
 800206e:	d004      	beq.n	800207a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	0018      	movs	r0, r3
 8002074:	f000 f8fa 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002078:	e007      	b.n	800208a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f8ed 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0018      	movs	r0, r3
 8002086:	f000 f8f9 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2204      	movs	r2, #4
 8002098:	4013      	ands	r3, r2
 800209a:	2b04      	cmp	r3, #4
 800209c:	d125      	bne.n	80020ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2204      	movs	r2, #4
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d11e      	bne.n	80020ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2205      	movs	r2, #5
 80020b2:	4252      	negs	r2, r2
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	23c0      	movs	r3, #192	; 0xc0
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f8cd 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 80020d2:	e007      	b.n	80020e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 f8c0 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 f8cc 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2208      	movs	r2, #8
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d124      	bne.n	8002142 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2208      	movs	r2, #8
 8002100:	4013      	ands	r3, r2
 8002102:	2b08      	cmp	r3, #8
 8002104:	d11d      	bne.n	8002142 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2209      	movs	r2, #9
 800210c:	4252      	negs	r2, r2
 800210e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2204      	movs	r2, #4
 8002114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2203      	movs	r2, #3
 800211e:	4013      	ands	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 f8a1 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 800212a:	e007      	b.n	800213c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f894 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0018      	movs	r0, r3
 8002138:	f000 f8a0 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2210      	movs	r2, #16
 800214a:	4013      	ands	r3, r2
 800214c:	2b10      	cmp	r3, #16
 800214e:	d125      	bne.n	800219c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2210      	movs	r2, #16
 8002158:	4013      	ands	r3, r2
 800215a:	2b10      	cmp	r3, #16
 800215c:	d11e      	bne.n	800219c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2211      	movs	r2, #17
 8002164:	4252      	negs	r2, r2
 8002166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2208      	movs	r2, #8
 800216c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69da      	ldr	r2, [r3, #28]
 8002174:	23c0      	movs	r3, #192	; 0xc0
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d004      	beq.n	8002186 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f874 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002184:	e007      	b.n	8002196 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 f867 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0018      	movs	r0, r3
 8002192:	f000 f873 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10f      	bne.n	80021ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2202      	movs	r2, #2
 80021be:	4252      	negs	r2, r2
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7fe f845 	bl	8000254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2280      	movs	r2, #128	; 0x80
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b80      	cmp	r3, #128	; 0x80
 80021d6:	d10f      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b80      	cmp	r3, #128	; 0x80
 80021e4:	d108      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2281      	movs	r2, #129	; 0x81
 80021ec:	4252      	negs	r2, r2
 80021ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 f8d0 	bl	8002398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	4013      	ands	r3, r2
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d10f      	bne.n	8002226 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2240      	movs	r2, #64	; 0x40
 800220e:	4013      	ands	r3, r2
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d108      	bne.n	8002226 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2241      	movs	r2, #65	; 0x41
 800221a:	4252      	negs	r2, r2
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 f833 	bl	800228c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2220      	movs	r2, #32
 800222e:	4013      	ands	r3, r2
 8002230:	2b20      	cmp	r3, #32
 8002232:	d10f      	bne.n	8002254 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	4013      	ands	r3, r2
 800223e:	2b20      	cmp	r3, #32
 8002240:	d108      	bne.n	8002254 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2221      	movs	r2, #33	; 0x21
 8002248:	4252      	negs	r2, r2
 800224a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f89a 	bl	8002388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a2f      	ldr	r2, [pc, #188]	; (800236c <TIM_Base_SetConfig+0xd0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d003      	beq.n	80022bc <TIM_Base_SetConfig+0x20>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a2e      	ldr	r2, [pc, #184]	; (8002370 <TIM_Base_SetConfig+0xd4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d108      	bne.n	80022ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2270      	movs	r2, #112	; 0x70
 80022c0:	4393      	bics	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a26      	ldr	r2, [pc, #152]	; (800236c <TIM_Base_SetConfig+0xd0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a25      	ldr	r2, [pc, #148]	; (8002370 <TIM_Base_SetConfig+0xd4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00f      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a24      	ldr	r2, [pc, #144]	; (8002374 <TIM_Base_SetConfig+0xd8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00b      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <TIM_Base_SetConfig+0xdc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a22      	ldr	r2, [pc, #136]	; (800237c <TIM_Base_SetConfig+0xe0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d003      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <TIM_Base_SetConfig+0xe4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d108      	bne.n	8002310 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a20      	ldr	r2, [pc, #128]	; (8002384 <TIM_Base_SetConfig+0xe8>)
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	4393      	bics	r3, r2
 8002316:	001a      	movs	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a0c      	ldr	r2, [pc, #48]	; (800236c <TIM_Base_SetConfig+0xd0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00b      	beq.n	8002356 <TIM_Base_SetConfig+0xba>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <TIM_Base_SetConfig+0xdc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <TIM_Base_SetConfig+0xba>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0c      	ldr	r2, [pc, #48]	; (800237c <TIM_Base_SetConfig+0xe0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d003      	beq.n	8002356 <TIM_Base_SetConfig+0xba>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <TIM_Base_SetConfig+0xe4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d103      	bne.n	800235e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	615a      	str	r2, [r3, #20]
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b004      	add	sp, #16
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40000400 	.word	0x40000400
 8002374:	40002000 	.word	0x40002000
 8002378:	40014000 	.word	0x40014000
 800237c:	40014400 	.word	0x40014400
 8002380:	40014800 	.word	0x40014800
 8002384:	fffffcff 	.word	0xfffffcff

08002388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e044      	b.n	8002444 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2278      	movs	r2, #120	; 0x78
 80023c6:	2100      	movs	r1, #0
 80023c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7fe fbf9 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2224      	movs	r2, #36	; 0x24
 80023d6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 fbfc 	bl	8002be8 <UART_SetConfig>
 80023f0:	0003      	movs	r3, r0
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e024      	b.n	8002444 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 fd2f 	bl	8002e68 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	490d      	ldr	r1, [pc, #52]	; (800244c <HAL_UART_Init+0xa4>)
 8002416:	400a      	ands	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2108      	movs	r1, #8
 8002426:	438a      	bics	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 fdc7 	bl	8002fd0 <UART_CheckIdleState>
 8002442:	0003      	movs	r3, r0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}
 800244c:	fffff7ff 	.word	0xfffff7ff

08002450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002464:	2b20      	cmp	r3, #32
 8002466:	d000      	beq.n	800246a <HAL_UART_Transmit+0x1a>
 8002468:	e08d      	b.n	8002586 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_UART_Transmit+0x28>
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e085      	b.n	8002588 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	015b      	lsls	r3, r3, #5
 8002484:	429a      	cmp	r2, r3
 8002486:	d109      	bne.n	800249c <HAL_UART_Transmit+0x4c>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2201      	movs	r2, #1
 8002494:	4013      	ands	r3, r2
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e075      	b.n	8002588 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2284      	movs	r2, #132	; 0x84
 80024a0:	2100      	movs	r1, #0
 80024a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2221      	movs	r2, #33	; 0x21
 80024a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024aa:	f7fe fcd5 	bl	8000e58 <HAL_GetTick>
 80024ae:	0003      	movs	r3, r0
 80024b0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1dba      	adds	r2, r7, #6
 80024b6:	2150      	movs	r1, #80	; 0x50
 80024b8:	8812      	ldrh	r2, [r2, #0]
 80024ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1dba      	adds	r2, r7, #6
 80024c0:	2152      	movs	r1, #82	; 0x52
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	015b      	lsls	r3, r3, #5
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d108      	bne.n	80024e4 <HAL_UART_Transmit+0x94>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e003      	b.n	80024ec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024ec:	e030      	b.n	8002550 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	0013      	movs	r3, r2
 80024f8:	2200      	movs	r2, #0
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	f000 fe10 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8002500:	1e03      	subs	r3, r0, #0
 8002502:	d004      	beq.n	800250e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e03c      	b.n	8002588 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10b      	bne.n	800252c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	881a      	ldrh	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	05d2      	lsls	r2, r2, #23
 800251e:	0dd2      	lsrs	r2, r2, #23
 8002520:	b292      	uxth	r2, r2
 8002522:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	3302      	adds	r3, #2
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	e008      	b.n	800253e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b292      	uxth	r2, r2
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2252      	movs	r2, #82	; 0x52
 8002542:	5a9b      	ldrh	r3, [r3, r2]
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b299      	uxth	r1, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2252      	movs	r2, #82	; 0x52
 800254e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2252      	movs	r2, #82	; 0x52
 8002554:	5a9b      	ldrh	r3, [r3, r2]
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1c8      	bne.n	80024ee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	0013      	movs	r3, r2
 8002566:	2200      	movs	r2, #0
 8002568:	2140      	movs	r1, #64	; 0x40
 800256a:	f000 fdd9 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d004      	beq.n	800257c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e005      	b.n	8002588 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
  }
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b008      	add	sp, #32
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	1dbb      	adds	r3, r7, #6
 800259c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	589b      	ldr	r3, [r3, r2]
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d145      	bne.n	8002634 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_UART_Receive_IT+0x26>
 80025ae:	1dbb      	adds	r3, r7, #6
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e03d      	b.n	8002636 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	015b      	lsls	r3, r3, #5
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d109      	bne.n	80025da <HAL_UART_Receive_IT+0x4a>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2201      	movs	r2, #1
 80025d2:	4013      	ands	r3, r2
 80025d4:	d001      	beq.n	80025da <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e02d      	b.n	8002636 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	4013      	ands	r3, r2
 80025ec:	d019      	beq.n	8002622 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ee:	f3ef 8310 	mrs	r3, PRIMASK
 80025f2:	613b      	str	r3, [r7, #16]
  return(result);
 80025f4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	2301      	movs	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f383 8810 	msr	PRIMASK, r3
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	04c9      	lsls	r1, r1, #19
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f383 8810 	msr	PRIMASK, r3
}
 8002620:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fde2 	bl	80031f4 <UART_Start_Receive_IT>
 8002630:	0003      	movs	r3, r0
 8002632:	e000      	b.n	8002636 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b008      	add	sp, #32
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b0ab      	sub	sp, #172	; 0xac
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	22a4      	movs	r2, #164	; 0xa4
 8002650:	18b9      	adds	r1, r7, r2
 8002652:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	20a0      	movs	r0, #160	; 0xa0
 800265c:	1839      	adds	r1, r7, r0
 800265e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	219c      	movs	r1, #156	; 0x9c
 8002668:	1879      	adds	r1, r7, r1
 800266a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800266c:	0011      	movs	r1, r2
 800266e:	18bb      	adds	r3, r7, r2
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a99      	ldr	r2, [pc, #612]	; (80028d8 <HAL_UART_IRQHandler+0x298>)
 8002674:	4013      	ands	r3, r2
 8002676:	2298      	movs	r2, #152	; 0x98
 8002678:	18bc      	adds	r4, r7, r2
 800267a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800267c:	18bb      	adds	r3, r7, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d114      	bne.n	80026ae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002684:	187b      	adds	r3, r7, r1
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2220      	movs	r2, #32
 800268a:	4013      	ands	r3, r2
 800268c:	d00f      	beq.n	80026ae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800268e:	183b      	adds	r3, r7, r0
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2220      	movs	r2, #32
 8002694:	4013      	ands	r3, r2
 8002696:	d00a      	beq.n	80026ae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800269c:	2b00      	cmp	r3, #0
 800269e:	d100      	bne.n	80026a2 <HAL_UART_IRQHandler+0x62>
 80026a0:	e286      	b.n	8002bb0 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	0010      	movs	r0, r2
 80026aa:	4798      	blx	r3
      }
      return;
 80026ac:	e280      	b.n	8002bb0 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026ae:	2398      	movs	r3, #152	; 0x98
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d100      	bne.n	80026ba <HAL_UART_IRQHandler+0x7a>
 80026b8:	e114      	b.n	80028e4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026ba:	239c      	movs	r3, #156	; 0x9c
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d106      	bne.n	80026d4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026c6:	23a0      	movs	r3, #160	; 0xa0
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a83      	ldr	r2, [pc, #524]	; (80028dc <HAL_UART_IRQHandler+0x29c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	d100      	bne.n	80026d4 <HAL_UART_IRQHandler+0x94>
 80026d2:	e107      	b.n	80028e4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026d4:	23a4      	movs	r3, #164	; 0xa4
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	d012      	beq.n	8002706 <HAL_UART_IRQHandler+0xc6>
 80026e0:	23a0      	movs	r3, #160	; 0xa0
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	d00b      	beq.n	8002706 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2284      	movs	r2, #132	; 0x84
 80026fa:	589b      	ldr	r3, [r3, r2]
 80026fc:	2201      	movs	r2, #1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2184      	movs	r1, #132	; 0x84
 8002704:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002706:	23a4      	movs	r3, #164	; 0xa4
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d011      	beq.n	8002736 <HAL_UART_IRQHandler+0xf6>
 8002712:	239c      	movs	r3, #156	; 0x9c
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	d00b      	beq.n	8002736 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2202      	movs	r2, #2
 8002724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2284      	movs	r2, #132	; 0x84
 800272a:	589b      	ldr	r3, [r3, r2]
 800272c:	2204      	movs	r2, #4
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2184      	movs	r1, #132	; 0x84
 8002734:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002736:	23a4      	movs	r3, #164	; 0xa4
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2204      	movs	r2, #4
 800273e:	4013      	ands	r3, r2
 8002740:	d011      	beq.n	8002766 <HAL_UART_IRQHandler+0x126>
 8002742:	239c      	movs	r3, #156	; 0x9c
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	4013      	ands	r3, r2
 800274c:	d00b      	beq.n	8002766 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2284      	movs	r2, #132	; 0x84
 800275a:	589b      	ldr	r3, [r3, r2]
 800275c:	2202      	movs	r2, #2
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2184      	movs	r1, #132	; 0x84
 8002764:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002766:	23a4      	movs	r3, #164	; 0xa4
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2208      	movs	r2, #8
 800276e:	4013      	ands	r3, r2
 8002770:	d017      	beq.n	80027a2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002772:	23a0      	movs	r3, #160	; 0xa0
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	4013      	ands	r3, r2
 800277c:	d105      	bne.n	800278a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800277e:	239c      	movs	r3, #156	; 0x9c
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002788:	d00b      	beq.n	80027a2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2208      	movs	r2, #8
 8002790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2284      	movs	r2, #132	; 0x84
 8002796:	589b      	ldr	r3, [r3, r2]
 8002798:	2208      	movs	r2, #8
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2184      	movs	r1, #132	; 0x84
 80027a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027a2:	23a4      	movs	r3, #164	; 0xa4
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4013      	ands	r3, r2
 80027ae:	d013      	beq.n	80027d8 <HAL_UART_IRQHandler+0x198>
 80027b0:	23a0      	movs	r3, #160	; 0xa0
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	04db      	lsls	r3, r3, #19
 80027ba:	4013      	ands	r3, r2
 80027bc:	d00c      	beq.n	80027d8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2284      	movs	r2, #132	; 0x84
 80027cc:	589b      	ldr	r3, [r3, r2]
 80027ce:	2220      	movs	r2, #32
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2184      	movs	r1, #132	; 0x84
 80027d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2284      	movs	r2, #132	; 0x84
 80027dc:	589b      	ldr	r3, [r3, r2]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d100      	bne.n	80027e4 <HAL_UART_IRQHandler+0x1a4>
 80027e2:	e1e7      	b.n	8002bb4 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027e4:	23a4      	movs	r3, #164	; 0xa4
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2220      	movs	r2, #32
 80027ec:	4013      	ands	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027f0:	23a0      	movs	r3, #160	; 0xa0
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2220      	movs	r2, #32
 80027f8:	4013      	ands	r3, r2
 80027fa:	d008      	beq.n	800280e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	0010      	movs	r0, r2
 800280c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2284      	movs	r2, #132	; 0x84
 8002812:	589b      	ldr	r3, [r3, r2]
 8002814:	2194      	movs	r1, #148	; 0x94
 8002816:	187a      	adds	r2, r7, r1
 8002818:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	4013      	ands	r3, r2
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d004      	beq.n	8002832 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002828:	187b      	adds	r3, r7, r1
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2228      	movs	r2, #40	; 0x28
 800282e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002830:	d047      	beq.n	80028c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 fd93 	bl	8003360 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	4013      	ands	r3, r2
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d137      	bne.n	80028b8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002848:	f3ef 8310 	mrs	r3, PRIMASK
 800284c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800284e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002850:	2090      	movs	r0, #144	; 0x90
 8002852:	183a      	adds	r2, r7, r0
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	2301      	movs	r3, #1
 8002858:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800285c:	f383 8810 	msr	PRIMASK, r3
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2140      	movs	r1, #64	; 0x40
 800286e:	438a      	bics	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	183b      	adds	r3, r7, r0
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287a:	f383 8810 	msr	PRIMASK, r3
}
 800287e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002884:	2b00      	cmp	r3, #0
 8002886:	d012      	beq.n	80028ae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_UART_IRQHandler+0x2a0>)
 800288e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002894:	0018      	movs	r0, r3
 8002896:	f7fe fbff 	bl	8001098 <HAL_DMA_Abort_IT>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d01a      	beq.n	80028d4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a8:	0018      	movs	r0, r3
 80028aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ac:	e012      	b.n	80028d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fd ff13 	bl	80006dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b6:	e00d      	b.n	80028d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7fd ff0e 	bl	80006dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c0:	e008      	b.n	80028d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7fd ff09 	bl	80006dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2284      	movs	r2, #132	; 0x84
 80028ce:	2100      	movs	r1, #0
 80028d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028d2:	e16f      	b.n	8002bb4 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d4:	46c0      	nop			; (mov r8, r8)
    return;
 80028d6:	e16d      	b.n	8002bb4 <HAL_UART_IRQHandler+0x574>
 80028d8:	0000080f 	.word	0x0000080f
 80028dc:	04000120 	.word	0x04000120
 80028e0:	08003429 	.word	0x08003429

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d000      	beq.n	80028ee <HAL_UART_IRQHandler+0x2ae>
 80028ec:	e139      	b.n	8002b62 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028ee:	23a4      	movs	r3, #164	; 0xa4
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2210      	movs	r2, #16
 80028f6:	4013      	ands	r3, r2
 80028f8:	d100      	bne.n	80028fc <HAL_UART_IRQHandler+0x2bc>
 80028fa:	e132      	b.n	8002b62 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028fc:	23a0      	movs	r3, #160	; 0xa0
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2210      	movs	r2, #16
 8002904:	4013      	ands	r3, r2
 8002906:	d100      	bne.n	800290a <HAL_UART_IRQHandler+0x2ca>
 8002908:	e12b      	b.n	8002b62 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	4013      	ands	r3, r2
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d000      	beq.n	8002922 <HAL_UART_IRQHandler+0x2e2>
 8002920:	e09f      	b.n	8002a62 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	217e      	movs	r1, #126	; 0x7e
 800292c:	187b      	adds	r3, r7, r1
 800292e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002930:	187b      	adds	r3, r7, r1
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d100      	bne.n	800293a <HAL_UART_IRQHandler+0x2fa>
 8002938:	e13e      	b.n	8002bb8 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2258      	movs	r2, #88	; 0x58
 800293e:	5a9b      	ldrh	r3, [r3, r2]
 8002940:	187a      	adds	r2, r7, r1
 8002942:	8812      	ldrh	r2, [r2, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d300      	bcc.n	800294a <HAL_UART_IRQHandler+0x30a>
 8002948:	e136      	b.n	8002bb8 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	187a      	adds	r2, r7, r1
 800294e:	215a      	movs	r1, #90	; 0x5a
 8002950:	8812      	ldrh	r2, [r2, #0]
 8002952:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b20      	cmp	r3, #32
 800295c:	d06f      	beq.n	8002a3e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295e:	f3ef 8310 	mrs	r3, PRIMASK
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002966:	67bb      	str	r3, [r7, #120]	; 0x78
 8002968:	2301      	movs	r3, #1
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4992      	ldr	r1, [pc, #584]	; (8002bc8 <HAL_UART_IRQHandler+0x588>)
 8002980:	400a      	ands	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002986:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298a:	f383 8810 	msr	PRIMASK, r3
}
 800298e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002990:	f3ef 8310 	mrs	r3, PRIMASK
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002998:	677b      	str	r3, [r7, #116]	; 0x74
 800299a:	2301      	movs	r3, #1
 800299c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	438a      	bics	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029bc:	f383 8810 	msr	PRIMASK, r3
}
 80029c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c2:	f3ef 8310 	mrs	r3, PRIMASK
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80029c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ca:	673b      	str	r3, [r7, #112]	; 0x70
 80029cc:	2301      	movs	r3, #1
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2140      	movs	r1, #64	; 0x40
 80029e4:	438a      	bics	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ea:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ee:	f383 8810 	msr	PRIMASK, r3
}
 80029f2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	2120      	movs	r1, #32
 80029fa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a02:	f3ef 8310 	mrs	r3, PRIMASK
 8002a06:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a12:	f383 8810 	msr	PRIMASK, r3
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2110      	movs	r1, #16
 8002a24:	438a      	bics	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2e:	f383 8810 	msr	PRIMASK, r3
}
 8002a32:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fe faf5 	bl	8001028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2258      	movs	r2, #88	; 0x58
 8002a48:	5a9a      	ldrh	r2, [r3, r2]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	215a      	movs	r1, #90	; 0x5a
 8002a4e:	5a5b      	ldrh	r3, [r3, r1]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0011      	movs	r1, r2
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f8b8 	bl	8002bd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a60:	e0aa      	b.n	8002bb8 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2258      	movs	r2, #88	; 0x58
 8002a66:	5a99      	ldrh	r1, [r3, r2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	225a      	movs	r2, #90	; 0x5a
 8002a6c:	5a9b      	ldrh	r3, [r3, r2]
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	208e      	movs	r0, #142	; 0x8e
 8002a72:	183b      	adds	r3, r7, r0
 8002a74:	1a8a      	subs	r2, r1, r2
 8002a76:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	225a      	movs	r2, #90	; 0x5a
 8002a7c:	5a9b      	ldrh	r3, [r3, r2]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d100      	bne.n	8002a86 <HAL_UART_IRQHandler+0x446>
 8002a84:	e09a      	b.n	8002bbc <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002a86:	183b      	adds	r3, r7, r0
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d100      	bne.n	8002a90 <HAL_UART_IRQHandler+0x450>
 8002a8e:	e095      	b.n	8002bbc <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a90:	f3ef 8310 	mrs	r3, PRIMASK
 8002a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a96:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a98:	2488      	movs	r4, #136	; 0x88
 8002a9a:	193a      	adds	r2, r7, r4
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f383 8810 	msr	PRIMASK, r3
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4945      	ldr	r1, [pc, #276]	; (8002bcc <HAL_UART_IRQHandler+0x58c>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f383 8810 	msr	PRIMASK, r3
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8002acc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ace:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad0:	2484      	movs	r4, #132	; 0x84
 8002ad2:	193a      	adds	r2, r7, r4
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	438a      	bics	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f383 8810 	msr	PRIMASK, r3
}
 8002afe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	2120      	movs	r1, #32
 8002b06:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b14:	f3ef 8310 	mrs	r3, PRIMASK
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b1c:	2480      	movs	r4, #128	; 0x80
 8002b1e:	193a      	adds	r2, r7, r4
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	2301      	movs	r3, #1
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	f383 8810 	msr	PRIMASK, r3
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2110      	movs	r1, #16
 8002b3a:	438a      	bics	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	f383 8810 	msr	PRIMASK, r3
}
 8002b4a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b52:	183b      	adds	r3, r7, r0
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0011      	movs	r1, r2
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f838 	bl	8002bd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b60:	e02c      	b.n	8002bbc <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b62:	23a4      	movs	r3, #164	; 0xa4
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b6e:	23a0      	movs	r3, #160	; 0xa0
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	4013      	ands	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01e      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	0010      	movs	r0, r2
 8002b8a:	4798      	blx	r3
    }
    return;
 8002b8c:	e018      	b.n	8002bc0 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b8e:	23a4      	movs	r3, #164	; 0xa4
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x582>
 8002b9a:	23a0      	movs	r3, #160	; 0xa0
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2240      	movs	r2, #64	; 0x40
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fc54 	bl	8003456 <UART_EndTransmit_IT>
    return;
 8002bae:	e008      	b.n	8002bc2 <HAL_UART_IRQHandler+0x582>
      return;
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	e006      	b.n	8002bc2 <HAL_UART_IRQHandler+0x582>
    return;
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	e004      	b.n	8002bc2 <HAL_UART_IRQHandler+0x582>
      return;
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	e002      	b.n	8002bc2 <HAL_UART_IRQHandler+0x582>
      return;
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	e000      	b.n	8002bc2 <HAL_UART_IRQHandler+0x582>
    return;
 8002bc0:	46c0      	nop			; (mov r8, r8)
  }

}
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b02b      	add	sp, #172	; 0xac
 8002bc6:	bd90      	pop	{r4, r7, pc}
 8002bc8:	fffffeff 	.word	0xfffffeff
 8002bcc:	fffffedf 	.word	0xfffffedf

08002bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	000a      	movs	r2, r1
 8002bda:	1cbb      	adds	r3, r7, #2
 8002bdc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b002      	add	sp, #8
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bf0:	231e      	movs	r3, #30
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a8d      	ldr	r2, [pc, #564]	; (8002e4c <UART_SetConfig+0x264>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a88      	ldr	r2, [pc, #544]	; (8002e50 <UART_SetConfig+0x268>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a7f      	ldr	r2, [pc, #508]	; (8002e54 <UART_SetConfig+0x26c>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a7b      	ldr	r2, [pc, #492]	; (8002e58 <UART_SetConfig+0x270>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d127      	bne.n	8002cbe <UART_SetConfig+0xd6>
 8002c6e:	4b7b      	ldr	r3, [pc, #492]	; (8002e5c <UART_SetConfig+0x274>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2203      	movs	r2, #3
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d00d      	beq.n	8002c96 <UART_SetConfig+0xae>
 8002c7a:	d81b      	bhi.n	8002cb4 <UART_SetConfig+0xcc>
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d014      	beq.n	8002caa <UART_SetConfig+0xc2>
 8002c80:	d818      	bhi.n	8002cb4 <UART_SetConfig+0xcc>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <UART_SetConfig+0xa4>
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d00a      	beq.n	8002ca0 <UART_SetConfig+0xb8>
 8002c8a:	e013      	b.n	8002cb4 <UART_SetConfig+0xcc>
 8002c8c:	231f      	movs	r3, #31
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e021      	b.n	8002cda <UART_SetConfig+0xf2>
 8002c96:	231f      	movs	r3, #31
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e01c      	b.n	8002cda <UART_SetConfig+0xf2>
 8002ca0:	231f      	movs	r3, #31
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e017      	b.n	8002cda <UART_SetConfig+0xf2>
 8002caa:	231f      	movs	r3, #31
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2208      	movs	r2, #8
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e012      	b.n	8002cda <UART_SetConfig+0xf2>
 8002cb4:	231f      	movs	r3, #31
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2210      	movs	r2, #16
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e00d      	b.n	8002cda <UART_SetConfig+0xf2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a67      	ldr	r2, [pc, #412]	; (8002e60 <UART_SetConfig+0x278>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d104      	bne.n	8002cd2 <UART_SetConfig+0xea>
 8002cc8:	231f      	movs	r3, #31
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e003      	b.n	8002cda <UART_SetConfig+0xf2>
 8002cd2:	231f      	movs	r3, #31
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d15c      	bne.n	8002da0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002ce6:	231f      	movs	r3, #31
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d015      	beq.n	8002d1c <UART_SetConfig+0x134>
 8002cf0:	dc18      	bgt.n	8002d24 <UART_SetConfig+0x13c>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00d      	beq.n	8002d12 <UART_SetConfig+0x12a>
 8002cf6:	dc15      	bgt.n	8002d24 <UART_SetConfig+0x13c>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <UART_SetConfig+0x11a>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d005      	beq.n	8002d0c <UART_SetConfig+0x124>
 8002d00:	e010      	b.n	8002d24 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d02:	f7fe ffe7 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]
        break;
 8002d0a:	e012      	b.n	8002d32 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d0c:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <UART_SetConfig+0x27c>)
 8002d0e:	61bb      	str	r3, [r7, #24]
        break;
 8002d10:	e00f      	b.n	8002d32 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d12:	f7fe ff7d 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002d16:	0003      	movs	r3, r0
 8002d18:	61bb      	str	r3, [r7, #24]
        break;
 8002d1a:	e00a      	b.n	8002d32 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	61bb      	str	r3, [r7, #24]
        break;
 8002d22:	e006      	b.n	8002d32 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d28:	231e      	movs	r3, #30
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
        break;
 8002d30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d100      	bne.n	8002d3a <UART_SetConfig+0x152>
 8002d38:	e07a      	b.n	8002e30 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	005a      	lsls	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	18d2      	adds	r2, r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	0010      	movs	r0, r2
 8002d4e:	f7fd f9db 	bl	8000108 <__udivsi3>
 8002d52:	0003      	movs	r3, r0
 8002d54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b0f      	cmp	r3, #15
 8002d5a:	d91c      	bls.n	8002d96 <UART_SetConfig+0x1ae>
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d217      	bcs.n	8002d96 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	200e      	movs	r0, #14
 8002d6c:	183b      	adds	r3, r7, r0
 8002d6e:	210f      	movs	r1, #15
 8002d70:	438a      	bics	r2, r1
 8002d72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b299      	uxth	r1, r3
 8002d80:	183b      	adds	r3, r7, r0
 8002d82:	183a      	adds	r2, r7, r0
 8002d84:	8812      	ldrh	r2, [r2, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	183a      	adds	r2, r7, r0
 8002d90:	8812      	ldrh	r2, [r2, #0]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	e04c      	b.n	8002e30 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002d96:	231e      	movs	r3, #30
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e047      	b.n	8002e30 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002da0:	231f      	movs	r3, #31
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d015      	beq.n	8002dd6 <UART_SetConfig+0x1ee>
 8002daa:	dc18      	bgt.n	8002dde <UART_SetConfig+0x1f6>
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d00d      	beq.n	8002dcc <UART_SetConfig+0x1e4>
 8002db0:	dc15      	bgt.n	8002dde <UART_SetConfig+0x1f6>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <UART_SetConfig+0x1d4>
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d005      	beq.n	8002dc6 <UART_SetConfig+0x1de>
 8002dba:	e010      	b.n	8002dde <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dbc:	f7fe ff8a 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	61bb      	str	r3, [r7, #24]
        break;
 8002dc4:	e012      	b.n	8002dec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <UART_SetConfig+0x27c>)
 8002dc8:	61bb      	str	r3, [r7, #24]
        break;
 8002dca:	e00f      	b.n	8002dec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dcc:	f7fe ff20 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	61bb      	str	r3, [r7, #24]
        break;
 8002dd4:	e00a      	b.n	8002dec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	61bb      	str	r3, [r7, #24]
        break;
 8002ddc:	e006      	b.n	8002dec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002de2:	231e      	movs	r3, #30
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]
        break;
 8002dea:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01e      	beq.n	8002e30 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	085a      	lsrs	r2, r3, #1
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	18d2      	adds	r2, r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0019      	movs	r1, r3
 8002e02:	0010      	movs	r0, r2
 8002e04:	f7fd f980 	bl	8000108 <__udivsi3>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d90a      	bls.n	8002e28 <UART_SetConfig+0x240>
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	025b      	lsls	r3, r3, #9
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d205      	bcs.n	8002e28 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	e003      	b.n	8002e30 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002e28:	231e      	movs	r3, #30
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e3c:	231e      	movs	r3, #30
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	781b      	ldrb	r3, [r3, #0]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b008      	add	sp, #32
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	ffff69f3 	.word	0xffff69f3
 8002e50:	ffffcfff 	.word	0xffffcfff
 8002e54:	fffff4ff 	.word	0xfffff4ff
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40004400 	.word	0x40004400
 8002e64:	007a1200 	.word	0x007a1200

08002e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a4a      	ldr	r2, [pc, #296]	; (8002fac <UART_AdvFeatureConfig+0x144>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d00b      	beq.n	8002eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <UART_AdvFeatureConfig+0x148>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2204      	movs	r2, #4
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d00b      	beq.n	8002ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <UART_AdvFeatureConfig+0x14c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2208      	movs	r2, #8
 8002edc:	4013      	ands	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <UART_AdvFeatureConfig+0x150>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2210      	movs	r2, #16
 8002efe:	4013      	ands	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <UART_AdvFeatureConfig+0x154>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2220      	movs	r2, #32
 8002f20:	4013      	ands	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <UART_AdvFeatureConfig+0x158>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	0019      	movs	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2240      	movs	r2, #64	; 0x40
 8002f42:	4013      	ands	r3, r2
 8002f44:	d01d      	beq.n	8002f82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <UART_AdvFeatureConfig+0x15c>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	0019      	movs	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	035b      	lsls	r3, r3, #13
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d10b      	bne.n	8002f82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <UART_AdvFeatureConfig+0x160>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <UART_AdvFeatureConfig+0x164>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	fffdffff 	.word	0xfffdffff
 8002fb0:	fffeffff 	.word	0xfffeffff
 8002fb4:	fffbffff 	.word	0xfffbffff
 8002fb8:	ffff7fff 	.word	0xffff7fff
 8002fbc:	ffffefff 	.word	0xffffefff
 8002fc0:	ffffdfff 	.word	0xffffdfff
 8002fc4:	ffefffff 	.word	0xffefffff
 8002fc8:	ff9fffff 	.word	0xff9fffff
 8002fcc:	fff7ffff 	.word	0xfff7ffff

08002fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b092      	sub	sp, #72	; 0x48
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2284      	movs	r2, #132	; 0x84
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fe0:	f7fd ff3a 	bl	8000e58 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2208      	movs	r2, #8
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d12c      	bne.n	8003050 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	0391      	lsls	r1, r2, #14
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4a46      	ldr	r2, [pc, #280]	; (8003118 <UART_CheckIdleState+0x148>)
 8003000:	9200      	str	r2, [sp, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	f000 f88c 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d021      	beq.n	8003050 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300c:	f3ef 8310 	mrs	r3, PRIMASK
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
 8003016:	2301      	movs	r3, #1
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	438a      	bics	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2278      	movs	r2, #120	; 0x78
 8003048:	2100      	movs	r1, #0
 800304a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e05f      	b.n	8003110 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
 800305a:	2b04      	cmp	r3, #4
 800305c:	d146      	bne.n	80030ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	03d1      	lsls	r1, r2, #15
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <UART_CheckIdleState+0x148>)
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	f000 f858 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d03b      	beq.n	80030ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003074:	f3ef 8310 	mrs	r3, PRIMASK
 8003078:	60fb      	str	r3, [r7, #12]
  return(result);
 800307a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
 800307e:	2301      	movs	r3, #1
 8003080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4921      	ldr	r1, [pc, #132]	; (800311c <UART_CheckIdleState+0x14c>)
 8003096:	400a      	ands	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f383 8810 	msr	PRIMASK, r3
}
 80030a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a6:	f3ef 8310 	mrs	r3, PRIMASK
 80030aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80030ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
 80030b0:	2301      	movs	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2101      	movs	r1, #1
 80030c8:	438a      	bics	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f383 8810 	msr	PRIMASK, r3
}
 80030d6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	2120      	movs	r1, #32
 80030de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2278      	movs	r2, #120	; 0x78
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e011      	b.n	8003110 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	2120      	movs	r1, #32
 80030f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2278      	movs	r2, #120	; 0x78
 800310a:	2100      	movs	r1, #0
 800310c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b010      	add	sp, #64	; 0x40
 8003116:	bd80      	pop	{r7, pc}
 8003118:	01ffffff 	.word	0x01ffffff
 800311c:	fffffedf 	.word	0xfffffedf

08003120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	1dfb      	adds	r3, r7, #7
 800312e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003130:	e04b      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3301      	adds	r3, #1
 8003136:	d048      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fd fe8e 	bl	8000e58 <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e04b      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2204      	movs	r2, #4
 800315a:	4013      	ands	r3, r2
 800315c:	d035      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	2208      	movs	r2, #8
 8003166:	4013      	ands	r3, r2
 8003168:	2b08      	cmp	r3, #8
 800316a:	d111      	bne.n	8003190 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2208      	movs	r2, #8
 8003172:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f8f2 	bl	8003360 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2284      	movs	r2, #132	; 0x84
 8003180:	2108      	movs	r1, #8
 8003182:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2278      	movs	r2, #120	; 0x78
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e02c      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	401a      	ands	r2, r3
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d112      	bne.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 f8d5 	bl	8003360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2284      	movs	r2, #132	; 0x84
 80031ba:	2120      	movs	r1, #32
 80031bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2278      	movs	r2, #120	; 0x78
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e00f      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	425a      	negs	r2, r3
 80031da:	4153      	adcs	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	001a      	movs	r2, r3
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d0a4      	beq.n	8003132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b090      	sub	sp, #64	; 0x40
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	1dbb      	adds	r3, r7, #6
 8003200:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1dba      	adds	r2, r7, #6
 800320c:	2158      	movs	r1, #88	; 0x58
 800320e:	8812      	ldrh	r2, [r2, #0]
 8003210:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1dba      	adds	r2, r7, #6
 8003216:	215a      	movs	r1, #90	; 0x5a
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	015b      	lsls	r3, r3, #5
 800322a:	429a      	cmp	r2, r3
 800322c:	d10d      	bne.n	800324a <UART_Start_Receive_IT+0x56>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <UART_Start_Receive_IT+0x4c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	225c      	movs	r2, #92	; 0x5c
 800323a:	4946      	ldr	r1, [pc, #280]	; (8003354 <UART_Start_Receive_IT+0x160>)
 800323c:	5299      	strh	r1, [r3, r2]
 800323e:	e01a      	b.n	8003276 <UART_Start_Receive_IT+0x82>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	225c      	movs	r2, #92	; 0x5c
 8003244:	21ff      	movs	r1, #255	; 0xff
 8003246:	5299      	strh	r1, [r3, r2]
 8003248:	e015      	b.n	8003276 <UART_Start_Receive_IT+0x82>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <UART_Start_Receive_IT+0x7a>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d104      	bne.n	8003264 <UART_Start_Receive_IT+0x70>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	225c      	movs	r2, #92	; 0x5c
 800325e:	21ff      	movs	r1, #255	; 0xff
 8003260:	5299      	strh	r1, [r3, r2]
 8003262:	e008      	b.n	8003276 <UART_Start_Receive_IT+0x82>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	225c      	movs	r2, #92	; 0x5c
 8003268:	217f      	movs	r1, #127	; 0x7f
 800326a:	5299      	strh	r1, [r3, r2]
 800326c:	e003      	b.n	8003276 <UART_Start_Receive_IT+0x82>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	225c      	movs	r2, #92	; 0x5c
 8003272:	2100      	movs	r1, #0
 8003274:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2284      	movs	r2, #132	; 0x84
 800327a:	2100      	movs	r1, #0
 800327c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	2122      	movs	r1, #34	; 0x22
 8003284:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003286:	f3ef 8310 	mrs	r3, PRIMASK
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003290:	2301      	movs	r3, #1
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2101      	movs	r1, #1
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d107      	bne.n	80032d4 <UART_Start_Receive_IT+0xe0>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a22      	ldr	r2, [pc, #136]	; (8003358 <UART_Start_Receive_IT+0x164>)
 80032d0:	669a      	str	r2, [r3, #104]	; 0x68
 80032d2:	e002      	b.n	80032da <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a21      	ldr	r2, [pc, #132]	; (800335c <UART_Start_Receive_IT+0x168>)
 80032d8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d019      	beq.n	8003316 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e2:	f3ef 8310 	mrs	r3, PRIMASK
 80032e6:	61fb      	str	r3, [r7, #28]
  return(result);
 80032e8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
 80032ec:	2301      	movs	r3, #1
 80032ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f383 8810 	msr	PRIMASK, r3
}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2190      	movs	r1, #144	; 0x90
 8003304:	0049      	lsls	r1, r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	e018      	b.n	8003348 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003316:	f3ef 8310 	mrs	r3, PRIMASK
 800331a:	613b      	str	r3, [r7, #16]
  return(result);
 800331c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800331e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003320:	2301      	movs	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f383 8810 	msr	PRIMASK, r3
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2120      	movs	r1, #32
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b010      	add	sp, #64	; 0x40
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	000001ff 	.word	0x000001ff
 8003358:	08003665 	.word	0x08003665
 800335c:	080034ad 	.word	0x080034ad

08003360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003368:	f3ef 8310 	mrs	r3, PRIMASK
 800336c:	617b      	str	r3, [r7, #20]
  return(result);
 800336e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
 8003372:	2301      	movs	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f383 8810 	msr	PRIMASK, r3
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4926      	ldr	r1, [pc, #152]	; (8003424 <UART_EndRxTransfer+0xc4>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f383 8810 	msr	PRIMASK, r3
}
 8003398:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339a:	f3ef 8310 	mrs	r3, PRIMASK
 800339e:	623b      	str	r3, [r7, #32]
  return(result);
 80033a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
 80033a4:	2301      	movs	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	438a      	bics	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	f383 8810 	msr	PRIMASK, r3
}
 80033ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d118      	bne.n	8003406 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d4:	f3ef 8310 	mrs	r3, PRIMASK
 80033d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80033da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033de:	2301      	movs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2110      	movs	r1, #16
 80033f6:	438a      	bics	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	2120      	movs	r1, #32
 800340c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	669a      	str	r2, [r3, #104]	; 0x68
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b00e      	add	sp, #56	; 0x38
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	fffffedf 	.word	0xfffffedf

08003428 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	225a      	movs	r2, #90	; 0x5a
 800343a:	2100      	movs	r1, #0
 800343c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2252      	movs	r2, #82	; 0x52
 8003442:	2100      	movs	r1, #0
 8003444:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	0018      	movs	r0, r3
 800344a:	f7fd f947 	bl	80006dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}

08003456 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	60bb      	str	r3, [r7, #8]
  return(result);
 8003464:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	2301      	movs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2140      	movs	r1, #64	; 0x40
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fc ffaa 	bl	80003f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b006      	add	sp, #24
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b094      	sub	sp, #80	; 0x50
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80034b4:	204e      	movs	r0, #78	; 0x4e
 80034b6:	183b      	adds	r3, r7, r0
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	215c      	movs	r1, #92	; 0x5c
 80034bc:	5a52      	ldrh	r2, [r2, r1]
 80034be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	589b      	ldr	r3, [r3, r2]
 80034c6:	2b22      	cmp	r3, #34	; 0x22
 80034c8:	d000      	beq.n	80034cc <UART_RxISR_8BIT+0x20>
 80034ca:	e0ba      	b.n	8003642 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	214c      	movs	r1, #76	; 0x4c
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80034d6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b2d9      	uxtb	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	400a      	ands	r2, r1
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	225a      	movs	r2, #90	; 0x5a
 80034fc:	5a9b      	ldrh	r3, [r3, r2]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b299      	uxth	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	225a      	movs	r2, #90	; 0x5a
 8003508:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	225a      	movs	r2, #90	; 0x5a
 800350e:	5a9b      	ldrh	r3, [r3, r2]
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d000      	beq.n	8003518 <UART_RxISR_8BIT+0x6c>
 8003516:	e09c      	b.n	8003652 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003518:	f3ef 8310 	mrs	r3, PRIMASK
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003520:	64bb      	str	r3, [r7, #72]	; 0x48
 8003522:	2301      	movs	r3, #1
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	f383 8810 	msr	PRIMASK, r3
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4948      	ldr	r1, [pc, #288]	; (800365c <UART_RxISR_8BIT+0x1b0>)
 800353a:	400a      	ands	r2, r1
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	f383 8810 	msr	PRIMASK, r3
}
 8003548:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354a:	f3ef 8310 	mrs	r3, PRIMASK
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	647b      	str	r3, [r7, #68]	; 0x44
 8003554:	2301      	movs	r3, #1
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2101      	movs	r1, #1
 800356c:	438a      	bics	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	2120      	movs	r1, #32
 8003582:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	4013      	ands	r3, r2
 800359c:	d018      	beq.n	80035d0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359e:	f3ef 8310 	mrs	r3, PRIMASK
 80035a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80035a4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035a6:	643b      	str	r3, [r7, #64]	; 0x40
 80035a8:	2301      	movs	r3, #1
 80035aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f383 8810 	msr	PRIMASK, r3
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4928      	ldr	r1, [pc, #160]	; (8003660 <UART_RxISR_8BIT+0x1b4>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d12f      	bne.n	8003638 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035de:	f3ef 8310 	mrs	r3, PRIMASK
 80035e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80035e4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e8:	2301      	movs	r3, #1
 80035ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f383 8810 	msr	PRIMASK, r3
}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2110      	movs	r1, #16
 8003600:	438a      	bics	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f383 8810 	msr	PRIMASK, r3
}
 800360e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2210      	movs	r2, #16
 8003618:	4013      	ands	r3, r2
 800361a:	2b10      	cmp	r3, #16
 800361c:	d103      	bne.n	8003626 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2210      	movs	r2, #16
 8003624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2258      	movs	r2, #88	; 0x58
 800362a:	5a9a      	ldrh	r2, [r3, r2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0011      	movs	r1, r2
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff facd 	bl	8002bd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003636:	e00c      	b.n	8003652 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f7fc ff5c 	bl	80004f8 <HAL_UART_RxCpltCallback>
}
 8003640:	e007      	b.n	8003652 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2108      	movs	r1, #8
 800364e:	430a      	orrs	r2, r1
 8003650:	619a      	str	r2, [r3, #24]
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b014      	add	sp, #80	; 0x50
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	fffffedf 	.word	0xfffffedf
 8003660:	fbffffff 	.word	0xfbffffff

08003664 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b094      	sub	sp, #80	; 0x50
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800366c:	204e      	movs	r0, #78	; 0x4e
 800366e:	183b      	adds	r3, r7, r0
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	215c      	movs	r1, #92	; 0x5c
 8003674:	5a52      	ldrh	r2, [r2, r1]
 8003676:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	589b      	ldr	r3, [r3, r2]
 800367e:	2b22      	cmp	r3, #34	; 0x22
 8003680:	d000      	beq.n	8003684 <UART_RxISR_16BIT+0x20>
 8003682:	e0ba      	b.n	80037fa <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	214c      	movs	r1, #76	; 0x4c
 800368a:	187b      	adds	r3, r7, r1
 800368c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800368e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003696:	187b      	adds	r3, r7, r1
 8003698:	183a      	adds	r2, r7, r0
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	8812      	ldrh	r2, [r2, #0]
 800369e:	4013      	ands	r3, r2
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	1c9a      	adds	r2, r3, #2
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	225a      	movs	r2, #90	; 0x5a
 80036b4:	5a9b      	ldrh	r3, [r3, r2]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b299      	uxth	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	225a      	movs	r2, #90	; 0x5a
 80036c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	225a      	movs	r2, #90	; 0x5a
 80036c6:	5a9b      	ldrh	r3, [r3, r2]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d000      	beq.n	80036d0 <UART_RxISR_16BIT+0x6c>
 80036ce:	e09c      	b.n	800380a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d0:	f3ef 8310 	mrs	r3, PRIMASK
 80036d4:	623b      	str	r3, [r7, #32]
  return(result);
 80036d6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d8:	647b      	str	r3, [r7, #68]	; 0x44
 80036da:	2301      	movs	r3, #1
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	f383 8810 	msr	PRIMASK, r3
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4948      	ldr	r1, [pc, #288]	; (8003814 <UART_RxISR_16BIT+0x1b0>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003702:	f3ef 8310 	mrs	r3, PRIMASK
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370a:	643b      	str	r3, [r7, #64]	; 0x40
 800370c:	2301      	movs	r3, #1
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	f383 8810 	msr	PRIMASK, r3
}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2101      	movs	r1, #1
 8003724:	438a      	bics	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	2120      	movs	r1, #32
 800373a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	4013      	ands	r3, r2
 8003754:	d018      	beq.n	8003788 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003756:	f3ef 8310 	mrs	r3, PRIMASK
 800375a:	617b      	str	r3, [r7, #20]
  return(result);
 800375c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800375e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003760:	2301      	movs	r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4928      	ldr	r1, [pc, #160]	; (8003818 <UART_RxISR_16BIT+0x1b4>)
 8003778:	400a      	ands	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f383 8810 	msr	PRIMASK, r3
}
 8003786:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378c:	2b01      	cmp	r3, #1
 800378e:	d12f      	bne.n	80037f0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003796:	f3ef 8310 	mrs	r3, PRIMASK
 800379a:	60bb      	str	r3, [r7, #8]
  return(result);
 800379c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379e:	63bb      	str	r3, [r7, #56]	; 0x38
 80037a0:	2301      	movs	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f383 8810 	msr	PRIMASK, r3
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2110      	movs	r1, #16
 80037b8:	438a      	bics	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f383 8810 	msr	PRIMASK, r3
}
 80037c6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	2210      	movs	r2, #16
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d103      	bne.n	80037de <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2210      	movs	r2, #16
 80037dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2258      	movs	r2, #88	; 0x58
 80037e2:	5a9a      	ldrh	r2, [r3, r2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0011      	movs	r1, r2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff f9f1 	bl	8002bd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037ee:	e00c      	b.n	800380a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7fc fe80 	bl	80004f8 <HAL_UART_RxCpltCallback>
}
 80037f8:	e007      	b.n	800380a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2108      	movs	r1, #8
 8003806:	430a      	orrs	r2, r1
 8003808:	619a      	str	r2, [r3, #24]
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b014      	add	sp, #80	; 0x50
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	fffffedf 	.word	0xfffffedf
 8003818:	fbffffff 	.word	0xfbffffff

0800381c <kfifo_reset>:
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b002      	add	sp, #8
 8003838:	bd80      	pop	{r7, pc}

0800383a <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
	return fifo->size;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b002      	add	sp, #8
 800384c:	bd80      	pop	{r7, pc}

0800384e <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 800384e:	b590      	push	{r4, r7, lr}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	1b1b      	subs	r3, r3, r4
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b003      	add	sp, #12
 8003866:	bd90      	pop	{r4, r7, pc}

08003868 <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	0018      	movs	r0, r3
 8003874:	f7ff ffe1 	bl	800383a <kfifo_size>
 8003878:	0004      	movs	r4, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f7ff ffe6 	bl	800384e <kfifo_len>
 8003882:	0003      	movs	r3, r0
 8003884:	1ae3      	subs	r3, r4, r3
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b003      	add	sp, #12
 800388c:	bd90      	pop	{r4, r7, pc}

0800388e <__kfifo_add_out>:
/*
 * __kfifo_add_out internal helper function for updating the out offset
 */
static __inline void __kfifo_add_out(struct kfifo *fifo,
				unsigned int off)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
	fifo->out += off;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	18d2      	adds	r2, r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	18d2      	adds	r2, r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	609a      	str	r2, [r3, #8]
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b002      	add	sp, #8
 80038c8:	bd80      	pop	{r7, pc}

080038ca <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	3b01      	subs	r3, #1
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	4013      	ands	r3, r2
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b002      	add	sp, #8
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	0018      	movs	r0, r3
 8003902:	f7ff ff8b 	bl	800381c <kfifo_reset>
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b004      	add	sp, #16
 800390c:	bd80      	pop	{r7, pc}

0800390e <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	18d2      	adds	r2, r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	0011      	movs	r1, r2
 8003928:	0018      	movs	r0, r3
 800392a:	f7ff ffce 	bl	80038ca <__kfifo_off>
 800392e:	0003      	movs	r3, r0
 8003930:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	1ad2      	subs	r2, r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4293      	cmp	r3, r2
 800393e:	d900      	bls.n	8003942 <__kfifo_in_data+0x34>
 8003940:	0013      	movs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	18d3      	adds	r3, r2, r3
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 f8b5 	bl	8003ac0 <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	18d1      	adds	r1, r2, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	001a      	movs	r2, r3
 8003968:	f000 f8aa 	bl	8003ac0 <memcpy>
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b006      	add	sp, #24
 8003972:	bd80      	pop	{r7, pc}

08003974 <__kfifo_out_data>:

static __inline void __kfifo_out_data(struct kfifo *fifo,
		void *to, unsigned int len, unsigned int off)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->in index -before- we
	 * start removing bytes from the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->out + off);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	18d2      	adds	r2, r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	0011      	movs	r1, r2
 800398e:	0018      	movs	r0, r3
 8003990:	f7ff ff9b 	bl	80038ca <__kfifo_off>
 8003994:	0003      	movs	r3, r0
 8003996:	603b      	str	r3, [r7, #0]

	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - off);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	1ad2      	subs	r2, r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d900      	bls.n	80039a8 <__kfifo_out_data+0x34>
 80039a6:	0013      	movs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
	memcpy( (char*)to, fifo->buffer + off, l);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	18d1      	adds	r1, r2, r3
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f000 f882 	bl	8003ac0 <memcpy>

	/* then get the rest (if any) from the beginning of the buffer */
	memcpy( (char*)to + l, fifo->buffer, len - l);
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	18d0      	adds	r0, r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	001a      	movs	r2, r3
 80039ce:	f000 f877 	bl	8003ac0 <memcpy>
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b006      	add	sp, #24
 80039d8:	bd80      	pop	{r7, pc}

080039da <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff ff3d 	bl	8003868 <kfifo_avail>
 80039ee:	0002      	movs	r2, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d905      	bls.n	8003a02 <kfifo_in+0x28>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7ff ff35 	bl	8003868 <kfifo_avail>
 80039fe:	0003      	movs	r3, r0
 8003a00:	e000      	b.n	8003a04 <kfifo_in+0x2a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f7ff ff7e 	bl	800390e <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	0011      	movs	r1, r2
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7ff ff47 	bl	80038ac <__kfifo_add_in>
	return len;
 8003a1e:	687b      	ldr	r3, [r7, #4]
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <kfifo_out>:
 *
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
	len = min(kfifo_len(fifo), len);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7ff ff09 	bl	800384e <kfifo_len>
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d905      	bls.n	8003a50 <kfifo_out+0x28>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7ff ff01 	bl	800384e <kfifo_len>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	e000      	b.n	8003a52 <kfifo_out+0x2a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	607b      	str	r3, [r7, #4]

	__kfifo_out_data(fifo, to, len, 0);
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f7ff ff8a 	bl	8003974 <__kfifo_out_data>
	__kfifo_add_out(fifo, len);
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	0011      	movs	r1, r2
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff ff11 	bl	800388e <__kfifo_add_out>

	return len;
 8003a6c:	687b      	ldr	r3, [r7, #4]
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <__libc_init_array>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	2600      	movs	r6, #0
 8003a7c:	4d0c      	ldr	r5, [pc, #48]	; (8003ab0 <__libc_init_array+0x38>)
 8003a7e:	4c0d      	ldr	r4, [pc, #52]	; (8003ab4 <__libc_init_array+0x3c>)
 8003a80:	1b64      	subs	r4, r4, r5
 8003a82:	10a4      	asrs	r4, r4, #2
 8003a84:	42a6      	cmp	r6, r4
 8003a86:	d109      	bne.n	8003a9c <__libc_init_array+0x24>
 8003a88:	2600      	movs	r6, #0
 8003a8a:	f000 f82b 	bl	8003ae4 <_init>
 8003a8e:	4d0a      	ldr	r5, [pc, #40]	; (8003ab8 <__libc_init_array+0x40>)
 8003a90:	4c0a      	ldr	r4, [pc, #40]	; (8003abc <__libc_init_array+0x44>)
 8003a92:	1b64      	subs	r4, r4, r5
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	42a6      	cmp	r6, r4
 8003a98:	d105      	bne.n	8003aa6 <__libc_init_array+0x2e>
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	00b3      	lsls	r3, r6, #2
 8003a9e:	58eb      	ldr	r3, [r5, r3]
 8003aa0:	4798      	blx	r3
 8003aa2:	3601      	adds	r6, #1
 8003aa4:	e7ee      	b.n	8003a84 <__libc_init_array+0xc>
 8003aa6:	00b3      	lsls	r3, r6, #2
 8003aa8:	58eb      	ldr	r3, [r5, r3]
 8003aaa:	4798      	blx	r3
 8003aac:	3601      	adds	r6, #1
 8003aae:	e7f2      	b.n	8003a96 <__libc_init_array+0x1e>
 8003ab0:	08003b34 	.word	0x08003b34
 8003ab4:	08003b34 	.word	0x08003b34
 8003ab8:	08003b34 	.word	0x08003b34
 8003abc:	08003b38 	.word	0x08003b38

08003ac0 <memcpy>:
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	b510      	push	{r4, lr}
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d100      	bne.n	8003aca <memcpy+0xa>
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	5ccc      	ldrb	r4, [r1, r3]
 8003acc:	54c4      	strb	r4, [r0, r3]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	e7f8      	b.n	8003ac4 <memcpy+0x4>

08003ad2 <memset>:
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	1882      	adds	r2, r0, r2
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d100      	bne.n	8003adc <memset+0xa>
 8003ada:	4770      	bx	lr
 8003adc:	7019      	strb	r1, [r3, #0]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	e7f9      	b.n	8003ad6 <memset+0x4>
	...

08003ae4 <_init>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr

08003af0 <_fini>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr
