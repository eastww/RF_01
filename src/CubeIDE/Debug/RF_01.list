
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000665c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006964  08006964  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08006964  08006964  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006964  08006964  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800696c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  2000017c  08006ae8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000970  08006ae8  00020970  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127c1  00000000  00000000  000201e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d63  00000000  00000000  000329a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  00036710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8e  00000000  00000000  00037a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015eaa  00000000  00000000  000388f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c485  00000000  00000000  0004e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006be2b  00000000  00000000  0006ac25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004828  00000000  00000000  000d6a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000db278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006704 	.word	0x08006704

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08006704 	.word	0x08006704

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <rfUartGetMessage>:
 * @param event 
 * @param newStateData 
 */
void rfUartGetMessage( void *oldStateData, struct event *event,
      void *newStateData )
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	led2Toggle();
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <rfUartGetMessage+0x8c>)
 800022e:	2201      	movs	r2, #1
 8000230:	2120      	movs	r1, #32
 8000232:	0018      	movs	r0, r3
 8000234:	f003 f819 	bl	800326a <HAL_GPIO_WritePin>
 8000238:	2032      	movs	r0, #50	; 0x32
 800023a:	f001 fb83 	bl	8001944 <Delay_Ms>
 800023e:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <rfUartGetMessage+0x8c>)
 8000240:	2200      	movs	r2, #0
 8000242:	2120      	movs	r1, #32
 8000244:	0018      	movs	r0, r3
 8000246:	f003 f810 	bl	800326a <HAL_GPIO_WritePin>
    bufferSize = uartGetData(BSP_TTL_CHANNEL1, txBuffer + 1, 256);
 800024a:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <rfUartGetMessage+0x90>)
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	0052      	lsls	r2, r2, #1
 8000250:	0019      	movs	r1, r3
 8000252:	2000      	movs	r0, #0
 8000254:	f001 fd5a 	bl	8001d0c <uartGetData>
 8000258:	0002      	movs	r2, r0
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <rfUartGetMessage+0x94>)
 800025c:	601a      	str	r2, [r3, #0]
	if (bufferSize)
 800025e:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <rfUartGetMessage+0x94>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d01d      	beq.n	80002a2 <rfUartGetMessage+0x82>
        // uartSendData(BSP_TTL_CHANNEL1, txBuffer, bufferSize);
        // HAL_Delay_nMs(1000);

		/* reset the value */
		// bufferSize = 0;
        txBuffer[0] = bufferSize + 1;
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <rfUartGetMessage+0x94>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	3301      	adds	r3, #1
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <rfUartGetMessage+0x98>)
 8000272:	701a      	strb	r2, [r3, #0]
        uartResetData(BSP_TTL_CHANNEL1);
 8000274:	2000      	movs	r0, #0
 8000276:	f001 fd77 	bl	8001d68 <uartResetData>
        RF_StartTx(txBuffer,  txBuffer[0] , INFINITE);
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <rfUartGetMessage+0x98>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	b299      	uxth	r1, r3
 8000280:	2301      	movs	r3, #1
 8000282:	425a      	negs	r2, r3
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <rfUartGetMessage+0x98>)
 8000286:	0018      	movs	r0, r3
 8000288:	f001 f9c6 	bl	8001618 <RF_StartTx>
		mq_push(&mq, &(struct msg){rfProcessEvent, (void*)'T'});
 800028c:	2410      	movs	r4, #16
 800028e:	193b      	adds	r3, r7, r4
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <rfUartGetMessage+0x9c>)
 8000292:	ca03      	ldmia	r2!, {r0, r1}
 8000294:	c303      	stmia	r3!, {r0, r1}
 8000296:	193a      	adds	r2, r7, r4
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <rfUartGetMessage+0xa0>)
 800029a:	0011      	movs	r1, r2
 800029c:	0018      	movs	r0, r3
 800029e:	f005 fbb3 	bl	8005a08 <mq_push>
	}
}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	b007      	add	sp, #28
 80002a8:	bd90      	pop	{r4, r7, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	48000400 	.word	0x48000400
 80002b0:	20000199 	.word	0x20000199
 80002b4:	20000298 	.word	0x20000298
 80002b8:	20000198 	.word	0x20000198
 80002bc:	0800671c 	.word	0x0800671c
 80002c0:	20000328 	.word	0x20000328

080002c4 <checkGroupStateAction>:
 * @param event 
 * @param newStateData 
 */
void checkGroupStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b089      	sub	sp, #36	; 0x24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    RF_Process();
 80002d0:	f001 f9c4 	bl	800165c <RF_Process>
    switch (RF_GetStatus())
 80002d4:	f001 f96c 	bl	80015b0 <RF_GetStatus>
 80002d8:	0003      	movs	r3, r0
 80002da:	2b04      	cmp	r3, #4
 80002dc:	dc02      	bgt.n	80002e4 <checkGroupStateAction+0x20>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	dc04      	bgt.n	80002ec <checkGroupStateAction+0x28>
    case RF_STATE_TX_TIMEOUT:
        mq_push(&mq, &(struct msg){rfProcessEvent, (void*)'T'});
        break;
    case RF_STATE_ERROR:
    default:
        break;
 80002e2:	e01b      	b.n	800031c <checkGroupStateAction+0x58>
 80002e4:	3b05      	subs	r3, #5
    switch (RF_GetStatus())
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	d818      	bhi.n	800031c <checkGroupStateAction+0x58>
 80002ea:	e00b      	b.n	8000304 <checkGroupStateAction+0x40>
        mq_push(&mq, &(struct msg){rfProcessEvent, (void*)'R'});
 80002ec:	2418      	movs	r4, #24
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <checkGroupStateAction+0x64>)
 80002f2:	ca03      	ldmia	r2!, {r0, r1}
 80002f4:	c303      	stmia	r3!, {r0, r1}
 80002f6:	193a      	adds	r2, r7, r4
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <checkGroupStateAction+0x68>)
 80002fa:	0011      	movs	r1, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f005 fb83 	bl	8005a08 <mq_push>
        break;
 8000302:	e00c      	b.n	800031e <checkGroupStateAction+0x5a>
        mq_push(&mq, &(struct msg){rfProcessEvent, (void*)'T'});
 8000304:	2410      	movs	r4, #16
 8000306:	193b      	adds	r3, r7, r4
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <checkGroupStateAction+0x6c>)
 800030a:	ca03      	ldmia	r2!, {r0, r1}
 800030c:	c303      	stmia	r3!, {r0, r1}
 800030e:	193a      	adds	r2, r7, r4
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <checkGroupStateAction+0x68>)
 8000312:	0011      	movs	r1, r2
 8000314:	0018      	movs	r0, r3
 8000316:	f005 fb77 	bl	8005a08 <mq_push>
        break;
 800031a:	e000      	b.n	800031e <checkGroupStateAction+0x5a>
        break;
 800031c:	46c0      	nop			; (mov r8, r8)
    }
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b009      	add	sp, #36	; 0x24
 8000324:	bd90      	pop	{r4, r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	08006724 	.word	0x08006724
 800032c:	20000328 	.word	0x20000328
 8000330:	0800671c 	.word	0x0800671c

08000334 <checkGroupStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void checkGroupStateEnter( void *stateData, struct event *event )
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
    // RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
    // rfTimerEnable();
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <checkGroupStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void checkGroupStateExit( void *stateData, struct event *event )
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
    // rfTimerDisable();
    bufferSize = 0;
 8000352:	4b03      	ldr	r3, [pc, #12]	; (8000360 <checkGroupStateExit+0x18>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000298 	.word	0x20000298

08000364 <errorStateHandler>:
 * 
 * @param stateData 
 * @param event 
 */
void errorStateHandler(void *stateData, struct event *event )
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
   puts( "ENTERED ERROR STATE!" );
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <errorStateHandler+0x1c>)
 8000370:	0018      	movs	r0, r3
 8000372:	f005 fea3 	bl	80060bc <puts>
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b002      	add	sp, #8
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	0800672c 	.word	0x0800672c

08000384 <rfRecvStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b0a5      	sub	sp, #148	; 0x94
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
    uint8_t user_rxBuffer[RF_PACKET_SIZE] = { 0 };
 8000390:	2410      	movs	r4, #16
 8000392:	193b      	adds	r3, r7, r4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	3304      	adds	r3, #4
 800039a:	227c      	movs	r2, #124	; 0x7c
 800039c:	2100      	movs	r1, #0
 800039e:	0018      	movs	r0, r3
 80003a0:	f005 ff88 	bl	80062b4 <memset>
    memcpy(user_rxBuffer, g_rxBuffer, g_rxBuffer[0]);
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <rfRecvStateAction+0x58>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	001a      	movs	r2, r3
 80003aa:	490c      	ldr	r1, [pc, #48]	; (80003dc <rfRecvStateAction+0x58>)
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	0018      	movs	r0, r3
 80003b0:	f006 f815 	bl	80063de <memcpy>
    uartSendData(BSP_TTL_CHANNEL1, user_rxBuffer, user_rxBuffer[0]);
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	0019      	movs	r1, r3
 80003be:	2000      	movs	r0, #0
 80003c0:	f001 fc46 	bl	8001c50 <uartSendData>
    
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80003c4:	2301      	movs	r3, #1
 80003c6:	425a      	negs	r2, r3
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <rfRecvStateAction+0x58>)
 80003ca:	2180      	movs	r1, #128	; 0x80
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 f8f9 	bl	80015c4 <RF_StartRx>
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b025      	add	sp, #148	; 0x94
 80003d8:	bd90      	pop	{r4, r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	2000029c 	.word	0x2000029c

080003e0 <rfRecvEnableRecv>:
 * @param event 
 * @param newStateData 
 */
void rfRecvEnableRecv( void *oldStateData, struct event *event,
      void *newStateData )
{   
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80003ec:	2301      	movs	r3, #1
 80003ee:	425a      	negs	r2, r3
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <rfRecvEnableRecv+0x24>)
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 f8e5 	bl	80015c4 <RF_StartRx>
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b004      	add	sp, #16
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	2000029c 	.word	0x2000029c

08000408 <rfRecvStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateEnter( void *stateData, struct event *event )
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 8000412:	2301      	movs	r3, #1
 8000414:	425a      	negs	r2, r3
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <rfRecvStateEnter+0x20>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f001 f8d2 	bl	80015c4 <RF_StartRx>
    // rfTimerEnable();
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}
 8000428:	2000029c 	.word	0x2000029c

0800042c <rfRecvStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateExit( void *stateData, struct event *event )
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
    // rfTimerDisable();
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}

0800043e <rfSendStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b084      	sub	sp, #16
 8000442:	af00      	add	r7, sp, #0
 8000444:	60f8      	str	r0, [r7, #12]
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
//    while (1)
//    {
//
//    }
    
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b004      	add	sp, #16
 8000450:	bd80      	pop	{r7, pc}

08000452 <rfSendStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateEnter( void *stateData, struct event *event )
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b082      	sub	sp, #8
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
 800045a:	6039      	str	r1, [r7, #0]
	
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}

08000464 <rfSendStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateExit( void *stateData, struct event *event )
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
   mq_push(&mq, &(struct msg){rfProcessEvent, (void*)'R'});
 800046e:	2408      	movs	r4, #8
 8000470:	193b      	adds	r3, r7, r4
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <rfSendStateExit+0x3c>)
 8000474:	ca03      	ldmia	r2!, {r0, r1}
 8000476:	c303      	stmia	r3!, {r0, r1}
 8000478:	193a      	adds	r2, r7, r4
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <rfSendStateExit+0x40>)
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f005 fac2 	bl	8005a08 <mq_push>
   RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 8000484:	2301      	movs	r3, #1
 8000486:	425a      	negs	r2, r3
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <rfSendStateExit+0x44>)
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	0018      	movs	r0, r3
 800048e:	f001 f899 	bl	80015c4 <RF_StartRx>
   rfTimerEnable();
 8000492:	f001 faf9 	bl	8001a88 <rfTimerEnable>
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b005      	add	sp, #20
 800049c:	bd90      	pop	{r4, r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	08006744 	.word	0x08006744
 80004a4:	20000328 	.word	0x20000328
 80004a8:	2000029c 	.word	0x2000029c

080004ac <compareStr>:
 * @param event 
 * @return true 
 * @return false 
 */
static bool compareStr( void *str, struct event *event )
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
   if ( event->type != rfProcessEvent )
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d001      	beq.n	80004c2 <compareStr+0x16>
      return false;
 80004be:	2300      	movs	r3, #0
 80004c0:	e006      	b.n	80004d0 <compareStr+0x24>

   return str == event->data;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	425a      	negs	r2, r3
 80004cc:	4153      	adcs	r3, r2
 80004ce:	b2db      	uxtb	r3, r3
}
 80004d0:	0018      	movs	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <stateActuator>:
 * 
 * @param None
 * @retval None
 */
void stateActuator(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
    struct msg *msg;
    stateM_init(&m, &rfRecvState, &errorState);
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <stateActuator+0x50>)
 80004e0:	4912      	ldr	r1, [pc, #72]	; (800052c <stateActuator+0x54>)
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <stateActuator+0x58>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f005 fafb 	bl	8005ae0 <stateM_init>
    mq_init(&mq);
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <stateActuator+0x5c>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f005 fa4e 	bl	800598e <mq_init>
    
    /* triggle state machine */
    mq_push(&mq, &(struct msg){rfProcessEvent, (void*)'R'});
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4a10      	ldr	r2, [pc, #64]	; (8000538 <stateActuator+0x60>)
 80004f6:	ca03      	ldmia	r2!, {r0, r1}
 80004f8:	c303      	stmia	r3!, {r0, r1}
 80004fa:	1d3a      	adds	r2, r7, #4
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <stateActuator+0x5c>)
 80004fe:	0011      	movs	r1, r2
 8000500:	0018      	movs	r0, r3
 8000502:	f005 fa81 	bl	8005a08 <mq_push>

    while ( 1 )
    {
        if ((msg = mq_pop( &mq )) != NULL)
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <stateActuator+0x5c>)
 8000508:	0018      	movs	r0, r3
 800050a:	f005 fab9 	bl	8005a80 <mq_pop>
 800050e:	0003      	movs	r3, r0
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f6      	beq.n	8000506 <stateActuator+0x2e>
        {
            stateM_handleEvent(&m, (struct event *)msg);
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <stateActuator+0x58>)
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f005 faf5 	bl	8005b0e <stateM_handleEvent>
        if ((msg = mq_pop( &mq )) != NULL)
 8000524:	e7ef      	b.n	8000506 <stateActuator+0x2e>
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	200000e0 	.word	0x200000e0
 800052c:	20000094 	.word	0x20000094
 8000530:	2000031c 	.word	0x2000031c
 8000534:	20000328 	.word	0x20000328
 8000538:	08006770 	.word	0x08006770

0800053c <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 8000540:	21ff      	movs	r1, #255	; 0xff
 8000542:	207f      	movs	r0, #127	; 0x7f
 8000544:	f000 fce8 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 8000552:	2061      	movs	r0, #97	; 0x61
 8000554:	f000 fcc9 	bl	8000eea <Cmt2300_ReadReg>
 8000558:	0003      	movs	r3, r0
 800055a:	001a      	movs	r2, r3
 800055c:	230f      	movs	r3, #15
 800055e:	4013      	ands	r3, r2
 8000560:	b2db      	uxtb	r3, r3
}
 8000562:	0018      	movs	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 8000574:	230f      	movs	r3, #15
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e013      	b.n	80005a6 <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 800057e:	250e      	movs	r5, #14
 8000580:	197c      	adds	r4, r7, r5
 8000582:	f7ff ffe4 	bl	800054e <Cmt2300_GetChipStatus>
 8000586:	0003      	movs	r3, r0
 8000588:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 800058a:	1dfa      	adds	r2, r7, #7
 800058c:	197b      	adds	r3, r7, r5
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	429a      	cmp	r2, r3
 8000594:	d101      	bne.n	800059a <Cmt2300_WaitChipStatus+0x32>
            return true;
 8000596:	2301      	movs	r3, #1
 8000598:	e00b      	b.n	80005b2 <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 800059a:	210f      	movs	r1, #15
 800059c:	187b      	adds	r3, r7, r1
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	3201      	adds	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	230f      	movs	r3, #15
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b31      	cmp	r3, #49	; 0x31
 80005ae:	d9e6      	bls.n	800057e <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 80005b0:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b004      	add	sp, #16
 80005b8:	bdb0      	pop	{r4, r5, r7, pc}

080005ba <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af00      	add	r7, sp, #0
 80005c0:	0002      	movs	r2, r0
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 80005c6:	2045      	movs	r0, #69	; 0x45
 80005c8:	f000 fc8f 	bl	8000eea <Cmt2300_ReadReg>
 80005cc:	0003      	movs	r3, r0
 80005ce:	0019      	movs	r1, r3
 80005d0:	200f      	movs	r0, #15
 80005d2:	183b      	adds	r3, r7, r0
 80005d4:	2201      	movs	r2, #1
 80005d6:	4391      	bics	r1, r2
 80005d8:	000a      	movs	r2, r1
 80005da:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 80005dc:	183a      	adds	r2, r7, r0
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	7812      	ldrb	r2, [r2, #0]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	0019      	movs	r1, r3
 80005ea:	2045      	movs	r0, #69	; 0x45
 80005ec:	f000 fc94 	bl	8000f18 <Cmt2300_WriteReg>
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b004      	add	sp, #16
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 80005fc:	2110      	movs	r1, #16
 80005fe:	2060      	movs	r0, #96	; 0x60
 8000600:	f000 fc8a 	bl	8000f18 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff ffaf 	bl	8000568 <Cmt2300_WaitChipStatus>
 800060a:	0003      	movs	r3, r0
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 8000616:	2102      	movs	r1, #2
 8000618:	2060      	movs	r0, #96	; 0x60
 800061a:	f000 fc7d 	bl	8000f18 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 800061e:	2002      	movs	r0, #2
 8000620:	f7ff ffa2 	bl	8000568 <Cmt2300_WaitChipStatus>
 8000624:	0003      	movs	r3, r0
}
 8000626:	0018      	movs	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Cmt2300_GoTx>:
* @name    Cmt2300_GoTx
* @desc    Entry Tx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoTx(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_TX);
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	2060      	movs	r0, #96	; 0x60
 8000634:	f000 fc70 	bl	8000f18 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_TX);
 8000638:	2006      	movs	r0, #6
 800063a:	f7ff ff95 	bl	8000568 <Cmt2300_WaitChipStatus>
 800063e:	0003      	movs	r3, r0
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <Cmt2300_GoRx>:
* @name    Cmt2300_GoRx
* @desc    Entry Rx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoRx(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_RX);
 800064a:	2108      	movs	r1, #8
 800064c:	2060      	movs	r0, #96	; 0x60
 800064e:	f000 fc63 	bl	8000f18 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_RX);
 8000652:	2005      	movs	r0, #5
 8000654:	f7ff ff88 	bl	8000568 <Cmt2300_WaitChipStatus>
 8000658:	0003      	movs	r3, r0
}
 800065a:	0018      	movs	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	0019      	movs	r1, r3
 8000672:	2065      	movs	r0, #101	; 0x65
 8000674:	f000 fc50 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}

08000680 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	0002      	movs	r2, r0
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	1dbb      	adds	r3, r7, #6
 800068e:	1c0a      	adds	r2, r1, #0
 8000690:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	1dfa      	adds	r2, r7, #7
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	211f      	movs	r1, #31
 800069a:	400a      	ands	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 800069e:	2066      	movs	r0, #102	; 0x66
 80006a0:	f000 fc23 	bl	8000eea <Cmt2300_ReadReg>
 80006a4:	0003      	movs	r3, r0
 80006a6:	001a      	movs	r2, r3
 80006a8:	231f      	movs	r3, #31
 80006aa:	439a      	bics	r2, r3
 80006ac:	0013      	movs	r3, r2
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25a      	sxtb	r2, r3
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	0019      	movs	r1, r3
 80006c4:	2066      	movs	r0, #102	; 0x66
 80006c6:	f000 fc27 	bl	8000f18 <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 80006ca:	1dbb      	adds	r3, r7, #6
 80006cc:	1dba      	adds	r2, r7, #6
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	211f      	movs	r1, #31
 80006d2:	400a      	ands	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 80006d6:	2067      	movs	r0, #103	; 0x67
 80006d8:	f000 fc07 	bl	8000eea <Cmt2300_ReadReg>
 80006dc:	0003      	movs	r3, r0
 80006de:	001a      	movs	r2, r3
 80006e0:	231f      	movs	r3, #31
 80006e2:	439a      	bics	r2, r3
 80006e4:	0013      	movs	r3, r2
 80006e6:	b25a      	sxtb	r2, r3
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b25a      	sxtb	r2, r3
 80006f2:	1dbb      	adds	r3, r7, #6
 80006f4:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 80006f6:	1dbb      	adds	r3, r7, #6
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0019      	movs	r1, r3
 80006fc:	2067      	movs	r0, #103	; 0x67
 80006fe:	f000 fc0b 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b002      	add	sp, #8
 8000708:	bd80      	pop	{r7, pc}

0800070a <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 800070a:	b5b0      	push	{r4, r5, r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	0002      	movs	r2, r0
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000716:	250f      	movs	r5, #15
 8000718:	197c      	adds	r4, r7, r5
 800071a:	2066      	movs	r0, #102	; 0x66
 800071c:	f000 fbe5 	bl	8000eea <Cmt2300_ReadReg>
 8000720:	0003      	movs	r3, r0
 8000722:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10d      	bne.n	8000748 <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 800072c:	197b      	adds	r3, r7, r5
 800072e:	197a      	adds	r2, r7, r5
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	4249      	negs	r1, r1
 8000736:	430a      	orrs	r2, r1
 8000738:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 800073a:	197b      	adds	r3, r7, r5
 800073c:	197a      	adds	r2, r7, r5
 800073e:	7812      	ldrb	r2, [r2, #0]
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	438a      	bics	r2, r1
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e010      	b.n	800076a <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10c      	bne.n	800076a <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 8000750:	200f      	movs	r0, #15
 8000752:	183b      	adds	r3, r7, r0
 8000754:	183a      	adds	r2, r7, r0
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	217f      	movs	r1, #127	; 0x7f
 800075a:	400a      	ands	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 800075e:	183b      	adds	r3, r7, r0
 8000760:	183a      	adds	r2, r7, r0
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	430a      	orrs	r2, r1
 8000768:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 800076a:	230f      	movs	r3, #15
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	0019      	movs	r1, r3
 8000772:	2066      	movs	r0, #102	; 0x66
 8000774:	f000 fbd0 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bdb0      	pop	{r4, r5, r7, pc}

08000780 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	0019      	movs	r1, r3
 8000792:	2068      	movs	r0, #104	; 0x68
 8000794:	f000 fbc0 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}

080007a0 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	0002      	movs	r2, r0
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 80007ac:	250f      	movs	r5, #15
 80007ae:	197c      	adds	r4, r7, r5
 80007b0:	2069      	movs	r0, #105	; 0x69
 80007b2:	f000 fb9a 	bl	8000eea <Cmt2300_ReadReg>
 80007b6:	0003      	movs	r3, r0
 80007b8:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d006      	beq.n	80007d0 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 80007c2:	197b      	adds	r3, r7, r5
 80007c4:	197a      	adds	r2, r7, r5
 80007c6:	7812      	ldrb	r2, [r2, #0]
 80007c8:	2102      	movs	r1, #2
 80007ca:	430a      	orrs	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e006      	b.n	80007de <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 80007d0:	220f      	movs	r2, #15
 80007d2:	18bb      	adds	r3, r7, r2
 80007d4:	18ba      	adds	r2, r7, r2
 80007d6:	7812      	ldrb	r2, [r2, #0]
 80007d8:	2102      	movs	r1, #2
 80007da:	438a      	bics	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80007de:	230f      	movs	r3, #15
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	0019      	movs	r1, r3
 80007e6:	2069      	movs	r0, #105	; 0x69
 80007e8:	f000 fb96 	bl	8000f18 <Cmt2300_WriteReg>
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b004      	add	sp, #16
 80007f2:	bdb0      	pop	{r4, r5, r7, pc}

080007f4 <Cmt2300_EnableReadFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableReadFifo
* @desc    Enable SPI to read the FIFO.
* *********************************************************/
void Cmt2300_EnableReadFifo(void)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 80007fa:	1dfc      	adds	r4, r7, #7
 80007fc:	2069      	movs	r0, #105	; 0x69
 80007fe:	f000 fb74 	bl	8000eea <Cmt2300_ReadReg>
 8000802:	0003      	movs	r3, r0
 8000804:	7023      	strb	r3, [r4, #0]
    tmp &= ~CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	1dfa      	adds	r2, r7, #7
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	2101      	movs	r1, #1
 800080e:	438a      	bics	r2, r1
 8000810:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_FIFO_RX_TX_SEL;
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	1dfa      	adds	r2, r7, #7
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	2104      	movs	r1, #4
 800081a:	438a      	bics	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0019      	movs	r1, r3
 8000824:	2069      	movs	r0, #105	; 0x69
 8000826:	f000 fb77 	bl	8000f18 <Cmt2300_WriteReg>
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b003      	add	sp, #12
 8000830:	bd90      	pop	{r4, r7, pc}

08000832 <Cmt2300_EnableWriteFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableWriteFifo
* @desc    Enable SPI to write the FIFO.
* *********************************************************/
void Cmt2300_EnableWriteFifo(void)
{
 8000832:	b590      	push	{r4, r7, lr}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 8000838:	1dfc      	adds	r4, r7, #7
 800083a:	2069      	movs	r0, #105	; 0x69
 800083c:	f000 fb55 	bl	8000eea <Cmt2300_ReadReg>
 8000840:	0003      	movs	r3, r0
 8000842:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	1dfa      	adds	r2, r7, #7
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	2101      	movs	r1, #1
 800084c:	430a      	orrs	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]
    tmp |= CMT2300_MASK_FIFO_RX_TX_SEL;
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	1dfa      	adds	r2, r7, #7
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	2104      	movs	r1, #4
 8000858:	430a      	orrs	r2, r1
 800085a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	0019      	movs	r1, r3
 8000862:	2069      	movs	r0, #105	; 0x69
 8000864:	f000 fb58 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b003      	add	sp, #12
 800086e:	bd90      	pop	{r4, r7, pc}

08000870 <Cmt2300_ClearFifo>:
*            CMT2300_MASK_TX_FIFO_FULL_FLG |
*            CMT2300_MASK_TX_FIFO_NMTY_FLG |
*            CMT2300_MASK_TX_FIFO_TH_FLG
* *********************************************************/
uint8_t Cmt2300_ClearFifo(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CLR);
 8000876:	1dfc      	adds	r4, r7, #7
 8000878:	206c      	movs	r0, #108	; 0x6c
 800087a:	f000 fb36 	bl	8000eea <Cmt2300_ReadReg>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CLR, CMT2300_MASK_FIFO_CLR_RX | CMT2300_MASK_FIFO_CLR_TX);
 8000882:	2103      	movs	r1, #3
 8000884:	206c      	movs	r0, #108	; 0x6c
 8000886:	f000 fb47 	bl	8000f18 <Cmt2300_WriteReg>
    return tmp;
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
}
 800088e:	0018      	movs	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	b003      	add	sp, #12
 8000894:	bd90      	pop	{r4, r7, pc}

08000896 <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 8000896:	b590      	push	{r4, r7, lr}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 800089c:	1d7b      	adds	r3, r7, #5
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 80008a8:	1cfb      	adds	r3, r7, #3
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 80008ae:	1cbc      	adds	r4, r7, #2
 80008b0:	2066      	movs	r0, #102	; 0x66
 80008b2:	f000 fb1a 	bl	8000eea <Cmt2300_ReadReg>
 80008b6:	0003      	movs	r3, r0
 80008b8:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 80008ba:	1cbb      	adds	r3, r7, #2
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	115b      	asrs	r3, r3, #5
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	1cbb      	adds	r3, r7, #2
 80008c4:	2101      	movs	r1, #1
 80008c6:	400a      	ands	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 80008ca:	1dfc      	adds	r4, r7, #7
 80008cc:	206d      	movs	r0, #109	; 0x6d
 80008ce:	f000 fb0c 	bl	8000eea <Cmt2300_ReadReg>
 80008d2:	0003      	movs	r3, r0
 80008d4:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 80008d6:	1dbc      	adds	r4, r7, #6
 80008d8:	206a      	movs	r0, #106	; 0x6a
 80008da:	f000 fb06 	bl	8000eea <Cmt2300_ReadReg>
 80008de:	0003      	movs	r3, r0
 80008e0:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 80008e2:	1cbb      	adds	r3, r7, #2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d009      	beq.n	80008fe <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	1dfa      	adds	r2, r7, #7
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 80008f4:	1dbb      	adds	r3, r7, #6
 80008f6:	1dba      	adds	r2, r7, #6
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	43d2      	mvns	r2, r2
 80008fc:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	da05      	bge.n	8000914 <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	1d3a      	adds	r2, r7, #4
 800090c:	7812      	ldrb	r2, [r2, #0]
 800090e:	2120      	movs	r1, #32
 8000910:	430a      	orrs	r2, r1
 8000912:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2240      	movs	r2, #64	; 0x40
 800091a:	4013      	ands	r3, r2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d005      	beq.n	800092e <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2220      	movs	r2, #32
 8000934:	4013      	ands	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d005      	beq.n	8000948 <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	1d3a      	adds	r2, r7, #4
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	2101      	movs	r1, #1
 8000944:	430a      	orrs	r2, r1
 8000946:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2210      	movs	r2, #16
 800094e:	4013      	ands	r3, r2
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00b      	beq.n	800096e <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	1d3a      	adds	r2, r7, #4
 800095a:	7812      	ldrb	r2, [r2, #0]
 800095c:	2110      	movs	r1, #16
 800095e:	430a      	orrs	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 8000962:	1cfb      	adds	r3, r7, #3
 8000964:	1cfa      	adds	r2, r7, #3
 8000966:	7812      	ldrb	r2, [r2, #0]
 8000968:	2110      	movs	r1, #16
 800096a:	430a      	orrs	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2208      	movs	r2, #8
 8000974:	4013      	ands	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00b      	beq.n	8000994 <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	1d3a      	adds	r2, r7, #4
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	2108      	movs	r1, #8
 8000984:	430a      	orrs	r2, r1
 8000986:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 8000988:	1cfb      	adds	r3, r7, #3
 800098a:	1cfa      	adds	r2, r7, #3
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	2108      	movs	r1, #8
 8000990:	430a      	orrs	r2, r1
 8000992:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2204      	movs	r2, #4
 800099a:	4013      	ands	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00b      	beq.n	80009ba <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	1d3a      	adds	r2, r7, #4
 80009a6:	7812      	ldrb	r2, [r2, #0]
 80009a8:	2104      	movs	r1, #4
 80009aa:	430a      	orrs	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 80009ae:	1cfb      	adds	r3, r7, #3
 80009b0:	1cfa      	adds	r2, r7, #3
 80009b2:	7812      	ldrb	r2, [r2, #0]
 80009b4:	2104      	movs	r1, #4
 80009b6:	430a      	orrs	r2, r1
 80009b8:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2202      	movs	r2, #2
 80009c0:	4013      	ands	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00b      	beq.n	80009e0 <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	1d3a      	adds	r2, r7, #4
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	2102      	movs	r1, #2
 80009d0:	430a      	orrs	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 80009d4:	1cfb      	adds	r3, r7, #3
 80009d6:	1cfa      	adds	r2, r7, #3
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	2102      	movs	r1, #2
 80009dc:	430a      	orrs	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2201      	movs	r2, #1
 80009e6:	4013      	ands	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00b      	beq.n	8000a06 <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	1d3a      	adds	r2, r7, #4
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 80009fa:	1cfb      	adds	r3, r7, #3
 80009fc:	1cfa      	adds	r2, r7, #3
 80009fe:	7812      	ldrb	r2, [r2, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00c      	beq.n	8000a2e <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 8000a14:	1d7b      	adds	r3, r7, #5
 8000a16:	1d7a      	adds	r2, r7, #5
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 8000a20:	1cfb      	adds	r3, r7, #3
 8000a22:	1cfa      	adds	r2, r7, #3
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	4249      	negs	r1, r1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 8000a2e:	1dbb      	adds	r3, r7, #6
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2210      	movs	r2, #16
 8000a34:	4013      	ands	r3, r2
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00b      	beq.n	8000a54 <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 8000a3c:	1d7b      	adds	r3, r7, #5
 8000a3e:	1d7a      	adds	r2, r7, #5
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	2101      	movs	r1, #1
 8000a44:	430a      	orrs	r2, r1
 8000a46:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 8000a48:	1cfb      	adds	r3, r7, #3
 8000a4a:	1cfa      	adds	r2, r7, #3
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	430a      	orrs	r2, r1
 8000a52:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 8000a54:	1dbb      	adds	r3, r7, #6
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2208      	movs	r2, #8
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00b      	beq.n	8000a7a <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 8000a62:	1d7b      	adds	r3, r7, #5
 8000a64:	1d7a      	adds	r2, r7, #5
 8000a66:	7812      	ldrb	r2, [r2, #0]
 8000a68:	2104      	movs	r1, #4
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 8000a6e:	1cfb      	adds	r3, r7, #3
 8000a70:	1cfa      	adds	r2, r7, #3
 8000a72:	7812      	ldrb	r2, [r2, #0]
 8000a74:	2120      	movs	r1, #32
 8000a76:	430a      	orrs	r2, r1
 8000a78:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 8000a7a:	1d7b      	adds	r3, r7, #5
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0019      	movs	r1, r3
 8000a80:	206a      	movs	r0, #106	; 0x6a
 8000a82:	f000 fa49 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	206b      	movs	r0, #107	; 0x6b
 8000a8e:	f000 fa43 	bl	8000f18 <Cmt2300_WriteReg>

    if (nIntPolar)
 8000a92:	1cbb      	adds	r3, r7, #2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d004      	beq.n	8000aa4 <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 8000a9a:	1cfb      	adds	r3, r7, #3
 8000a9c:	1cfa      	adds	r2, r7, #3
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	43d2      	mvns	r2, r2
 8000aa2:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 8000aa4:	1cfb      	adds	r3, r7, #3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b003      	add	sp, #12
 8000aae:	bd90      	pop	{r4, r7, pc}

08000ab0 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 8000abc:	2004      	movs	r0, #4
 8000abe:	f000 fa14 	bl	8000eea <Cmt2300_ReadReg>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	240f      	movs	r4, #15
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	220f      	movs	r2, #15
 8000acc:	400a      	ands	r2, r1
 8000ace:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	189b      	adds	r3, r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	4a4d      	ldr	r2, [pc, #308]	; (8000c14 <Cmt2300_ConfigDataRate+0x164>)
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	2218      	movs	r2, #24
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	2020      	movs	r0, #32
 8000ae6:	f000 f9c8 	bl	8000e7a <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	494a      	ldr	r1, [pc, #296]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000af0:	0013      	movs	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	189b      	adds	r3, r3, r2
 8000af6:	5c5b      	ldrb	r3, [r3, r1]
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	220f      	movs	r2, #15
 8000afc:	4393      	bics	r3, r2
 8000afe:	b25a      	sxtb	r2, r3
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f000 fa02 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	493f      	ldr	r1, [pc, #252]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	18cb      	adds	r3, r1, r3
 8000b22:	3301      	adds	r3, #1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0019      	movs	r1, r3
 8000b28:	2055      	movs	r0, #85	; 0x55
 8000b2a:	f000 f9f5 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	4939      	ldr	r1, [pc, #228]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000b34:	0013      	movs	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	189b      	adds	r3, r3, r2
 8000b3a:	18cb      	adds	r3, r1, r3
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	0019      	movs	r1, r3
 8000b42:	2056      	movs	r0, #86	; 0x56
 8000b44:	f000 f9e8 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4932      	ldr	r1, [pc, #200]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000b4e:	0013      	movs	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	189b      	adds	r3, r3, r2
 8000b54:	18cb      	adds	r3, r1, r3
 8000b56:	3303      	adds	r3, #3
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	2057      	movs	r0, #87	; 0x57
 8000b5e:	f000 f9db 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	492c      	ldr	r1, [pc, #176]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000b68:	0013      	movs	r3, r2
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	189b      	adds	r3, r3, r2
 8000b6e:	18cb      	adds	r3, r1, r3
 8000b70:	3304      	adds	r3, #4
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	0019      	movs	r1, r3
 8000b76:	2058      	movs	r0, #88	; 0x58
 8000b78:	f000 f9ce 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	4925      	ldr	r1, [pc, #148]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000b82:	0013      	movs	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	189b      	adds	r3, r3, r2
 8000b88:	18cb      	adds	r3, r1, r3
 8000b8a:	3305      	adds	r3, #5
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	2059      	movs	r0, #89	; 0x59
 8000b92:	f000 f9c1 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	491f      	ldr	r1, [pc, #124]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	189b      	adds	r3, r3, r2
 8000ba2:	18cb      	adds	r3, r1, r3
 8000ba4:	3306      	adds	r3, #6
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	0019      	movs	r1, r3
 8000baa:	205a      	movs	r0, #90	; 0x5a
 8000bac:	f000 f9b4 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	4918      	ldr	r1, [pc, #96]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	189b      	adds	r3, r3, r2
 8000bbc:	18cb      	adds	r3, r1, r3
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	205b      	movs	r0, #91	; 0x5b
 8000bc6:	f000 f9a7 	bl	8000f18 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 8000bca:	205e      	movs	r0, #94	; 0x5e
 8000bcc:	f000 f98d 	bl	8000eea <Cmt2300_ReadReg>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	223f      	movs	r2, #63	; 0x3f
 8000bd8:	400a      	ands	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	490d      	ldr	r1, [pc, #52]	; (8000c18 <Cmt2300_ConfigDataRate+0x168>)
 8000be2:	0013      	movs	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	189b      	adds	r3, r3, r2
 8000be8:	18cb      	adds	r3, r1, r3
 8000bea:	3308      	adds	r3, #8
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	223f      	movs	r2, #63	; 0x3f
 8000bf2:	4393      	bics	r3, r2
 8000bf4:	b25a      	sxtb	r2, r3
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	0019      	movs	r1, r3
 8000c04:	205e      	movs	r0, #94	; 0x5e
 8000c06:	f000 f987 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b005      	add	sp, #20
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	08006778 	.word	0x08006778
 8000c18:	08006838 	.word	0x08006838

08000c1c <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 8000c28:	2038      	movs	r0, #56	; 0x38
 8000c2a:	f000 f95e 	bl	8000eea <Cmt2300_ReadReg>
 8000c2e:	0003      	movs	r3, r0
 8000c30:	0019      	movs	r1, r3
 8000c32:	200f      	movs	r0, #15
 8000c34:	183b      	adds	r3, r7, r0
 8000c36:	2203      	movs	r2, #3
 8000c38:	4391      	bics	r1, r2
 8000c3a:	000a      	movs	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 8000c3e:	183a      	adds	r2, r7, r0
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	2038      	movs	r0, #56	; 0x38
 8000c4e:	f000 f963 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	0002      	movs	r2, r0
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f93e 	bl	8000eea <Cmt2300_ReadReg>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	0019      	movs	r1, r3
 8000c72:	230f      	movs	r3, #15
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	2201      	movs	r2, #1
 8000c78:	4391      	bics	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b07      	cmp	r3, #7
 8000c84:	d902      	bls.n	8000c8c <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	2207      	movs	r2, #7
 8000c8a:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <Cmt2300_ConfigTxPower+0xcc>)
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	5cd3      	ldrb	r3, [r2, r3]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	240f      	movs	r4, #15
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	0019      	movs	r1, r3
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f000 f932 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <Cmt2300_ConfigTxPower+0xcc>)
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	18d3      	adds	r3, r2, r3
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	205c      	movs	r0, #92	; 0x5c
 8000cc6:	f000 f927 	bl	8000f18 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <Cmt2300_ConfigTxPower+0xcc>)
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	18d3      	adds	r3, r2, r3
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	0019      	movs	r1, r3
 8000cda:	205d      	movs	r0, #93	; 0x5d
 8000cdc:	f000 f91c 	bl	8000f18 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 8000ce0:	205e      	movs	r0, #94	; 0x5e
 8000ce2:	f000 f902 	bl	8000eea <Cmt2300_ReadReg>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	0019      	movs	r1, r3
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	223f      	movs	r2, #63	; 0x3f
 8000cee:	4391      	bics	r1, r2
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <Cmt2300_ConfigTxPower+0xcc>)
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	3303      	adds	r3, #3
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	223f      	movs	r2, #63	; 0x3f
 8000d06:	4013      	ands	r3, r2
 8000d08:	b25a      	sxtb	r2, r3
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	0019      	movs	r1, r3
 8000d18:	205e      	movs	r0, #94	; 0x5e
 8000d1a:	f000 f8fd 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b005      	add	sp, #20
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	08006880 	.word	0x08006880

08000d2c <Cmt2300_SetPayloadLength>:
* @name    Cmt2300_SetPayloadLength
* @desc    Set payload length.
* @param   nLength
* *********************************************************/
void Cmt2300_SetPayloadLength(uint16_t nLength)
{
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	0002      	movs	r2, r0
 8000d34:	1dbb      	adds	r3, r7, #6
 8000d36:	801a      	strh	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14);
 8000d38:	250f      	movs	r5, #15
 8000d3a:	197c      	adds	r4, r7, r5
 8000d3c:	2045      	movs	r0, #69	; 0x45
 8000d3e:	f000 f8d4 	bl	8000eea <Cmt2300_ReadReg>
 8000d42:	0003      	movs	r3, r0
 8000d44:	7023      	strb	r3, [r4, #0]

    tmp &= ~CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000d46:	0028      	movs	r0, r5
 8000d48:	183b      	adds	r3, r7, r0
 8000d4a:	183a      	adds	r2, r7, r0
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	2170      	movs	r1, #112	; 0x70
 8000d50:	438a      	bics	r2, r1
 8000d52:	701a      	strb	r2, [r3, #0]
    tmp |= (nLength >> 4) & CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000d54:	1dbb      	adds	r3, r7, #6
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	2270      	movs	r2, #112	; 0x70
 8000d60:	4013      	ands	r3, r2
 8000d62:	b25a      	sxtb	r2, r3
 8000d64:	183b      	adds	r3, r7, r0
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp);
 8000d72:	0004      	movs	r4, r0
 8000d74:	183b      	adds	r3, r7, r0
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	2045      	movs	r0, #69	; 0x45
 8000d7c:	f000 f8cc 	bl	8000f18 <Cmt2300_WriteReg>

    tmp = nLength & CMT2300_MASK_PAYLOAD_LENG_7_0;
 8000d80:	0020      	movs	r0, r4
 8000d82:	183b      	adds	r3, r7, r0
 8000d84:	1dba      	adds	r2, r7, #6
 8000d86:	8812      	ldrh	r2, [r2, #0]
 8000d88:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT15, tmp);
 8000d8a:	183b      	adds	r3, r7, r0
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	0019      	movs	r1, r3
 8000d90:	2046      	movs	r0, #70	; 0x46
 8000d92:	f000 f8c1 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b004      	add	sp, #16
 8000d9c:	bdb0      	pop	{r4, r5, r7, pc}

08000d9e <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000d9e:	b5b0      	push	{r4, r5, r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	0002      	movs	r2, r0
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000daa:	250f      	movs	r5, #15
 8000dac:	197c      	adds	r4, r7, r5
 8000dae:	200d      	movs	r0, #13
 8000db0:	f000 f89b 	bl	8000eea <Cmt2300_ReadReg>
 8000db4:	0003      	movs	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d013      	beq.n	8000de8 <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 8000dc0:	197b      	adds	r3, r7, r5
 8000dc2:	197a      	adds	r2, r7, r5
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	4249      	negs	r1, r1
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 8000dce:	197b      	adds	r3, r7, r5
 8000dd0:	197a      	adds	r2, r7, r5
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	2140      	movs	r1, #64	; 0x40
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 8000dda:	197b      	adds	r3, r7, r5
 8000ddc:	197a      	adds	r2, r7, r5
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	2120      	movs	r1, #32
 8000de2:	430a      	orrs	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e012      	b.n	8000e0e <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 8000de8:	200f      	movs	r0, #15
 8000dea:	183b      	adds	r3, r7, r0
 8000dec:	183a      	adds	r2, r7, r0
 8000dee:	7812      	ldrb	r2, [r2, #0]
 8000df0:	217f      	movs	r1, #127	; 0x7f
 8000df2:	400a      	ands	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 8000df6:	183b      	adds	r3, r7, r0
 8000df8:	183a      	adds	r2, r7, r0
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	438a      	bics	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 8000e02:	183b      	adds	r3, r7, r0
 8000e04:	183a      	adds	r2, r7, r0
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	2120      	movs	r1, #32
 8000e0a:	438a      	bics	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 8000e0e:	230f      	movs	r3, #15
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	0019      	movs	r1, r3
 8000e16:	200d      	movs	r0, #13
 8000e18:	f000 f87e 	bl	8000f18 <Cmt2300_WriteReg>
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bdb0      	pop	{r4, r5, r7, pc}

08000e24 <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000e2a:	f7ff fb87 	bl	800053c <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000e2e:	200a      	movs	r0, #10
 8000e30:	f000 fd88 	bl	8001944 <Delay_Ms>
   
    Cmt2300_GoStby();
 8000e34:	f7ff fbed 	bl	8000612 <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000e38:	1dfc      	adds	r4, r7, #7
 8000e3a:	2061      	movs	r0, #97	; 0x61
 8000e3c:	f000 f855 	bl	8000eea <Cmt2300_ReadReg>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	1dfa      	adds	r2, r7, #7
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	2120      	movs	r1, #32
 8000e58:	438a      	bics	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	0019      	movs	r1, r3
 8000e62:	2061      	movs	r0, #97	; 0x61
 8000e64:	f000 f858 	bl	8000f18 <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff ff98 	bl	8000d9e <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000e6e:	f7ff fd12 	bl	8000896 <Cmt2300_ClearInterruptFlags>
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b003      	add	sp, #12
 8000e78:	bd90      	pop	{r4, r7, pc}

08000e7a <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000e7a:	b590      	push	{r4, r7, lr}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	0011      	movs	r1, r2
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	1c02      	adds	r2, r0, #0
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	1dbb      	adds	r3, r7, #6
 8000e8c:	1c0a      	adds	r2, r1, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e014      	b.n	8000ec4 <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	187a      	adds	r2, r7, r1
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	18d3      	adds	r3, r2, r3
 8000ea6:	b2d8      	uxtb	r0, r3
 8000ea8:	000c      	movs	r4, r1
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	18d3      	adds	r3, r2, r3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	f000 f82f 	bl	8000f18 <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	781a      	ldrb	r2, [r3, #0]
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	3201      	adds	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fa      	adds	r2, r7, r3
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3e3      	bcc.n	8000e9a <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b005      	add	sp, #20
 8000eda:	bd90      	pop	{r4, r7, pc}

08000edc <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000ee0:	f000 f876 	bl	8000fd0 <cmt_spi3_init>
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000eea:	b590      	push	{r4, r7, lr}
 8000eec:	b085      	sub	sp, #20
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000ef6:	240f      	movs	r4, #15
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000efe:	193a      	adds	r2, r7, r4
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 f974 	bl	80011f4 <cmt_spi3_read>

    return dat;
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	781b      	ldrb	r3, [r3, #0]
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b005      	add	sp, #20
 8000f16:	bd90      	pop	{r4, r7, pc}

08000f18 <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	0002      	movs	r2, r0
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	1c0a      	adds	r2, r1, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000f2a:	1dbb      	adds	r3, r7, #6
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 f8e9 	bl	800110c <cmt_spi3_write>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <Cmt2300_ReadFifo>:
* @desc    Reads the contents of the CMT2300 FIFO.
* @param   buf: buffer where to copy the FIFO read data
*          len: number of bytes to be read from the FIFO
* *********************************************************/
void Cmt2300_ReadFifo(uint8_t buf[], uint16_t len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	1cbb      	adds	r3, r7, #2
 8000f4e:	801a      	strh	r2, [r3, #0]
    cmt_spi3_read_fifo(buf, len);
 8000f50:	1cbb      	adds	r3, r7, #2
 8000f52:	881a      	ldrh	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 fa4b 	bl	80013f4 <cmt_spi3_read_fifo>
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <Cmt2300_WriteFifo>:
* @desc    Writes the buffer contents to the CMT2300 FIFO.
* @param   buf: buffer containing data to be put on the FIFO
*          len: number of bytes to be written to the FIFO
* *********************************************************/
void Cmt2300_WriteFifo(const uint8_t buf[], uint16_t len)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	000a      	movs	r2, r1
 8000f70:	1cbb      	adds	r3, r7, #2
 8000f72:	801a      	strh	r2, [r3, #0]
    cmt_spi3_write_fifo(buf, len);
 8000f74:	1cbb      	adds	r3, r7, #2
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 f9af 	bl	80012e0 <cmt_spi3_write_fifo>
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000f90:	2308      	movs	r3, #8
 8000f92:	607b      	str	r3, [r7, #4]
    while (n--)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1fa      	bne.n	8000f96 <cmt_spi3_delay+0xc>
        ;
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <cmt_spi3_delay_us>:

void cmt_spi3_delay_us(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
    uint16_t n = 8;
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	801a      	strh	r2, [r3, #0]
    while (n--)
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	1dbb      	adds	r3, r7, #6
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	1dba      	adds	r2, r7, #6
 8000fbe:	1e59      	subs	r1, r3, #1
 8000fc0:	8011      	strh	r1, [r2, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f8      	bne.n	8000fb8 <cmt_spi3_delay_us+0xe>
        ;
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <cmt_spi3_init>:

void cmt_spi3_init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000fd4:	f000 fcda 	bl	800198c <spi_gpio_init>
    cmt_spi3_sda_in();
 8000fd8:	f000 fd10 	bl	80019fc <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000fdc:	f7ff ffd5 	bl	8000f8a <cmt_spi3_delay>
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	0002      	movs	r2, r0
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e034      	b.n	8001066 <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	0119      	lsls	r1, r3, #4
 8001000:	2390      	movs	r3, #144	; 0x90
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	2200      	movs	r2, #0
 8001006:	0018      	movs	r0, r3
 8001008:	f002 f92f 	bl	800326a <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	da08      	bge.n	8001028 <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	0059      	lsls	r1, r3, #1
 800101a:	2390      	movs	r3, #144	; 0x90
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	2201      	movs	r2, #1
 8001020:	0018      	movs	r0, r3
 8001022:	f002 f922 	bl	800326a <HAL_GPIO_WritePin>
 8001026:	e007      	b.n	8001038 <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	0059      	lsls	r1, r3, #1
 800102c:	2390      	movs	r3, #144	; 0x90
 800102e:	05db      	lsls	r3, r3, #23
 8001030:	2200      	movs	r2, #0
 8001032:	0018      	movs	r0, r3
 8001034:	f002 f919 	bl	800326a <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8001038:	f7ff ffa7 	bl	8000f8a <cmt_spi3_delay>

        data8 <<= 1;
 800103c:	1dfa      	adds	r2, r7, #7
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	18db      	adds	r3, r3, r3
 8001044:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	0119      	lsls	r1, r3, #4
 800104a:	2390      	movs	r3, #144	; 0x90
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	2201      	movs	r2, #1
 8001050:	0018      	movs	r0, r3
 8001052:	f002 f90a 	bl	800326a <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8001056:	f7ff ff98 	bl	8000f8a <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 800105a:	210f      	movs	r1, #15
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	187b      	adds	r3, r7, r1
 8001062:	3201      	adds	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	230f      	movs	r3, #15
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b07      	cmp	r3, #7
 800106e:	d9c5      	bls.n	8000ffc <cmt_spi3_send+0x16>
    }
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}

0800107a <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 8001080:	1dbb      	adds	r3, r7, #6
 8001082:	22ff      	movs	r2, #255	; 0xff
 8001084:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e034      	b.n	80010f8 <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	0119      	lsls	r1, r3, #4
 8001092:	2390      	movs	r3, #144	; 0x90
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2200      	movs	r2, #0
 8001098:	0018      	movs	r0, r3
 800109a:	f002 f8e6 	bl	800326a <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 800109e:	f7ff ff74 	bl	8000f8a <cmt_spi3_delay>
        data8 <<= 1;
 80010a2:	1dba      	adds	r2, r7, #6
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	18db      	adds	r3, r3, r3
 80010aa:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	0119      	lsls	r1, r3, #4
 80010b0:	2390      	movs	r3, #144	; 0x90
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	2201      	movs	r2, #1
 80010b6:	0018      	movs	r0, r3
 80010b8:	f002 f8d7 	bl	800326a <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	005a      	lsls	r2, r3, #1
 80010c0:	2390      	movs	r3, #144	; 0x90
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f002 f8b2 	bl	8003230 <HAL_GPIO_ReadPin>
 80010cc:	1e03      	subs	r3, r0, #0
 80010ce:	d006      	beq.n	80010de <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	1dba      	adds	r2, r7, #6
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e005      	b.n	80010ea <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 80010de:	1dbb      	adds	r3, r7, #6
 80010e0:	1dba      	adds	r2, r7, #6
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	438a      	bics	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 80010ea:	f7ff ff4e 	bl	8000f8a <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	3201      	adds	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b07      	cmp	r3, #7
 80010fe:	d9c6      	bls.n	800108e <cmt_spi3_recv+0x14>
    }

    return data8;
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	781b      	ldrb	r3, [r3, #0]
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	0002      	movs	r2, r0
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	1dbb      	adds	r3, r7, #6
 800111a:	1c0a      	adds	r2, r1, #0
 800111c:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 800111e:	f000 fc3b 	bl	8001998 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	0059      	lsls	r1, r3, #1
 8001126:	2390      	movs	r3, #144	; 0x90
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	2201      	movs	r2, #1
 800112c:	0018      	movs	r0, r3
 800112e:	f002 f89c 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	0119      	lsls	r1, r3, #4
 8001136:	2390      	movs	r3, #144	; 0x90
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	2200      	movs	r2, #0
 800113c:	0018      	movs	r0, r3
 800113e:	f002 f894 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	0119      	lsls	r1, r3, #4
 8001146:	2390      	movs	r3, #144	; 0x90
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	2200      	movs	r2, #0
 800114c:	0018      	movs	r0, r3
 800114e:	f002 f88c 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	01db      	lsls	r3, r3, #7
 8001156:	4826      	ldr	r0, [pc, #152]	; (80011f0 <cmt_spi3_write+0xe4>)
 8001158:	2201      	movs	r2, #1
 800115a:	0019      	movs	r1, r3
 800115c:	f002 f885 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	01db      	lsls	r3, r3, #7
 8001164:	4822      	ldr	r0, [pc, #136]	; (80011f0 <cmt_spi3_write+0xe4>)
 8001166:	2201      	movs	r2, #1
 8001168:	0019      	movs	r1, r3
 800116a:	f002 f87e 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	481f      	ldr	r0, [pc, #124]	; (80011f0 <cmt_spi3_write+0xe4>)
 8001174:	2200      	movs	r2, #0
 8001176:	0019      	movs	r1, r3
 8001178:	f002 f877 	bl	800326a <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 800117c:	f7ff ff05 	bl	8000f8a <cmt_spi3_delay>
    cmt_spi3_delay();
 8001180:	f7ff ff03 	bl	8000f8a <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	227f      	movs	r2, #127	; 0x7f
 800118a:	4013      	ands	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff ff29 	bl	8000fe6 <cmt_spi3_send>

    cmt_spi3_send(dat);
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff ff24 	bl	8000fe6 <cmt_spi3_send>

    cmt_spi3_scl_0();
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	0119      	lsls	r1, r3, #4
 80011a2:	2390      	movs	r3, #144	; 0x90
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	2200      	movs	r2, #0
 80011a8:	0018      	movs	r0, r3
 80011aa:	f002 f85e 	bl	800326a <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 80011ae:	f7ff feec 	bl	8000f8a <cmt_spi3_delay>
    cmt_spi3_delay();
 80011b2:	f7ff feea 	bl	8000f8a <cmt_spi3_delay>

    cmt_spi3_csb_1();
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <cmt_spi3_write+0xe4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	0019      	movs	r1, r3
 80011c0:	f002 f853 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	0059      	lsls	r1, r3, #1
 80011c8:	2390      	movs	r3, #144	; 0x90
 80011ca:	05db      	lsls	r3, r3, #23
 80011cc:	2201      	movs	r2, #1
 80011ce:	0018      	movs	r0, r3
 80011d0:	f002 f84b 	bl	800326a <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 80011d4:	f000 fc12 	bl	80019fc <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	01db      	lsls	r3, r3, #7
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <cmt_spi3_write+0xe4>)
 80011de:	2201      	movs	r2, #1
 80011e0:	0019      	movs	r1, r3
 80011e2:	f002 f842 	bl	800326a <HAL_GPIO_WritePin>
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	48000400 	.word	0x48000400

080011f4 <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8001202:	f000 fbc9 	bl	8001998 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	0059      	lsls	r1, r3, #1
 800120a:	2390      	movs	r3, #144	; 0x90
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2201      	movs	r2, #1
 8001210:	0018      	movs	r0, r3
 8001212:	f002 f82a 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	0119      	lsls	r1, r3, #4
 800121a:	2390      	movs	r3, #144	; 0x90
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	2200      	movs	r2, #0
 8001220:	0018      	movs	r0, r3
 8001222:	f002 f822 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	0119      	lsls	r1, r3, #4
 800122a:	2390      	movs	r3, #144	; 0x90
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	2200      	movs	r2, #0
 8001230:	0018      	movs	r0, r3
 8001232:	f002 f81a 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	01db      	lsls	r3, r3, #7
 800123a:	4828      	ldr	r0, [pc, #160]	; (80012dc <cmt_spi3_read+0xe8>)
 800123c:	2201      	movs	r2, #1
 800123e:	0019      	movs	r1, r3
 8001240:	f002 f813 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	4824      	ldr	r0, [pc, #144]	; (80012dc <cmt_spi3_read+0xe8>)
 800124a:	2201      	movs	r2, #1
 800124c:	0019      	movs	r1, r3
 800124e:	f002 f80c 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	4821      	ldr	r0, [pc, #132]	; (80012dc <cmt_spi3_read+0xe8>)
 8001258:	2200      	movs	r2, #0
 800125a:	0019      	movs	r1, r3
 800125c:	f002 f805 	bl	800326a <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001260:	f7ff fe93 	bl	8000f8a <cmt_spi3_delay>
    cmt_spi3_delay();
 8001264:	f7ff fe91 	bl	8000f8a <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	4252      	negs	r2, r2
 8001270:	4313      	orrs	r3, r2
 8001272:	b2db      	uxtb	r3, r3
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff feb6 	bl	8000fe6 <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 800127a:	f000 fbbf 	bl	80019fc <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 800127e:	f7ff fefc 	bl	800107a <cmt_spi3_recv>
 8001282:	0003      	movs	r3, r0
 8001284:	001a      	movs	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	0119      	lsls	r1, r3, #4
 800128e:	2390      	movs	r3, #144	; 0x90
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	2200      	movs	r2, #0
 8001294:	0018      	movs	r0, r3
 8001296:	f001 ffe8 	bl	800326a <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 800129a:	f7ff fe76 	bl	8000f8a <cmt_spi3_delay>
    cmt_spi3_delay();
 800129e:	f7ff fe74 	bl	8000f8a <cmt_spi3_delay>

    cmt_spi3_csb_1();
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <cmt_spi3_read+0xe8>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	0019      	movs	r1, r3
 80012ac:	f001 ffdd 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	0059      	lsls	r1, r3, #1
 80012b4:	2390      	movs	r3, #144	; 0x90
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	2201      	movs	r2, #1
 80012ba:	0018      	movs	r0, r3
 80012bc:	f001 ffd5 	bl	800326a <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 80012c0:	f000 fb9c 	bl	80019fc <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <cmt_spi3_read+0xe8>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	0019      	movs	r1, r3
 80012ce:	f001 ffcc 	bl	800326a <HAL_GPIO_WritePin>
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	48000400 	.word	0x48000400

080012e0 <cmt_spi3_write_fifo>:

void cmt_spi3_write_fifo(const uint8_t *p_buf, uint16_t len)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	000a      	movs	r2, r1
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	01db      	lsls	r3, r3, #7
 80012f2:	483f      	ldr	r0, [pc, #252]	; (80013f0 <cmt_spi3_write_fifo+0x110>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	0019      	movs	r1, r3
 80012f8:	f001 ffb7 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	01db      	lsls	r3, r3, #7
 8001300:	483b      	ldr	r0, [pc, #236]	; (80013f0 <cmt_spi3_write_fifo+0x110>)
 8001302:	2201      	movs	r2, #1
 8001304:	0019      	movs	r1, r3
 8001306:	f001 ffb0 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4838      	ldr	r0, [pc, #224]	; (80013f0 <cmt_spi3_write_fifo+0x110>)
 8001310:	2201      	movs	r2, #1
 8001312:	0019      	movs	r1, r3
 8001314:	f001 ffa9 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4834      	ldr	r0, [pc, #208]	; (80013f0 <cmt_spi3_write_fifo+0x110>)
 800131e:	2201      	movs	r2, #1
 8001320:	0019      	movs	r1, r3
 8001322:	f001 ffa2 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	0119      	lsls	r1, r3, #4
 800132a:	2390      	movs	r3, #144	; 0x90
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	2200      	movs	r2, #0
 8001330:	0018      	movs	r0, r3
 8001332:	f001 ff9a 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	0119      	lsls	r1, r3, #4
 800133a:	2390      	movs	r3, #144	; 0x90
 800133c:	05db      	lsls	r3, r3, #23
 800133e:	2200      	movs	r2, #0
 8001340:	0018      	movs	r0, r3
 8001342:	f001 ff92 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_sda_out();
 8001346:	f000 fb27 	bl	8001998 <cmt_spi3_sda_out>

    for (i = 0; i < len; i++)
 800134a:	230e      	movs	r3, #14
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]
 8001352:	e039      	b.n	80013c8 <cmt_spi3_write_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	01db      	lsls	r3, r3, #7
 8001358:	4825      	ldr	r0, [pc, #148]	; (80013f0 <cmt_spi3_write_fifo+0x110>)
 800135a:	2200      	movs	r2, #0
 800135c:	0019      	movs	r1, r3
 800135e:	f001 ff84 	bl	800326a <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 8001362:	f7ff fe12 	bl	8000f8a <cmt_spi3_delay>
        cmt_spi3_delay();
 8001366:	f7ff fe10 	bl	8000f8a <cmt_spi3_delay>

        cmt_spi3_send(p_buf[i]);
 800136a:	240e      	movs	r4, #14
 800136c:	193b      	adds	r3, r7, r4
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	18d3      	adds	r3, r2, r3
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff fe35 	bl	8000fe6 <cmt_spi3_send>

        cmt_spi3_scl_0();
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	0119      	lsls	r1, r3, #4
 8001380:	2390      	movs	r3, #144	; 0x90
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	2200      	movs	r2, #0
 8001386:	0018      	movs	r0, r3
 8001388:	f001 ff6f 	bl	800326a <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 800138c:	f7ff fe0d 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001390:	f7ff fe0b 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001394:	f7ff fe09 	bl	8000faa <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	01db      	lsls	r3, r3, #7
 800139c:	4814      	ldr	r0, [pc, #80]	; (80013f0 <cmt_spi3_write_fifo+0x110>)
 800139e:	2201      	movs	r2, #1
 80013a0:	0019      	movs	r1, r3
 80013a2:	f001 ff62 	bl	800326a <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 80013a6:	f7ff fe00 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80013aa:	f7ff fdfe 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80013ae:	f7ff fdfc 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80013b2:	f7ff fdfa 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80013b6:	f7ff fdf8 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80013ba:	f7ff fdf6 	bl	8000faa <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	193b      	adds	r3, r7, r4
 80013c4:	3201      	adds	r2, #1
 80013c6:	801a      	strh	r2, [r3, #0]
 80013c8:	230e      	movs	r3, #14
 80013ca:	18fa      	adds	r2, r7, r3
 80013cc:	1cbb      	adds	r3, r7, #2
 80013ce:	8812      	ldrh	r2, [r2, #0]
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3be      	bcc.n	8001354 <cmt_spi3_write_fifo+0x74>
    }

    cmt_spi3_sda_in();
 80013d6:	f000 fb11 	bl	80019fc <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	01db      	lsls	r3, r3, #7
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <cmt_spi3_write_fifo+0x110>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	0019      	movs	r1, r3
 80013e4:	f001 ff41 	bl	800326a <HAL_GPIO_WritePin>
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b005      	add	sp, #20
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	48000400 	.word	0x48000400

080013f4 <cmt_spi3_read_fifo>:

void cmt_spi3_read_fifo(uint8_t *p_buf, uint16_t len)
{
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	000a      	movs	r2, r1
 80013fe:	1cbb      	adds	r3, r7, #2
 8001400:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	01db      	lsls	r3, r3, #7
 8001406:	483f      	ldr	r0, [pc, #252]	; (8001504 <cmt_spi3_read_fifo+0x110>)
 8001408:	2201      	movs	r2, #1
 800140a:	0019      	movs	r1, r3
 800140c:	f001 ff2d 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	01db      	lsls	r3, r3, #7
 8001414:	483b      	ldr	r0, [pc, #236]	; (8001504 <cmt_spi3_read_fifo+0x110>)
 8001416:	2201      	movs	r2, #1
 8001418:	0019      	movs	r1, r3
 800141a:	f001 ff26 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	4838      	ldr	r0, [pc, #224]	; (8001504 <cmt_spi3_read_fifo+0x110>)
 8001424:	2201      	movs	r2, #1
 8001426:	0019      	movs	r1, r3
 8001428:	f001 ff1f 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	4834      	ldr	r0, [pc, #208]	; (8001504 <cmt_spi3_read_fifo+0x110>)
 8001432:	2201      	movs	r2, #1
 8001434:	0019      	movs	r1, r3
 8001436:	f001 ff18 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	0119      	lsls	r1, r3, #4
 800143e:	2390      	movs	r3, #144	; 0x90
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	2200      	movs	r2, #0
 8001444:	0018      	movs	r0, r3
 8001446:	f001 ff10 	bl	800326a <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	0119      	lsls	r1, r3, #4
 800144e:	2390      	movs	r3, #144	; 0x90
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	2200      	movs	r2, #0
 8001454:	0018      	movs	r0, r3
 8001456:	f001 ff08 	bl	800326a <HAL_GPIO_WritePin>

    cmt_spi3_sda_in();
 800145a:	f000 facf 	bl	80019fc <cmt_spi3_sda_in>

    for (i = 0; i < len; i++)
 800145e:	230e      	movs	r3, #14
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2200      	movs	r2, #0
 8001464:	801a      	strh	r2, [r3, #0]
 8001466:	e039      	b.n	80014dc <cmt_spi3_read_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	01db      	lsls	r3, r3, #7
 800146c:	4825      	ldr	r0, [pc, #148]	; (8001504 <cmt_spi3_read_fifo+0x110>)
 800146e:	2200      	movs	r2, #0
 8001470:	0019      	movs	r1, r3
 8001472:	f001 fefa 	bl	800326a <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 8001476:	f7ff fd88 	bl	8000f8a <cmt_spi3_delay>
        cmt_spi3_delay();
 800147a:	f7ff fd86 	bl	8000f8a <cmt_spi3_delay>

        p_buf[i] = cmt_spi3_recv();
 800147e:	250e      	movs	r5, #14
 8001480:	197b      	adds	r3, r7, r5
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	18d4      	adds	r4, r2, r3
 8001488:	f7ff fdf7 	bl	800107a <cmt_spi3_recv>
 800148c:	0003      	movs	r3, r0
 800148e:	7023      	strb	r3, [r4, #0]

        cmt_spi3_scl_0();
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	0119      	lsls	r1, r3, #4
 8001494:	2390      	movs	r3, #144	; 0x90
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	2200      	movs	r2, #0
 800149a:	0018      	movs	r0, r3
 800149c:	f001 fee5 	bl	800326a <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 80014a0:	f7ff fd83 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014a4:	f7ff fd81 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014a8:	f7ff fd7f 	bl	8000faa <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	01db      	lsls	r3, r3, #7
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <cmt_spi3_read_fifo+0x110>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	0019      	movs	r1, r3
 80014b6:	f001 fed8 	bl	800326a <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 80014ba:	f7ff fd76 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014be:	f7ff fd74 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014c2:	f7ff fd72 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014c6:	f7ff fd70 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014ca:	f7ff fd6e 	bl	8000faa <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014ce:	f7ff fd6c 	bl	8000faa <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 80014d2:	197b      	adds	r3, r7, r5
 80014d4:	881a      	ldrh	r2, [r3, #0]
 80014d6:	197b      	adds	r3, r7, r5
 80014d8:	3201      	adds	r2, #1
 80014da:	801a      	strh	r2, [r3, #0]
 80014dc:	230e      	movs	r3, #14
 80014de:	18fa      	adds	r2, r7, r3
 80014e0:	1cbb      	adds	r3, r7, #2
 80014e2:	8812      	ldrh	r2, [r2, #0]
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3be      	bcc.n	8001468 <cmt_spi3_read_fifo+0x74>
    }

    cmt_spi3_sda_in();
 80014ea:	f000 fa87 	bl	80019fc <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	01db      	lsls	r3, r3, #7
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <cmt_spi3_read_fifo+0x110>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	0019      	movs	r1, r3
 80014f8:	f001 feb7 	bl	800326a <HAL_GPIO_WritePin>
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b004      	add	sp, #16
 8001502:	bdb0      	pop	{r4, r5, r7, pc}
 8001504:	48000400 	.word	0x48000400

08001508 <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 800150c:	f7ff fce6 	bl	8000edc <Cmt2300_InitGpio>
    Cmt2300_Init();
 8001510:	f7ff fc88 	bl	8000e24 <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <RF_Init+0x60>)
 8001516:	220c      	movs	r2, #12
 8001518:	0019      	movs	r1, r3
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fcad 	bl	8000e7a <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <RF_Init+0x64>)
 8001522:	220c      	movs	r2, #12
 8001524:	0019      	movs	r1, r3
 8001526:	200c      	movs	r0, #12
 8001528:	f7ff fca7 	bl	8000e7a <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <RF_Init+0x68>)
 800152e:	2208      	movs	r2, #8
 8001530:	0019      	movs	r1, r3
 8001532:	2018      	movs	r0, #24
 8001534:	f7ff fca1 	bl	8000e7a <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <RF_Init+0x6c>)
 800153a:	2218      	movs	r2, #24
 800153c:	0019      	movs	r1, r3
 800153e:	2020      	movs	r0, #32
 8001540:	f7ff fc9b 	bl	8000e7a <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <RF_Init+0x70>)
 8001546:	221d      	movs	r2, #29
 8001548:	0019      	movs	r1, r3
 800154a:	2038      	movs	r0, #56	; 0x38
 800154c:	f7ff fc95 	bl	8000e7a <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <RF_Init+0x74>)
 8001552:	220b      	movs	r2, #11
 8001554:	0019      	movs	r1, r3
 8001556:	2055      	movs	r0, #85	; 0x55
 8001558:	f7ff fc8f 	bl	8000e7a <Cmt2300_ConfigRegBank>

    RF_Config();
 800155c:	f000 f810 	bl	8001580 <RF_Config>
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	080068a0 	.word	0x080068a0
 800156c:	080068ac 	.word	0x080068ac
 8001570:	080068b8 	.word	0x080068b8
 8001574:	080068c0 	.word	0x080068c0
 8001578:	080068d8 	.word	0x080068d8
 800157c:	080068f8 	.word	0x080068f8

08001580 <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff f8c0 	bl	800070a <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 800158a:	2020      	movs	r0, #32
 800158c:	f7ff f868 	bl	8000660 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 8001590:	2107      	movs	r1, #7
 8001592:	200a      	movs	r0, #10
 8001594:	f7ff f874 	bl	8000680 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 8001598:	203f      	movs	r0, #63	; 0x3f
 800159a:	f7ff f8f1 	bl	8000780 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fbfd 	bl	8000d9e <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 80015a4:	f7ff f828 	bl	80005f8 <Cmt2300_GoSleep>
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <RF_GetStatus>:
{
    g_nNextRFState = nStatus;
}

EnumRFStatus RF_GetStatus(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    return g_nNextRFState;
 80015b4:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <RF_GetStatus+0x10>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	20000438 	.word	0x20000438

080015c4 <RF_StartRx>:
{
    return g_nInterrutFlags;
}

void RF_StartRx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	200a      	movs	r0, #10
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	1c0a      	adds	r2, r1, #0
 80015d4:	801a      	strh	r2, [r3, #0]
    g_pRxBuffer = buf;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <RF_StartRx+0x44>)
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	601a      	str	r2, [r3, #0]
    g_nRxLength = len;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <RF_StartRx+0x48>)
 80015de:	183a      	adds	r2, r7, r0
 80015e0:	8812      	ldrh	r2, [r2, #0]
 80015e2:	801a      	strh	r2, [r3, #0]
    g_nRxTimeout = timeout;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <RF_StartRx+0x4c>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]

    memset(g_pRxBuffer, 0, g_nRxLength);
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <RF_StartRx+0x44>)
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <RF_StartRx+0x48>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	001a      	movs	r2, r3
 80015f4:	2100      	movs	r1, #0
 80015f6:	f004 fe5d 	bl	80062b4 <memset>

    g_nNextRFState = RF_STATE_RX_START;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <RF_StartRx+0x50>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000043c 	.word	0x2000043c
 800160c:	20000444 	.word	0x20000444
 8001610:	200000fc 	.word	0x200000fc
 8001614:	20000438 	.word	0x20000438

08001618 <RF_StartTx>:

void RF_StartTx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	200a      	movs	r0, #10
 8001624:	183b      	adds	r3, r7, r0
 8001626:	1c0a      	adds	r2, r1, #0
 8001628:	801a      	strh	r2, [r3, #0]
    g_pTxBuffer = buf;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <RF_StartTx+0x34>)
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	601a      	str	r2, [r3, #0]
    g_nTxLength = len;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <RF_StartTx+0x38>)
 8001632:	183a      	adds	r2, r7, r0
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	801a      	strh	r2, [r3, #0]
    g_nTxTimeout = timeout;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <RF_StartTx+0x3c>)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]

    g_nNextRFState = RF_STATE_TX_START;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <RF_StartTx+0x40>)
 8001640:	2205      	movs	r2, #5
 8001642:	701a      	strb	r2, [r3, #0]
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b004      	add	sp, #16
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000440 	.word	0x20000440
 8001650:	20000446 	.word	0x20000446
 8001654:	20000100 	.word	0x20000100
 8001658:	20000438 	.word	0x20000438

0800165c <RF_Process>:

EnumRFResult RF_Process(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
    EnumRFResult nRes = RF_BUSY;
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]

    switch (g_nNextRFState)
 8001668:	4b8f      	ldr	r3, [pc, #572]	; (80018a8 <RF_Process+0x24c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b09      	cmp	r3, #9
 800166e:	d900      	bls.n	8001672 <RF_Process+0x16>
 8001670:	e10e      	b.n	8001890 <RF_Process+0x234>
 8001672:	009a      	lsls	r2, r3, #2
 8001674:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <RF_Process+0x250>)
 8001676:	18d3      	adds	r3, r2, r3
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	469f      	mov	pc, r3
    {
    case RF_STATE_IDLE:
    {
        nRes = RF_IDLE;
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
        break;
 8001682:	e10a      	b.n	800189a <RF_Process+0x23e>
    }

    case RF_STATE_RX_START:
    {
        Cmt2300_GoStby();
 8001684:	f7fe ffc5 	bl	8000612 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 8001688:	f7ff f905 	bl	8000896 <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableReadFifo();
 800168c:	f7ff f8b2 	bl	80007f4 <Cmt2300_EnableReadFifo>
        Cmt2300_ClearFifo();
 8001690:	f7ff f8ee 	bl	8000870 <Cmt2300_ClearFifo>

        if (false == Cmt2300_GoRx())
 8001694:	f7fe ffd7 	bl	8000646 <Cmt2300_GoRx>
 8001698:	0003      	movs	r3, r0
 800169a:	001a      	movs	r2, r3
 800169c:	2301      	movs	r3, #1
 800169e:	4053      	eors	r3, r2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <RF_Process+0x52>
        {
            g_nNextRFState = RF_STATE_ERROR;
 80016a6:	4b80      	ldr	r3, [pc, #512]	; (80018a8 <RF_Process+0x24c>)
 80016a8:	2209      	movs	r2, #9
 80016aa:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;

            g_nRxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 80016ac:	e0f5      	b.n	800189a <RF_Process+0x23e>
            cmt2300_irq_request=0;
 80016ae:	4b80      	ldr	r3, [pc, #512]	; (80018b0 <RF_Process+0x254>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;
 80016b4:	4b7c      	ldr	r3, [pc, #496]	; (80018a8 <RF_Process+0x24c>)
 80016b6:	2202      	movs	r2, #2
 80016b8:	701a      	strb	r2, [r3, #0]
            g_nRxTimeCount = Cmt2300_GetTickCount();
 80016ba:	4b7e      	ldr	r3, [pc, #504]	; (80018b4 <RF_Process+0x258>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <RF_Process+0x25c>)
 80016c0:	601a      	str	r2, [r3, #0]
        break;
 80016c2:	e0ea      	b.n	800189a <RF_Process+0x23e>
    case RF_STATE_RX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_PKT_OK_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG)) /* Read PKT_OK flag */
#else
        if (cmt2300_irq_request) /* Read INT2, PKT_OK */
 80016c4:	4b7a      	ldr	r3, [pc, #488]	; (80018b0 <RF_Process+0x254>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <RF_Process+0x7e>
#endif
        {
            cmt2300_irq_request=0;
 80016ce:	4b78      	ldr	r3, [pc, #480]	; (80018b0 <RF_Process+0x254>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_DONE;
 80016d4:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <RF_Process+0x24c>)
 80016d6:	2203      	movs	r2, #3
 80016d8:	701a      	strb	r2, [r3, #0]
        }

        if( (INFINITE != g_nRxTimeout) && ((g_nSysTickCount-g_nRxTimeCount) > g_nRxTimeout) )
 80016da:	4b78      	ldr	r3, [pc, #480]	; (80018bc <RF_Process+0x260>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	d100      	bne.n	80016e4 <RF_Process+0x88>
 80016e2:	e0d7      	b.n	8001894 <RF_Process+0x238>
 80016e4:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <RF_Process+0x258>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <RF_Process+0x25c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1ad2      	subs	r2, r2, r3
 80016ee:	4b73      	ldr	r3, [pc, #460]	; (80018bc <RF_Process+0x260>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d800      	bhi.n	80016f8 <RF_Process+0x9c>
 80016f6:	e0cd      	b.n	8001894 <RF_Process+0x238>
            g_nNextRFState = RF_STATE_RX_TIMEOUT;
 80016f8:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <RF_Process+0x24c>)
 80016fa:	2204      	movs	r2, #4
 80016fc:	701a      	strb	r2, [r3, #0]
        
        break;
 80016fe:	e0c9      	b.n	8001894 <RF_Process+0x238>
    }

    case RF_STATE_RX_DONE:
    {
        Cmt2300_GoStby();
 8001700:	f7fe ff87 	bl	8000612 <Cmt2300_GoStby>

        Cmt2300_ReadFifo(g_pRxBuffer, 1);//读取数据长度
 8001704:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <RF_Process+0x264>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff fc19 	bl	8000f42 <Cmt2300_ReadFifo>
           
        PlayLoadlen=g_pRxBuffer[0];
 8001710:	4b6b      	ldr	r3, [pc, #428]	; (80018c0 <RF_Process+0x264>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b6b      	ldr	r3, [pc, #428]	; (80018c4 <RF_Process+0x268>)
 8001718:	701a      	strb	r2, [r3, #0]
        
        /* The length need be smaller than 32 */
        Cmt2300_ReadFifo(g_pRxBuffer, PlayLoadlen);
 800171a:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <RF_Process+0x264>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b69      	ldr	r3, [pc, #420]	; (80018c4 <RF_Process+0x268>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	0019      	movs	r1, r3
 8001726:	0010      	movs	r0, r2
 8001728:	f7ff fc0b 	bl	8000f42 <Cmt2300_ReadFifo>

        g_nInterrutFlags = Cmt2300_ClearInterruptFlags();
 800172c:	f7ff f8b3 	bl	8000896 <Cmt2300_ClearInterruptFlags>
 8001730:	0003      	movs	r3, r0
 8001732:	001a      	movs	r2, r3
 8001734:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <RF_Process+0x26c>)
 8001736:	701a      	strb	r2, [r3, #0]

        //        Cmt2300_GoSleep();
#ifdef USE_CUBEIDE
        rfRecvDoneCallback();
 8001738:	f000 fc70 	bl	800201c <rfRecvDoneCallback>
        led2Toggle();
 800173c:	4b63      	ldr	r3, [pc, #396]	; (80018cc <RF_Process+0x270>)
 800173e:	2201      	movs	r2, #1
 8001740:	2120      	movs	r1, #32
 8001742:	0018      	movs	r0, r3
 8001744:	f001 fd91 	bl	800326a <HAL_GPIO_WritePin>
 8001748:	2032      	movs	r0, #50	; 0x32
 800174a:	f000 f8fb 	bl	8001944 <Delay_Ms>
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <RF_Process+0x270>)
 8001750:	2200      	movs	r2, #0
 8001752:	2120      	movs	r1, #32
 8001754:	0018      	movs	r0, r3
 8001756:	f001 fd88 	bl	800326a <HAL_GPIO_WritePin>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 800175a:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <RF_Process+0x24c>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_DONE;
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	2202      	movs	r2, #2
 8001764:	701a      	strb	r2, [r3, #0]
        break;
 8001766:	e098      	b.n	800189a <RF_Process+0x23e>
    case RF_STATE_RX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();
        //
#ifdef USE_CUBEIDE
    	rfRecvTimeoutCallback();
 8001768:	f000 fc84 	bl	8002074 <rfRecvTimeoutCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 800176c:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <RF_Process+0x24c>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_TIMEOUT;
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	2203      	movs	r2, #3
 8001776:	701a      	strb	r2, [r3, #0]

        break;
 8001778:	e08f      	b.n	800189a <RF_Process+0x23e>
    }

    case RF_STATE_TX_START:
    {
        Cmt2300_GoStby();
 800177a:	f7fe ff4a 	bl	8000612 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 800177e:	f7ff f88a 	bl	8000896 <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableWriteFifo();
 8001782:	f7ff f856 	bl	8000832 <Cmt2300_EnableWriteFifo>
        Cmt2300_ClearFifo();
 8001786:	f7ff f873 	bl	8000870 <Cmt2300_ClearFifo>

        Cmt2300_SetPayloadLength(g_nTxLength); //发射数据长度
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <RF_Process+0x274>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff facc 	bl	8000d2c <Cmt2300_SetPayloadLength>
      
        Cmt2300_WriteFifo(g_pTxBuffer, g_nTxLength);
 8001794:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <RF_Process+0x278>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <RF_Process+0x274>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	0019      	movs	r1, r3
 800179e:	0010      	movs	r0, r2
 80017a0:	f7ff fbe1 	bl	8000f66 <Cmt2300_WriteFifo>

        if (0 == (CMT2300_MASK_TX_FIFO_NMTY_FLG & Cmt2300_ReadReg(CMT2300_CUS_FIFO_FLAG)))
 80017a4:	206e      	movs	r0, #110	; 0x6e
 80017a6:	f7ff fba0 	bl	8000eea <Cmt2300_ReadReg>
 80017aa:	0003      	movs	r3, r0
 80017ac:	001a      	movs	r2, r3
 80017ae:	2302      	movs	r3, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <RF_Process+0x162>
        {
            g_nNextRFState = RF_STATE_ERROR;
 80017b8:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <RF_Process+0x24c>)
 80017ba:	2209      	movs	r2, #9
 80017bc:	701a      	strb	r2, [r3, #0]
        }

        if (false == Cmt2300_GoTx())
 80017be:	f7fe ff35 	bl	800062c <Cmt2300_GoTx>
 80017c2:	0003      	movs	r3, r0
 80017c4:	001a      	movs	r2, r3
 80017c6:	2301      	movs	r3, #1
 80017c8:	4053      	eors	r3, r2
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <RF_Process+0x17c>
        {
            g_nNextRFState = RF_STATE_ERROR;
 80017d0:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <RF_Process+0x24c>)
 80017d2:	2209      	movs	r2, #9
 80017d4:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;

            g_nTxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 80017d6:	e060      	b.n	800189a <RF_Process+0x23e>
            cmt2300_irq_request=0;
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <RF_Process+0x254>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <RF_Process+0x24c>)
 80017e0:	2206      	movs	r2, #6
 80017e2:	701a      	strb	r2, [r3, #0]
            g_nTxTimeCount = Cmt2300_GetTickCount();
 80017e4:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <RF_Process+0x258>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <RF_Process+0x27c>)
 80017ea:	601a      	str	r2, [r3, #0]
        break;
 80017ec:	e055      	b.n	800189a <RF_Process+0x23e>
    case RF_STATE_TX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
#else
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
 80017ee:	206a      	movs	r0, #106	; 0x6a
 80017f0:	f7ff fb7b 	bl	8000eea <Cmt2300_ReadReg>
 80017f4:	0003      	movs	r3, r0
 80017f6:	001a      	movs	r2, r3
 80017f8:	2308      	movs	r3, #8
 80017fa:	4013      	ands	r3, r2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <RF_Process+0x1ac>
#endif
        {         
          g_nNextRFState = RF_STATE_TX_DONE;
 8001802:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <RF_Process+0x24c>)
 8001804:	2207      	movs	r2, #7
 8001806:	701a      	strb	r2, [r3, #0]
        }
        
        if( (INFINITE != g_nTxTimeout) && ((g_nSysTickCount-g_nTxTimeCount) > g_nTxTimeout) )
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <RF_Process+0x280>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	d043      	beq.n	8001898 <RF_Process+0x23c>
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <RF_Process+0x258>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <RF_Process+0x27c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	1ad2      	subs	r2, r2, r3
 800181a:	4b30      	ldr	r3, [pc, #192]	; (80018dc <RF_Process+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d93a      	bls.n	8001898 <RF_Process+0x23c>
            g_nNextRFState = RF_STATE_TX_TIMEOUT;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <RF_Process+0x24c>)
 8001824:	2208      	movs	r2, #8
 8001826:	701a      	strb	r2, [r3, #0]

        break;
 8001828:	e036      	b.n	8001898 <RF_Process+0x23c>
    }

    case RF_STATE_TX_DONE:
    {
        Cmt2300_ClearInterruptFlags();
 800182a:	f7ff f834 	bl	8000896 <Cmt2300_ClearInterruptFlags>
        //Cmt2300_GoSleep();
#ifdef USE_CUBEIDE
        rfSendDoneCallback();
 800182e:	f000 fc0b 	bl	8002048 <rfSendDoneCallback>
        led1Toggle();
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <RF_Process+0x270>)
 8001834:	2201      	movs	r2, #1
 8001836:	2110      	movs	r1, #16
 8001838:	0018      	movs	r0, r3
 800183a:	f001 fd16 	bl	800326a <HAL_GPIO_WritePin>
 800183e:	2032      	movs	r0, #50	; 0x32
 8001840:	f000 f880 	bl	8001944 <Delay_Ms>
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <RF_Process+0x270>)
 8001846:	2200      	movs	r2, #0
 8001848:	2110      	movs	r1, #16
 800184a:	0018      	movs	r0, r3
 800184c:	f001 fd0d 	bl	800326a <HAL_GPIO_WritePin>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <RF_Process+0x24c>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_DONE;
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	2204      	movs	r2, #4
 800185a:	701a      	strb	r2, [r3, #0]
        break;
 800185c:	e01d      	b.n	800189a <RF_Process+0x23e>
    }

    case RF_STATE_TX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();      
        g_nNextRFState = RF_STATE_IDLE;
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <RF_Process+0x24c>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_TIMEOUT;
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	2205      	movs	r2, #5
 8001868:	701a      	strb	r2, [r3, #0]
        break;
 800186a:	e016      	b.n	800189a <RF_Process+0x23e>
    }

    case RF_STATE_ERROR:
    {
        Cmt2300_SoftReset();
 800186c:	f7fe fe66 	bl	800053c <Cmt2300_SoftReset>
        Delay_Ms(10);
 8001870:	200a      	movs	r0, #10
 8001872:	f000 f867 	bl	8001944 <Delay_Ms>

        Cmt2300_GoStby();
 8001876:	f7fe fecc 	bl	8000612 <Cmt2300_GoStby>
        RF_Config();
 800187a:	f7ff fe81 	bl	8001580 <RF_Config>
#ifdef USE_CUBEIDE
        rfRecvErrorCallback();
 800187e:	f000 fc0f 	bl	80020a0 <rfRecvErrorCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <RF_Process+0x24c>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
        nRes = RF_ERROR;
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	2206      	movs	r2, #6
 800188c:	701a      	strb	r2, [r3, #0]
        break;
 800188e:	e004      	b.n	800189a <RF_Process+0x23e>
    }

    default:
        break;
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	e002      	b.n	800189a <RF_Process+0x23e>
        break;
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	e000      	b.n	800189a <RF_Process+0x23e>
        break;
 8001898:	46c0      	nop			; (mov r8, r8)
    }

    return nRes;
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	20000438 	.word	0x20000438
 80018ac:	08006904 	.word	0x08006904
 80018b0:	20000452 	.word	0x20000452
 80018b4:	20000454 	.word	0x20000454
 80018b8:	20000448 	.word	0x20000448
 80018bc:	200000fc 	.word	0x200000fc
 80018c0:	2000043c 	.word	0x2000043c
 80018c4:	20000450 	.word	0x20000450
 80018c8:	20000451 	.word	0x20000451
 80018cc:	48000400 	.word	0x48000400
 80018d0:	20000446 	.word	0x20000446
 80018d4:	20000440 	.word	0x20000440
 80018d8:	2000044c 	.word	0x2000044c
 80018dc:	20000100 	.word	0x20000100

080018e0 <bspInit>:

/*----------------------------------------------------------------
 *  FUNCTION DEFINITION
 *--------------------------------------------------------------*/
void bspInit(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
    uartInit(BSP_TTL_CHANNEL1);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 f95b 	bl	8001ba0 <uartInit>
    
    RF_Init();
 80018ea:	f7ff fe0d 	bl	8001508 <RF_Init>
//    {
//        led2On();
//    }

    /* level7: 20dbm */
    Cmt2300_ConfigTxPower(7);
 80018ee:	2007      	movs	r0, #7
 80018f0:	f7ff f9b4 	bl	8000c5c <Cmt2300_ConfigTxPower>
    /* rate:1.2kbps */
    Cmt2300_ConfigDataRate(rf_rate_1K2);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff f8db 	bl	8000ab0 <Cmt2300_ConfigDataRate>
    /* packet type */
    Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7fe fe5d 	bl	80005ba <Cmt2300_ConfigPktLenthType>
    /* packet mode */
    Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 8001900:	2002      	movs	r0, #2
 8001902:	f7ff f98b 	bl	8000c1c <Cmt2300_ConfigDataMode>
    /* enable fifo */
    Cmt2300_EnableFifoMerge(true);
 8001906:	2001      	movs	r0, #1
 8001908:	f7fe ff4a 	bl	80007a0 <Cmt2300_EnableFifoMerge>

    /* disable rf time */
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 800190c:	2301      	movs	r3, #1
 800190e:	425a      	negs	r2, r3
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <bspInit+0x5c>)
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff fe55 	bl	80015c4 <RF_StartRx>
    rfTimerEnable();
 800191a:	f000 f8b5 	bl	8001a88 <rfTimerEnable>
    led2Off();
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <bspInit+0x60>)
 8001920:	2200      	movs	r2, #0
 8001922:	2120      	movs	r1, #32
 8001924:	0018      	movs	r0, r3
 8001926:	f001 fca0 	bl	800326a <HAL_GPIO_WritePin>
    led2Off();
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <bspInit+0x60>)
 800192c:	2200      	movs	r2, #0
 800192e:	2120      	movs	r1, #32
 8001930:	0018      	movs	r0, r3
 8001932:	f001 fc9a 	bl	800326a <HAL_GPIO_WritePin>
}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000029c 	.word	0x2000029c
 8001940:	48000400 	.word	0x48000400

08001944 <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e00c      	b.n	8001974 <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	e002      	b.n	8001966 <Delay_Ms+0x22>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	3301      	adds	r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <Delay_Ms+0x44>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d9f8      	bls.n	8001960 <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3301      	adds	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	d3ee      	bcc.n	800195a <Delay_Ms+0x16>
  }
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	b004      	add	sp, #16
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	000011bb 	.word	0x000011bb

0800198c <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	0018      	movs	r0, r3
 80019a2:	2314      	movs	r3, #20
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f004 fc84 	bl	80062b4 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <cmt_spi3_sda_out+0x60>)
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <cmt_spi3_sda_out+0x60>)
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	0289      	lsls	r1, r1, #10
 80019b6:	430a      	orrs	r2, r1
 80019b8:	615a      	str	r2, [r3, #20]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <cmt_spi3_sda_out+0x60>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	0052      	lsls	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2201      	movs	r2, #1
 80019d4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2203      	movs	r2, #3
 80019e0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 80019e2:	1d3a      	adds	r2, r7, #4
 80019e4:	2390      	movs	r3, #144	; 0x90
 80019e6:	05db      	lsls	r3, r3, #23
 80019e8:	0011      	movs	r1, r2
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 f9e0 	bl	8002db0 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000

080019fc <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	0018      	movs	r0, r3
 8001a06:	2314      	movs	r3, #20
 8001a08:	001a      	movs	r2, r3
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f004 fc52 	bl	80062b4 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <cmt_spi3_sda_in+0x5c>)
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <cmt_spi3_sda_in+0x5c>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0289      	lsls	r1, r1, #10
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <cmt_spi3_sda_in+0x5c>)
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	029b      	lsls	r3, r3, #10
 8001a26:	4013      	ands	r3, r2
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	0052      	lsls	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001a40:	1d3a      	adds	r2, r7, #4
 8001a42:	2390      	movs	r3, #144	; 0x90
 8001a44:	05db      	lsls	r3, r3, #23
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f001 f9b1 	bl	8002db0 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b006      	add	sp, #24
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_GPIO_EXTI_Callback>:
#endif
}

#ifdef USE_CUBEIDE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	0002      	movs	r2, r0
 8001a64:	1dbb      	adds	r3, r7, #6
 8001a66:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 8001a68:	1dbb      	adds	r3, r7, #6
 8001a6a:	881a      	ldrh	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	015b      	lsls	r3, r3, #5
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d102      	bne.n	8001a7a <HAL_GPIO_EXTI_Callback+0x1e>
//        else if (ret == RF_STATE_TX_WAIT)
//        {
//            rfSendDoneCallback();
//        }
        
		cmt2300_irq_request = 1;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x28>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
	}
}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000452 	.word	0x20000452

08001a88 <rfTimerEnable>:
/**
 * @brief rf timer enable
 * 
 */
void rfTimerEnable(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim16);
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <rfTimerEnable+0x14>)
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f002 f9a2 	bl	8003dd8 <HAL_TIM_Base_Start_IT>
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	2000067c 	.word	0x2000067c

08001aa0 <HAL_TIM_PeriodElapsedCallback>:
 * 
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim14.Instance)
    //	{
    //		time10ms_flag = 1;
    //		timer10InterruptHandler();
    //	}
    if(htim->Instance == htim16.Instance)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d101      	bne.n	8001ab8 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        HAL_Timer16Callback();
 8001ab4:	f000 fb0a 	bl	80020cc <HAL_Timer16Callback>
    }
    if (htim->Instance == htim17.Instance) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d103      	bne.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x2c>
        uartTimerIrqHandler(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fa00 	bl	8001ecc <uartTimerIrqHandler>
    }
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000067c 	.word	0x2000067c
 8001ad8:	200006c4 	.word	0x200006c4

08001adc <HAL_SysTick_Handler>:
 * 
 * @param None
 * @retval None
 */
void HAL_SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_SysTick_Handler+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_SysTick_Handler+0x14>)
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000454 	.word	0x20000454

08001af4 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <uartInitRxFifo>:
 * 
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	011a      	lsls	r2, r3, #4
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <uartInitRxFifo+0x34>)
 8001b28:	18d0      	adds	r0, r2, r3
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	025a      	lsls	r2, r3, #9
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <uartInitRxFifo+0x38>)
 8001b32:	18d3      	adds	r3, r2, r3
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	f003 fe60 	bl	80057fe <kfifo_init>
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	2000065c 	.word	0x2000065c
 8001b4c:	2000045c 	.word	0x2000045c

08001b50 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	1dbb      	adds	r3, r7, #6
 8001b5c:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8001b5e:	2517      	movs	r5, #23
 8001b60:	197b      	adds	r3, r7, r5
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 8001b66:	197c      	adds	r4, r7, r5
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	881a      	ldrh	r2, [r3, #0]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f002 fc99 	bl	80044a8 <HAL_UART_Receive_IT>
 8001b76:	0003      	movs	r3, r0
 8001b78:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8001b7a:	197b      	adds	r3, r7, r5
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	2120      	movs	r1, #32
 8001b88:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2278      	movs	r2, #120	; 0x78
 8001b8e:	2100      	movs	r1, #0
 8001b90:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8001b92:	2317      	movs	r3, #23
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	781b      	ldrb	r3, [r3, #0]
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b006      	add	sp, #24
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ba0 <uartInit>:
 * 
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff ffaf 	bl	8001b14 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <uartInit+0x60>)
 8001bbc:	0052      	lsls	r2, r2, #1
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <uartInit+0x64>)
 8001bc8:	0052      	lsls	r2, r2, #1
 8001bca:	2100      	movs	r1, #0
 8001bcc:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <uartInit+0x68>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <uartInit+0x6c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <uartInit+0x70>)
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	18d3      	adds	r3, r2, r3
 8001be4:	3304      	adds	r3, #4
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <uartInit+0x74>)
 8001bee:	18d3      	adds	r3, r2, r3
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	f7ff ffac 	bl	8001b50 <UART_Receive_IT>
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000066c 	.word	0x2000066c
 8001c04:	20000670 	.word	0x20000670
 8001c08:	20000674 	.word	0x20000674
 8001c0c:	20000678 	.word	0x20000678
 8001c10:	20000104 	.word	0x20000104
 8001c14:	20000458 	.word	0x20000458

08001c18 <uartRecovery>:
 * 
 * @param channel 
 * @retval None
 */
static void uartRecovery(uartChannel_t channel)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	0002      	movs	r2, r0
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <uartRecovery+0x34>)
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	18d3      	adds	r3, r2, r3
 8001c2e:	3304      	adds	r3, #4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f002 fb5a 	bl	80042ec <HAL_UART_DeInit>
    uartInit(channel);
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff ffaf 	bl	8001ba0 <uartInit>
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	20000104 	.word	0x20000104

08001c50 <uartSendData>:
 * @param data
 * @param length
 * @retval None
 */
void uartSendData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6039      	str	r1, [r7, #0]
 8001c58:	0011      	movs	r1, r2
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	1c02      	adds	r2, r0, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	1c0a      	adds	r2, r1, #0
 8001c64:	801a      	strh	r2, [r3, #0]
    uart_tx_status[channel] = BSP_UART_TX_START;
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <uartSendData+0x54>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
	// if (HAL_UART_Transmit_DMA(uartPara[channel].uart_handle_addr, data, length) != HAL_OK)
	/* use IT mode send data */
	// if (HAL_UART_Transmit_IT( uartPara[channel].uart_handle_addr, data, length ) != HAL_OK)
	/* use poll mode send data */
	if (HAL_UART_Transmit(uartPara[channel].uart_handle_addr, data, length, 0xFFFF) != HAL_OK)
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <uartSendData+0x58>)
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	18d3      	adds	r3, r2, r3
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	4c0b      	ldr	r4, [pc, #44]	; (8001cac <uartSendData+0x5c>)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	0023      	movs	r3, r4
 8001c88:	f002 fb6e 	bl	8004368 <HAL_UART_Transmit>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d004      	beq.n	8001c9a <uartSendData+0x4a>
    {
        uartRecovery(channel);
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff ffbf 	bl	8001c18 <uartRecovery>
    }
}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b003      	add	sp, #12
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	20000674 	.word	0x20000674
 8001ca8:	20000104 	.word	0x20000104
 8001cac:	0000ffff 	.word	0x0000ffff

08001cb0 <HAL_UART_TxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001cb8:	230f      	movs	r3, #15
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_UART_TxCpltCallback+0x54>)
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	58d2      	ldr	r2, [r2, r3]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d105      	bne.n	8001ce2 <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <HAL_UART_TxCpltCallback+0x58>)
 8001cdc:	2102      	movs	r1, #2
 8001cde:	54d1      	strb	r1, [r2, r3]
            break;
 8001ce0:	e00b      	b.n	8001cfa <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	3201      	adds	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	230f      	movs	r3, #15
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0e4      	beq.n	8001cc2 <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	20000104 	.word	0x20000104
 8001d08:	20000674 	.word	0x20000674

08001d0c <uartGetData>:
 * @param data 
 * @param length 
 * @retval uint32_t 
 */
uint32_t uartGetData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6039      	str	r1, [r7, #0]
 8001d14:	0011      	movs	r1, r2
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	1c02      	adds	r2, r0, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	1c0a      	adds	r2, r1, #0
 8001d20:	801a      	strh	r2, [r3, #0]
    uint32_t ret = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]

    if (BSP_UART_RX_COMPLETED == uart_rx_status[channel]) 
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <uartGetData+0x54>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d10d      	bne.n	8001d50 <uartGetData+0x44>
	{
		ret = kfifo_out(&uart_rx_fifo[channel], data, length);
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	011a      	lsls	r2, r3, #4
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <uartGetData+0x58>)
 8001d3c:	18d0      	adds	r0, r2, r3
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	881a      	ldrh	r2, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	0019      	movs	r1, r3
 8001d46:	f003 fdfb 	bl	8005940 <kfifo_out>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	e001      	b.n	8001d54 <uartGetData+0x48>
	}    
	else
	{
		ret = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
	}

    return ret;
 8001d54:	68fb      	ldr	r3, [r7, #12]
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b004      	add	sp, #16
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	20000678 	.word	0x20000678
 8001d64:	2000065c 	.word	0x2000065c

08001d68 <uartResetData>:
 * 
 * @param channel 
 * @retval None
 */
void uartResetData(uartChannel_t channel)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	0002      	movs	r2, r0
 8001d70:	1dfb      	adds	r3, r7, #7
 8001d72:	701a      	strb	r2, [r3, #0]
    kfifo_reset(&uart_rx_fifo[channel]);
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	011a      	lsls	r2, r3, #4
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <uartResetData+0x3c>)
 8001d7c:	18d3      	adds	r3, r2, r3
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff feb8 	bl	8001af4 <kfifo_reset>
    uart_rx_size[channel] = 0;
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <uartResetData+0x40>)
 8001d8a:	0052      	lsls	r2, r2, #1
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	52d1      	strh	r1, [r2, r3]
    uart_rx_status[channel] = BSP_UART_IDLE;
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4a05      	ldr	r2, [pc, #20]	; (8001dac <uartResetData+0x44>)
 8001d96:	2100      	movs	r1, #0
 8001d98:	54d1      	strb	r1, [r2, r3]
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b002      	add	sp, #8
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	2000065c 	.word	0x2000065c
 8001da8:	20000670 	.word	0x20000670
 8001dac:	20000678 	.word	0x20000678

08001db0 <HAL_UART_RxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001db8:	230f      	movs	r3, #15
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e072      	b.n	8001ea8 <HAL_UART_RxCpltCallback+0xf8>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8001dc2:	240f      	movs	r4, #15
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <HAL_UART_RxCpltCallback+0x108>)
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	58d2      	ldr	r2, [r2, r3]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d162      	bne.n	8001e9c <HAL_UART_RxCpltCallback+0xec>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4a38      	ldr	r2, [pc, #224]	; (8001ebc <HAL_UART_RxCpltCallback+0x10c>)
 8001ddc:	2103      	movs	r1, #3
 8001dde:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <HAL_UART_RxCpltCallback+0x108>)
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	18d3      	adds	r3, r2, r3
 8001dea:	3308      	adds	r3, #8
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8001df2:	193b      	adds	r3, r7, r4
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <HAL_UART_RxCpltCallback+0x108>)
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	18d3      	adds	r3, r2, r3
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2201      	movs	r2, #1
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <HAL_UART_RxCpltCallback+0x108>)
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	18d3      	adds	r3, r2, r3
 8001e0e:	330c      	adds	r3, #12
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 ffe0 	bl	8003dd8 <HAL_TIM_Base_Start_IT>
            if (uart_rx_counter[i] >= (UART_BUFFER_SIZE-1))
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_UART_RxCpltCallback+0x110>)
 8001e1e:	0052      	lsls	r2, r2, #1
 8001e20:	5ad2      	ldrh	r2, [r2, r3]
 8001e22:	23ff      	movs	r3, #255	; 0xff
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d90d      	bls.n	8001e46 <HAL_UART_RxCpltCallback+0x96>
            {
            	kfifo_reset(&uart_rx_fifo[i]);
 8001e2a:	193b      	adds	r3, r7, r4
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	011a      	lsls	r2, r3, #4
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_UART_RxCpltCallback+0x114>)
 8001e32:	18d3      	adds	r3, r2, r3
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fe5d 	bl	8001af4 <kfifo_reset>
            	uart_rx_counter[i] = 0;
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_UART_RxCpltCallback+0x110>)
 8001e40:	0052      	lsls	r2, r2, #1
 8001e42:	2100      	movs	r1, #0
 8001e44:	52d1      	strh	r1, [r2, r3]
            }
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 8001e46:	210f      	movs	r1, #15
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	011a      	lsls	r2, r3, #4
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_UART_RxCpltCallback+0x114>)
 8001e50:	18d0      	adds	r0, r2, r3
 8001e52:	000c      	movs	r4, r1
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_UART_RxCpltCallback+0x118>)
 8001e5a:	18d3      	adds	r3, r2, r3
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	0019      	movs	r1, r3
 8001e60:	f003 fd47 	bl	80058f2 <kfifo_in>
            uart_rx_counter[i]++;
 8001e64:	0020      	movs	r0, r4
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <HAL_UART_RxCpltCallback+0x110>)
 8001e6c:	0059      	lsls	r1, r3, #1
 8001e6e:	5a8a      	ldrh	r2, [r1, r2]
 8001e70:	3201      	adds	r2, #1
 8001e72:	b291      	uxth	r1, r2
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_UART_RxCpltCallback+0x110>)
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 8001e7a:	0001      	movs	r1, r0
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_UART_RxCpltCallback+0x108>)
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	18d3      	adds	r3, r2, r3
 8001e86:	3304      	adds	r3, #4
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	187b      	adds	r3, r7, r1
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_UART_RxCpltCallback+0x118>)
 8001e90:	18d3      	adds	r3, r2, r3
 8001e92:	2201      	movs	r2, #1
 8001e94:	0019      	movs	r1, r3
 8001e96:	f7ff fe5b 	bl	8001b50 <UART_Receive_IT>
            return;
 8001e9a:	e00a      	b.n	8001eb2 <HAL_UART_RxCpltCallback+0x102>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	3201      	adds	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d087      	beq.n	8001dc2 <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b005      	add	sp, #20
 8001eb6:	bd90      	pop	{r4, r7, pc}
 8001eb8:	20000104 	.word	0x20000104
 8001ebc:	20000678 	.word	0x20000678
 8001ec0:	2000066c 	.word	0x2000066c
 8001ec4:	2000065c 	.word	0x2000065c
 8001ec8:	20000458 	.word	0x20000458

08001ecc <uartTimerIrqHandler>:
 * 
 * @param htim 
 * @retval None
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e060      	b.n	8001fa0 <uartTimerIrqHandler+0xd4>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 8001ede:	210f      	movs	r1, #15
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4a33      	ldr	r2, [pc, #204]	; (8001fb4 <uartTimerIrqHandler+0xe8>)
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	18d3      	adds	r3, r2, r3
 8001eea:	3308      	adds	r3, #8
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d14e      	bne.n	8001f94 <uartTimerIrqHandler+0xc8>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 8001ef6:	000c      	movs	r4, r1
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <uartTimerIrqHandler+0xe8>)
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	18d3      	adds	r3, r2, r3
 8001f02:	330c      	adds	r3, #12
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f001 ffb2 	bl	8003e70 <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8001f0c:	0020      	movs	r0, r4
 8001f0e:	183b      	adds	r3, r7, r0
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <uartTimerIrqHandler+0xec>)
 8001f14:	2104      	movs	r1, #4
 8001f16:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8001f18:	183b      	adds	r3, r7, r0
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <uartTimerIrqHandler+0xf0>)
 8001f1e:	0052      	lsls	r2, r2, #1
 8001f20:	5ad1      	ldrh	r1, [r2, r3]
 8001f22:	183b      	adds	r3, r7, r0
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <uartTimerIrqHandler+0xf4>)
 8001f28:	0052      	lsls	r2, r2, #1
 8001f2a:	5ad3      	ldrh	r3, [r2, r3]
 8001f2c:	183a      	adds	r2, r7, r0
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	18cb      	adds	r3, r1, r3
 8001f32:	b299      	uxth	r1, r3
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <uartTimerIrqHandler+0xf0>)
 8001f36:	0052      	lsls	r2, r2, #1
 8001f38:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 8001f3a:	183b      	adds	r3, r7, r0
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <uartTimerIrqHandler+0xf0>)
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	5ad2      	ldrh	r2, [r2, r3]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d919      	bls.n	8001f80 <uartTimerIrqHandler+0xb4>
            {
            	kfifo_reset(&uart_rx_fifo[i]);
 8001f4c:	0004      	movs	r4, r0
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	011a      	lsls	r2, r3, #4
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <uartTimerIrqHandler+0xf8>)
 8001f56:	18d3      	adds	r3, r2, r3
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fdcb 	bl	8001af4 <kfifo_reset>
            	uart_rx_size[i] = uart_rx_counter[i];
 8001f5e:	0020      	movs	r0, r4
 8001f60:	183b      	adds	r3, r7, r0
 8001f62:	7819      	ldrb	r1, [r3, #0]
 8001f64:	183b      	adds	r3, r7, r0
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <uartTimerIrqHandler+0xf4>)
 8001f6a:	0049      	lsls	r1, r1, #1
 8001f6c:	5ac9      	ldrh	r1, [r1, r3]
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <uartTimerIrqHandler+0xf0>)
 8001f70:	0052      	lsls	r2, r2, #1
 8001f72:	52d1      	strh	r1, [r2, r3]
            	uart_rx_size[i] = 0;
 8001f74:	183b      	adds	r3, r7, r0
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <uartTimerIrqHandler+0xf0>)
 8001f7a:	0052      	lsls	r2, r2, #1
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 8001f80:	230f      	movs	r3, #15
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <uartTimerIrqHandler+0xf4>)
 8001f88:	0052      	lsls	r2, r2, #1
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	52d1      	strh	r1, [r2, r3]

#ifdef USE_CUBEIDE
            uartRecvDoneCallback();
 8001f8e:	f000 f8a3 	bl	80020d8 <uartRecvDoneCallback>
#endif
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 8001f92:	e00b      	b.n	8001fac <uartTimerIrqHandler+0xe0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f94:	210f      	movs	r1, #15
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	3201      	adds	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d099      	beq.n	8001ede <uartTimerIrqHandler+0x12>
        }
    }
}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b005      	add	sp, #20
 8001fb2:	bd90      	pop	{r4, r7, pc}
 8001fb4:	20000104 	.word	0x20000104
 8001fb8:	20000678 	.word	0x20000678
 8001fbc:	20000670 	.word	0x20000670
 8001fc0:	2000066c 	.word	0x2000066c
 8001fc4:	2000065c 	.word	0x2000065c

08001fc8 <HAL_UART_ErrorCallback>:
 * 
 * @param huart
 * @retval None 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e014      	b.n	8002004 <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 8001fda:	210f      	movs	r1, #15
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_UART_ErrorCallback+0x50>)
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	58d2      	ldr	r2, [r2, r3]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d104      	bne.n	8001ff8 <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff fe10 	bl	8001c18 <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	187b      	adds	r3, r7, r1
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	3201      	adds	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	230f      	movs	r3, #15
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0e5      	beq.n	8001fda <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000104 	.word	0x20000104

0800201c <rfRecvDoneCallback>:
/**
 * @brief rf recv done callback
 * 
 */
void rfRecvDoneCallback(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvEvent, NULL});
 8002022:	003b      	movs	r3, r7
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	003b      	movs	r3, r7
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	003a      	movs	r2, r7
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <rfRecvDoneCallback+0x28>)
 8002032:	0011      	movs	r1, r2
 8002034:	0018      	movs	r0, r3
 8002036:	f003 fce7 	bl	8005a08 <mq_push>
}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	20000328 	.word	0x20000328

08002048 <rfSendDoneCallback>:
/**
 * @brief rf send done callback
 * 
 */
void rfSendDoneCallback(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfSendEvent, NULL});
 800204e:	003b      	movs	r3, r7
 8002050:	2203      	movs	r2, #3
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	003b      	movs	r3, r7
 8002056:	2200      	movs	r2, #0
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	003a      	movs	r2, r7
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <rfSendDoneCallback+0x28>)
 800205e:	0011      	movs	r1, r2
 8002060:	0018      	movs	r0, r3
 8002062:	f003 fcd1 	bl	8005a08 <mq_push>
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	20000328 	.word	0x20000328

08002074 <rfRecvTimeoutCallback>:
/**
 * @brief 
 * 
 */
void rfRecvTimeoutCallback(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvTimeoutEvent, NULL});
 800207a:	003b      	movs	r3, r7
 800207c:	2205      	movs	r2, #5
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	003b      	movs	r3, r7
 8002082:	2200      	movs	r2, #0
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	003a      	movs	r2, r7
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <rfRecvTimeoutCallback+0x28>)
 800208a:	0011      	movs	r1, r2
 800208c:	0018      	movs	r0, r3
 800208e:	f003 fcbb 	bl	8005a08 <mq_push>
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	20000328 	.word	0x20000328

080020a0 <rfRecvErrorCallback>:
/**
 * @brief 
 * 
 */
void rfRecvErrorCallback(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvErrorEvent, NULL});
 80020a6:	003b      	movs	r3, r7
 80020a8:	2204      	movs	r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	003b      	movs	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	003a      	movs	r2, r7
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <rfRecvErrorCallback+0x28>)
 80020b6:	0011      	movs	r1, r2
 80020b8:	0018      	movs	r0, r3
 80020ba:	f003 fca5 	bl	8005a08 <mq_push>
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	20000328 	.word	0x20000328

080020cc <HAL_Timer16Callback>:
/**
 * @brief timer16 callback,10ms
 *
 */
void HAL_Timer16Callback(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
//    }
//    else if (RF_STATE_ERROR == rfState)
//    {
//        rfRecvErrorCallback();
//    }
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <uartRecvDoneCallback>:
/**
 * @brief uart recv done callback
 * 
 */
void uartRecvDoneCallback(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){uartRecvEvent, NULL});
 80020de:	003b      	movs	r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	003b      	movs	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	003a      	movs	r2, r7
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <uartRecvDoneCallback+0x28>)
 80020ee:	0011      	movs	r1, r2
 80020f0:	0018      	movs	r0, r3
 80020f2:	f003 fc89 	bl	8005a08 <mq_push>
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	20000328 	.word	0x20000328

08002104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002108:	f000 fc60 	bl	80029cc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210c:	f000 f80f 	bl	800212e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002110:	f000 f91c 	bl	800234c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002114:	f000 f8ba 	bl	800228c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002118:	f000 f8e8 	bl	80022ec <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800211c:	f000 f88e 	bl	800223c <MX_TIM17_Init>
  MX_TIM16_Init();
 8002120:	f000 f864 	bl	80021ec <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  bspInit();
 8002124:	f7ff fbdc 	bl	80018e0 <bspInit>
  stateActuator();
 8002128:	f7fe f9d6 	bl	80004d8 <stateActuator>
//  messageQueueTest();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800212c:	e7fe      	b.n	800212c <main+0x28>

0800212e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800212e:	b590      	push	{r4, r7, lr}
 8002130:	b095      	sub	sp, #84	; 0x54
 8002132:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002134:	2420      	movs	r4, #32
 8002136:	193b      	adds	r3, r7, r4
 8002138:	0018      	movs	r0, r3
 800213a:	2330      	movs	r3, #48	; 0x30
 800213c:	001a      	movs	r2, r3
 800213e:	2100      	movs	r1, #0
 8002140:	f004 f8b8 	bl	80062b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	2310      	movs	r3, #16
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	0018      	movs	r0, r3
 800214a:	2310      	movs	r3, #16
 800214c:	001a      	movs	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	f004 f8b0 	bl	80062b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002154:	003b      	movs	r3, r7
 8002156:	0018      	movs	r0, r3
 8002158:	2310      	movs	r3, #16
 800215a:	001a      	movs	r2, r3
 800215c:	2100      	movs	r1, #0
 800215e:	f004 f8a9 	bl	80062b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002162:	0021      	movs	r1, r4
 8002164:	187b      	adds	r3, r7, r1
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216a:	187b      	adds	r3, r7, r1
 800216c:	2201      	movs	r2, #1
 800216e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2202      	movs	r2, #2
 8002174:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	0252      	lsls	r2, r2, #9
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800217e:	187b      	adds	r3, r7, r1
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	02d2      	lsls	r2, r2, #11
 8002184:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002186:	187b      	adds	r3, r7, r1
 8002188:	2200      	movs	r2, #0
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800218c:	187b      	adds	r3, r7, r1
 800218e:	0018      	movs	r0, r3
 8002190:	f001 f8a4 	bl	80032dc <HAL_RCC_OscConfig>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002198:	f000 f9c6 	bl	8002528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	2110      	movs	r1, #16
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	2202      	movs	r2, #2
 80021a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2101      	movs	r1, #1
 80021ba:	0018      	movs	r0, r3
 80021bc:	f001 fba8 	bl	8003910 <HAL_RCC_ClockConfig>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021c4:	f000 f9b0 	bl	8002528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021c8:	003b      	movs	r3, r7
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80021ce:	003b      	movs	r3, r7
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	003b      	movs	r3, r7
 80021d6:	0018      	movs	r0, r3
 80021d8:	f001 fce0 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d001      	beq.n	80021e4 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80021e0:	f000 f9a2 	bl	8002528 <Error_Handler>
  }
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b015      	add	sp, #84	; 0x54
 80021ea:	bd90      	pop	{r4, r7, pc}

080021ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <MX_TIM16_Init+0x44>)
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <MX_TIM16_Init+0x48>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_TIM16_Init+0x44>)
 80021f8:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <MX_TIM16_Init+0x4c>)
 80021fa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_TIM16_Init+0x44>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <MX_TIM16_Init+0x44>)
 8002204:	2263      	movs	r2, #99	; 0x63
 8002206:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_TIM16_Init+0x44>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <MX_TIM16_Init+0x44>)
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_TIM16_Init+0x44>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <MX_TIM16_Init+0x44>)
 800221c:	0018      	movs	r0, r3
 800221e:	f001 fd8b 	bl	8003d38 <HAL_TIM_Base_Init>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d001      	beq.n	800222a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002226:	f000 f97f 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000067c 	.word	0x2000067c
 8002234:	40014400 	.word	0x40014400
 8002238:	000012bf 	.word	0x000012bf

0800223c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_TIM17_Init+0x44>)
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <MX_TIM17_Init+0x48>)
 8002244:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_TIM17_Init+0x44>)
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <MX_TIM17_Init+0x4c>)
 800224a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_TIM17_Init+0x44>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_TIM17_Init+0x44>)
 8002254:	2223      	movs	r2, #35	; 0x23
 8002256:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_TIM17_Init+0x44>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <MX_TIM17_Init+0x44>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_TIM17_Init+0x44>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <MX_TIM17_Init+0x44>)
 800226c:	0018      	movs	r0, r3
 800226e:	f001 fd63 	bl	8003d38 <HAL_TIM_Base_Init>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d001      	beq.n	800227a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8002276:	f000 f957 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200006c4 	.word	0x200006c4
 8002284:	40014800 	.word	0x40014800
 8002288:	000012bf 	.word	0x000012bf

0800228c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 8002292:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <MX_USART1_UART_Init+0x5c>)
 8002294:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 8002298:	22e1      	movs	r2, #225	; 0xe1
 800229a:	0252      	lsls	r2, r2, #9
 800229c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <MX_USART1_UART_Init+0x58>)
 80022d0:	0018      	movs	r0, r3
 80022d2:	f001 ffb7 	bl	8004244 <HAL_UART_Init>
 80022d6:	1e03      	subs	r3, r0, #0
 80022d8:	d001      	beq.n	80022de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022da:	f000 f925 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000070c 	.word	0x2000070c
 80022e8:	40013800 	.word	0x40013800

080022ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_USART2_UART_Init+0x58>)
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <MX_USART2_UART_Init+0x5c>)
 80022f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <MX_USART2_UART_Init+0x58>)
 80022f8:	22e1      	movs	r2, #225	; 0xe1
 80022fa:	0252      	lsls	r2, r2, #9
 80022fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_USART2_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_USART2_UART_Init+0x58>)
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_USART2_UART_Init+0x58>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_USART2_UART_Init+0x58>)
 8002312:	220c      	movs	r2, #12
 8002314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <MX_USART2_UART_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_USART2_UART_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <MX_USART2_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_USART2_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <MX_USART2_UART_Init+0x58>)
 8002330:	0018      	movs	r0, r3
 8002332:	f001 ff87 	bl	8004244 <HAL_UART_Init>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d001      	beq.n	800233e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800233a:	f000 f8f5 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000794 	.word	0x20000794
 8002348:	40004400 	.word	0x40004400

0800234c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	240c      	movs	r4, #12
 8002354:	193b      	adds	r3, r7, r4
 8002356:	0018      	movs	r0, r3
 8002358:	2314      	movs	r3, #20
 800235a:	001a      	movs	r2, r3
 800235c:	2100      	movs	r1, #0
 800235e:	f003 ffa9 	bl	80062b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002362:	4b6e      	ldr	r3, [pc, #440]	; (800251c <MX_GPIO_Init+0x1d0>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b6d      	ldr	r3, [pc, #436]	; (800251c <MX_GPIO_Init+0x1d0>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	03c9      	lsls	r1, r1, #15
 800236c:	430a      	orrs	r2, r1
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <MX_GPIO_Init+0x1d0>)
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	03db      	lsls	r3, r3, #15
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <MX_GPIO_Init+0x1d0>)
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	4b66      	ldr	r3, [pc, #408]	; (800251c <MX_GPIO_Init+0x1d0>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0289      	lsls	r1, r1, #10
 8002388:	430a      	orrs	r2, r1
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	4b63      	ldr	r3, [pc, #396]	; (800251c <MX_GPIO_Init+0x1d0>)
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	4013      	ands	r3, r2
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	4b60      	ldr	r3, [pc, #384]	; (800251c <MX_GPIO_Init+0x1d0>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	4b5f      	ldr	r3, [pc, #380]	; (800251c <MX_GPIO_Init+0x1d0>)
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	02c9      	lsls	r1, r1, #11
 80023a4:	430a      	orrs	r2, r1
 80023a6:	615a      	str	r2, [r3, #20]
 80023a8:	4b5c      	ldr	r3, [pc, #368]	; (800251c <MX_GPIO_Init+0x1d0>)
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	02db      	lsls	r3, r3, #11
 80023b0:	4013      	ands	r3, r2
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 80023b6:	2381      	movs	r3, #129	; 0x81
 80023b8:	0119      	lsls	r1, r3, #4
 80023ba:	2390      	movs	r3, #144	; 0x90
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	2200      	movs	r2, #0
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 ff52 	bl	800326a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 80023c6:	4956      	ldr	r1, [pc, #344]	; (8002520 <MX_GPIO_Init+0x1d4>)
 80023c8:	4b56      	ldr	r3, [pc, #344]	; (8002524 <MX_GPIO_Init+0x1d8>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 ff4c 	bl	800326a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	2210      	movs	r2, #16
 80023d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	2201      	movs	r2, #1
 80023dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	2201      	movs	r2, #1
 80023e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80023ea:	193a      	adds	r2, r7, r4
 80023ec:	2390      	movs	r3, #144	; 0x90
 80023ee:	05db      	lsls	r3, r3, #23
 80023f0:	0011      	movs	r1, r2
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fcdc 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 80023f8:	0021      	movs	r1, r4
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	0152      	lsls	r2, r2, #5
 8002400:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002402:	000c      	movs	r4, r1
 8002404:	193b      	adds	r3, r7, r4
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240a:	193b      	adds	r3, r7, r4
 800240c:	2201      	movs	r2, #1
 800240e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8002410:	193b      	adds	r3, r7, r4
 8002412:	4a44      	ldr	r2, [pc, #272]	; (8002524 <MX_GPIO_Init+0x1d8>)
 8002414:	0019      	movs	r1, r3
 8002416:	0010      	movs	r0, r2
 8002418:	f000 fcca 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 800241c:	0021      	movs	r1, r4
 800241e:	187b      	adds	r3, r7, r1
 8002420:	2280      	movs	r2, #128	; 0x80
 8002422:	0192      	lsls	r2, r2, #6
 8002424:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002426:	187b      	adds	r3, r7, r1
 8002428:	2288      	movs	r2, #136	; 0x88
 800242a:	0352      	lsls	r2, r2, #13
 800242c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2201      	movs	r2, #1
 8002432:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8002434:	000c      	movs	r4, r1
 8002436:	187b      	adds	r3, r7, r1
 8002438:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <MX_GPIO_Init+0x1d8>)
 800243a:	0019      	movs	r1, r3
 800243c:	0010      	movs	r0, r2
 800243e:	f000 fcb7 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 8002442:	0021      	movs	r1, r4
 8002444:	187b      	adds	r3, r7, r1
 8002446:	22c0      	movs	r2, #192	; 0xc0
 8002448:	0212      	lsls	r2, r2, #8
 800244a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244c:	000c      	movs	r4, r1
 800244e:	193b      	adds	r3, r7, r4
 8002450:	2201      	movs	r2, #1
 8002452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	193b      	adds	r3, r7, r4
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800245a:	193b      	adds	r3, r7, r4
 800245c:	2203      	movs	r2, #3
 800245e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	193b      	adds	r3, r7, r4
 8002462:	4a30      	ldr	r2, [pc, #192]	; (8002524 <MX_GPIO_Init+0x1d8>)
 8002464:	0019      	movs	r1, r3
 8002466:	0010      	movs	r0, r2
 8002468:	f000 fca2 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 800246c:	193b      	adds	r3, r7, r4
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	0052      	lsls	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002474:	193b      	adds	r3, r7, r4
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	193b      	adds	r3, r7, r4
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8002480:	193a      	adds	r2, r7, r4
 8002482:	2390      	movs	r3, #144	; 0x90
 8002484:	05db      	lsls	r3, r3, #23
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fc91 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 800248e:	0021      	movs	r1, r4
 8002490:	187b      	adds	r3, r7, r1
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002498:	000c      	movs	r4, r1
 800249a:	193b      	adds	r3, r7, r4
 800249c:	2201      	movs	r2, #1
 800249e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	2203      	movs	r2, #3
 80024aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 80024ac:	193a      	adds	r2, r7, r4
 80024ae:	2390      	movs	r3, #144	; 0x90
 80024b0:	05db      	lsls	r3, r3, #23
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 fc7b 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 80024ba:	193b      	adds	r3, r7, r4
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	0152      	lsls	r2, r2, #5
 80024c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	2288      	movs	r2, #136	; 0x88
 80024c6:	0352      	lsls	r2, r2, #13
 80024c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	2201      	movs	r2, #1
 80024ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 80024d0:	193a      	adds	r2, r7, r4
 80024d2:	2390      	movs	r3, #144	; 0x90
 80024d4:	05db      	lsls	r3, r3, #23
 80024d6:	0011      	movs	r1, r2
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 fc69 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 80024de:	0021      	movs	r1, r4
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	2230      	movs	r2, #48	; 0x30
 80024e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2201      	movs	r2, #1
 80024ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2201      	movs	r2, #1
 80024f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <MX_GPIO_Init+0x1d8>)
 80024fc:	0019      	movs	r1, r3
 80024fe:	0010      	movs	r0, r2
 8002500:	f000 fc56 	bl	8002db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2007      	movs	r0, #7
 800250a:	f000 fb91 	bl	8002c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800250e:	2007      	movs	r0, #7
 8002510:	f000 fba3 	bl	8002c5a <HAL_NVIC_EnableIRQ>

}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b009      	add	sp, #36	; 0x24
 800251a:	bd90      	pop	{r4, r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	0000c030 	.word	0x0000c030
 8002524:	48000400 	.word	0x48000400

08002528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800252c:	b672      	cpsid	i
}
 800252e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002530:	e7fe      	b.n	8002530 <Error_Handler+0x8>
	...

08002534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_MspInit+0x44>)
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_MspInit+0x44>)
 8002540:	2101      	movs	r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	619a      	str	r2, [r3, #24]
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <HAL_MspInit+0x44>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2201      	movs	r2, #1
 800254c:	4013      	ands	r3, r2
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_MspInit+0x44>)
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_MspInit+0x44>)
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	0549      	lsls	r1, r1, #21
 800255c:	430a      	orrs	r2, r1
 800255e:	61da      	str	r2, [r3, #28]
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_MspInit+0x44>)
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	055b      	lsls	r3, r3, #21
 8002568:	4013      	ands	r3, r2
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b002      	add	sp, #8
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	40021000 	.word	0x40021000

0800257c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <HAL_TIM_Base_MspInit+0x80>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d116      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_TIM_Base_MspInit+0x84>)
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_TIM_Base_MspInit+0x84>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0289      	lsls	r1, r1, #10
 8002598:	430a      	orrs	r2, r1
 800259a:	619a      	str	r2, [r3, #24]
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_TIM_Base_MspInit+0x84>)
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	029b      	lsls	r3, r3, #10
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2015      	movs	r0, #21
 80025b0:	f000 fb3e 	bl	8002c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80025b4:	2015      	movs	r0, #21
 80025b6:	f000 fb50 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80025ba:	e01a      	b.n	80025f2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_TIM_Base_MspInit+0x88>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d115      	bne.n	80025f2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_TIM_Base_MspInit+0x84>)
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_TIM_Base_MspInit+0x84>)
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	02c9      	lsls	r1, r1, #11
 80025d0:	430a      	orrs	r2, r1
 80025d2:	619a      	str	r2, [r3, #24]
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_TIM_Base_MspInit+0x84>)
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	02db      	lsls	r3, r3, #11
 80025dc:	4013      	ands	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2016      	movs	r0, #22
 80025e8:	f000 fb22 	bl	8002c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80025ec:	2016      	movs	r0, #22
 80025ee:	f000 fb34 	bl	8002c5a <HAL_NVIC_EnableIRQ>
}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b004      	add	sp, #16
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	40014400 	.word	0x40014400
 8002600:	40021000 	.word	0x40021000
 8002604:	40014800 	.word	0x40014800

08002608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b08d      	sub	sp, #52	; 0x34
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	241c      	movs	r4, #28
 8002612:	193b      	adds	r3, r7, r4
 8002614:	0018      	movs	r0, r3
 8002616:	2314      	movs	r3, #20
 8002618:	001a      	movs	r2, r3
 800261a:	2100      	movs	r1, #0
 800261c:	f003 fe4a 	bl	80062b4 <memset>
  if(huart->Instance==USART1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3d      	ldr	r2, [pc, #244]	; (800271c <HAL_UART_MspInit+0x114>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d13c      	bne.n	80026a4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_UART_MspInit+0x118>)
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <HAL_UART_MspInit+0x118>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	01c9      	lsls	r1, r1, #7
 8002634:	430a      	orrs	r2, r1
 8002636:	619a      	str	r2, [r3, #24]
 8002638:	4b39      	ldr	r3, [pc, #228]	; (8002720 <HAL_UART_MspInit+0x118>)
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	01db      	lsls	r3, r3, #7
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	4b36      	ldr	r3, [pc, #216]	; (8002720 <HAL_UART_MspInit+0x118>)
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	4b35      	ldr	r3, [pc, #212]	; (8002720 <HAL_UART_MspInit+0x118>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0289      	lsls	r1, r1, #10
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_UART_MspInit+0x118>)
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	029b      	lsls	r3, r3, #10
 800265c:	4013      	ands	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002662:	193b      	adds	r3, r7, r4
 8002664:	22c0      	movs	r2, #192	; 0xc0
 8002666:	00d2      	lsls	r2, r2, #3
 8002668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	0021      	movs	r1, r4
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2202      	movs	r2, #2
 8002670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2203      	movs	r2, #3
 800267c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2201      	movs	r2, #1
 8002682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	187a      	adds	r2, r7, r1
 8002686:	2390      	movs	r3, #144	; 0x90
 8002688:	05db      	lsls	r3, r3, #23
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f000 fb8f 	bl	8002db0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	201b      	movs	r0, #27
 8002698:	f000 faca 	bl	8002c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800269c:	201b      	movs	r0, #27
 800269e:	f000 fadc 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026a2:	e037      	b.n	8002714 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_UART_MspInit+0x11c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d132      	bne.n	8002714 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_UART_MspInit+0x118>)
 80026b0:	69da      	ldr	r2, [r3, #28]
 80026b2:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_UART_MspInit+0x118>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	0289      	lsls	r1, r1, #10
 80026b8:	430a      	orrs	r2, r1
 80026ba:	61da      	str	r2, [r3, #28]
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_UART_MspInit+0x118>)
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_UART_MspInit+0x118>)
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_UART_MspInit+0x118>)
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	0289      	lsls	r1, r1, #10
 80026d4:	430a      	orrs	r2, r1
 80026d6:	615a      	str	r2, [r3, #20]
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_UART_MspInit+0x118>)
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	4013      	ands	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026e6:	211c      	movs	r1, #28
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	220c      	movs	r2, #12
 80026ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	2202      	movs	r2, #2
 80026f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	2203      	movs	r2, #3
 80026fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2201      	movs	r2, #1
 8002704:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	187a      	adds	r2, r7, r1
 8002708:	2390      	movs	r3, #144	; 0x90
 800270a:	05db      	lsls	r3, r3, #23
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fb4e 	bl	8002db0 <HAL_GPIO_Init>
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b00d      	add	sp, #52	; 0x34
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	40013800 	.word	0x40013800
 8002720:	40021000 	.word	0x40021000
 8002724:	40004400 	.word	0x40004400

08002728 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_UART_MspDeInit+0x60>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d111      	bne.n	800275e <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <HAL_UART_MspDeInit+0x64>)
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_UART_MspDeInit+0x64>)
 8002740:	4913      	ldr	r1, [pc, #76]	; (8002790 <HAL_UART_MspDeInit+0x68>)
 8002742:	400a      	ands	r2, r1
 8002744:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002746:	23c0      	movs	r3, #192	; 0xc0
 8002748:	00da      	lsls	r2, r3, #3
 800274a:	2390      	movs	r3, #144	; 0x90
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fc9d 	bl	8003090 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002756:	201b      	movs	r0, #27
 8002758:	f000 fa8f 	bl	8002c7a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800275c:	e010      	b.n	8002780 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <HAL_UART_MspDeInit+0x6c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d10b      	bne.n	8002780 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_UART_MspDeInit+0x64>)
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_UART_MspDeInit+0x64>)
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <HAL_UART_MspDeInit+0x70>)
 8002770:	400a      	ands	r2, r1
 8002772:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002774:	2390      	movs	r3, #144	; 0x90
 8002776:	05db      	lsls	r3, r3, #23
 8002778:	210c      	movs	r1, #12
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fc88 	bl	8003090 <HAL_GPIO_DeInit>
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40013800 	.word	0x40013800
 800278c:	40021000 	.word	0x40021000
 8002790:	ffffbfff 	.word	0xffffbfff
 8002794:	40004400 	.word	0x40004400
 8002798:	fffdffff 	.word	0xfffdffff

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <NMI_Handler+0x4>

080027a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <HardFault_Handler+0x4>

080027a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f000 f94c 	bl	8002a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 80027c4:	f7ff f98a 	bl	8001adc <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	015b      	lsls	r3, r3, #5
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 fd64 	bl	80032a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	019b      	lsls	r3, r3, #6
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fd5f 	bl	80032a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <TIM16_IRQHandler+0x14>)
 80027f2:	0018      	movs	r0, r3
 80027f4:	f001 fb6a 	bl	8003ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	2000067c 	.word	0x2000067c

08002804 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <TIM17_IRQHandler+0x14>)
 800280a:	0018      	movs	r0, r3
 800280c:	f001 fb5e 	bl	8003ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	200006c4 	.word	0x200006c4

0800281c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <USART1_IRQHandler+0x14>)
 8002822:	0018      	movs	r0, r3
 8002824:	f001 fe98 	bl	8004558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	2000070c 	.word	0x2000070c

08002834 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e00a      	b.n	800285c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002846:	e000      	b.n	800284a <_read+0x16>
 8002848:	bf00      	nop
 800284a:	0001      	movs	r1, r0
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	60ba      	str	r2, [r7, #8]
 8002852:	b2ca      	uxtb	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	dbf0      	blt.n	8002846 <_read+0x12>
	}

return len;
 8002864:	687b      	ldr	r3, [r7, #4]
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b006      	add	sp, #24
 800286c:	bd80      	pop	{r7, pc}

0800286e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e009      	b.n	8002894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	60ba      	str	r2, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	0018      	movs	r0, r3
 800288a:	e000      	b.n	800288e <_write+0x20>
 800288c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3301      	adds	r3, #1
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	dbf1      	blt.n	8002880 <_write+0x12>
	}
	return len;
 800289c:	687b      	ldr	r3, [r7, #4]
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b006      	add	sp, #24
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <_close>:

int _close(int file)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
	return -1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	425b      	negs	r3, r3
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b002      	add	sp, #8
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	0192      	lsls	r2, r2, #6
 80028ca:	605a      	str	r2, [r3, #4]
	return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b002      	add	sp, #8
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_isatty>:

int _isatty(int file)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	return 1;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
	return 0;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b004      	add	sp, #16
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <_sbrk+0x5c>)
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <_sbrk+0x60>)
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <_sbrk+0x64>)
 800291e:	4a12      	ldr	r2, [pc, #72]	; (8002968 <_sbrk+0x68>)
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	429a      	cmp	r2, r3
 800292e:	d207      	bcs.n	8002940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002930:	f003 fd28 	bl	8006384 <__errno>
 8002934:	0003      	movs	r3, r0
 8002936:	220c      	movs	r2, #12
 8002938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293a:	2301      	movs	r3, #1
 800293c:	425b      	negs	r3, r3
 800293e:	e009      	b.n	8002954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	18d2      	adds	r2, r2, r3
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <_sbrk+0x64>)
 8002950:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b006      	add	sp, #24
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20002000 	.word	0x20002000
 8002960:	00000400 	.word	0x00000400
 8002964:	2000081c 	.word	0x2000081c
 8002968:	20000970 	.word	0x20000970

0800296c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002978:	480d      	ldr	r0, [pc, #52]	; (80029b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800297a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800297c:	f7ff fff6 	bl	800296c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002982:	490d      	ldr	r1, [pc, #52]	; (80029b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <LoopForever+0xe>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002998:	4c0a      	ldr	r4, [pc, #40]	; (80029c4 <LoopForever+0x16>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029a6:	f003 fcf3 	bl	8006390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029aa:	f7ff fbab 	bl	8002104 <main>

080029ae <LoopForever>:

LoopForever:
    b LoopForever
 80029ae:	e7fe      	b.n	80029ae <LoopForever>
  ldr   r0, =_estack
 80029b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80029b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80029bc:	0800696c 	.word	0x0800696c
  ldr r2, =_sbss
 80029c0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80029c4:	20000970 	.word	0x20000970

080029c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c8:	e7fe      	b.n	80029c8 <ADC1_IRQHandler>
	...

080029cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <HAL_Init+0x24>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_Init+0x24>)
 80029d6:	2110      	movs	r1, #16
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 f809 	bl	80029f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e2:	f7ff fda7 	bl	8002534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	40022000 	.word	0x40022000

080029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_InitTick+0x5c>)
 80029fe:	681c      	ldr	r4, [r3, #0]
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_InitTick+0x60>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	0019      	movs	r1, r3
 8002a06:	23fa      	movs	r3, #250	; 0xfa
 8002a08:	0098      	lsls	r0, r3, #2
 8002a0a:	f7fd fb7d 	bl	8000108 <__udivsi3>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	0019      	movs	r1, r3
 8002a12:	0020      	movs	r0, r4
 8002a14:	f7fd fb78 	bl	8000108 <__udivsi3>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f93d 	bl	8002c9a <HAL_SYSTICK_Config>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e00f      	b.n	8002a48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d80b      	bhi.n	8002a46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	2301      	movs	r3, #1
 8002a32:	425b      	negs	r3, r3
 8002a34:	2200      	movs	r2, #0
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 f8fa 	bl	8002c30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_InitTick+0x64>)
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b003      	add	sp, #12
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	20000114 	.word	0x20000114
 8002a54:	2000011c 	.word	0x2000011c
 8002a58:	20000118 	.word	0x20000118

08002a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_IncTick+0x1c>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	001a      	movs	r2, r3
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_IncTick+0x20>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	18d2      	adds	r2, r2, r3
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_IncTick+0x20>)
 8002a6e:	601a      	str	r2, [r3, #0]
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	2000011c 	.word	0x2000011c
 8002a7c:	20000820 	.word	0x20000820

08002a80 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  return uwTick;
 8002a84:	4b02      	ldr	r3, [pc, #8]	; (8002a90 <HAL_GetTick+0x10>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	20000820 	.word	0x20000820

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	1dfb      	adds	r3, r7, #7
 8002a9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8002aa6:	d809      	bhi.n	8002abc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	001a      	movs	r2, r3
 8002aae:	231f      	movs	r3, #31
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <__NVIC_EnableIRQ+0x30>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4091      	lsls	r1, r2
 8002ab8:	000a      	movs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
  }
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	0002      	movs	r2, r0
 8002ad0:	1dfb      	adds	r3, r7, #7
 8002ad2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	1dfb      	adds	r3, r7, #7
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8002ada:	d810      	bhi.n	8002afe <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	231f      	movs	r3, #31
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <__NVIC_DisableIRQ+0x40>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	0013      	movs	r3, r2
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002af2:	f3bf 8f4f 	dsb	sy
}
 8002af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002af8:	f3bf 8f6f 	isb	sy
}
 8002afc:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	0002      	movs	r2, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	1dfb      	adds	r3, r7, #7
 8002b18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	1dfb      	adds	r3, r7, #7
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b20:	d828      	bhi.n	8002b74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <__NVIC_SetPriority+0xd4>)
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	33c0      	adds	r3, #192	; 0xc0
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	589b      	ldr	r3, [r3, r2]
 8002b32:	1dfa      	adds	r2, r7, #7
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	0011      	movs	r1, r2
 8002b38:	2203      	movs	r2, #3
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	00d2      	lsls	r2, r2, #3
 8002b3e:	21ff      	movs	r1, #255	; 0xff
 8002b40:	4091      	lsls	r1, r2
 8002b42:	000a      	movs	r2, r1
 8002b44:	43d2      	mvns	r2, r2
 8002b46:	401a      	ands	r2, r3
 8002b48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	22ff      	movs	r2, #255	; 0xff
 8002b50:	401a      	ands	r2, r3
 8002b52:	1dfb      	adds	r3, r7, #7
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	0018      	movs	r0, r3
 8002b58:	2303      	movs	r3, #3
 8002b5a:	4003      	ands	r3, r0
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b60:	481f      	ldr	r0, [pc, #124]	; (8002be0 <__NVIC_SetPriority+0xd4>)
 8002b62:	1dfb      	adds	r3, r7, #7
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	33c0      	adds	r3, #192	; 0xc0
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b72:	e031      	b.n	8002bd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <__NVIC_SetPriority+0xd8>)
 8002b76:	1dfb      	adds	r3, r7, #7
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	400b      	ands	r3, r1
 8002b80:	3b08      	subs	r3, #8
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3306      	adds	r3, #6
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	18d3      	adds	r3, r2, r3
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1dfa      	adds	r2, r7, #7
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	0011      	movs	r1, r2
 8002b94:	2203      	movs	r2, #3
 8002b96:	400a      	ands	r2, r1
 8002b98:	00d2      	lsls	r2, r2, #3
 8002b9a:	21ff      	movs	r1, #255	; 0xff
 8002b9c:	4091      	lsls	r1, r2
 8002b9e:	000a      	movs	r2, r1
 8002ba0:	43d2      	mvns	r2, r2
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	401a      	ands	r2, r3
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	4003      	ands	r3, r0
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bbc:	4809      	ldr	r0, [pc, #36]	; (8002be4 <__NVIC_SetPriority+0xd8>)
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	001c      	movs	r4, r3
 8002bc4:	230f      	movs	r3, #15
 8002bc6:	4023      	ands	r3, r4
 8002bc8:	3b08      	subs	r3, #8
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	3306      	adds	r3, #6
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	18c3      	adds	r3, r0, r3
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b003      	add	sp, #12
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	045b      	lsls	r3, r3, #17
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d301      	bcc.n	8002c00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e010      	b.n	8002c22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <SysTick_Config+0x44>)
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	3a01      	subs	r2, #1
 8002c06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c08:	2301      	movs	r3, #1
 8002c0a:	425b      	negs	r3, r3
 8002c0c:	2103      	movs	r1, #3
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7ff ff7c 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <SysTick_Config+0x44>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <SysTick_Config+0x44>)
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b002      	add	sp, #8
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	e000e010 	.word	0xe000e010

08002c30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	1c02      	adds	r2, r0, #0
 8002c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff ff5d 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	0002      	movs	r2, r0
 8002c62:	1dfb      	adds	r3, r7, #7
 8002c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7ff ff11 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b002      	add	sp, #8
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	0002      	movs	r2, r0
 8002c82:	1dfb      	adds	r3, r7, #7
 8002c84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff ff1b 	bl	8002ac8 <__NVIC_DisableIRQ>
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff ff9f 	bl	8002be8 <SysTick_Config>
 8002caa:	0003      	movs	r3, r0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2221      	movs	r2, #33	; 0x21
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d008      	beq.n	8002cda <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e020      	b.n	8002d1c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	210e      	movs	r1, #14
 8002ce6:	438a      	bics	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2101      	movs	r1, #1
 8002d04:	4091      	lsls	r1, r2
 8002d06:	000a      	movs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2221      	movs	r2, #33	; 0x21
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	2100      	movs	r1, #0
 8002d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2c:	210f      	movs	r1, #15
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2221      	movs	r2, #33	; 0x21
 8002d38:	5c9b      	ldrb	r3, [r3, r2]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d006      	beq.n	8002d4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2204      	movs	r2, #4
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e028      	b.n	8002da0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	210e      	movs	r1, #14
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	438a      	bics	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	2101      	movs	r1, #1
 8002d78:	4091      	lsls	r1, r2
 8002d7a:	000a      	movs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2221      	movs	r2, #33	; 0x21
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	4798      	blx	r3
    }
  }
  return status;
 8002da0:	230f      	movs	r3, #15
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	781b      	ldrb	r3, [r3, #0]
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	e14f      	b.n	8003060 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4091      	lsls	r1, r2
 8002dca:	000a      	movs	r2, r1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d100      	bne.n	8002dd8 <HAL_GPIO_Init+0x28>
 8002dd6:	e140      	b.n	800305a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d005      	beq.n	8002df0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2203      	movs	r2, #3
 8002dea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d130      	bne.n	8002e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	0013      	movs	r3, r2
 8002e00:	43da      	mvns	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	409a      	lsls	r2, r3
 8002e12:	0013      	movs	r3, r2
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e26:	2201      	movs	r2, #1
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2203      	movs	r2, #3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d017      	beq.n	8002e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2203      	movs	r2, #3
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d123      	bne.n	8002ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	08da      	lsrs	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3208      	adds	r2, #8
 8002ea2:	0092      	lsls	r2, r2, #2
 8002ea4:	58d3      	ldr	r3, [r2, r3]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2207      	movs	r2, #7
 8002eac:	4013      	ands	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2107      	movs	r1, #7
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	6939      	ldr	r1, [r7, #16]
 8002ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	0013      	movs	r3, r2
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2203      	movs	r2, #3
 8002f00:	401a      	ands	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	409a      	lsls	r2, r3
 8002f08:	0013      	movs	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	23c0      	movs	r3, #192	; 0xc0
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d100      	bne.n	8002f24 <HAL_GPIO_Init+0x174>
 8002f22:	e09a      	b.n	800305a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f24:	4b54      	ldr	r3, [pc, #336]	; (8003078 <HAL_GPIO_Init+0x2c8>)
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_GPIO_Init+0x2c8>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	619a      	str	r2, [r3, #24]
 8002f30:	4b51      	ldr	r3, [pc, #324]	; (8003078 <HAL_GPIO_Init+0x2c8>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2201      	movs	r2, #1
 8002f36:	4013      	ands	r3, r2
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f3c:	4a4f      	ldr	r2, [pc, #316]	; (800307c <HAL_GPIO_Init+0x2cc>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	589b      	ldr	r3, [r3, r2]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	4013      	ands	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	409a      	lsls	r2, r3
 8002f56:	0013      	movs	r3, r2
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	2390      	movs	r3, #144	; 0x90
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x1e2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a44      	ldr	r2, [pc, #272]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x1de>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a43      	ldr	r2, [pc, #268]	; (8003084 <HAL_GPIO_Init+0x2d4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x1da>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a42      	ldr	r2, [pc, #264]	; (8003088 <HAL_GPIO_Init+0x2d8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x1d6>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e006      	b.n	8002f94 <HAL_GPIO_Init+0x1e4>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e004      	b.n	8002f94 <HAL_GPIO_Init+0x1e4>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e002      	b.n	8002f94 <HAL_GPIO_Init+0x1e4>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_GPIO_Init+0x1e4>
 8002f92:	2300      	movs	r3, #0
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	2103      	movs	r1, #3
 8002f98:	400a      	ands	r2, r1
 8002f9a:	0092      	lsls	r2, r2, #2
 8002f9c:	4093      	lsls	r3, r2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fa4:	4935      	ldr	r1, [pc, #212]	; (800307c <HAL_GPIO_Init+0x2cc>)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	3302      	adds	r3, #2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_GPIO_Init+0x2dc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	035b      	lsls	r3, r3, #13
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	; (800308c <HAL_GPIO_Init+0x2dc>)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_GPIO_Init+0x2dc>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	039b      	lsls	r3, r3, #14
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_GPIO_Init+0x2dc>)
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_GPIO_Init+0x2dc>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43da      	mvns	r2, r3
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	029b      	lsls	r3, r3, #10
 800301e:	4013      	ands	r3, r2
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_GPIO_Init+0x2dc>)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_GPIO_Init+0x2dc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	43da      	mvns	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	025b      	lsls	r3, r3, #9
 8003048:	4013      	ands	r3, r2
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_GPIO_Init+0x2dc>)
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	40da      	lsrs	r2, r3
 8003068:	1e13      	subs	r3, r2, #0
 800306a:	d000      	beq.n	800306e <HAL_GPIO_Init+0x2be>
 800306c:	e6a8      	b.n	8002dc0 <HAL_GPIO_Init+0x10>
  } 
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b006      	add	sp, #24
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	40010000 	.word	0x40010000
 8003080:	48000400 	.word	0x48000400
 8003084:	48000800 	.word	0x48000800
 8003088:	48000c00 	.word	0x48000c00
 800308c:	40010400 	.word	0x40010400

08003090 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800309e:	e0b1      	b.n	8003204 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030a0:	2201      	movs	r2, #1
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	409a      	lsls	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <HAL_GPIO_DeInit+0x24>
 80030b2:	e0a4      	b.n	80031fe <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80030b4:	4a59      	ldr	r2, [pc, #356]	; (800321c <HAL_GPIO_DeInit+0x18c>)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	589b      	ldr	r3, [r3, r2]
 80030c0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2203      	movs	r2, #3
 80030c6:	4013      	ands	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	409a      	lsls	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	2390      	movs	r3, #144	; 0x90
 80030d8:	05db      	lsls	r3, r3, #23
 80030da:	429a      	cmp	r2, r3
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_DeInit+0x76>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4f      	ldr	r2, [pc, #316]	; (8003220 <HAL_GPIO_DeInit+0x190>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_DeInit+0x72>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4e      	ldr	r2, [pc, #312]	; (8003224 <HAL_GPIO_DeInit+0x194>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_DeInit+0x6e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4d      	ldr	r2, [pc, #308]	; (8003228 <HAL_GPIO_DeInit+0x198>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_DeInit+0x6a>
 80030f6:	2303      	movs	r3, #3
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_DeInit+0x78>
 80030fa:	2305      	movs	r3, #5
 80030fc:	e004      	b.n	8003108 <HAL_GPIO_DeInit+0x78>
 80030fe:	2302      	movs	r3, #2
 8003100:	e002      	b.n	8003108 <HAL_GPIO_DeInit+0x78>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_GPIO_DeInit+0x78>
 8003106:	2300      	movs	r3, #0
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	2103      	movs	r1, #3
 800310c:	400a      	ands	r2, r1
 800310e:	0092      	lsls	r2, r2, #2
 8003110:	4093      	lsls	r3, r2
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	429a      	cmp	r2, r3
 8003116:	d132      	bne.n	800317e <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003118:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_GPIO_DeInit+0x19c>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43d9      	mvns	r1, r3
 8003120:	4b42      	ldr	r3, [pc, #264]	; (800322c <HAL_GPIO_DeInit+0x19c>)
 8003122:	400a      	ands	r2, r1
 8003124:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <HAL_GPIO_DeInit+0x19c>)
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	43d9      	mvns	r1, r3
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_GPIO_DeInit+0x19c>)
 8003130:	400a      	ands	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003134:	4b3d      	ldr	r3, [pc, #244]	; (800322c <HAL_GPIO_DeInit+0x19c>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	43d9      	mvns	r1, r3
 800313c:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_GPIO_DeInit+0x19c>)
 800313e:	400a      	ands	r2, r1
 8003140:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003142:	4b3a      	ldr	r3, [pc, #232]	; (800322c <HAL_GPIO_DeInit+0x19c>)
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43d9      	mvns	r1, r3
 800314a:	4b38      	ldr	r3, [pc, #224]	; (800322c <HAL_GPIO_DeInit+0x19c>)
 800314c:	400a      	ands	r2, r1
 800314e:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2203      	movs	r2, #3
 8003154:	4013      	ands	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	409a      	lsls	r2, r3
 800315c:	0013      	movs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003160:	4a2e      	ldr	r2, [pc, #184]	; (800321c <HAL_GPIO_DeInit+0x18c>)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	589a      	ldr	r2, [r3, r2]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43d9      	mvns	r1, r3
 8003170:	482a      	ldr	r0, [pc, #168]	; (800321c <HAL_GPIO_DeInit+0x18c>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	400a      	ands	r2, r1
 8003178:	3302      	adds	r3, #2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	0052      	lsls	r2, r2, #1
 8003186:	2103      	movs	r1, #3
 8003188:	4091      	lsls	r1, r2
 800318a:	000a      	movs	r2, r1
 800318c:	43d2      	mvns	r2, r2
 800318e:	401a      	ands	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	08da      	lsrs	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3208      	adds	r2, #8
 800319c:	0092      	lsls	r2, r2, #2
 800319e:	58d3      	ldr	r3, [r2, r3]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	2107      	movs	r1, #7
 80031a4:	400a      	ands	r2, r1
 80031a6:	0092      	lsls	r2, r2, #2
 80031a8:	210f      	movs	r1, #15
 80031aa:	4091      	lsls	r1, r2
 80031ac:	000a      	movs	r2, r1
 80031ae:	43d1      	mvns	r1, r2
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	08d2      	lsrs	r2, r2, #3
 80031b4:	4019      	ands	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	0092      	lsls	r2, r2, #2
 80031bc:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	0052      	lsls	r2, r2, #1
 80031c6:	2103      	movs	r1, #3
 80031c8:	4091      	lsls	r1, r2
 80031ca:	000a      	movs	r2, r1
 80031cc:	43d2      	mvns	r2, r2
 80031ce:	401a      	ands	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2101      	movs	r1, #1
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4091      	lsls	r1, r2
 80031de:	000a      	movs	r2, r1
 80031e0:	43d2      	mvns	r2, r2
 80031e2:	401a      	ands	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	0052      	lsls	r2, r2, #1
 80031f0:	2103      	movs	r1, #3
 80031f2:	4091      	lsls	r1, r2
 80031f4:	000a      	movs	r2, r1
 80031f6:	43d2      	mvns	r2, r2
 80031f8:	401a      	ands	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]

    }

    position++;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3301      	adds	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	40da      	lsrs	r2, r3
 800320a:	1e13      	subs	r3, r2, #0
 800320c:	d000      	beq.n	8003210 <HAL_GPIO_DeInit+0x180>
 800320e:	e747      	b.n	80030a0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b006      	add	sp, #24
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	40010000 	.word	0x40010000
 8003220:	48000400 	.word	0x48000400
 8003224:	48000800 	.word	0x48000800
 8003228:	48000c00 	.word	0x48000c00
 800322c:	40010400 	.word	0x40010400

08003230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	000a      	movs	r2, r1
 800323a:	1cbb      	adds	r3, r7, #2
 800323c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	1cba      	adds	r2, r7, #2
 8003244:	8812      	ldrh	r2, [r2, #0]
 8003246:	4013      	ands	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800324a:	230f      	movs	r3, #15
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e003      	b.n	800325c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003254:	230f      	movs	r3, #15
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	781b      	ldrb	r3, [r3, #0]
  }
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	0008      	movs	r0, r1
 8003274:	0011      	movs	r1, r2
 8003276:	1cbb      	adds	r3, r7, #2
 8003278:	1c02      	adds	r2, r0, #0
 800327a:	801a      	strh	r2, [r3, #0]
 800327c:	1c7b      	adds	r3, r7, #1
 800327e:	1c0a      	adds	r2, r1, #0
 8003280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003282:	1c7b      	adds	r3, r7, #1
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800328a:	1cbb      	adds	r3, r7, #2
 800328c:	881a      	ldrh	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003292:	e003      	b.n	800329c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003294:	1cbb      	adds	r3, r7, #2
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	0002      	movs	r2, r0
 80032ac:	1dbb      	adds	r3, r7, #6
 80032ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	1dba      	adds	r2, r7, #6
 80032b6:	8812      	ldrh	r2, [r2, #0]
 80032b8:	4013      	ands	r3, r2
 80032ba:	d008      	beq.n	80032ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032be:	1dba      	adds	r2, r7, #6
 80032c0:	8812      	ldrh	r2, [r2, #0]
 80032c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c4:	1dbb      	adds	r3, r7, #6
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7fe fbc7 	bl	8001a5c <HAL_GPIO_EXTI_Callback>
  }
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b002      	add	sp, #8
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	40010400 	.word	0x40010400

080032dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e301      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	4013      	ands	r3, r2
 80032f6:	d100      	bne.n	80032fa <HAL_RCC_OscConfig+0x1e>
 80032f8:	e08d      	b.n	8003416 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032fa:	4bc3      	ldr	r3, [pc, #780]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	220c      	movs	r2, #12
 8003300:	4013      	ands	r3, r2
 8003302:	2b04      	cmp	r3, #4
 8003304:	d00e      	beq.n	8003324 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003306:	4bc0      	ldr	r3, [pc, #768]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	220c      	movs	r2, #12
 800330c:	4013      	ands	r3, r2
 800330e:	2b08      	cmp	r3, #8
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x64>
 8003312:	4bbd      	ldr	r3, [pc, #756]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	025b      	lsls	r3, r3, #9
 800331a:	401a      	ands	r2, r3
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	025b      	lsls	r3, r3, #9
 8003320:	429a      	cmp	r2, r3
 8003322:	d10d      	bne.n	8003340 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	4bb8      	ldr	r3, [pc, #736]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	029b      	lsls	r3, r3, #10
 800332c:	4013      	ands	r3, r2
 800332e:	d100      	bne.n	8003332 <HAL_RCC_OscConfig+0x56>
 8003330:	e070      	b.n	8003414 <HAL_RCC_OscConfig+0x138>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d000      	beq.n	800333c <HAL_RCC_OscConfig+0x60>
 800333a:	e06b      	b.n	8003414 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e2d8      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x7c>
 8003348:	4baf      	ldr	r3, [pc, #700]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4bae      	ldr	r3, [pc, #696]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	0249      	lsls	r1, r1, #9
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e02f      	b.n	80033b8 <HAL_RCC_OscConfig+0xdc>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x9e>
 8003360:	4ba9      	ldr	r3, [pc, #676]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4ba8      	ldr	r3, [pc, #672]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003366:	49a9      	ldr	r1, [pc, #676]	; (800360c <HAL_RCC_OscConfig+0x330>)
 8003368:	400a      	ands	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	4ba6      	ldr	r3, [pc, #664]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4ba5      	ldr	r3, [pc, #660]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003372:	49a7      	ldr	r1, [pc, #668]	; (8003610 <HAL_RCC_OscConfig+0x334>)
 8003374:	400a      	ands	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e01e      	b.n	80033b8 <HAL_RCC_OscConfig+0xdc>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d10e      	bne.n	80033a0 <HAL_RCC_OscConfig+0xc4>
 8003382:	4ba1      	ldr	r3, [pc, #644]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4ba0      	ldr	r3, [pc, #640]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	02c9      	lsls	r1, r1, #11
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4b9d      	ldr	r3, [pc, #628]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b9c      	ldr	r3, [pc, #624]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	0249      	lsls	r1, r1, #9
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xdc>
 80033a0:	4b99      	ldr	r3, [pc, #612]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b98      	ldr	r3, [pc, #608]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80033a6:	4999      	ldr	r1, [pc, #612]	; (800360c <HAL_RCC_OscConfig+0x330>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	4b96      	ldr	r3, [pc, #600]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b95      	ldr	r3, [pc, #596]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80033b2:	4997      	ldr	r1, [pc, #604]	; (8003610 <HAL_RCC_OscConfig+0x334>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d014      	beq.n	80033ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff fb5e 	bl	8002a80 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ca:	f7ff fb59 	bl	8002a80 <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b64      	cmp	r3, #100	; 0x64
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e28a      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033dc:	4b8a      	ldr	r3, [pc, #552]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	4013      	ands	r3, r2
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0xee>
 80033e8:	e015      	b.n	8003416 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7ff fb49 	bl	8002a80 <HAL_GetTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7ff fb44 	bl	8002a80 <HAL_GetTick>
 80033f8:	0002      	movs	r2, r0
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e275      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	4b80      	ldr	r3, [pc, #512]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	4013      	ands	r3, r2
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x118>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	d100      	bne.n	8003422 <HAL_RCC_OscConfig+0x146>
 8003420:	e069      	b.n	80034f6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003422:	4b79      	ldr	r3, [pc, #484]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	220c      	movs	r2, #12
 8003428:	4013      	ands	r3, r2
 800342a:	d00b      	beq.n	8003444 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800342c:	4b76      	ldr	r3, [pc, #472]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	220c      	movs	r2, #12
 8003432:	4013      	ands	r3, r2
 8003434:	2b08      	cmp	r3, #8
 8003436:	d11c      	bne.n	8003472 <HAL_RCC_OscConfig+0x196>
 8003438:	4b73      	ldr	r3, [pc, #460]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	025b      	lsls	r3, r3, #9
 8003440:	4013      	ands	r3, r2
 8003442:	d116      	bne.n	8003472 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003444:	4b70      	ldr	r3, [pc, #448]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2202      	movs	r2, #2
 800344a:	4013      	ands	r3, r2
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x17e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e24b      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b6b      	ldr	r3, [pc, #428]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	22f8      	movs	r2, #248	; 0xf8
 8003460:	4393      	bics	r3, r2
 8003462:	0019      	movs	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	00da      	lsls	r2, r3, #3
 800346a:	4b67      	ldr	r3, [pc, #412]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003470:	e041      	b.n	80034f6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d024      	beq.n	80034c4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347a:	4b63      	ldr	r3, [pc, #396]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003480:	2101      	movs	r1, #1
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7ff fafb 	bl	8002a80 <HAL_GetTick>
 800348a:	0003      	movs	r3, r0
 800348c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003490:	f7ff faf6 	bl	8002a80 <HAL_GetTick>
 8003494:	0002      	movs	r2, r0
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e227      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b59      	ldr	r3, [pc, #356]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2202      	movs	r2, #2
 80034a8:	4013      	ands	r3, r2
 80034aa:	d0f1      	beq.n	8003490 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b56      	ldr	r3, [pc, #344]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	22f8      	movs	r2, #248	; 0xf8
 80034b2:	4393      	bics	r3, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00da      	lsls	r2, r3, #3
 80034bc:	4b52      	ldr	r3, [pc, #328]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e018      	b.n	80034f6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c4:	4b50      	ldr	r3, [pc, #320]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	438a      	bics	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7ff fad6 	bl	8002a80 <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034da:	f7ff fad1 	bl	8002a80 <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e202      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ec:	4b46      	ldr	r3, [pc, #280]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d1f1      	bne.n	80034da <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2208      	movs	r2, #8
 80034fc:	4013      	ands	r3, r2
 80034fe:	d036      	beq.n	800356e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d019      	beq.n	800353c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003508:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800350a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800350c:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800350e:	2101      	movs	r1, #1
 8003510:	430a      	orrs	r2, r1
 8003512:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7ff fab4 	bl	8002a80 <HAL_GetTick>
 8003518:	0003      	movs	r3, r0
 800351a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351e:	f7ff faaf 	bl	8002a80 <HAL_GetTick>
 8003522:	0002      	movs	r2, r0
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e1e0      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003530:	4b35      	ldr	r3, [pc, #212]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2202      	movs	r2, #2
 8003536:	4013      	ands	r3, r2
 8003538:	d0f1      	beq.n	800351e <HAL_RCC_OscConfig+0x242>
 800353a:	e018      	b.n	800356e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353c:	4b32      	ldr	r3, [pc, #200]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800353e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003542:	2101      	movs	r1, #1
 8003544:	438a      	bics	r2, r1
 8003546:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003548:	f7ff fa9a 	bl	8002a80 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003552:	f7ff fa95 	bl	8002a80 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1c6      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	d1f1      	bne.n	8003552 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	4013      	ands	r3, r2
 8003576:	d100      	bne.n	800357a <HAL_RCC_OscConfig+0x29e>
 8003578:	e0b4      	b.n	80036e4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357a:	201f      	movs	r0, #31
 800357c:	183b      	adds	r3, r7, r0
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	055b      	lsls	r3, r3, #21
 800358a:	4013      	ands	r3, r2
 800358c:	d110      	bne.n	80035b0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	0549      	lsls	r1, r1, #21
 8003598:	430a      	orrs	r2, r1
 800359a:	61da      	str	r2, [r3, #28]
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	055b      	lsls	r3, r3, #21
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035aa:	183b      	adds	r3, r7, r0
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_RCC_OscConfig+0x338>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4013      	ands	r3, r2
 80035ba:	d11a      	bne.n	80035f2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_RCC_OscConfig+0x338>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <HAL_RCC_OscConfig+0x338>)
 80035c2:	2180      	movs	r1, #128	; 0x80
 80035c4:	0049      	lsls	r1, r1, #1
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ca:	f7ff fa59 	bl	8002a80 <HAL_GetTick>
 80035ce:	0003      	movs	r3, r0
 80035d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d4:	f7ff fa54 	bl	8002a80 <HAL_GetTick>
 80035d8:	0002      	movs	r2, r0
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e185      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_OscConfig+0x338>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10e      	bne.n	8003618 <HAL_RCC_OscConfig+0x33c>
 80035fa:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	4b02      	ldr	r3, [pc, #8]	; (8003608 <HAL_RCC_OscConfig+0x32c>)
 8003600:	2101      	movs	r1, #1
 8003602:	430a      	orrs	r2, r1
 8003604:	621a      	str	r2, [r3, #32]
 8003606:	e035      	b.n	8003674 <HAL_RCC_OscConfig+0x398>
 8003608:	40021000 	.word	0x40021000
 800360c:	fffeffff 	.word	0xfffeffff
 8003610:	fffbffff 	.word	0xfffbffff
 8003614:	40007000 	.word	0x40007000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0x35e>
 8003620:	4bb6      	ldr	r3, [pc, #728]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	4bb5      	ldr	r3, [pc, #724]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003626:	2101      	movs	r1, #1
 8003628:	438a      	bics	r2, r1
 800362a:	621a      	str	r2, [r3, #32]
 800362c:	4bb3      	ldr	r3, [pc, #716]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	4bb2      	ldr	r3, [pc, #712]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003632:	2104      	movs	r1, #4
 8003634:	438a      	bics	r2, r1
 8003636:	621a      	str	r2, [r3, #32]
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x398>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x380>
 8003642:	4bae      	ldr	r3, [pc, #696]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	4bad      	ldr	r3, [pc, #692]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003648:	2104      	movs	r1, #4
 800364a:	430a      	orrs	r2, r1
 800364c:	621a      	str	r2, [r3, #32]
 800364e:	4bab      	ldr	r3, [pc, #684]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	4baa      	ldr	r3, [pc, #680]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003654:	2101      	movs	r1, #1
 8003656:	430a      	orrs	r2, r1
 8003658:	621a      	str	r2, [r3, #32]
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0x398>
 800365c:	4ba7      	ldr	r3, [pc, #668]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	4ba6      	ldr	r3, [pc, #664]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003662:	2101      	movs	r1, #1
 8003664:	438a      	bics	r2, r1
 8003666:	621a      	str	r2, [r3, #32]
 8003668:	4ba4      	ldr	r3, [pc, #656]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800366a:	6a1a      	ldr	r2, [r3, #32]
 800366c:	4ba3      	ldr	r3, [pc, #652]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800366e:	2104      	movs	r1, #4
 8003670:	438a      	bics	r2, r1
 8003672:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d014      	beq.n	80036a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7ff fa00 	bl	8002a80 <HAL_GetTick>
 8003680:	0003      	movs	r3, r0
 8003682:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e009      	b.n	800369a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7ff f9fb 	bl	8002a80 <HAL_GetTick>
 800368a:	0002      	movs	r2, r0
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	4a9b      	ldr	r2, [pc, #620]	; (8003900 <HAL_RCC_OscConfig+0x624>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e12b      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	4b98      	ldr	r3, [pc, #608]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	2202      	movs	r2, #2
 80036a0:	4013      	ands	r3, r2
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x3aa>
 80036a4:	e013      	b.n	80036ce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7ff f9eb 	bl	8002a80 <HAL_GetTick>
 80036aa:	0003      	movs	r3, r0
 80036ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	e009      	b.n	80036c4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7ff f9e6 	bl	8002a80 <HAL_GetTick>
 80036b4:	0002      	movs	r2, r0
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	4a91      	ldr	r2, [pc, #580]	; (8003900 <HAL_RCC_OscConfig+0x624>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e116      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	4b8d      	ldr	r3, [pc, #564]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	2202      	movs	r2, #2
 80036ca:	4013      	ands	r3, r2
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ce:	231f      	movs	r3, #31
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d8:	4b88      	ldr	r3, [pc, #544]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	4b87      	ldr	r3, [pc, #540]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80036de:	4989      	ldr	r1, [pc, #548]	; (8003904 <HAL_RCC_OscConfig+0x628>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2210      	movs	r2, #16
 80036ea:	4013      	ands	r3, r2
 80036ec:	d063      	beq.n	80037b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d12a      	bne.n	800374c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036f6:	4b81      	ldr	r3, [pc, #516]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	4b80      	ldr	r3, [pc, #512]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80036fc:	2104      	movs	r1, #4
 80036fe:	430a      	orrs	r2, r1
 8003700:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003702:	4b7e      	ldr	r3, [pc, #504]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003706:	4b7d      	ldr	r3, [pc, #500]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003708:	2101      	movs	r1, #1
 800370a:	430a      	orrs	r2, r1
 800370c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7ff f9b7 	bl	8002a80 <HAL_GetTick>
 8003712:	0003      	movs	r3, r0
 8003714:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003718:	f7ff f9b2 	bl	8002a80 <HAL_GetTick>
 800371c:	0002      	movs	r2, r0
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0e3      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800372a:	4b74      	ldr	r3, [pc, #464]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	2202      	movs	r2, #2
 8003730:	4013      	ands	r3, r2
 8003732:	d0f1      	beq.n	8003718 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003734:	4b71      	ldr	r3, [pc, #452]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	22f8      	movs	r2, #248	; 0xf8
 800373a:	4393      	bics	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	00da      	lsls	r2, r3, #3
 8003744:	4b6d      	ldr	r3, [pc, #436]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003746:	430a      	orrs	r2, r1
 8003748:	635a      	str	r2, [r3, #52]	; 0x34
 800374a:	e034      	b.n	80037b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	3305      	adds	r3, #5
 8003752:	d111      	bne.n	8003778 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003754:	4b69      	ldr	r3, [pc, #420]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003758:	4b68      	ldr	r3, [pc, #416]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800375a:	2104      	movs	r1, #4
 800375c:	438a      	bics	r2, r1
 800375e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003760:	4b66      	ldr	r3, [pc, #408]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	22f8      	movs	r2, #248	; 0xf8
 8003766:	4393      	bics	r3, r2
 8003768:	0019      	movs	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	00da      	lsls	r2, r3, #3
 8003770:	4b62      	ldr	r3, [pc, #392]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003772:	430a      	orrs	r2, r1
 8003774:	635a      	str	r2, [r3, #52]	; 0x34
 8003776:	e01e      	b.n	80037b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003778:	4b60      	ldr	r3, [pc, #384]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800377a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377c:	4b5f      	ldr	r3, [pc, #380]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800377e:	2104      	movs	r1, #4
 8003780:	430a      	orrs	r2, r1
 8003782:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003784:	4b5d      	ldr	r3, [pc, #372]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003788:	4b5c      	ldr	r3, [pc, #368]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800378a:	2101      	movs	r1, #1
 800378c:	438a      	bics	r2, r1
 800378e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003790:	f7ff f976 	bl	8002a80 <HAL_GetTick>
 8003794:	0003      	movs	r3, r0
 8003796:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800379a:	f7ff f971 	bl	8002a80 <HAL_GetTick>
 800379e:	0002      	movs	r2, r0
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e0a2      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	2202      	movs	r2, #2
 80037b2:	4013      	ands	r3, r2
 80037b4:	d1f1      	bne.n	800379a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d100      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4e4>
 80037be:	e097      	b.n	80038f0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c0:	4b4e      	ldr	r3, [pc, #312]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	220c      	movs	r2, #12
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d100      	bne.n	80037ce <HAL_RCC_OscConfig+0x4f2>
 80037cc:	e06b      	b.n	80038a6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d14c      	bne.n	8003870 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b49      	ldr	r3, [pc, #292]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b48      	ldr	r3, [pc, #288]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80037dc:	494a      	ldr	r1, [pc, #296]	; (8003908 <HAL_RCC_OscConfig+0x62c>)
 80037de:	400a      	ands	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7ff f94d 	bl	8002a80 <HAL_GetTick>
 80037e6:	0003      	movs	r3, r0
 80037e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7ff f948 	bl	8002a80 <HAL_GetTick>
 80037f0:	0002      	movs	r2, r0
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e079      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	049b      	lsls	r3, r3, #18
 8003806:	4013      	ands	r3, r2
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380a:	4b3c      	ldr	r3, [pc, #240]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	220f      	movs	r2, #15
 8003810:	4393      	bics	r3, r2
 8003812:	0019      	movs	r1, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4b38      	ldr	r3, [pc, #224]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800381a:	430a      	orrs	r2, r1
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4a3a      	ldr	r2, [pc, #232]	; (800390c <HAL_RCC_OscConfig+0x630>)
 8003824:	4013      	ands	r3, r2
 8003826:	0019      	movs	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	431a      	orrs	r2, r3
 8003832:	4b32      	ldr	r3, [pc, #200]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b30      	ldr	r3, [pc, #192]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	0449      	lsls	r1, r1, #17
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7ff f91b 	bl	8002a80 <HAL_GetTick>
 800384a:	0003      	movs	r3, r0
 800384c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003850:	f7ff f916 	bl	8002a80 <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e047      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003862:	4b26      	ldr	r3, [pc, #152]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	049b      	lsls	r3, r3, #18
 800386a:	4013      	ands	r3, r2
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x574>
 800386e:	e03f      	b.n	80038f0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b21      	ldr	r3, [pc, #132]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 8003876:	4924      	ldr	r1, [pc, #144]	; (8003908 <HAL_RCC_OscConfig+0x62c>)
 8003878:	400a      	ands	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7ff f900 	bl	8002a80 <HAL_GetTick>
 8003880:	0003      	movs	r3, r0
 8003882:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003886:	f7ff f8fb 	bl	8002a80 <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e02c      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	049b      	lsls	r3, r3, #18
 80038a0:	4013      	ands	r3, r2
 80038a2:	d1f0      	bne.n	8003886 <HAL_RCC_OscConfig+0x5aa>
 80038a4:	e024      	b.n	80038f0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e01f      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_RCC_OscConfig+0x620>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	025b      	lsls	r3, r3, #9
 80038c4:	401a      	ands	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10e      	bne.n	80038ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	220f      	movs	r2, #15
 80038d2:	401a      	ands	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	23f0      	movs	r3, #240	; 0xf0
 80038e0:	039b      	lsls	r3, r3, #14
 80038e2:	401a      	ands	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	0018      	movs	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b008      	add	sp, #32
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	40021000 	.word	0x40021000
 8003900:	00001388 	.word	0x00001388
 8003904:	efffffff 	.word	0xefffffff
 8003908:	feffffff 	.word	0xfeffffff
 800390c:	ffc2ffff 	.word	0xffc2ffff

08003910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b3      	b.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b5b      	ldr	r3, [pc, #364]	; (8003a94 <HAL_RCC_ClockConfig+0x184>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d911      	bls.n	8003956 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <HAL_RCC_ClockConfig+0x184>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	4393      	bics	r3, r2
 800393a:	0019      	movs	r1, r3
 800393c:	4b55      	ldr	r3, [pc, #340]	; (8003a94 <HAL_RCC_ClockConfig+0x184>)
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003944:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_ClockConfig+0x184>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4013      	ands	r3, r2
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d001      	beq.n	8003956 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e09a      	b.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2202      	movs	r2, #2
 800395c:	4013      	ands	r3, r2
 800395e:	d015      	beq.n	800398c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2204      	movs	r2, #4
 8003966:	4013      	ands	r3, r2
 8003968:	d006      	beq.n	8003978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800396a:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 8003970:	21e0      	movs	r1, #224	; 0xe0
 8003972:	00c9      	lsls	r1, r1, #3
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	22f0      	movs	r2, #240	; 0xf0
 800397e:	4393      	bics	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	4b44      	ldr	r3, [pc, #272]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	d040      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b3e      	ldr	r3, [pc, #248]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	029b      	lsls	r3, r3, #10
 80039a6:	4013      	ands	r3, r2
 80039a8:	d114      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e06e      	b.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	049b      	lsls	r3, r3, #18
 80039be:	4013      	ands	r3, r2
 80039c0:	d108      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e062      	b.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c6:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2202      	movs	r2, #2
 80039cc:	4013      	ands	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e05b      	b.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2203      	movs	r2, #3
 80039da:	4393      	bics	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 80039e4:	430a      	orrs	r2, r1
 80039e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e8:	f7ff f84a 	bl	8002a80 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f0:	e009      	b.n	8003a06 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f2:	f7ff f845 	bl	8002a80 <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	4a27      	ldr	r2, [pc, #156]	; (8003a9c <HAL_RCC_ClockConfig+0x18c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e042      	b.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	220c      	movs	r2, #12
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d1ec      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a18:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_RCC_ClockConfig+0x184>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4013      	ands	r3, r2
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d211      	bcs.n	8003a4a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_RCC_ClockConfig+0x184>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_RCC_ClockConfig+0x184>)
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a38:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_RCC_ClockConfig+0x184>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e020      	b.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2204      	movs	r2, #4
 8003a50:	4013      	ands	r3, r2
 8003a52:	d009      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <HAL_RCC_ClockConfig+0x190>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a68:	f000 f820 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003a6c:	0001      	movs	r1, r0
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x188>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	220f      	movs	r2, #15
 8003a76:	4013      	ands	r3, r2
 8003a78:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <HAL_RCC_ClockConfig+0x194>)
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	000a      	movs	r2, r1
 8003a7e:	40da      	lsrs	r2, r3
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x198>)
 8003a82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7fe ffb5 	bl	80029f4 <HAL_InitTick>
  
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	00001388 	.word	0x00001388
 8003aa0:	fffff8ff 	.word	0xfffff8ff
 8003aa4:	0800692c 	.word	0x0800692c
 8003aa8:	20000114 	.word	0x20000114

08003aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	220c      	movs	r2, #12
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d002      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x30>
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x36>
 8003ada:	e02c      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ade:	613b      	str	r3, [r7, #16]
      break;
 8003ae0:	e02c      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0c9b      	lsrs	r3, r3, #18
 8003ae6:	220f      	movs	r2, #15
 8003ae8:	4013      	ands	r3, r2
 8003aea:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aec:	5cd3      	ldrb	r3, [r2, r3]
 8003aee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	220f      	movs	r2, #15
 8003af6:	4013      	ands	r3, r2
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	025b      	lsls	r3, r3, #9
 8003b04:	4013      	ands	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	4810      	ldr	r0, [pc, #64]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b0c:	f7fc fafc 	bl	8000108 <__udivsi3>
 8003b10:	0003      	movs	r3, r0
 8003b12:	001a      	movs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4353      	muls	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e009      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	000a      	movs	r2, r1
 8003b20:	0152      	lsls	r2, r2, #5
 8003b22:	1a52      	subs	r2, r2, r1
 8003b24:	0193      	lsls	r3, r2, #6
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	185b      	adds	r3, r3, r1
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	613b      	str	r3, [r7, #16]
      break;
 8003b34:	e002      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b38:	613b      	str	r3, [r7, #16]
      break;
 8003b3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b3c:	693b      	ldr	r3, [r7, #16]
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b006      	add	sp, #24
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	00f42400 	.word	0x00f42400
 8003b50:	08006944 	.word	0x08006944
 8003b54:	08006954 	.word	0x08006954
 8003b58:	007a1200 	.word	0x007a1200

08003b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b60:	4b02      	ldr	r3, [pc, #8]	; (8003b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	20000114 	.word	0x20000114

08003b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b74:	f7ff fff2 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003b78:	0001      	movs	r1, r0
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	2207      	movs	r2, #7
 8003b82:	4013      	ands	r3, r2
 8003b84:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	40d9      	lsrs	r1, r3
 8003b8a:	000b      	movs	r3, r1
}    
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	40021000 	.word	0x40021000
 8003b98:	0800693c 	.word	0x0800693c

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	025b      	lsls	r3, r3, #9
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d100      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003bb8:	e08e      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2017      	movs	r0, #23
 8003bbc:	183b      	adds	r3, r7, r0
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc2:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	055b      	lsls	r3, r3, #21
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d110      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	4b54      	ldr	r3, [pc, #336]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	0549      	lsls	r1, r1, #21
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	61da      	str	r2, [r3, #28]
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	055b      	lsls	r3, r3, #21
 8003be4:	4013      	ands	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bea:	183b      	adds	r3, r7, r0
 8003bec:	2201      	movs	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d11a      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfc:	4b49      	ldr	r3, [pc, #292]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	0049      	lsls	r1, r1, #1
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fe ff39 	bl	8002a80 <HAL_GetTick>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	e008      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c14:	f7fe ff34 	bl	8002a80 <HAL_GetTick>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e077      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	23c0      	movs	r3, #192	; 0xc0
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d034      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	23c0      	movs	r3, #192	; 0xc0
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d02c      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c54:	4b32      	ldr	r3, [pc, #200]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a33      	ldr	r2, [pc, #204]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5e:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c60:	6a1a      	ldr	r2, [r3, #32]
 8003c62:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	0249      	lsls	r1, r1, #9
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c6e:	6a1a      	ldr	r2, [r3, #32]
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c72:	492e      	ldr	r1, [pc, #184]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003c74:	400a      	ands	r2, r1
 8003c76:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c78:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	4013      	ands	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7fe fefb 	bl	8002a80 <HAL_GetTick>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	e009      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fe fef6 	bl	8002a80 <HAL_GetTick>
 8003c94:	0002      	movs	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e038      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	4013      	ands	r3, r2
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cc2:	2317      	movs	r3, #23
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cd2:	4918      	ldr	r1, [pc, #96]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	4393      	bics	r3, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	2210      	movs	r2, #16
 8003d06:	4393      	bics	r3, r2
 8003d08:	0019      	movs	r1, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d10:	430a      	orrs	r2, r1
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b006      	add	sp, #24
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
 8003d28:	fffffcff 	.word	0xfffffcff
 8003d2c:	fffeffff 	.word	0xfffeffff
 8003d30:	00001388 	.word	0x00001388
 8003d34:	efffffff 	.word	0xefffffff

08003d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e042      	b.n	8003dd0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	223d      	movs	r2, #61	; 0x3d
 8003d4e:	5c9b      	ldrb	r3, [r3, r2]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	223c      	movs	r2, #60	; 0x3c
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7fe fc0b 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	223d      	movs	r2, #61	; 0x3d
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	0019      	movs	r1, r3
 8003d78:	0010      	movs	r0, r2
 8003d7a:	f000 f9dd 	bl	8004138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2246      	movs	r2, #70	; 0x46
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	223e      	movs	r2, #62	; 0x3e
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223f      	movs	r2, #63	; 0x3f
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2241      	movs	r2, #65	; 0x41
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2242      	movs	r2, #66	; 0x42
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2243      	movs	r2, #67	; 0x43
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2244      	movs	r2, #68	; 0x44
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2245      	movs	r2, #69	; 0x45
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	223d      	movs	r2, #61	; 0x3d
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	223d      	movs	r2, #61	; 0x3d
 8003de4:	5c9b      	ldrb	r3, [r3, r2]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d001      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e035      	b.n	8003e5c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	223d      	movs	r2, #61	; 0x3d
 8003df4:	2102      	movs	r1, #2
 8003df6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	430a      	orrs	r2, r1
 8003e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <HAL_TIM_Base_Start_IT+0x8c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_TIM_Base_Start_IT+0x4e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <HAL_TIM_Base_Start_IT+0x90>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_TIM_Base_Start_IT+0x4e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <HAL_TIM_Base_Start_IT+0x94>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d111      	bne.n	8003e4a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b06      	cmp	r3, #6
 8003e36:	d010      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2101      	movs	r1, #1
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e48:	e007      	b.n	8003e5a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b004      	add	sp, #16
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40014000 	.word	0x40014000

08003e70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2101      	movs	r1, #1
 8003e84:	438a      	bics	r2, r1
 8003e86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <HAL_TIM_Base_Stop_IT+0x54>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	d10d      	bne.n	8003eb0 <HAL_TIM_Base_Stop_IT+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <HAL_TIM_Base_Stop_IT+0x58>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d107      	bne.n	8003eb0 <HAL_TIM_Base_Stop_IT+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	438a      	bics	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	223d      	movs	r2, #61	; 0x3d
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b002      	add	sp, #8
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	00001111 	.word	0x00001111
 8003ec8:	00000444 	.word	0x00000444

08003ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2202      	movs	r2, #2
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d124      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d11d      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	4252      	negs	r2, r2
 8003ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2203      	movs	r2, #3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 f8fa 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e007      	b.n	8003f26 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 f8ed 	bl	80040f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 f8f9 	bl	8004118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2204      	movs	r2, #4
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d125      	bne.n	8003f86 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2204      	movs	r2, #4
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d11e      	bne.n	8003f86 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2205      	movs	r2, #5
 8003f4e:	4252      	negs	r2, r2
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	23c0      	movs	r3, #192	; 0xc0
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4013      	ands	r3, r2
 8003f64:	d004      	beq.n	8003f70 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 f8cd 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003f6e:	e007      	b.n	8003f80 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 f8c0 	bl	80040f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 f8cc 	bl	8004118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d124      	bne.n	8003fde <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d11d      	bne.n	8003fde <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2209      	movs	r2, #9
 8003fa8:	4252      	negs	r2, r2
 8003faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2204      	movs	r2, #4
 8003fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f000 f8a1 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003fc6:	e007      	b.n	8003fd8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 f894 	bl	80040f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f000 f8a0 	bl	8004118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d125      	bne.n	8004038 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d11e      	bne.n	8004038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2211      	movs	r2, #17
 8004000:	4252      	negs	r2, r2
 8004002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2208      	movs	r2, #8
 8004008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	23c0      	movs	r3, #192	; 0xc0
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4013      	ands	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	0018      	movs	r0, r3
 800401c:	f000 f874 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8004020:	e007      	b.n	8004032 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f000 f867 	bl	80040f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f000 f873 	bl	8004118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2201      	movs	r2, #1
 8004040:	4013      	ands	r3, r2
 8004042:	2b01      	cmp	r3, #1
 8004044:	d10f      	bne.n	8004066 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	4013      	ands	r3, r2
 8004050:	2b01      	cmp	r3, #1
 8004052:	d108      	bne.n	8004066 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2202      	movs	r2, #2
 800405a:	4252      	negs	r2, r2
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0018      	movs	r0, r3
 8004062:	f7fd fd1d 	bl	8001aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	4013      	ands	r3, r2
 8004070:	2b80      	cmp	r3, #128	; 0x80
 8004072:	d10f      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	4013      	ands	r3, r2
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d108      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2281      	movs	r2, #129	; 0x81
 8004088:	4252      	negs	r2, r2
 800408a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 f8d0 	bl	8004234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	4013      	ands	r3, r2
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d10f      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2240      	movs	r2, #64	; 0x40
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d108      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2241      	movs	r2, #65	; 0x41
 80040b6:	4252      	negs	r2, r2
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	0018      	movs	r0, r3
 80040be:	f000 f833 	bl	8004128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2220      	movs	r2, #32
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d10f      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	4013      	ands	r3, r2
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d108      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2221      	movs	r2, #33	; 0x21
 80040e4:	4252      	negs	r2, r2
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f000 f89a 	bl	8004224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	b002      	add	sp, #8
 8004136:	bd80      	pop	{r7, pc}

08004138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <TIM_Base_SetConfig+0xd0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_Base_SetConfig+0x20>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a2e      	ldr	r2, [pc, #184]	; (800420c <TIM_Base_SetConfig+0xd4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d108      	bne.n	800416a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2270      	movs	r2, #112	; 0x70
 800415c:	4393      	bics	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <TIM_Base_SetConfig+0xd0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <TIM_Base_SetConfig+0x62>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a25      	ldr	r2, [pc, #148]	; (800420c <TIM_Base_SetConfig+0xd4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_Base_SetConfig+0x62>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a24      	ldr	r2, [pc, #144]	; (8004210 <TIM_Base_SetConfig+0xd8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_Base_SetConfig+0x62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <TIM_Base_SetConfig+0xdc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <TIM_Base_SetConfig+0xe0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0x62>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a21      	ldr	r2, [pc, #132]	; (800421c <TIM_Base_SetConfig+0xe4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a20      	ldr	r2, [pc, #128]	; (8004220 <TIM_Base_SetConfig+0xe8>)
 800419e:	4013      	ands	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	4393      	bics	r3, r2
 80041b2:	001a      	movs	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <TIM_Base_SetConfig+0xd0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_Base_SetConfig+0xba>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <TIM_Base_SetConfig+0xdc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_Base_SetConfig+0xba>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a0c      	ldr	r2, [pc, #48]	; (8004218 <TIM_Base_SetConfig+0xe0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_Base_SetConfig+0xba>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a0b      	ldr	r2, [pc, #44]	; (800421c <TIM_Base_SetConfig+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d103      	bne.n	80041fa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	615a      	str	r2, [r3, #20]
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40000400 	.word	0x40000400
 8004210:	40002000 	.word	0x40002000
 8004214:	40014000 	.word	0x40014000
 8004218:	40014400 	.word	0x40014400
 800421c:	40014800 	.word	0x40014800
 8004220:	fffffcff 	.word	0xfffffcff

08004224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e044      	b.n	80042e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d107      	bne.n	800426e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2278      	movs	r2, #120	; 0x78
 8004262:	2100      	movs	r1, #0
 8004264:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	0018      	movs	r0, r3
 800426a:	f7fe f9cd 	bl	8002608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2224      	movs	r2, #36	; 0x24
 8004272:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2101      	movs	r1, #1
 8004280:	438a      	bics	r2, r1
 8004282:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0018      	movs	r0, r3
 8004288:	f000 fc3a 	bl	8004b00 <UART_SetConfig>
 800428c:	0003      	movs	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e024      	b.n	80042e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 fd6d 	bl	8004d80 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	490d      	ldr	r1, [pc, #52]	; (80042e8 <HAL_UART_Init+0xa4>)
 80042b2:	400a      	ands	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2108      	movs	r1, #8
 80042c2:	438a      	bics	r2, r1
 80042c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2101      	movs	r1, #1
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 fe05 	bl	8004ee8 <UART_CheckIdleState>
 80042de:	0003      	movs	r3, r0
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b002      	add	sp, #8
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	fffff7ff 	.word	0xfffff7ff

080042ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e030      	b.n	8004360 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2224      	movs	r2, #36	; 0x24
 8004302:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2101      	movs	r1, #1
 8004310:	438a      	bics	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0018      	movs	r0, r3
 8004330:	f7fe f9fa 	bl	8002728 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2284      	movs	r2, #132	; 0x84
 8004338:	2100      	movs	r1, #0
 800433a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2280      	movs	r2, #128	; 0x80
 8004346:	2100      	movs	r1, #0
 8004348:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2278      	movs	r2, #120	; 0x78
 800435a:	2100      	movs	r1, #0
 800435c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	1dbb      	adds	r3, r7, #6
 8004376:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437c:	2b20      	cmp	r3, #32
 800437e:	d000      	beq.n	8004382 <HAL_UART_Transmit+0x1a>
 8004380:	e08d      	b.n	800449e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_UART_Transmit+0x28>
 8004388:	1dbb      	adds	r3, r7, #6
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e085      	b.n	80044a0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	015b      	lsls	r3, r3, #5
 800439c:	429a      	cmp	r2, r3
 800439e:	d109      	bne.n	80043b4 <HAL_UART_Transmit+0x4c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2201      	movs	r2, #1
 80043ac:	4013      	ands	r3, r2
 80043ae:	d001      	beq.n	80043b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e075      	b.n	80044a0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2284      	movs	r2, #132	; 0x84
 80043b8:	2100      	movs	r1, #0
 80043ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2221      	movs	r2, #33	; 0x21
 80043c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c2:	f7fe fb5d 	bl	8002a80 <HAL_GetTick>
 80043c6:	0003      	movs	r3, r0
 80043c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1dba      	adds	r2, r7, #6
 80043ce:	2150      	movs	r1, #80	; 0x50
 80043d0:	8812      	ldrh	r2, [r2, #0]
 80043d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1dba      	adds	r2, r7, #6
 80043d8:	2152      	movs	r1, #82	; 0x52
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	015b      	lsls	r3, r3, #5
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d108      	bne.n	80043fc <HAL_UART_Transmit+0x94>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e003      	b.n	8004404 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004404:	e030      	b.n	8004468 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	0013      	movs	r3, r2
 8004410:	2200      	movs	r2, #0
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	f000 fe10 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d004      	beq.n	8004426 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e03c      	b.n	80044a0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	881a      	ldrh	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	05d2      	lsls	r2, r2, #23
 8004436:	0dd2      	lsrs	r2, r2, #23
 8004438:	b292      	uxth	r2, r2
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	3302      	adds	r3, #2
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e008      	b.n	8004456 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	781a      	ldrb	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b292      	uxth	r2, r2
 800444e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	3301      	adds	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2252      	movs	r2, #82	; 0x52
 800445a:	5a9b      	ldrh	r3, [r3, r2]
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b299      	uxth	r1, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2252      	movs	r2, #82	; 0x52
 8004466:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2252      	movs	r2, #82	; 0x52
 800446c:	5a9b      	ldrh	r3, [r3, r2]
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1c8      	bne.n	8004406 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	0013      	movs	r3, r2
 800447e:	2200      	movs	r2, #0
 8004480:	2140      	movs	r1, #64	; 0x40
 8004482:	f000 fdd9 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004486:	1e03      	subs	r3, r0, #0
 8004488:	d004      	beq.n	8004494 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e005      	b.n	80044a0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b008      	add	sp, #32
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	1dbb      	adds	r3, r7, #6
 80044b4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2280      	movs	r2, #128	; 0x80
 80044ba:	589b      	ldr	r3, [r3, r2]
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d145      	bne.n	800454c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_UART_Receive_IT+0x26>
 80044c6:	1dbb      	adds	r3, r7, #6
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e03d      	b.n	800454e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	015b      	lsls	r3, r3, #5
 80044da:	429a      	cmp	r2, r3
 80044dc:	d109      	bne.n	80044f2 <HAL_UART_Receive_IT+0x4a>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d105      	bne.n	80044f2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2201      	movs	r2, #1
 80044ea:	4013      	ands	r3, r2
 80044ec:	d001      	beq.n	80044f2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e02d      	b.n	800454e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	4013      	ands	r3, r2
 8004504:	d019      	beq.n	800453a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004506:	f3ef 8310 	mrs	r3, PRIMASK
 800450a:	613b      	str	r3, [r7, #16]
  return(result);
 800450c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	2301      	movs	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f383 8810 	msr	PRIMASK, r3
}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	04c9      	lsls	r1, r1, #19
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f383 8810 	msr	PRIMASK, r3
}
 8004538:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800453a:	1dbb      	adds	r3, r7, #6
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	0018      	movs	r0, r3
 8004544:	f000 fde2 	bl	800510c <UART_Start_Receive_IT>
 8004548:	0003      	movs	r3, r0
 800454a:	e000      	b.n	800454e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
  }
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b008      	add	sp, #32
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b0ab      	sub	sp, #172	; 0xac
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	22a4      	movs	r2, #164	; 0xa4
 8004568:	18b9      	adds	r1, r7, r2
 800456a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	20a0      	movs	r0, #160	; 0xa0
 8004574:	1839      	adds	r1, r7, r0
 8004576:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	219c      	movs	r1, #156	; 0x9c
 8004580:	1879      	adds	r1, r7, r1
 8004582:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004584:	0011      	movs	r1, r2
 8004586:	18bb      	adds	r3, r7, r2
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a99      	ldr	r2, [pc, #612]	; (80047f0 <HAL_UART_IRQHandler+0x298>)
 800458c:	4013      	ands	r3, r2
 800458e:	2298      	movs	r2, #152	; 0x98
 8004590:	18bc      	adds	r4, r7, r2
 8004592:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004594:	18bb      	adds	r3, r7, r2
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d114      	bne.n	80045c6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800459c:	187b      	adds	r3, r7, r1
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2220      	movs	r2, #32
 80045a2:	4013      	ands	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045a6:	183b      	adds	r3, r7, r0
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2220      	movs	r2, #32
 80045ac:	4013      	ands	r3, r2
 80045ae:	d00a      	beq.n	80045c6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d100      	bne.n	80045ba <HAL_UART_IRQHandler+0x62>
 80045b8:	e286      	b.n	8004ac8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	0010      	movs	r0, r2
 80045c2:	4798      	blx	r3
      }
      return;
 80045c4:	e280      	b.n	8004ac8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045c6:	2398      	movs	r3, #152	; 0x98
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d100      	bne.n	80045d2 <HAL_UART_IRQHandler+0x7a>
 80045d0:	e114      	b.n	80047fc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045d2:	239c      	movs	r3, #156	; 0x9c
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2201      	movs	r2, #1
 80045da:	4013      	ands	r3, r2
 80045dc:	d106      	bne.n	80045ec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045de:	23a0      	movs	r3, #160	; 0xa0
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a83      	ldr	r2, [pc, #524]	; (80047f4 <HAL_UART_IRQHandler+0x29c>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	d100      	bne.n	80045ec <HAL_UART_IRQHandler+0x94>
 80045ea:	e107      	b.n	80047fc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045ec:	23a4      	movs	r3, #164	; 0xa4
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2201      	movs	r2, #1
 80045f4:	4013      	ands	r3, r2
 80045f6:	d012      	beq.n	800461e <HAL_UART_IRQHandler+0xc6>
 80045f8:	23a0      	movs	r3, #160	; 0xa0
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4013      	ands	r3, r2
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2201      	movs	r2, #1
 800460c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2284      	movs	r2, #132	; 0x84
 8004612:	589b      	ldr	r3, [r3, r2]
 8004614:	2201      	movs	r2, #1
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2184      	movs	r1, #132	; 0x84
 800461c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800461e:	23a4      	movs	r3, #164	; 0xa4
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d011      	beq.n	800464e <HAL_UART_IRQHandler+0xf6>
 800462a:	239c      	movs	r3, #156	; 0x9c
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2201      	movs	r2, #1
 8004632:	4013      	ands	r3, r2
 8004634:	d00b      	beq.n	800464e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2202      	movs	r2, #2
 800463c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2284      	movs	r2, #132	; 0x84
 8004642:	589b      	ldr	r3, [r3, r2]
 8004644:	2204      	movs	r2, #4
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2184      	movs	r1, #132	; 0x84
 800464c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800464e:	23a4      	movs	r3, #164	; 0xa4
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2204      	movs	r2, #4
 8004656:	4013      	ands	r3, r2
 8004658:	d011      	beq.n	800467e <HAL_UART_IRQHandler+0x126>
 800465a:	239c      	movs	r3, #156	; 0x9c
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	4013      	ands	r3, r2
 8004664:	d00b      	beq.n	800467e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2204      	movs	r2, #4
 800466c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2284      	movs	r2, #132	; 0x84
 8004672:	589b      	ldr	r3, [r3, r2]
 8004674:	2202      	movs	r2, #2
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2184      	movs	r1, #132	; 0x84
 800467c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800467e:	23a4      	movs	r3, #164	; 0xa4
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2208      	movs	r2, #8
 8004686:	4013      	ands	r3, r2
 8004688:	d017      	beq.n	80046ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800468a:	23a0      	movs	r3, #160	; 0xa0
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2220      	movs	r2, #32
 8004692:	4013      	ands	r3, r2
 8004694:	d105      	bne.n	80046a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004696:	239c      	movs	r3, #156	; 0x9c
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2201      	movs	r2, #1
 800469e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a0:	d00b      	beq.n	80046ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2208      	movs	r2, #8
 80046a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2284      	movs	r2, #132	; 0x84
 80046ae:	589b      	ldr	r3, [r3, r2]
 80046b0:	2208      	movs	r2, #8
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2184      	movs	r1, #132	; 0x84
 80046b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046ba:	23a4      	movs	r3, #164	; 0xa4
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	4013      	ands	r3, r2
 80046c6:	d013      	beq.n	80046f0 <HAL_UART_IRQHandler+0x198>
 80046c8:	23a0      	movs	r3, #160	; 0xa0
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	04db      	lsls	r3, r3, #19
 80046d2:	4013      	ands	r3, r2
 80046d4:	d00c      	beq.n	80046f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	0112      	lsls	r2, r2, #4
 80046de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2284      	movs	r2, #132	; 0x84
 80046e4:	589b      	ldr	r3, [r3, r2]
 80046e6:	2220      	movs	r2, #32
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2184      	movs	r1, #132	; 0x84
 80046ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2284      	movs	r2, #132	; 0x84
 80046f4:	589b      	ldr	r3, [r3, r2]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d100      	bne.n	80046fc <HAL_UART_IRQHandler+0x1a4>
 80046fa:	e1e7      	b.n	8004acc <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046fc:	23a4      	movs	r3, #164	; 0xa4
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2220      	movs	r2, #32
 8004704:	4013      	ands	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004708:	23a0      	movs	r3, #160	; 0xa0
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2220      	movs	r2, #32
 8004710:	4013      	ands	r3, r2
 8004712:	d008      	beq.n	8004726 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	0010      	movs	r0, r2
 8004724:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2284      	movs	r2, #132	; 0x84
 800472a:	589b      	ldr	r3, [r3, r2]
 800472c:	2194      	movs	r1, #148	; 0x94
 800472e:	187a      	adds	r2, r7, r1
 8004730:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2240      	movs	r2, #64	; 0x40
 800473a:	4013      	ands	r3, r2
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d004      	beq.n	800474a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004740:	187b      	adds	r3, r7, r1
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2228      	movs	r2, #40	; 0x28
 8004746:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004748:	d047      	beq.n	80047da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f000 fd93 	bl	8005278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2240      	movs	r2, #64	; 0x40
 800475a:	4013      	ands	r3, r2
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d137      	bne.n	80047d0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004760:	f3ef 8310 	mrs	r3, PRIMASK
 8004764:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004768:	2090      	movs	r0, #144	; 0x90
 800476a:	183a      	adds	r2, r7, r0
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	2301      	movs	r3, #1
 8004770:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004774:	f383 8810 	msr	PRIMASK, r3
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	438a      	bics	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
 800478a:	183b      	adds	r3, r7, r0
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004792:	f383 8810 	msr	PRIMASK, r3
}
 8004796:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479c:	2b00      	cmp	r3, #0
 800479e:	d012      	beq.n	80047c6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a4:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <HAL_UART_IRQHandler+0x2a0>)
 80047a6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fe fab9 	bl	8002d24 <HAL_DMA_Abort_IT>
 80047b2:	1e03      	subs	r3, r0, #0
 80047b4:	d01a      	beq.n	80047ec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c0:	0018      	movs	r0, r3
 80047c2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	e012      	b.n	80047ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7fd fbfd 	bl	8001fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ce:	e00d      	b.n	80047ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7fd fbf8 	bl	8001fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e008      	b.n	80047ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0018      	movs	r0, r3
 80047de:	f7fd fbf3 	bl	8001fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2284      	movs	r2, #132	; 0x84
 80047e6:	2100      	movs	r1, #0
 80047e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80047ea:	e16f      	b.n	8004acc <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	46c0      	nop			; (mov r8, r8)
    return;
 80047ee:	e16d      	b.n	8004acc <HAL_UART_IRQHandler+0x574>
 80047f0:	0000080f 	.word	0x0000080f
 80047f4:	04000120 	.word	0x04000120
 80047f8:	08005341 	.word	0x08005341

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004800:	2b01      	cmp	r3, #1
 8004802:	d000      	beq.n	8004806 <HAL_UART_IRQHandler+0x2ae>
 8004804:	e139      	b.n	8004a7a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004806:	23a4      	movs	r3, #164	; 0xa4
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2210      	movs	r2, #16
 800480e:	4013      	ands	r3, r2
 8004810:	d100      	bne.n	8004814 <HAL_UART_IRQHandler+0x2bc>
 8004812:	e132      	b.n	8004a7a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004814:	23a0      	movs	r3, #160	; 0xa0
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2210      	movs	r2, #16
 800481c:	4013      	ands	r3, r2
 800481e:	d100      	bne.n	8004822 <HAL_UART_IRQHandler+0x2ca>
 8004820:	e12b      	b.n	8004a7a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2210      	movs	r2, #16
 8004828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2240      	movs	r2, #64	; 0x40
 8004832:	4013      	ands	r3, r2
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d000      	beq.n	800483a <HAL_UART_IRQHandler+0x2e2>
 8004838:	e09f      	b.n	800497a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	217e      	movs	r1, #126	; 0x7e
 8004844:	187b      	adds	r3, r7, r1
 8004846:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004848:	187b      	adds	r3, r7, r1
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d100      	bne.n	8004852 <HAL_UART_IRQHandler+0x2fa>
 8004850:	e13e      	b.n	8004ad0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2258      	movs	r2, #88	; 0x58
 8004856:	5a9b      	ldrh	r3, [r3, r2]
 8004858:	187a      	adds	r2, r7, r1
 800485a:	8812      	ldrh	r2, [r2, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d300      	bcc.n	8004862 <HAL_UART_IRQHandler+0x30a>
 8004860:	e136      	b.n	8004ad0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	187a      	adds	r2, r7, r1
 8004866:	215a      	movs	r1, #90	; 0x5a
 8004868:	8812      	ldrh	r2, [r2, #0]
 800486a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b20      	cmp	r3, #32
 8004874:	d06f      	beq.n	8004956 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004876:	f3ef 8310 	mrs	r3, PRIMASK
 800487a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800487e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004880:	2301      	movs	r3, #1
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4992      	ldr	r1, [pc, #584]	; (8004ae0 <HAL_UART_IRQHandler+0x588>)
 8004898:	400a      	ands	r2, r1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	f383 8810 	msr	PRIMASK, r3
}
 80048a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a8:	f3ef 8310 	mrs	r3, PRIMASK
 80048ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b0:	677b      	str	r3, [r7, #116]	; 0x74
 80048b2:	2301      	movs	r3, #1
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2101      	movs	r1, #1
 80048ca:	438a      	bics	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]
 80048ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048da:	f3ef 8310 	mrs	r3, PRIMASK
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80048e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e2:	673b      	str	r3, [r7, #112]	; 0x70
 80048e4:	2301      	movs	r3, #1
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ea:	f383 8810 	msr	PRIMASK, r3
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2140      	movs	r1, #64	; 0x40
 80048fc:	438a      	bics	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]
 8004900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004902:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004906:	f383 8810 	msr	PRIMASK, r3
}
 800490a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	2120      	movs	r1, #32
 8004912:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491a:	f3ef 8310 	mrs	r3, PRIMASK
 800491e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004920:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004924:	2301      	movs	r3, #1
 8004926:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800492a:	f383 8810 	msr	PRIMASK, r3
}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2110      	movs	r1, #16
 800493c:	438a      	bics	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004942:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004946:	f383 8810 	msr	PRIMASK, r3
}
 800494a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004950:	0018      	movs	r0, r3
 8004952:	f7fe f9af 	bl	8002cb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2258      	movs	r2, #88	; 0x58
 8004960:	5a9a      	ldrh	r2, [r3, r2]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	215a      	movs	r1, #90	; 0x5a
 8004966:	5a5b      	ldrh	r3, [r3, r1]
 8004968:	b29b      	uxth	r3, r3
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f000 f8b8 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004978:	e0aa      	b.n	8004ad0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2258      	movs	r2, #88	; 0x58
 800497e:	5a99      	ldrh	r1, [r3, r2]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	225a      	movs	r2, #90	; 0x5a
 8004984:	5a9b      	ldrh	r3, [r3, r2]
 8004986:	b29a      	uxth	r2, r3
 8004988:	208e      	movs	r0, #142	; 0x8e
 800498a:	183b      	adds	r3, r7, r0
 800498c:	1a8a      	subs	r2, r1, r2
 800498e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	225a      	movs	r2, #90	; 0x5a
 8004994:	5a9b      	ldrh	r3, [r3, r2]
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d100      	bne.n	800499e <HAL_UART_IRQHandler+0x446>
 800499c:	e09a      	b.n	8004ad4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800499e:	183b      	adds	r3, r7, r0
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d100      	bne.n	80049a8 <HAL_UART_IRQHandler+0x450>
 80049a6:	e095      	b.n	8004ad4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a8:	f3ef 8310 	mrs	r3, PRIMASK
 80049ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80049ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b0:	2488      	movs	r4, #136	; 0x88
 80049b2:	193a      	adds	r2, r7, r4
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	2301      	movs	r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f383 8810 	msr	PRIMASK, r3
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4945      	ldr	r1, [pc, #276]	; (8004ae4 <HAL_UART_IRQHandler+0x58c>)
 80049ce:	400a      	ands	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	193b      	adds	r3, r7, r4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e0:	f3ef 8310 	mrs	r3, PRIMASK
 80049e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80049e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	2484      	movs	r4, #132	; 0x84
 80049ea:	193a      	adds	r2, r7, r4
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	2301      	movs	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f383 8810 	msr	PRIMASK, r3
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2101      	movs	r1, #1
 8004a06:	438a      	bics	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	193b      	adds	r3, r7, r4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a34:	2480      	movs	r4, #128	; 0x80
 8004a36:	193a      	adds	r2, r7, r4
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	f383 8810 	msr	PRIMASK, r3
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2110      	movs	r1, #16
 8004a52:	438a      	bics	r2, r1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	193b      	adds	r3, r7, r4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	f383 8810 	msr	PRIMASK, r3
}
 8004a62:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a6a:	183b      	adds	r3, r7, r0
 8004a6c:	881a      	ldrh	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0011      	movs	r1, r2
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 f838 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a78:	e02c      	b.n	8004ad4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a7a:	23a4      	movs	r3, #164	; 0xa4
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2280      	movs	r2, #128	; 0x80
 8004a82:	4013      	ands	r3, r2
 8004a84:	d00f      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a86:	23a0      	movs	r3, #160	; 0xa0
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01e      	beq.n	8004ad8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	0010      	movs	r0, r2
 8004aa2:	4798      	blx	r3
    }
    return;
 8004aa4:	e018      	b.n	8004ad8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004aa6:	23a4      	movs	r3, #164	; 0xa4
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2240      	movs	r2, #64	; 0x40
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_UART_IRQHandler+0x582>
 8004ab2:	23a0      	movs	r3, #160	; 0xa0
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2240      	movs	r2, #64	; 0x40
 8004aba:	4013      	ands	r3, r2
 8004abc:	d00d      	beq.n	8004ada <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fc54 	bl	800536e <UART_EndTransmit_IT>
    return;
 8004ac6:	e008      	b.n	8004ada <HAL_UART_IRQHandler+0x582>
      return;
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	e006      	b.n	8004ada <HAL_UART_IRQHandler+0x582>
    return;
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	e004      	b.n	8004ada <HAL_UART_IRQHandler+0x582>
      return;
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	e002      	b.n	8004ada <HAL_UART_IRQHandler+0x582>
      return;
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	e000      	b.n	8004ada <HAL_UART_IRQHandler+0x582>
    return;
 8004ad8:	46c0      	nop			; (mov r8, r8)
  }

}
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b02b      	add	sp, #172	; 0xac
 8004ade:	bd90      	pop	{r4, r7, pc}
 8004ae0:	fffffeff 	.word	0xfffffeff
 8004ae4:	fffffedf 	.word	0xfffffedf

08004ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	000a      	movs	r2, r1
 8004af2:	1cbb      	adds	r3, r7, #2
 8004af4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b002      	add	sp, #8
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b08:	231e      	movs	r3, #30
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a8d      	ldr	r2, [pc, #564]	; (8004d64 <UART_SetConfig+0x264>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	0019      	movs	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4a88      	ldr	r2, [pc, #544]	; (8004d68 <UART_SetConfig+0x268>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	0019      	movs	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a7f      	ldr	r2, [pc, #508]	; (8004d6c <UART_SetConfig+0x26c>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	0019      	movs	r1, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7b      	ldr	r2, [pc, #492]	; (8004d70 <UART_SetConfig+0x270>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d127      	bne.n	8004bd6 <UART_SetConfig+0xd6>
 8004b86:	4b7b      	ldr	r3, [pc, #492]	; (8004d74 <UART_SetConfig+0x274>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d00d      	beq.n	8004bae <UART_SetConfig+0xae>
 8004b92:	d81b      	bhi.n	8004bcc <UART_SetConfig+0xcc>
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d014      	beq.n	8004bc2 <UART_SetConfig+0xc2>
 8004b98:	d818      	bhi.n	8004bcc <UART_SetConfig+0xcc>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <UART_SetConfig+0xa4>
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d00a      	beq.n	8004bb8 <UART_SetConfig+0xb8>
 8004ba2:	e013      	b.n	8004bcc <UART_SetConfig+0xcc>
 8004ba4:	231f      	movs	r3, #31
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	e021      	b.n	8004bf2 <UART_SetConfig+0xf2>
 8004bae:	231f      	movs	r3, #31
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e01c      	b.n	8004bf2 <UART_SetConfig+0xf2>
 8004bb8:	231f      	movs	r3, #31
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e017      	b.n	8004bf2 <UART_SetConfig+0xf2>
 8004bc2:	231f      	movs	r3, #31
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e012      	b.n	8004bf2 <UART_SetConfig+0xf2>
 8004bcc:	231f      	movs	r3, #31
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e00d      	b.n	8004bf2 <UART_SetConfig+0xf2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a67      	ldr	r2, [pc, #412]	; (8004d78 <UART_SetConfig+0x278>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d104      	bne.n	8004bea <UART_SetConfig+0xea>
 8004be0:	231f      	movs	r3, #31
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e003      	b.n	8004bf2 <UART_SetConfig+0xf2>
 8004bea:	231f      	movs	r3, #31
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	2210      	movs	r2, #16
 8004bf0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d15c      	bne.n	8004cb8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004bfe:	231f      	movs	r3, #31
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d015      	beq.n	8004c34 <UART_SetConfig+0x134>
 8004c08:	dc18      	bgt.n	8004c3c <UART_SetConfig+0x13c>
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d00d      	beq.n	8004c2a <UART_SetConfig+0x12a>
 8004c0e:	dc15      	bgt.n	8004c3c <UART_SetConfig+0x13c>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <UART_SetConfig+0x11a>
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d005      	beq.n	8004c24 <UART_SetConfig+0x124>
 8004c18:	e010      	b.n	8004c3c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1a:	f7fe ffa9 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	61bb      	str	r3, [r7, #24]
        break;
 8004c22:	e012      	b.n	8004c4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c24:	4b55      	ldr	r3, [pc, #340]	; (8004d7c <UART_SetConfig+0x27c>)
 8004c26:	61bb      	str	r3, [r7, #24]
        break;
 8004c28:	e00f      	b.n	8004c4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2a:	f7fe ff3f 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	61bb      	str	r3, [r7, #24]
        break;
 8004c32:	e00a      	b.n	8004c4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	61bb      	str	r3, [r7, #24]
        break;
 8004c3a:	e006      	b.n	8004c4a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c40:	231e      	movs	r3, #30
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
        break;
 8004c48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d100      	bne.n	8004c52 <UART_SetConfig+0x152>
 8004c50:	e07a      	b.n	8004d48 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	005a      	lsls	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	18d2      	adds	r2, r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	0019      	movs	r1, r3
 8004c64:	0010      	movs	r0, r2
 8004c66:	f7fb fa4f 	bl	8000108 <__udivsi3>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b0f      	cmp	r3, #15
 8004c72:	d91c      	bls.n	8004cae <UART_SetConfig+0x1ae>
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	025b      	lsls	r3, r3, #9
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d217      	bcs.n	8004cae <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	200e      	movs	r0, #14
 8004c84:	183b      	adds	r3, r7, r0
 8004c86:	210f      	movs	r1, #15
 8004c88:	438a      	bics	r2, r1
 8004c8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2207      	movs	r2, #7
 8004c94:	4013      	ands	r3, r2
 8004c96:	b299      	uxth	r1, r3
 8004c98:	183b      	adds	r3, r7, r0
 8004c9a:	183a      	adds	r2, r7, r0
 8004c9c:	8812      	ldrh	r2, [r2, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	183a      	adds	r2, r7, r0
 8004ca8:	8812      	ldrh	r2, [r2, #0]
 8004caa:	60da      	str	r2, [r3, #12]
 8004cac:	e04c      	b.n	8004d48 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004cae:	231e      	movs	r3, #30
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e047      	b.n	8004d48 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb8:	231f      	movs	r3, #31
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d015      	beq.n	8004cee <UART_SetConfig+0x1ee>
 8004cc2:	dc18      	bgt.n	8004cf6 <UART_SetConfig+0x1f6>
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d00d      	beq.n	8004ce4 <UART_SetConfig+0x1e4>
 8004cc8:	dc15      	bgt.n	8004cf6 <UART_SetConfig+0x1f6>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <UART_SetConfig+0x1d4>
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d005      	beq.n	8004cde <UART_SetConfig+0x1de>
 8004cd2:	e010      	b.n	8004cf6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fe ff4c 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	61bb      	str	r3, [r7, #24]
        break;
 8004cdc:	e012      	b.n	8004d04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cde:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <UART_SetConfig+0x27c>)
 8004ce0:	61bb      	str	r3, [r7, #24]
        break;
 8004ce2:	e00f      	b.n	8004d04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce4:	f7fe fee2 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	61bb      	str	r3, [r7, #24]
        break;
 8004cec:	e00a      	b.n	8004d04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	61bb      	str	r3, [r7, #24]
        break;
 8004cf4:	e006      	b.n	8004d04 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cfa:	231e      	movs	r3, #30
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
        break;
 8004d02:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01e      	beq.n	8004d48 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085a      	lsrs	r2, r3, #1
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	18d2      	adds	r2, r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	0019      	movs	r1, r3
 8004d1a:	0010      	movs	r0, r2
 8004d1c:	f7fb f9f4 	bl	8000108 <__udivsi3>
 8004d20:	0003      	movs	r3, r0
 8004d22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b0f      	cmp	r3, #15
 8004d28:	d90a      	bls.n	8004d40 <UART_SetConfig+0x240>
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	2380      	movs	r3, #128	; 0x80
 8004d2e:	025b      	lsls	r3, r3, #9
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d205      	bcs.n	8004d40 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	e003      	b.n	8004d48 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004d40:	231e      	movs	r3, #30
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d54:	231e      	movs	r3, #30
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	781b      	ldrb	r3, [r3, #0]
}
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b008      	add	sp, #32
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	ffff69f3 	.word	0xffff69f3
 8004d68:	ffffcfff 	.word	0xffffcfff
 8004d6c:	fffff4ff 	.word	0xfffff4ff
 8004d70:	40013800 	.word	0x40013800
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40004400 	.word	0x40004400
 8004d7c:	007a1200 	.word	0x007a1200

08004d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d00b      	beq.n	8004daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <UART_AdvFeatureConfig+0x144>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2202      	movs	r2, #2
 8004db0:	4013      	ands	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4a43      	ldr	r2, [pc, #268]	; (8004ec8 <UART_AdvFeatureConfig+0x148>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <UART_AdvFeatureConfig+0x14c>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2208      	movs	r2, #8
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4a34      	ldr	r2, [pc, #208]	; (8004ed0 <UART_AdvFeatureConfig+0x150>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2210      	movs	r2, #16
 8004e16:	4013      	ands	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <UART_AdvFeatureConfig+0x154>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2220      	movs	r2, #32
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	4a25      	ldr	r2, [pc, #148]	; (8004ed8 <UART_AdvFeatureConfig+0x158>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	2240      	movs	r2, #64	; 0x40
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d01d      	beq.n	8004e9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <UART_AdvFeatureConfig+0x15c>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	035b      	lsls	r3, r3, #13
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d10b      	bne.n	8004e9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <UART_AdvFeatureConfig+0x160>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <UART_AdvFeatureConfig+0x164>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	fffdffff 	.word	0xfffdffff
 8004ec8:	fffeffff 	.word	0xfffeffff
 8004ecc:	fffbffff 	.word	0xfffbffff
 8004ed0:	ffff7fff 	.word	0xffff7fff
 8004ed4:	ffffefff 	.word	0xffffefff
 8004ed8:	ffffdfff 	.word	0xffffdfff
 8004edc:	ffefffff 	.word	0xffefffff
 8004ee0:	ff9fffff 	.word	0xff9fffff
 8004ee4:	fff7ffff 	.word	0xfff7ffff

08004ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b092      	sub	sp, #72	; 0x48
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2284      	movs	r2, #132	; 0x84
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef8:	f7fd fdc2 	bl	8002a80 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2208      	movs	r2, #8
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d12c      	bne.n	8004f68 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f10:	2280      	movs	r2, #128	; 0x80
 8004f12:	0391      	lsls	r1, r2, #14
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4a46      	ldr	r2, [pc, #280]	; (8005030 <UART_CheckIdleState+0x148>)
 8004f18:	9200      	str	r2, [sp, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f000 f88c 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004f20:	1e03      	subs	r3, r0, #0
 8004f22:	d021      	beq.n	8004f68 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f24:	f3ef 8310 	mrs	r3, PRIMASK
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f2e:	2301      	movs	r3, #1
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	f383 8810 	msr	PRIMASK, r3
}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2180      	movs	r1, #128	; 0x80
 8004f46:	438a      	bics	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2278      	movs	r2, #120	; 0x78
 8004f60:	2100      	movs	r1, #0
 8004f62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e05f      	b.n	8005028 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d146      	bne.n	8005004 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f78:	2280      	movs	r2, #128	; 0x80
 8004f7a:	03d1      	lsls	r1, r2, #15
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <UART_CheckIdleState+0x148>)
 8004f80:	9200      	str	r2, [sp, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f000 f858 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004f88:	1e03      	subs	r3, r0, #0
 8004f8a:	d03b      	beq.n	8005004 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f90:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f92:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f94:	637b      	str	r3, [r7, #52]	; 0x34
 8004f96:	2301      	movs	r3, #1
 8004f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f383 8810 	msr	PRIMASK, r3
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4921      	ldr	r1, [pc, #132]	; (8005034 <UART_CheckIdleState+0x14c>)
 8004fae:	400a      	ands	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f383 8810 	msr	PRIMASK, r3
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc8:	2301      	movs	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f383 8810 	msr	PRIMASK, r3
}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2101      	movs	r1, #1
 8004fe0:	438a      	bics	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	f383 8810 	msr	PRIMASK, r3
}
 8004fee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2280      	movs	r2, #128	; 0x80
 8004ff4:	2120      	movs	r1, #32
 8004ff6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2278      	movs	r2, #120	; 0x78
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e011      	b.n	8005028 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2280      	movs	r2, #128	; 0x80
 800500e:	2120      	movs	r1, #32
 8005010:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2278      	movs	r2, #120	; 0x78
 8005022:	2100      	movs	r1, #0
 8005024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b010      	add	sp, #64	; 0x40
 800502e:	bd80      	pop	{r7, pc}
 8005030:	01ffffff 	.word	0x01ffffff
 8005034:	fffffedf 	.word	0xfffffedf

08005038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	1dfb      	adds	r3, r7, #7
 8005046:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	e04b      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	3301      	adds	r3, #1
 800504e:	d048      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005050:	f7fd fd16 	bl	8002a80 <HAL_GetTick>
 8005054:	0002      	movs	r2, r0
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e04b      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2204      	movs	r2, #4
 8005072:	4013      	ands	r3, r2
 8005074:	d035      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2208      	movs	r2, #8
 800507e:	4013      	ands	r3, r2
 8005080:	2b08      	cmp	r3, #8
 8005082:	d111      	bne.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2208      	movs	r2, #8
 800508a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0018      	movs	r0, r3
 8005090:	f000 f8f2 	bl	8005278 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2284      	movs	r2, #132	; 0x84
 8005098:	2108      	movs	r1, #8
 800509a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2278      	movs	r2, #120	; 0x78
 80050a0:	2100      	movs	r1, #0
 80050a2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e02c      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	401a      	ands	r2, r3
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d112      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2280      	movs	r2, #128	; 0x80
 80050c2:	0112      	lsls	r2, r2, #4
 80050c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f000 f8d5 	bl	8005278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2284      	movs	r2, #132	; 0x84
 80050d2:	2120      	movs	r1, #32
 80050d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2278      	movs	r2, #120	; 0x78
 80050da:	2100      	movs	r1, #0
 80050dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e00f      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	425a      	negs	r2, r3
 80050f2:	4153      	adcs	r3, r2
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	001a      	movs	r2, r3
 80050f8:	1dfb      	adds	r3, r7, #7
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d0a4      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	0018      	movs	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	b004      	add	sp, #16
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b090      	sub	sp, #64	; 0x40
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	1dbb      	adds	r3, r7, #6
 8005118:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1dba      	adds	r2, r7, #6
 8005124:	2158      	movs	r1, #88	; 0x58
 8005126:	8812      	ldrh	r2, [r2, #0]
 8005128:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1dba      	adds	r2, r7, #6
 800512e:	215a      	movs	r1, #90	; 0x5a
 8005130:	8812      	ldrh	r2, [r2, #0]
 8005132:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	015b      	lsls	r3, r3, #5
 8005142:	429a      	cmp	r2, r3
 8005144:	d10d      	bne.n	8005162 <UART_Start_Receive_IT+0x56>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <UART_Start_Receive_IT+0x4c>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	225c      	movs	r2, #92	; 0x5c
 8005152:	4946      	ldr	r1, [pc, #280]	; (800526c <UART_Start_Receive_IT+0x160>)
 8005154:	5299      	strh	r1, [r3, r2]
 8005156:	e01a      	b.n	800518e <UART_Start_Receive_IT+0x82>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	225c      	movs	r2, #92	; 0x5c
 800515c:	21ff      	movs	r1, #255	; 0xff
 800515e:	5299      	strh	r1, [r3, r2]
 8005160:	e015      	b.n	800518e <UART_Start_Receive_IT+0x82>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10d      	bne.n	8005186 <UART_Start_Receive_IT+0x7a>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <UART_Start_Receive_IT+0x70>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	225c      	movs	r2, #92	; 0x5c
 8005176:	21ff      	movs	r1, #255	; 0xff
 8005178:	5299      	strh	r1, [r3, r2]
 800517a:	e008      	b.n	800518e <UART_Start_Receive_IT+0x82>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	225c      	movs	r2, #92	; 0x5c
 8005180:	217f      	movs	r1, #127	; 0x7f
 8005182:	5299      	strh	r1, [r3, r2]
 8005184:	e003      	b.n	800518e <UART_Start_Receive_IT+0x82>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	225c      	movs	r2, #92	; 0x5c
 800518a:	2100      	movs	r1, #0
 800518c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2284      	movs	r2, #132	; 0x84
 8005192:	2100      	movs	r1, #0
 8005194:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2280      	movs	r2, #128	; 0x80
 800519a:	2122      	movs	r1, #34	; 0x22
 800519c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8310 	mrs	r3, PRIMASK
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	2301      	movs	r3, #1
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	f383 8810 	msr	PRIMASK, r3
}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2101      	movs	r1, #1
 80051c0:	430a      	orrs	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	f383 8810 	msr	PRIMASK, r3
}
 80051ce:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	015b      	lsls	r3, r3, #5
 80051d8:	429a      	cmp	r2, r3
 80051da:	d107      	bne.n	80051ec <UART_Start_Receive_IT+0xe0>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a22      	ldr	r2, [pc, #136]	; (8005270 <UART_Start_Receive_IT+0x164>)
 80051e8:	669a      	str	r2, [r3, #104]	; 0x68
 80051ea:	e002      	b.n	80051f2 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <UART_Start_Receive_IT+0x168>)
 80051f0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d019      	beq.n	800522e <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8005200:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
 8005204:	2301      	movs	r3, #1
 8005206:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	f383 8810 	msr	PRIMASK, r3
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2190      	movs	r1, #144	; 0x90
 800521c:	0049      	lsls	r1, r1, #1
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	f383 8810 	msr	PRIMASK, r3
}
 800522c:	e018      	b.n	8005260 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522e:	f3ef 8310 	mrs	r3, PRIMASK
 8005232:	613b      	str	r3, [r7, #16]
  return(result);
 8005234:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f383 8810 	msr	PRIMASK, r3
}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2120      	movs	r1, #32
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f383 8810 	msr	PRIMASK, r3
}
 800525e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	0018      	movs	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	b010      	add	sp, #64	; 0x40
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	000001ff 	.word	0x000001ff
 8005270:	0800557d 	.word	0x0800557d
 8005274:	080053c5 	.word	0x080053c5

08005278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08e      	sub	sp, #56	; 0x38
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	617b      	str	r3, [r7, #20]
  return(result);
 8005286:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
 800528a:	2301      	movs	r3, #1
 800528c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4926      	ldr	r1, [pc, #152]	; (800533c <UART_EndRxTransfer+0xc4>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b2:	f3ef 8310 	mrs	r3, PRIMASK
 80052b6:	623b      	str	r3, [r7, #32]
  return(result);
 80052b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	633b      	str	r3, [r7, #48]	; 0x30
 80052bc:	2301      	movs	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	f383 8810 	msr	PRIMASK, r3
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2101      	movs	r1, #1
 80052d4:	438a      	bics	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	f383 8810 	msr	PRIMASK, r3
}
 80052e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d118      	bne.n	800531e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f6:	2301      	movs	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f383 8810 	msr	PRIMASK, r3
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2110      	movs	r1, #16
 800530e:	438a      	bics	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2280      	movs	r2, #128	; 0x80
 8005322:	2120      	movs	r1, #32
 8005324:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	46bd      	mov	sp, r7
 8005336:	b00e      	add	sp, #56	; 0x38
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	fffffedf 	.word	0xfffffedf

08005340 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	225a      	movs	r2, #90	; 0x5a
 8005352:	2100      	movs	r1, #0
 8005354:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2252      	movs	r2, #82	; 0x52
 800535a:	2100      	movs	r1, #0
 800535c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	0018      	movs	r0, r3
 8005362:	f7fc fe31 	bl	8001fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	46bd      	mov	sp, r7
 800536a:	b004      	add	sp, #16
 800536c:	bd80      	pop	{r7, pc}

0800536e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b086      	sub	sp, #24
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005376:	f3ef 8310 	mrs	r3, PRIMASK
 800537a:	60bb      	str	r3, [r7, #8]
  return(result);
 800537c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	2301      	movs	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f383 8810 	msr	PRIMASK, r3
}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2140      	movs	r1, #64	; 0x40
 8005398:	438a      	bics	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f383 8810 	msr	PRIMASK, r3
}
 80053a6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7fc fc7a 	bl	8001cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b006      	add	sp, #24
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b094      	sub	sp, #80	; 0x50
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053cc:	204e      	movs	r0, #78	; 0x4e
 80053ce:	183b      	adds	r3, r7, r0
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	215c      	movs	r1, #92	; 0x5c
 80053d4:	5a52      	ldrh	r2, [r2, r1]
 80053d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	589b      	ldr	r3, [r3, r2]
 80053de:	2b22      	cmp	r3, #34	; 0x22
 80053e0:	d000      	beq.n	80053e4 <UART_RxISR_8BIT+0x20>
 80053e2:	e0ba      	b.n	800555a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	214c      	movs	r1, #76	; 0x4c
 80053ea:	187b      	adds	r3, r7, r1
 80053ec:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80053ee:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053f0:	187b      	adds	r3, r7, r1
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b2d9      	uxtb	r1, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	400a      	ands	r2, r1
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	225a      	movs	r2, #90	; 0x5a
 8005414:	5a9b      	ldrh	r3, [r3, r2]
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b299      	uxth	r1, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	225a      	movs	r2, #90	; 0x5a
 8005420:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	225a      	movs	r2, #90	; 0x5a
 8005426:	5a9b      	ldrh	r3, [r3, r2]
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d000      	beq.n	8005430 <UART_RxISR_8BIT+0x6c>
 800542e:	e09c      	b.n	800556a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005430:	f3ef 8310 	mrs	r3, PRIMASK
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005438:	64bb      	str	r3, [r7, #72]	; 0x48
 800543a:	2301      	movs	r3, #1
 800543c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	f383 8810 	msr	PRIMASK, r3
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4948      	ldr	r1, [pc, #288]	; (8005574 <UART_RxISR_8BIT+0x1b0>)
 8005452:	400a      	ands	r2, r1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005458:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	f383 8810 	msr	PRIMASK, r3
}
 8005460:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005462:	f3ef 8310 	mrs	r3, PRIMASK
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546a:	647b      	str	r3, [r7, #68]	; 0x44
 800546c:	2301      	movs	r3, #1
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	f383 8810 	msr	PRIMASK, r3
}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2101      	movs	r1, #1
 8005484:	438a      	bics	r2, r1
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2280      	movs	r2, #128	; 0x80
 8005498:	2120      	movs	r1, #32
 800549a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	4013      	ands	r3, r2
 80054b4:	d018      	beq.n	80054e8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b6:	f3ef 8310 	mrs	r3, PRIMASK
 80054ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80054bc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054be:	643b      	str	r3, [r7, #64]	; 0x40
 80054c0:	2301      	movs	r3, #1
 80054c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f383 8810 	msr	PRIMASK, r3
}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4928      	ldr	r1, [pc, #160]	; (8005578 <UART_RxISR_8BIT+0x1b4>)
 80054d8:	400a      	ands	r2, r1
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	f383 8810 	msr	PRIMASK, r3
}
 80054e6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d12f      	bne.n	8005550 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f6:	f3ef 8310 	mrs	r3, PRIMASK
 80054fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80054fc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005500:	2301      	movs	r3, #1
 8005502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f383 8810 	msr	PRIMASK, r3
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2110      	movs	r1, #16
 8005518:	438a      	bics	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f383 8810 	msr	PRIMASK, r3
}
 8005526:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	2210      	movs	r2, #16
 8005530:	4013      	ands	r3, r2
 8005532:	2b10      	cmp	r3, #16
 8005534:	d103      	bne.n	800553e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2210      	movs	r2, #16
 800553c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2258      	movs	r2, #88	; 0x58
 8005542:	5a9a      	ldrh	r2, [r3, r2]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0011      	movs	r1, r2
 8005548:	0018      	movs	r0, r3
 800554a:	f7ff facd 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800554e:	e00c      	b.n	800556a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	0018      	movs	r0, r3
 8005554:	f7fc fc2c 	bl	8001db0 <HAL_UART_RxCpltCallback>
}
 8005558:	e007      	b.n	800556a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2108      	movs	r1, #8
 8005566:	430a      	orrs	r2, r1
 8005568:	619a      	str	r2, [r3, #24]
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b014      	add	sp, #80	; 0x50
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	fffffedf 	.word	0xfffffedf
 8005578:	fbffffff 	.word	0xfbffffff

0800557c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b094      	sub	sp, #80	; 0x50
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005584:	204e      	movs	r0, #78	; 0x4e
 8005586:	183b      	adds	r3, r7, r0
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	215c      	movs	r1, #92	; 0x5c
 800558c:	5a52      	ldrh	r2, [r2, r1]
 800558e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	589b      	ldr	r3, [r3, r2]
 8005596:	2b22      	cmp	r3, #34	; 0x22
 8005598:	d000      	beq.n	800559c <UART_RxISR_16BIT+0x20>
 800559a:	e0ba      	b.n	8005712 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	214c      	movs	r1, #76	; 0x4c
 80055a2:	187b      	adds	r3, r7, r1
 80055a4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80055a6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80055ae:	187b      	adds	r3, r7, r1
 80055b0:	183a      	adds	r2, r7, r0
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	8812      	ldrh	r2, [r2, #0]
 80055b6:	4013      	ands	r3, r2
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	225a      	movs	r2, #90	; 0x5a
 80055cc:	5a9b      	ldrh	r3, [r3, r2]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b299      	uxth	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	225a      	movs	r2, #90	; 0x5a
 80055d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	225a      	movs	r2, #90	; 0x5a
 80055de:	5a9b      	ldrh	r3, [r3, r2]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d000      	beq.n	80055e8 <UART_RxISR_16BIT+0x6c>
 80055e6:	e09c      	b.n	8005722 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e8:	f3ef 8310 	mrs	r3, PRIMASK
 80055ec:	623b      	str	r3, [r7, #32]
  return(result);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f0:	647b      	str	r3, [r7, #68]	; 0x44
 80055f2:	2301      	movs	r3, #1
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f383 8810 	msr	PRIMASK, r3
}
 80055fc:	46c0      	nop			; (mov r8, r8)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4948      	ldr	r1, [pc, #288]	; (800572c <UART_RxISR_16BIT+0x1b0>)
 800560a:	400a      	ands	r2, r1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	f383 8810 	msr	PRIMASK, r3
}
 8005618:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561a:	f3ef 8310 	mrs	r3, PRIMASK
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005622:	643b      	str	r3, [r7, #64]	; 0x40
 8005624:	2301      	movs	r3, #1
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	f383 8810 	msr	PRIMASK, r3
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2101      	movs	r1, #1
 800563c:	438a      	bics	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	f383 8810 	msr	PRIMASK, r3
}
 800564a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	2120      	movs	r1, #32
 8005652:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	4013      	ands	r3, r2
 800566c:	d018      	beq.n	80056a0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566e:	f3ef 8310 	mrs	r3, PRIMASK
 8005672:	617b      	str	r3, [r7, #20]
  return(result);
 8005674:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005678:	2301      	movs	r3, #1
 800567a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f383 8810 	msr	PRIMASK, r3
}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4928      	ldr	r1, [pc, #160]	; (8005730 <UART_RxISR_16BIT+0x1b4>)
 8005690:	400a      	ands	r2, r1
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005696:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f383 8810 	msr	PRIMASK, r3
}
 800569e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d12f      	bne.n	8005708 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ae:	f3ef 8310 	mrs	r3, PRIMASK
 80056b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b8:	2301      	movs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2110      	movs	r1, #16
 80056d0:	438a      	bics	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	2210      	movs	r2, #16
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d103      	bne.n	80056f6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2210      	movs	r2, #16
 80056f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2258      	movs	r2, #88	; 0x58
 80056fa:	5a9a      	ldrh	r2, [r3, r2]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0011      	movs	r1, r2
 8005700:	0018      	movs	r0, r3
 8005702:	f7ff f9f1 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005706:	e00c      	b.n	8005722 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f7fc fb50 	bl	8001db0 <HAL_UART_RxCpltCallback>
}
 8005710:	e007      	b.n	8005722 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2108      	movs	r1, #8
 800571e:	430a      	orrs	r2, r1
 8005720:	619a      	str	r2, [r3, #24]
}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	46bd      	mov	sp, r7
 8005726:	b014      	add	sp, #80	; 0x50
 8005728:	bd80      	pop	{r7, pc}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	fffffedf 	.word	0xfffffedf
 8005730:	fbffffff 	.word	0xfbffffff

08005734 <kfifo_reset>:
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	60da      	str	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	609a      	str	r2, [r3, #8]
}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	46bd      	mov	sp, r7
 800574e:	b002      	add	sp, #8
 8005750:	bd80      	pop	{r7, pc}

08005752 <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
	return fifo->size;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b002      	add	sp, #8
 8005764:	bd80      	pop	{r7, pc}

08005766 <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 8005766:	b590      	push	{r4, r7, lr}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	1b1b      	subs	r3, r3, r4
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b003      	add	sp, #12
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	0018      	movs	r0, r3
 800578c:	f7ff ffe1 	bl	8005752 <kfifo_size>
 8005790:	0004      	movs	r4, r0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff ffe6 	bl	8005766 <kfifo_len>
 800579a:	0003      	movs	r3, r0
 800579c:	1ae3      	subs	r3, r4, r3
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b003      	add	sp, #12
 80057a4:	bd90      	pop	{r4, r7, pc}

080057a6 <__kfifo_add_out>:
/*
 * __kfifo_add_out internal helper function for updating the out offset
 */
static __inline void __kfifo_add_out(struct kfifo *fifo,
				unsigned int off)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
	fifo->out += off;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	18d2      	adds	r2, r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	18d2      	adds	r2, r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	609a      	str	r2, [r3, #8]
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b002      	add	sp, #8
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	4013      	ands	r3, r2
}
 80057f6:	0018      	movs	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b002      	add	sp, #8
 80057fc:	bd80      	pop	{r7, pc}

080057fe <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	0018      	movs	r0, r3
 800581a:	f7ff ff8b 	bl	8005734 <kfifo_reset>
}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	46bd      	mov	sp, r7
 8005822:	b004      	add	sp, #16
 8005824:	bd80      	pop	{r7, pc}

08005826 <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	18d2      	adds	r2, r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	0011      	movs	r1, r2
 8005840:	0018      	movs	r0, r3
 8005842:	f7ff ffce 	bl	80057e2 <__kfifo_off>
 8005846:	0003      	movs	r3, r0
 8005848:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	1ad2      	subs	r2, r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4293      	cmp	r3, r2
 8005856:	d900      	bls.n	800585a <__kfifo_in_data+0x34>
 8005858:	0013      	movs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	18d3      	adds	r3, r2, r3
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	0018      	movs	r0, r3
 800586a:	f000 fdb8 	bl	80063de <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	18d1      	adds	r1, r2, r3
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	001a      	movs	r2, r3
 8005880:	f000 fdad 	bl	80063de <memcpy>
}
 8005884:	46c0      	nop			; (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b006      	add	sp, #24
 800588a:	bd80      	pop	{r7, pc}

0800588c <__kfifo_out_data>:

static __inline void __kfifo_out_data(struct kfifo *fifo,
		void *to, unsigned int len, unsigned int off)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->in index -before- we
	 * start removing bytes from the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->out + off);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	18d2      	adds	r2, r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	0011      	movs	r1, r2
 80058a6:	0018      	movs	r0, r3
 80058a8:	f7ff ff9b 	bl	80057e2 <__kfifo_off>
 80058ac:	0003      	movs	r3, r0
 80058ae:	603b      	str	r3, [r7, #0]

	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - off);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	1ad2      	subs	r2, r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d900      	bls.n	80058c0 <__kfifo_out_data+0x34>
 80058be:	0013      	movs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
	memcpy( (char*)to, fifo->buffer + off, l);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	18d1      	adds	r1, r2, r3
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f000 fd85 	bl	80063de <memcpy>

	/* then get the rest (if any) from the beginning of the buffer */
	memcpy( (char*)to + l, fifo->buffer, len - l);
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	18d0      	adds	r0, r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	001a      	movs	r2, r3
 80058e6:	f000 fd7a 	bl	80063de <memcpy>
}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b006      	add	sp, #24
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	0018      	movs	r0, r3
 8005902:	f7ff ff3d 	bl	8005780 <kfifo_avail>
 8005906:	0002      	movs	r2, r0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4293      	cmp	r3, r2
 800590c:	d905      	bls.n	800591a <kfifo_in+0x28>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff ff35 	bl	8005780 <kfifo_avail>
 8005916:	0003      	movs	r3, r0
 8005918:	e000      	b.n	800591c <kfifo_in+0x2a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	2300      	movs	r3, #0
 8005926:	f7ff ff7e 	bl	8005826 <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	0011      	movs	r1, r2
 8005930:	0018      	movs	r0, r3
 8005932:	f7ff ff47 	bl	80057c4 <__kfifo_add_in>
	return len;
 8005936:	687b      	ldr	r3, [r7, #4]
}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	b004      	add	sp, #16
 800593e:	bd80      	pop	{r7, pc}

08005940 <kfifo_out>:
 *
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
	len = min(kfifo_len(fifo), len);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	0018      	movs	r0, r3
 8005950:	f7ff ff09 	bl	8005766 <kfifo_len>
 8005954:	0002      	movs	r2, r0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4293      	cmp	r3, r2
 800595a:	d905      	bls.n	8005968 <kfifo_out+0x28>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	0018      	movs	r0, r3
 8005960:	f7ff ff01 	bl	8005766 <kfifo_len>
 8005964:	0003      	movs	r3, r0
 8005966:	e000      	b.n	800596a <kfifo_out+0x2a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	607b      	str	r3, [r7, #4]

	__kfifo_out_data(fifo, to, len, 0);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	2300      	movs	r3, #0
 8005974:	f7ff ff8a 	bl	800588c <__kfifo_out_data>
	__kfifo_add_out(fifo, len);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	0011      	movs	r1, r2
 800597e:	0018      	movs	r0, r3
 8005980:	f7ff ff11 	bl	80057a6 <__kfifo_add_out>

	return len;
 8005984:	687b      	ldr	r3, [r7, #4]
}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	b004      	add	sp, #16
 800598c:	bd80      	pop	{r7, pc}

0800598e <mq_init>:
 * 
 * @param None
 * @return struct msgQueue   
 */
void mq_init(struct msgQueue *queue)
{
 800598e:	b590      	push	{r4, r7, lr}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
    struct msgQueue *mq = (struct msgQueue *)malloc(sizeof(struct msgQueue));
 8005996:	2388      	movs	r3, #136	; 0x88
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	0018      	movs	r0, r3
 800599c:	f000 f9b6 	bl	8005d0c <malloc>
 80059a0:	0003      	movs	r3, r0
 80059a2:	60bb      	str	r3, [r7, #8]
    if (mq == NULL)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <mq_init+0x20>
    {
    	queue = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	607b      	str	r3, [r7, #4]
    }
    mq->lock = 0;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
    mq->size = MSGQUEUESIZE;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2220      	movs	r2, #32
 80059b8:	605a      	str	r2, [r3, #4]
    mq->head = 0;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2200      	movs	r2, #0
 80059be:	609a      	str	r2, [r3, #8]
    mq->tail = 0;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 80059c6:	230f      	movs	r3, #15
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e011      	b.n	80059f4 <mq_init+0x66>
    {
        memset(&(mq->list[i]), 0, sizeof(struct msgQueue));
 80059d0:	240f      	movs	r4, #15
 80059d2:	193b      	adds	r3, r7, r4
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	3302      	adds	r3, #2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	18d3      	adds	r3, r2, r3
 80059de:	2288      	movs	r2, #136	; 0x88
 80059e0:	0052      	lsls	r2, r2, #1
 80059e2:	2100      	movs	r1, #0
 80059e4:	0018      	movs	r0, r3
 80059e6:	f000 fc65 	bl	80062b4 <memset>
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 80059ea:	193b      	adds	r3, r7, r4
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	193b      	adds	r3, r7, r4
 80059f0:	3201      	adds	r2, #1
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	230f      	movs	r3, #15
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b1f      	cmp	r3, #31
 80059fc:	d9e8      	bls.n	80059d0 <mq_init+0x42>
    }
}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	46c0      	nop			; (mov r8, r8)
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b005      	add	sp, #20
 8005a06:	bd90      	pop	{r4, r7, pc}

08005a08 <mq_push>:
 * @param queue 
 * @param msg 
 * @return uint32_t 
 */
uint32_t mq_push(struct msgQueue *queue, struct msg *msg)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
    if (queue == NULL || msg == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <mq_push+0x16>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <mq_push+0x1a>
    {
        return 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e02a      	b.n	8005a78 <mq_push+0x70>
    }
//    if ((queue->head - queue->tail) == MSGQUEUESIZE - 1)
//    {
//        queue->head -= MSGQUEUESIZE - 1;
//    }
    if (queue->head >= MSGQUEUESIZE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b1f      	cmp	r3, #31
 8005a28:	d905      	bls.n	8005a36 <mq_push+0x2e>
    {
    	queue->head -= MSGQUEUESIZE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	3b20      	subs	r3, #32
 8005a30:	001a      	movs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	609a      	str	r2, [r3, #8]
    }

    uint8_t index = queue->head & (MSGQUEUESIZE - 1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	200f      	movs	r0, #15
 8005a3e:	183b      	adds	r3, r7, r0
 8005a40:	211f      	movs	r1, #31
 8005a42:	400a      	ands	r2, r1
 8005a44:	701a      	strb	r2, [r3, #0]
    queue->list[index].type = msg->type;
 8005a46:	183b      	adds	r3, r7, r0
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6819      	ldr	r1, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3202      	adds	r2, #2
 8005a52:	00d2      	lsls	r2, r2, #3
 8005a54:	50d1      	str	r1, [r2, r3]
    queue->list[index].data = msg->data;
 8005a56:	183b      	adds	r3, r7, r0
 8005a58:	7818      	ldrb	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	1c83      	adds	r3, r0, #2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	18cb      	adds	r3, r1, r3
 8005a66:	3304      	adds	r3, #4
 8005a68:	601a      	str	r2, [r3, #0]
    queue->head++;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	609a      	str	r2, [r3, #8]

    return queue->head;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b004      	add	sp, #16
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <mq_pop>:
 * 
 * @param queue 
 * @return struct msg* 
 */
struct msg *mq_pop(struct msgQueue *queue)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <mq_pop+0x12>
    {
        return NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e022      	b.n	8005ad8 <mq_pop+0x58>
    }

    if (queue->head == queue->tail)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d101      	bne.n	8005aa2 <mq_pop+0x22>
    {
        return NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e01a      	b.n	8005ad8 <mq_pop+0x58>
    }
    
    uint8_t index = queue->tail & (MSGQUEUESIZE - 1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	230f      	movs	r3, #15
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	211f      	movs	r1, #31
 8005aae:	400a      	ands	r2, r1
 8005ab0:	701a      	strb	r2, [r3, #0]
    queue->tail++;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]
    if (queue->tail == MSGQUEUESIZE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d102      	bne.n	8005aca <mq_pop+0x4a>
	{
		queue->tail = 0;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	60da      	str	r2, [r3, #12]
	}
    return &(queue->list[index]);
 8005aca:	230f      	movs	r3, #15
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	18d3      	adds	r3, r2, r3
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b004      	add	sp, #16
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <stateM_init>:
static struct transition *getTransition( struct stateMachine *stateMachine,
      struct state *state, struct event *const event );

void stateM_init( struct stateMachine *fsm,
      struct state *initialState, struct state *errorState )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
   if ( !fsm )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <stateM_init+0x26>
      return;

   fsm->currentState = initialState;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	601a      	str	r2, [r3, #0]
   fsm->previousState = NULL;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
   fsm->errorState = errorState;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	609a      	str	r2, [r3, #8]
 8005b04:	e000      	b.n	8005b08 <stateM_init+0x28>
      return;
 8005b06:	46c0      	nop			; (mov r8, r8)
}
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b004      	add	sp, #16
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <stateM_handleEvent>:

int stateM_handleEvent( struct stateMachine *fsm,
      struct event *event )
{
 8005b0e:	b590      	push	{r4, r7, lr}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
   if ( !fsm || !event )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <stateM_handleEvent+0x16>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <stateM_handleEvent+0x1c>
      return stateM_errArg;
 8005b24:	2302      	movs	r3, #2
 8005b26:	425b      	negs	r3, r3
 8005b28:	e093      	b.n	8005c52 <stateM_handleEvent+0x144>

   if ( !fsm->currentState )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d108      	bne.n	8005b44 <stateM_handleEvent+0x36>
   {
      goToErrorState( fsm, event );
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	0011      	movs	r1, r2
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 f88e 	bl	8005c5a <goToErrorState>
      return stateM_errorStateReached;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	425b      	negs	r3, r3
 8005b42:	e086      	b.n	8005c52 <stateM_handleEvent+0x144>
   }

   if ( !fsm->currentState->numTransitions )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <stateM_handleEvent+0x44>
      return stateM_noStateChange;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e07f      	b.n	8005c52 <stateM_handleEvent+0x144>

   struct state *nextState = fsm->currentState;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]
   do {
      struct transition *transition = getTransition( fsm, nextState, event );
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 f89e 	bl	8005ca0 <getTransition>
 8005b64:	0003      	movs	r3, r0
 8005b66:	60bb      	str	r3, [r7, #8]

      /* If there were no transitions for the given event for the current
       * state, check if there are any transitions for any of the parent
       * states (if any): */
      if ( !transition )
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <stateM_handleEvent+0x68>
      {
         nextState = nextState->parentState;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]
         continue;
 8005b74:	e069      	b.n	8005c4a <stateM_handleEvent+0x13c>
      }

      /* A transition must have a next state defined. If the user has not
       * defined the next state, go to error state: */
      if ( !transition->nextState )
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d108      	bne.n	8005b90 <stateM_handleEvent+0x82>
      {
         goToErrorState( fsm, event );
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	0011      	movs	r1, r2
 8005b84:	0018      	movs	r0, r3
 8005b86:	f000 f868 	bl	8005c5a <goToErrorState>
         return stateM_errorStateReached;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	425b      	negs	r3, r3
 8005b8e:	e060      	b.n	8005c52 <stateM_handleEvent+0x144>
      }

      nextState = transition->nextState;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	60fb      	str	r3, [r7, #12]

      /* If the new state is a parent state, enter its entry state (if it has
       * one). Step down through the whole family tree until a state without
       * an entry state is found: */
      while ( nextState->entryState )
 8005b96:	e002      	b.n	8005b9e <stateM_handleEvent+0x90>
         nextState = nextState->entryState;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f8      	bne.n	8005b98 <stateM_handleEvent+0x8a>

      /* Run exit action only if the current state is left (only if it does
       * not return to itself): */
      if ( nextState != fsm->currentState && fsm->currentState->exitAction )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d00d      	beq.n	8005bcc <stateM_handleEvent+0xbe>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <stateM_handleEvent+0xbe>
         fsm->currentState->exitAction( fsm->currentState->data, event );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	4790      	blx	r2

      /* Run transition action (if any): */
      if ( transition->action )
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d009      	beq.n	8005be8 <stateM_handleEvent+0xda>
         transition->action( fsm->currentState->data, event, nextState->
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	68dc      	ldr	r4, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6918      	ldr	r0, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	0019      	movs	r1, r3
 8005be6:	47a0      	blx	r4
               data );

      /* Call the new state's entry action if it has any (only if state does
       * not return to itself): */
      if ( nextState != fsm->currentState && nextState->entryAction )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d00a      	beq.n	8005c08 <stateM_handleEvent+0xfa>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d006      	beq.n	8005c08 <stateM_handleEvent+0xfa>
         nextState->entryAction( nextState->data, event );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	0018      	movs	r0, r3
 8005c06:	4790      	blx	r2

      fsm->previousState = fsm->currentState;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]
      fsm->currentState = nextState;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]
      
      /* If the state returned to itself: */
      if ( fsm->currentState == fsm->previousState )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d101      	bne.n	8005c26 <stateM_handleEvent+0x118>
         return stateM_stateLoopSelf;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e015      	b.n	8005c52 <stateM_handleEvent+0x144>

      if ( fsm->currentState == fsm->errorState )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d102      	bne.n	8005c38 <stateM_handleEvent+0x12a>
         return stateM_errorStateReached;
 8005c32:	2301      	movs	r3, #1
 8005c34:	425b      	negs	r3, r3
 8005c36:	e00c      	b.n	8005c52 <stateM_handleEvent+0x144>

      /* If the new state is a final state, notify user that the state
       * machine has stopped: */
      if ( !fsm->currentState->numTransitions )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <stateM_handleEvent+0x138>
         return stateM_finalStateReached;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e005      	b.n	8005c52 <stateM_handleEvent+0x144>

      return stateM_stateChanged;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e003      	b.n	8005c52 <stateM_handleEvent+0x144>
   } while ( nextState );
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d183      	bne.n	8005b58 <stateM_handleEvent+0x4a>

   return stateM_noStateChange;
 8005c50:	2302      	movs	r3, #2
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b005      	add	sp, #20
 8005c58:	bd90      	pop	{r4, r7, pc}

08005c5a <goToErrorState>:
}


static void goToErrorState( struct stateMachine *fsm,
      struct event *const event )
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
   fsm->previousState = fsm->currentState;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	605a      	str	r2, [r3, #4]
   fsm->currentState = fsm->errorState;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	601a      	str	r2, [r3, #0]

   if ( fsm->currentState && fsm->currentState->entryAction )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00d      	beq.n	8005c98 <goToErrorState+0x3e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <goToErrorState+0x3e>
      fsm->currentState->entryAction( fsm->currentState->data, event );
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	0018      	movs	r0, r3
 8005c96:	4790      	blx	r2
}
 8005c98:	46c0      	nop			; (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <getTransition>:

static struct transition *getTransition( struct stateMachine *fsm,
      struct state *state, struct event *const event )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
   size_t i;

   for ( i = 0; i < state->numTransitions; ++i )
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	e022      	b.n	8005cf8 <getTransition+0x58>
   {
      struct transition *t = &state->transitions[ i ];
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6899      	ldr	r1, [r3, #8]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	0013      	movs	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	189b      	adds	r3, r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	18cb      	adds	r3, r1, r3
 8005cc2:	613b      	str	r3, [r7, #16]

      /* A transition for the given event has been found: */
      if ( t->eventType == event->type )
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d110      	bne.n	8005cf2 <getTransition+0x52>
      {
         if ( !t->guard )
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <getTransition+0x3c>
            return t;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	e013      	b.n	8005d04 <getTransition+0x64>
         /* If transition is guarded, ensure that the condition is held: */
         else if ( t->guard( t->condition, event ) )
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	4790      	blx	r2
 8005cea:	1e03      	subs	r3, r0, #0
 8005cec:	d001      	beq.n	8005cf2 <getTransition+0x52>
            return t;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	e008      	b.n	8005d04 <getTransition+0x64>
   for ( i = 0; i < state->numTransitions; ++i )
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d3d7      	bcc.n	8005cb2 <getTransition+0x12>
      }
   }

   /* No transitions found for given event for given state: */
   return NULL;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	0018      	movs	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b006      	add	sp, #24
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <malloc>:
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <malloc+0x10>)
 8005d10:	0001      	movs	r1, r0
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	f000 f826 	bl	8005d64 <_malloc_r>
 8005d18:	bd10      	pop	{r4, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	20000178 	.word	0x20000178

08005d20 <sbrk_aligned>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4e0f      	ldr	r6, [pc, #60]	; (8005d60 <sbrk_aligned+0x40>)
 8005d24:	000d      	movs	r5, r1
 8005d26:	6831      	ldr	r1, [r6, #0]
 8005d28:	0004      	movs	r4, r0
 8005d2a:	2900      	cmp	r1, #0
 8005d2c:	d102      	bne.n	8005d34 <sbrk_aligned+0x14>
 8005d2e:	f000 fb03 	bl	8006338 <_sbrk_r>
 8005d32:	6030      	str	r0, [r6, #0]
 8005d34:	0029      	movs	r1, r5
 8005d36:	0020      	movs	r0, r4
 8005d38:	f000 fafe 	bl	8006338 <_sbrk_r>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d00a      	beq.n	8005d56 <sbrk_aligned+0x36>
 8005d40:	2303      	movs	r3, #3
 8005d42:	1cc5      	adds	r5, r0, #3
 8005d44:	439d      	bics	r5, r3
 8005d46:	42a8      	cmp	r0, r5
 8005d48:	d007      	beq.n	8005d5a <sbrk_aligned+0x3a>
 8005d4a:	1a29      	subs	r1, r5, r0
 8005d4c:	0020      	movs	r0, r4
 8005d4e:	f000 faf3 	bl	8006338 <_sbrk_r>
 8005d52:	3001      	adds	r0, #1
 8005d54:	d101      	bne.n	8005d5a <sbrk_aligned+0x3a>
 8005d56:	2501      	movs	r5, #1
 8005d58:	426d      	negs	r5, r5
 8005d5a:	0028      	movs	r0, r5
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	20000828 	.word	0x20000828

08005d64 <_malloc_r>:
 8005d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d66:	2203      	movs	r2, #3
 8005d68:	1ccb      	adds	r3, r1, #3
 8005d6a:	4393      	bics	r3, r2
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	0006      	movs	r6, r0
 8005d70:	001f      	movs	r7, r3
 8005d72:	2b0c      	cmp	r3, #12
 8005d74:	d238      	bcs.n	8005de8 <_malloc_r+0x84>
 8005d76:	270c      	movs	r7, #12
 8005d78:	42b9      	cmp	r1, r7
 8005d7a:	d837      	bhi.n	8005dec <_malloc_r+0x88>
 8005d7c:	0030      	movs	r0, r6
 8005d7e:	f000 f873 	bl	8005e68 <__malloc_lock>
 8005d82:	4b38      	ldr	r3, [pc, #224]	; (8005e64 <_malloc_r+0x100>)
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	001c      	movs	r4, r3
 8005d8a:	2c00      	cmp	r4, #0
 8005d8c:	d133      	bne.n	8005df6 <_malloc_r+0x92>
 8005d8e:	0039      	movs	r1, r7
 8005d90:	0030      	movs	r0, r6
 8005d92:	f7ff ffc5 	bl	8005d20 <sbrk_aligned>
 8005d96:	0004      	movs	r4, r0
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d15e      	bne.n	8005e5a <_malloc_r+0xf6>
 8005d9c:	9b00      	ldr	r3, [sp, #0]
 8005d9e:	681c      	ldr	r4, [r3, #0]
 8005da0:	0025      	movs	r5, r4
 8005da2:	2d00      	cmp	r5, #0
 8005da4:	d14e      	bne.n	8005e44 <_malloc_r+0xe0>
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	d051      	beq.n	8005e4e <_malloc_r+0xea>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	0029      	movs	r1, r5
 8005dae:	18e3      	adds	r3, r4, r3
 8005db0:	0030      	movs	r0, r6
 8005db2:	9301      	str	r3, [sp, #4]
 8005db4:	f000 fac0 	bl	8006338 <_sbrk_r>
 8005db8:	9b01      	ldr	r3, [sp, #4]
 8005dba:	4283      	cmp	r3, r0
 8005dbc:	d147      	bne.n	8005e4e <_malloc_r+0xea>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	0030      	movs	r0, r6
 8005dc2:	1aff      	subs	r7, r7, r3
 8005dc4:	0039      	movs	r1, r7
 8005dc6:	f7ff ffab 	bl	8005d20 <sbrk_aligned>
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d03f      	beq.n	8005e4e <_malloc_r+0xea>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	19db      	adds	r3, r3, r7
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	9b00      	ldr	r3, [sp, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d040      	beq.n	8005e5e <_malloc_r+0xfa>
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	42a2      	cmp	r2, r4
 8005de0:	d133      	bne.n	8005e4a <_malloc_r+0xe6>
 8005de2:	2200      	movs	r2, #0
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	e014      	b.n	8005e12 <_malloc_r+0xae>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dac5      	bge.n	8005d78 <_malloc_r+0x14>
 8005dec:	230c      	movs	r3, #12
 8005dee:	2500      	movs	r5, #0
 8005df0:	6033      	str	r3, [r6, #0]
 8005df2:	0028      	movs	r0, r5
 8005df4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005df6:	6821      	ldr	r1, [r4, #0]
 8005df8:	1bc9      	subs	r1, r1, r7
 8005dfa:	d420      	bmi.n	8005e3e <_malloc_r+0xda>
 8005dfc:	290b      	cmp	r1, #11
 8005dfe:	d918      	bls.n	8005e32 <_malloc_r+0xce>
 8005e00:	19e2      	adds	r2, r4, r7
 8005e02:	6027      	str	r7, [r4, #0]
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	d112      	bne.n	8005e2e <_malloc_r+0xca>
 8005e08:	9b00      	ldr	r3, [sp, #0]
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	6011      	str	r1, [r2, #0]
 8005e10:	6053      	str	r3, [r2, #4]
 8005e12:	0030      	movs	r0, r6
 8005e14:	0025      	movs	r5, r4
 8005e16:	f000 f82f 	bl	8005e78 <__malloc_unlock>
 8005e1a:	2207      	movs	r2, #7
 8005e1c:	350b      	adds	r5, #11
 8005e1e:	1d23      	adds	r3, r4, #4
 8005e20:	4395      	bics	r5, r2
 8005e22:	1aea      	subs	r2, r5, r3
 8005e24:	429d      	cmp	r5, r3
 8005e26:	d0e4      	beq.n	8005df2 <_malloc_r+0x8e>
 8005e28:	1b5b      	subs	r3, r3, r5
 8005e2a:	50a3      	str	r3, [r4, r2]
 8005e2c:	e7e1      	b.n	8005df2 <_malloc_r+0x8e>
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	e7ec      	b.n	8005e0c <_malloc_r+0xa8>
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	d1d5      	bne.n	8005de4 <_malloc_r+0x80>
 8005e38:	9b00      	ldr	r3, [sp, #0]
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e7e9      	b.n	8005e12 <_malloc_r+0xae>
 8005e3e:	0023      	movs	r3, r4
 8005e40:	6864      	ldr	r4, [r4, #4]
 8005e42:	e7a2      	b.n	8005d8a <_malloc_r+0x26>
 8005e44:	002c      	movs	r4, r5
 8005e46:	686d      	ldr	r5, [r5, #4]
 8005e48:	e7ab      	b.n	8005da2 <_malloc_r+0x3e>
 8005e4a:	0013      	movs	r3, r2
 8005e4c:	e7c4      	b.n	8005dd8 <_malloc_r+0x74>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	0030      	movs	r0, r6
 8005e52:	6033      	str	r3, [r6, #0]
 8005e54:	f000 f810 	bl	8005e78 <__malloc_unlock>
 8005e58:	e7cb      	b.n	8005df2 <_malloc_r+0x8e>
 8005e5a:	6027      	str	r7, [r4, #0]
 8005e5c:	e7d9      	b.n	8005e12 <_malloc_r+0xae>
 8005e5e:	605b      	str	r3, [r3, #4]
 8005e60:	deff      	udf	#255	; 0xff
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	20000824 	.word	0x20000824

08005e68 <__malloc_lock>:
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	4802      	ldr	r0, [pc, #8]	; (8005e74 <__malloc_lock+0xc>)
 8005e6c:	f000 fab5 	bl	80063da <__retarget_lock_acquire_recursive>
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	2000096c 	.word	0x2000096c

08005e78 <__malloc_unlock>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4802      	ldr	r0, [pc, #8]	; (8005e84 <__malloc_unlock+0xc>)
 8005e7c:	f000 faae 	bl	80063dc <__retarget_lock_release_recursive>
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	2000096c 	.word	0x2000096c

08005e88 <std>:
 8005e88:	2300      	movs	r3, #0
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	0004      	movs	r4, r0
 8005e8e:	6003      	str	r3, [r0, #0]
 8005e90:	6043      	str	r3, [r0, #4]
 8005e92:	6083      	str	r3, [r0, #8]
 8005e94:	8181      	strh	r1, [r0, #12]
 8005e96:	6643      	str	r3, [r0, #100]	; 0x64
 8005e98:	81c2      	strh	r2, [r0, #14]
 8005e9a:	6103      	str	r3, [r0, #16]
 8005e9c:	6143      	str	r3, [r0, #20]
 8005e9e:	6183      	str	r3, [r0, #24]
 8005ea0:	0019      	movs	r1, r3
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	305c      	adds	r0, #92	; 0x5c
 8005ea6:	f000 fa05 	bl	80062b4 <memset>
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <std+0x50>)
 8005eac:	6224      	str	r4, [r4, #32]
 8005eae:	6263      	str	r3, [r4, #36]	; 0x24
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <std+0x54>)
 8005eb2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <std+0x58>)
 8005eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <std+0x5c>)
 8005eba:	6323      	str	r3, [r4, #48]	; 0x30
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <std+0x60>)
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d005      	beq.n	8005ece <std+0x46>
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <std+0x64>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	d002      	beq.n	8005ece <std+0x46>
 8005ec8:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <std+0x68>)
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d103      	bne.n	8005ed6 <std+0x4e>
 8005ece:	0020      	movs	r0, r4
 8005ed0:	3058      	adds	r0, #88	; 0x58
 8005ed2:	f000 fa81 	bl	80063d8 <__retarget_lock_init_recursive>
 8005ed6:	bd10      	pop	{r4, pc}
 8005ed8:	080060d1 	.word	0x080060d1
 8005edc:	080060f9 	.word	0x080060f9
 8005ee0:	08006131 	.word	0x08006131
 8005ee4:	0800615d 	.word	0x0800615d
 8005ee8:	2000082c 	.word	0x2000082c
 8005eec:	20000894 	.word	0x20000894
 8005ef0:	200008fc 	.word	0x200008fc

08005ef4 <stdio_exit_handler>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4a03      	ldr	r2, [pc, #12]	; (8005f04 <stdio_exit_handler+0x10>)
 8005ef8:	4903      	ldr	r1, [pc, #12]	; (8005f08 <stdio_exit_handler+0x14>)
 8005efa:	4804      	ldr	r0, [pc, #16]	; (8005f0c <stdio_exit_handler+0x18>)
 8005efc:	f000 f86c 	bl	8005fd8 <_fwalk_sglue>
 8005f00:	bd10      	pop	{r4, pc}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	20000120 	.word	0x20000120
 8005f08:	08006599 	.word	0x08006599
 8005f0c:	2000012c 	.word	0x2000012c

08005f10 <cleanup_stdio>:
 8005f10:	6841      	ldr	r1, [r0, #4]
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <cleanup_stdio+0x30>)
 8005f14:	b510      	push	{r4, lr}
 8005f16:	0004      	movs	r4, r0
 8005f18:	4299      	cmp	r1, r3
 8005f1a:	d001      	beq.n	8005f20 <cleanup_stdio+0x10>
 8005f1c:	f000 fb3c 	bl	8006598 <_fflush_r>
 8005f20:	68a1      	ldr	r1, [r4, #8]
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <cleanup_stdio+0x34>)
 8005f24:	4299      	cmp	r1, r3
 8005f26:	d002      	beq.n	8005f2e <cleanup_stdio+0x1e>
 8005f28:	0020      	movs	r0, r4
 8005f2a:	f000 fb35 	bl	8006598 <_fflush_r>
 8005f2e:	68e1      	ldr	r1, [r4, #12]
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <cleanup_stdio+0x38>)
 8005f32:	4299      	cmp	r1, r3
 8005f34:	d002      	beq.n	8005f3c <cleanup_stdio+0x2c>
 8005f36:	0020      	movs	r0, r4
 8005f38:	f000 fb2e 	bl	8006598 <_fflush_r>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	2000082c 	.word	0x2000082c
 8005f44:	20000894 	.word	0x20000894
 8005f48:	200008fc 	.word	0x200008fc

08005f4c <global_stdio_init.part.0>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <global_stdio_init.part.0+0x28>)
 8005f50:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <global_stdio_init.part.0+0x2c>)
 8005f52:	2104      	movs	r1, #4
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	4809      	ldr	r0, [pc, #36]	; (8005f7c <global_stdio_init.part.0+0x30>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f7ff ff95 	bl	8005e88 <std>
 8005f5e:	2201      	movs	r2, #1
 8005f60:	2109      	movs	r1, #9
 8005f62:	4807      	ldr	r0, [pc, #28]	; (8005f80 <global_stdio_init.part.0+0x34>)
 8005f64:	f7ff ff90 	bl	8005e88 <std>
 8005f68:	2202      	movs	r2, #2
 8005f6a:	2112      	movs	r1, #18
 8005f6c:	4805      	ldr	r0, [pc, #20]	; (8005f84 <global_stdio_init.part.0+0x38>)
 8005f6e:	f7ff ff8b 	bl	8005e88 <std>
 8005f72:	bd10      	pop	{r4, pc}
 8005f74:	20000964 	.word	0x20000964
 8005f78:	08005ef5 	.word	0x08005ef5
 8005f7c:	2000082c 	.word	0x2000082c
 8005f80:	20000894 	.word	0x20000894
 8005f84:	200008fc 	.word	0x200008fc

08005f88 <__sfp_lock_acquire>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4802      	ldr	r0, [pc, #8]	; (8005f94 <__sfp_lock_acquire+0xc>)
 8005f8c:	f000 fa25 	bl	80063da <__retarget_lock_acquire_recursive>
 8005f90:	bd10      	pop	{r4, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	2000096d 	.word	0x2000096d

08005f98 <__sfp_lock_release>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4802      	ldr	r0, [pc, #8]	; (8005fa4 <__sfp_lock_release+0xc>)
 8005f9c:	f000 fa1e 	bl	80063dc <__retarget_lock_release_recursive>
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	2000096d 	.word	0x2000096d

08005fa8 <__sinit>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	0004      	movs	r4, r0
 8005fac:	f7ff ffec 	bl	8005f88 <__sfp_lock_acquire>
 8005fb0:	6a23      	ldr	r3, [r4, #32]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <__sinit+0x14>
 8005fb6:	f7ff ffef 	bl	8005f98 <__sfp_lock_release>
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <__sinit+0x28>)
 8005fbe:	6223      	str	r3, [r4, #32]
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <__sinit+0x2c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f6      	bne.n	8005fb6 <__sinit+0xe>
 8005fc8:	f7ff ffc0 	bl	8005f4c <global_stdio_init.part.0>
 8005fcc:	e7f3      	b.n	8005fb6 <__sinit+0xe>
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	08005f11 	.word	0x08005f11
 8005fd4:	20000964 	.word	0x20000964

08005fd8 <_fwalk_sglue>:
 8005fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fda:	0014      	movs	r4, r2
 8005fdc:	2600      	movs	r6, #0
 8005fde:	9000      	str	r0, [sp, #0]
 8005fe0:	9101      	str	r1, [sp, #4]
 8005fe2:	68a5      	ldr	r5, [r4, #8]
 8005fe4:	6867      	ldr	r7, [r4, #4]
 8005fe6:	3f01      	subs	r7, #1
 8005fe8:	d504      	bpl.n	8005ff4 <_fwalk_sglue+0x1c>
 8005fea:	6824      	ldr	r4, [r4, #0]
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	d1f8      	bne.n	8005fe2 <_fwalk_sglue+0xa>
 8005ff0:	0030      	movs	r0, r6
 8005ff2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ff4:	89ab      	ldrh	r3, [r5, #12]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d908      	bls.n	800600c <_fwalk_sglue+0x34>
 8005ffa:	220e      	movs	r2, #14
 8005ffc:	5eab      	ldrsh	r3, [r5, r2]
 8005ffe:	3301      	adds	r3, #1
 8006000:	d004      	beq.n	800600c <_fwalk_sglue+0x34>
 8006002:	0029      	movs	r1, r5
 8006004:	9800      	ldr	r0, [sp, #0]
 8006006:	9b01      	ldr	r3, [sp, #4]
 8006008:	4798      	blx	r3
 800600a:	4306      	orrs	r6, r0
 800600c:	3568      	adds	r5, #104	; 0x68
 800600e:	e7ea      	b.n	8005fe6 <_fwalk_sglue+0xe>

08006010 <_puts_r>:
 8006010:	6a03      	ldr	r3, [r0, #32]
 8006012:	b570      	push	{r4, r5, r6, lr}
 8006014:	0005      	movs	r5, r0
 8006016:	000e      	movs	r6, r1
 8006018:	6884      	ldr	r4, [r0, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <_puts_r+0x12>
 800601e:	f7ff ffc3 	bl	8005fa8 <__sinit>
 8006022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006024:	07db      	lsls	r3, r3, #31
 8006026:	d405      	bmi.n	8006034 <_puts_r+0x24>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	059b      	lsls	r3, r3, #22
 800602c:	d402      	bmi.n	8006034 <_puts_r+0x24>
 800602e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006030:	f000 f9d3 	bl	80063da <__retarget_lock_acquire_recursive>
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	071b      	lsls	r3, r3, #28
 8006038:	d502      	bpl.n	8006040 <_puts_r+0x30>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d11f      	bne.n	8006080 <_puts_r+0x70>
 8006040:	0021      	movs	r1, r4
 8006042:	0028      	movs	r0, r5
 8006044:	f000 f8d2 	bl	80061ec <__swsetup_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	d019      	beq.n	8006080 <_puts_r+0x70>
 800604c:	2501      	movs	r5, #1
 800604e:	426d      	negs	r5, r5
 8006050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006052:	07db      	lsls	r3, r3, #31
 8006054:	d405      	bmi.n	8006062 <_puts_r+0x52>
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	059b      	lsls	r3, r3, #22
 800605a:	d402      	bmi.n	8006062 <_puts_r+0x52>
 800605c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800605e:	f000 f9bd 	bl	80063dc <__retarget_lock_release_recursive>
 8006062:	0028      	movs	r0, r5
 8006064:	bd70      	pop	{r4, r5, r6, pc}
 8006066:	3601      	adds	r6, #1
 8006068:	60a3      	str	r3, [r4, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	da04      	bge.n	8006078 <_puts_r+0x68>
 800606e:	69a2      	ldr	r2, [r4, #24]
 8006070:	429a      	cmp	r2, r3
 8006072:	dc16      	bgt.n	80060a2 <_puts_r+0x92>
 8006074:	290a      	cmp	r1, #10
 8006076:	d014      	beq.n	80060a2 <_puts_r+0x92>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	6022      	str	r2, [r4, #0]
 800607e:	7019      	strb	r1, [r3, #0]
 8006080:	68a3      	ldr	r3, [r4, #8]
 8006082:	7831      	ldrb	r1, [r6, #0]
 8006084:	3b01      	subs	r3, #1
 8006086:	2900      	cmp	r1, #0
 8006088:	d1ed      	bne.n	8006066 <_puts_r+0x56>
 800608a:	60a3      	str	r3, [r4, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	da0f      	bge.n	80060b0 <_puts_r+0xa0>
 8006090:	0028      	movs	r0, r5
 8006092:	0022      	movs	r2, r4
 8006094:	310a      	adds	r1, #10
 8006096:	f000 f867 	bl	8006168 <__swbuf_r>
 800609a:	250a      	movs	r5, #10
 800609c:	3001      	adds	r0, #1
 800609e:	d1d7      	bne.n	8006050 <_puts_r+0x40>
 80060a0:	e7d4      	b.n	800604c <_puts_r+0x3c>
 80060a2:	0022      	movs	r2, r4
 80060a4:	0028      	movs	r0, r5
 80060a6:	f000 f85f 	bl	8006168 <__swbuf_r>
 80060aa:	3001      	adds	r0, #1
 80060ac:	d1e8      	bne.n	8006080 <_puts_r+0x70>
 80060ae:	e7cd      	b.n	800604c <_puts_r+0x3c>
 80060b0:	250a      	movs	r5, #10
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	701d      	strb	r5, [r3, #0]
 80060ba:	e7c9      	b.n	8006050 <_puts_r+0x40>

080060bc <puts>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	4b03      	ldr	r3, [pc, #12]	; (80060cc <puts+0x10>)
 80060c0:	0001      	movs	r1, r0
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	f7ff ffa4 	bl	8006010 <_puts_r>
 80060c8:	bd10      	pop	{r4, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	20000178 	.word	0x20000178

080060d0 <__sread>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	000c      	movs	r4, r1
 80060d4:	250e      	movs	r5, #14
 80060d6:	5f49      	ldrsh	r1, [r1, r5]
 80060d8:	f000 f91a 	bl	8006310 <_read_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	db03      	blt.n	80060e8 <__sread+0x18>
 80060e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060e2:	181b      	adds	r3, r3, r0
 80060e4:	6563      	str	r3, [r4, #84]	; 0x54
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	4a02      	ldr	r2, [pc, #8]	; (80060f4 <__sread+0x24>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	e7f9      	b.n	80060e6 <__sread+0x16>
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	ffffefff 	.word	0xffffefff

080060f8 <__swrite>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	001f      	movs	r7, r3
 80060fc:	898b      	ldrh	r3, [r1, #12]
 80060fe:	0005      	movs	r5, r0
 8006100:	000c      	movs	r4, r1
 8006102:	0016      	movs	r6, r2
 8006104:	05db      	lsls	r3, r3, #23
 8006106:	d505      	bpl.n	8006114 <__swrite+0x1c>
 8006108:	230e      	movs	r3, #14
 800610a:	5ec9      	ldrsh	r1, [r1, r3]
 800610c:	2200      	movs	r2, #0
 800610e:	2302      	movs	r3, #2
 8006110:	f000 f8ea 	bl	80062e8 <_lseek_r>
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	4a05      	ldr	r2, [pc, #20]	; (800612c <__swrite+0x34>)
 8006118:	0028      	movs	r0, r5
 800611a:	4013      	ands	r3, r2
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	0032      	movs	r2, r6
 8006120:	230e      	movs	r3, #14
 8006122:	5ee1      	ldrsh	r1, [r4, r3]
 8006124:	003b      	movs	r3, r7
 8006126:	f000 f919 	bl	800635c <_write_r>
 800612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612c:	ffffefff 	.word	0xffffefff

08006130 <__sseek>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	000c      	movs	r4, r1
 8006134:	250e      	movs	r5, #14
 8006136:	5f49      	ldrsh	r1, [r1, r5]
 8006138:	f000 f8d6 	bl	80062e8 <_lseek_r>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	1c42      	adds	r2, r0, #1
 8006140:	d103      	bne.n	800614a <__sseek+0x1a>
 8006142:	4a05      	ldr	r2, [pc, #20]	; (8006158 <__sseek+0x28>)
 8006144:	4013      	ands	r3, r2
 8006146:	81a3      	strh	r3, [r4, #12]
 8006148:	bd70      	pop	{r4, r5, r6, pc}
 800614a:	2280      	movs	r2, #128	; 0x80
 800614c:	0152      	lsls	r2, r2, #5
 800614e:	4313      	orrs	r3, r2
 8006150:	81a3      	strh	r3, [r4, #12]
 8006152:	6560      	str	r0, [r4, #84]	; 0x54
 8006154:	e7f8      	b.n	8006148 <__sseek+0x18>
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	ffffefff 	.word	0xffffefff

0800615c <__sclose>:
 800615c:	b510      	push	{r4, lr}
 800615e:	230e      	movs	r3, #14
 8006160:	5ec9      	ldrsh	r1, [r1, r3]
 8006162:	f000 f8af 	bl	80062c4 <_close_r>
 8006166:	bd10      	pop	{r4, pc}

08006168 <__swbuf_r>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	0006      	movs	r6, r0
 800616c:	000d      	movs	r5, r1
 800616e:	0014      	movs	r4, r2
 8006170:	2800      	cmp	r0, #0
 8006172:	d004      	beq.n	800617e <__swbuf_r+0x16>
 8006174:	6a03      	ldr	r3, [r0, #32]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <__swbuf_r+0x16>
 800617a:	f7ff ff15 	bl	8005fa8 <__sinit>
 800617e:	69a3      	ldr	r3, [r4, #24]
 8006180:	60a3      	str	r3, [r4, #8]
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	071b      	lsls	r3, r3, #28
 8006186:	d528      	bpl.n	80061da <__swbuf_r+0x72>
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d025      	beq.n	80061da <__swbuf_r+0x72>
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	b2ef      	uxtb	r7, r5
 8006194:	1ac0      	subs	r0, r0, r3
 8006196:	6963      	ldr	r3, [r4, #20]
 8006198:	b2ed      	uxtb	r5, r5
 800619a:	4283      	cmp	r3, r0
 800619c:	dc05      	bgt.n	80061aa <__swbuf_r+0x42>
 800619e:	0021      	movs	r1, r4
 80061a0:	0030      	movs	r0, r6
 80061a2:	f000 f9f9 	bl	8006598 <_fflush_r>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d11d      	bne.n	80061e6 <__swbuf_r+0x7e>
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	3001      	adds	r0, #1
 80061ae:	3b01      	subs	r3, #1
 80061b0:	60a3      	str	r3, [r4, #8]
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	6022      	str	r2, [r4, #0]
 80061b8:	701f      	strb	r7, [r3, #0]
 80061ba:	6963      	ldr	r3, [r4, #20]
 80061bc:	4283      	cmp	r3, r0
 80061be:	d004      	beq.n	80061ca <__swbuf_r+0x62>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	07db      	lsls	r3, r3, #31
 80061c4:	d507      	bpl.n	80061d6 <__swbuf_r+0x6e>
 80061c6:	2d0a      	cmp	r5, #10
 80061c8:	d105      	bne.n	80061d6 <__swbuf_r+0x6e>
 80061ca:	0021      	movs	r1, r4
 80061cc:	0030      	movs	r0, r6
 80061ce:	f000 f9e3 	bl	8006598 <_fflush_r>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d107      	bne.n	80061e6 <__swbuf_r+0x7e>
 80061d6:	0028      	movs	r0, r5
 80061d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061da:	0021      	movs	r1, r4
 80061dc:	0030      	movs	r0, r6
 80061de:	f000 f805 	bl	80061ec <__swsetup_r>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d0d3      	beq.n	800618e <__swbuf_r+0x26>
 80061e6:	2501      	movs	r5, #1
 80061e8:	426d      	negs	r5, r5
 80061ea:	e7f4      	b.n	80061d6 <__swbuf_r+0x6e>

080061ec <__swsetup_r>:
 80061ec:	4b30      	ldr	r3, [pc, #192]	; (80062b0 <__swsetup_r+0xc4>)
 80061ee:	b570      	push	{r4, r5, r6, lr}
 80061f0:	0005      	movs	r5, r0
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	000c      	movs	r4, r1
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d004      	beq.n	8006204 <__swsetup_r+0x18>
 80061fa:	6a03      	ldr	r3, [r0, #32]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <__swsetup_r+0x18>
 8006200:	f7ff fed2 	bl	8005fa8 <__sinit>
 8006204:	230c      	movs	r3, #12
 8006206:	5ee2      	ldrsh	r2, [r4, r3]
 8006208:	b293      	uxth	r3, r2
 800620a:	0711      	lsls	r1, r2, #28
 800620c:	d423      	bmi.n	8006256 <__swsetup_r+0x6a>
 800620e:	06d9      	lsls	r1, r3, #27
 8006210:	d407      	bmi.n	8006222 <__swsetup_r+0x36>
 8006212:	2309      	movs	r3, #9
 8006214:	2001      	movs	r0, #1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	3337      	adds	r3, #55	; 0x37
 800621a:	4313      	orrs	r3, r2
 800621c:	81a3      	strh	r3, [r4, #12]
 800621e:	4240      	negs	r0, r0
 8006220:	bd70      	pop	{r4, r5, r6, pc}
 8006222:	075b      	lsls	r3, r3, #29
 8006224:	d513      	bpl.n	800624e <__swsetup_r+0x62>
 8006226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006228:	2900      	cmp	r1, #0
 800622a:	d008      	beq.n	800623e <__swsetup_r+0x52>
 800622c:	0023      	movs	r3, r4
 800622e:	3344      	adds	r3, #68	; 0x44
 8006230:	4299      	cmp	r1, r3
 8006232:	d002      	beq.n	800623a <__swsetup_r+0x4e>
 8006234:	0028      	movs	r0, r5
 8006236:	f000 f8db 	bl	80063f0 <_free_r>
 800623a:	2300      	movs	r3, #0
 800623c:	6363      	str	r3, [r4, #52]	; 0x34
 800623e:	2224      	movs	r2, #36	; 0x24
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	4393      	bics	r3, r2
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	2300      	movs	r3, #0
 8006248:	6063      	str	r3, [r4, #4]
 800624a:	6923      	ldr	r3, [r4, #16]
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	2308      	movs	r3, #8
 8006250:	89a2      	ldrh	r2, [r4, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <__swsetup_r+0x88>
 800625c:	21a0      	movs	r1, #160	; 0xa0
 800625e:	2280      	movs	r2, #128	; 0x80
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	0089      	lsls	r1, r1, #2
 8006264:	0092      	lsls	r2, r2, #2
 8006266:	400b      	ands	r3, r1
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <__swsetup_r+0x88>
 800626c:	0021      	movs	r1, r4
 800626e:	0028      	movs	r0, r5
 8006270:	f000 f9e6 	bl	8006640 <__smakebuf_r>
 8006274:	220c      	movs	r2, #12
 8006276:	5ea3      	ldrsh	r3, [r4, r2]
 8006278:	2001      	movs	r0, #1
 800627a:	001a      	movs	r2, r3
 800627c:	b299      	uxth	r1, r3
 800627e:	4002      	ands	r2, r0
 8006280:	4203      	tst	r3, r0
 8006282:	d00f      	beq.n	80062a4 <__swsetup_r+0xb8>
 8006284:	2200      	movs	r2, #0
 8006286:	60a2      	str	r2, [r4, #8]
 8006288:	6962      	ldr	r2, [r4, #20]
 800628a:	4252      	negs	r2, r2
 800628c:	61a2      	str	r2, [r4, #24]
 800628e:	2000      	movs	r0, #0
 8006290:	6922      	ldr	r2, [r4, #16]
 8006292:	4282      	cmp	r2, r0
 8006294:	d1c4      	bne.n	8006220 <__swsetup_r+0x34>
 8006296:	0609      	lsls	r1, r1, #24
 8006298:	d5c2      	bpl.n	8006220 <__swsetup_r+0x34>
 800629a:	2240      	movs	r2, #64	; 0x40
 800629c:	4313      	orrs	r3, r2
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	3801      	subs	r0, #1
 80062a2:	e7bd      	b.n	8006220 <__swsetup_r+0x34>
 80062a4:	0788      	lsls	r0, r1, #30
 80062a6:	d400      	bmi.n	80062aa <__swsetup_r+0xbe>
 80062a8:	6962      	ldr	r2, [r4, #20]
 80062aa:	60a2      	str	r2, [r4, #8]
 80062ac:	e7ef      	b.n	800628e <__swsetup_r+0xa2>
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	20000178 	.word	0x20000178

080062b4 <memset>:
 80062b4:	0003      	movs	r3, r0
 80062b6:	1882      	adds	r2, r0, r2
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d100      	bne.n	80062be <memset+0xa>
 80062bc:	4770      	bx	lr
 80062be:	7019      	strb	r1, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	e7f9      	b.n	80062b8 <memset+0x4>

080062c4 <_close_r>:
 80062c4:	2300      	movs	r3, #0
 80062c6:	b570      	push	{r4, r5, r6, lr}
 80062c8:	4d06      	ldr	r5, [pc, #24]	; (80062e4 <_close_r+0x20>)
 80062ca:	0004      	movs	r4, r0
 80062cc:	0008      	movs	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fc fae9 	bl	80028a6 <_close>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d103      	bne.n	80062e0 <_close_r+0x1c>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d000      	beq.n	80062e0 <_close_r+0x1c>
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	20000968 	.word	0x20000968

080062e8 <_lseek_r>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	0004      	movs	r4, r0
 80062ec:	0008      	movs	r0, r1
 80062ee:	0011      	movs	r1, r2
 80062f0:	001a      	movs	r2, r3
 80062f2:	2300      	movs	r3, #0
 80062f4:	4d05      	ldr	r5, [pc, #20]	; (800630c <_lseek_r+0x24>)
 80062f6:	602b      	str	r3, [r5, #0]
 80062f8:	f7fc faf6 	bl	80028e8 <_lseek>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d103      	bne.n	8006308 <_lseek_r+0x20>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d000      	beq.n	8006308 <_lseek_r+0x20>
 8006306:	6023      	str	r3, [r4, #0]
 8006308:	bd70      	pop	{r4, r5, r6, pc}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	20000968 	.word	0x20000968

08006310 <_read_r>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	0004      	movs	r4, r0
 8006314:	0008      	movs	r0, r1
 8006316:	0011      	movs	r1, r2
 8006318:	001a      	movs	r2, r3
 800631a:	2300      	movs	r3, #0
 800631c:	4d05      	ldr	r5, [pc, #20]	; (8006334 <_read_r+0x24>)
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	f7fc fa88 	bl	8002834 <_read>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d103      	bne.n	8006330 <_read_r+0x20>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d000      	beq.n	8006330 <_read_r+0x20>
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	bd70      	pop	{r4, r5, r6, pc}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	20000968 	.word	0x20000968

08006338 <_sbrk_r>:
 8006338:	2300      	movs	r3, #0
 800633a:	b570      	push	{r4, r5, r6, lr}
 800633c:	4d06      	ldr	r5, [pc, #24]	; (8006358 <_sbrk_r+0x20>)
 800633e:	0004      	movs	r4, r0
 8006340:	0008      	movs	r0, r1
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	f7fc fadc 	bl	8002900 <_sbrk>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d103      	bne.n	8006354 <_sbrk_r+0x1c>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d000      	beq.n	8006354 <_sbrk_r+0x1c>
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	20000968 	.word	0x20000968

0800635c <_write_r>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	0004      	movs	r4, r0
 8006360:	0008      	movs	r0, r1
 8006362:	0011      	movs	r1, r2
 8006364:	001a      	movs	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	4d05      	ldr	r5, [pc, #20]	; (8006380 <_write_r+0x24>)
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fc fa7f 	bl	800286e <_write>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d103      	bne.n	800637c <_write_r+0x20>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d000      	beq.n	800637c <_write_r+0x20>
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	20000968 	.word	0x20000968

08006384 <__errno>:
 8006384:	4b01      	ldr	r3, [pc, #4]	; (800638c <__errno+0x8>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4770      	bx	lr
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	20000178 	.word	0x20000178

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	2600      	movs	r6, #0
 8006394:	4c0c      	ldr	r4, [pc, #48]	; (80063c8 <__libc_init_array+0x38>)
 8006396:	4d0d      	ldr	r5, [pc, #52]	; (80063cc <__libc_init_array+0x3c>)
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	2600      	movs	r6, #0
 80063a2:	f000 f9af 	bl	8006704 <_init>
 80063a6:	4c0a      	ldr	r4, [pc, #40]	; (80063d0 <__libc_init_array+0x40>)
 80063a8:	4d0a      	ldr	r5, [pc, #40]	; (80063d4 <__libc_init_array+0x44>)
 80063aa:	1b64      	subs	r4, r4, r5
 80063ac:	10a4      	asrs	r4, r4, #2
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	00b3      	lsls	r3, r6, #2
 80063b6:	58eb      	ldr	r3, [r5, r3]
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	00b3      	lsls	r3, r6, #2
 80063c0:	58eb      	ldr	r3, [r5, r3]
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	08006964 	.word	0x08006964
 80063cc:	08006964 	.word	0x08006964
 80063d0:	08006968 	.word	0x08006968
 80063d4:	08006964 	.word	0x08006964

080063d8 <__retarget_lock_init_recursive>:
 80063d8:	4770      	bx	lr

080063da <__retarget_lock_acquire_recursive>:
 80063da:	4770      	bx	lr

080063dc <__retarget_lock_release_recursive>:
 80063dc:	4770      	bx	lr

080063de <memcpy>:
 80063de:	2300      	movs	r3, #0
 80063e0:	b510      	push	{r4, lr}
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d100      	bne.n	80063e8 <memcpy+0xa>
 80063e6:	bd10      	pop	{r4, pc}
 80063e8:	5ccc      	ldrb	r4, [r1, r3]
 80063ea:	54c4      	strb	r4, [r0, r3]
 80063ec:	3301      	adds	r3, #1
 80063ee:	e7f8      	b.n	80063e2 <memcpy+0x4>

080063f0 <_free_r>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	0005      	movs	r5, r0
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d010      	beq.n	800641a <_free_r+0x2a>
 80063f8:	1f0c      	subs	r4, r1, #4
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	da00      	bge.n	8006402 <_free_r+0x12>
 8006400:	18e4      	adds	r4, r4, r3
 8006402:	0028      	movs	r0, r5
 8006404:	f7ff fd30 	bl	8005e68 <__malloc_lock>
 8006408:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <_free_r+0x90>)
 800640a:	6813      	ldr	r3, [r2, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <_free_r+0x2c>
 8006410:	6063      	str	r3, [r4, #4]
 8006412:	6014      	str	r4, [r2, #0]
 8006414:	0028      	movs	r0, r5
 8006416:	f7ff fd2f 	bl	8005e78 <__malloc_unlock>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	42a3      	cmp	r3, r4
 800641e:	d908      	bls.n	8006432 <_free_r+0x42>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	1821      	adds	r1, r4, r0
 8006424:	428b      	cmp	r3, r1
 8006426:	d1f3      	bne.n	8006410 <_free_r+0x20>
 8006428:	6819      	ldr	r1, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	1809      	adds	r1, r1, r0
 800642e:	6021      	str	r1, [r4, #0]
 8006430:	e7ee      	b.n	8006410 <_free_r+0x20>
 8006432:	001a      	movs	r2, r3
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <_free_r+0x4e>
 800643a:	42a3      	cmp	r3, r4
 800643c:	d9f9      	bls.n	8006432 <_free_r+0x42>
 800643e:	6811      	ldr	r1, [r2, #0]
 8006440:	1850      	adds	r0, r2, r1
 8006442:	42a0      	cmp	r0, r4
 8006444:	d10b      	bne.n	800645e <_free_r+0x6e>
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	1809      	adds	r1, r1, r0
 800644a:	1850      	adds	r0, r2, r1
 800644c:	6011      	str	r1, [r2, #0]
 800644e:	4283      	cmp	r3, r0
 8006450:	d1e0      	bne.n	8006414 <_free_r+0x24>
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	1841      	adds	r1, r0, r1
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	6053      	str	r3, [r2, #4]
 800645c:	e7da      	b.n	8006414 <_free_r+0x24>
 800645e:	42a0      	cmp	r0, r4
 8006460:	d902      	bls.n	8006468 <_free_r+0x78>
 8006462:	230c      	movs	r3, #12
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	e7d5      	b.n	8006414 <_free_r+0x24>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	1821      	adds	r1, r4, r0
 800646c:	428b      	cmp	r3, r1
 800646e:	d103      	bne.n	8006478 <_free_r+0x88>
 8006470:	6819      	ldr	r1, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	1809      	adds	r1, r1, r0
 8006476:	6021      	str	r1, [r4, #0]
 8006478:	6063      	str	r3, [r4, #4]
 800647a:	6054      	str	r4, [r2, #4]
 800647c:	e7ca      	b.n	8006414 <_free_r+0x24>
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	20000824 	.word	0x20000824

08006484 <__sflush_r>:
 8006484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006486:	898b      	ldrh	r3, [r1, #12]
 8006488:	0005      	movs	r5, r0
 800648a:	000c      	movs	r4, r1
 800648c:	071a      	lsls	r2, r3, #28
 800648e:	d45c      	bmi.n	800654a <__sflush_r+0xc6>
 8006490:	684a      	ldr	r2, [r1, #4]
 8006492:	2a00      	cmp	r2, #0
 8006494:	dc04      	bgt.n	80064a0 <__sflush_r+0x1c>
 8006496:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006498:	2a00      	cmp	r2, #0
 800649a:	dc01      	bgt.n	80064a0 <__sflush_r+0x1c>
 800649c:	2000      	movs	r0, #0
 800649e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80064a2:	2f00      	cmp	r7, #0
 80064a4:	d0fa      	beq.n	800649c <__sflush_r+0x18>
 80064a6:	2200      	movs	r2, #0
 80064a8:	2080      	movs	r0, #128	; 0x80
 80064aa:	682e      	ldr	r6, [r5, #0]
 80064ac:	602a      	str	r2, [r5, #0]
 80064ae:	001a      	movs	r2, r3
 80064b0:	0140      	lsls	r0, r0, #5
 80064b2:	6a21      	ldr	r1, [r4, #32]
 80064b4:	4002      	ands	r2, r0
 80064b6:	4203      	tst	r3, r0
 80064b8:	d034      	beq.n	8006524 <__sflush_r+0xa0>
 80064ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	075b      	lsls	r3, r3, #29
 80064c0:	d506      	bpl.n	80064d0 <__sflush_r+0x4c>
 80064c2:	6863      	ldr	r3, [r4, #4]
 80064c4:	1ac0      	subs	r0, r0, r3
 80064c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <__sflush_r+0x4c>
 80064cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064ce:	1ac0      	subs	r0, r0, r3
 80064d0:	0002      	movs	r2, r0
 80064d2:	2300      	movs	r3, #0
 80064d4:	0028      	movs	r0, r5
 80064d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80064d8:	6a21      	ldr	r1, [r4, #32]
 80064da:	47b8      	blx	r7
 80064dc:	89a2      	ldrh	r2, [r4, #12]
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	d106      	bne.n	80064f0 <__sflush_r+0x6c>
 80064e2:	6829      	ldr	r1, [r5, #0]
 80064e4:	291d      	cmp	r1, #29
 80064e6:	d82c      	bhi.n	8006542 <__sflush_r+0xbe>
 80064e8:	4b2a      	ldr	r3, [pc, #168]	; (8006594 <__sflush_r+0x110>)
 80064ea:	410b      	asrs	r3, r1
 80064ec:	07db      	lsls	r3, r3, #31
 80064ee:	d428      	bmi.n	8006542 <__sflush_r+0xbe>
 80064f0:	2300      	movs	r3, #0
 80064f2:	6063      	str	r3, [r4, #4]
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	04d2      	lsls	r2, r2, #19
 80064fa:	d505      	bpl.n	8006508 <__sflush_r+0x84>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <__sflush_r+0x82>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d100      	bne.n	8006508 <__sflush_r+0x84>
 8006506:	6560      	str	r0, [r4, #84]	; 0x54
 8006508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800650a:	602e      	str	r6, [r5, #0]
 800650c:	2900      	cmp	r1, #0
 800650e:	d0c5      	beq.n	800649c <__sflush_r+0x18>
 8006510:	0023      	movs	r3, r4
 8006512:	3344      	adds	r3, #68	; 0x44
 8006514:	4299      	cmp	r1, r3
 8006516:	d002      	beq.n	800651e <__sflush_r+0x9a>
 8006518:	0028      	movs	r0, r5
 800651a:	f7ff ff69 	bl	80063f0 <_free_r>
 800651e:	2000      	movs	r0, #0
 8006520:	6360      	str	r0, [r4, #52]	; 0x34
 8006522:	e7bc      	b.n	800649e <__sflush_r+0x1a>
 8006524:	2301      	movs	r3, #1
 8006526:	0028      	movs	r0, r5
 8006528:	47b8      	blx	r7
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d1c6      	bne.n	80064bc <__sflush_r+0x38>
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0c3      	beq.n	80064bc <__sflush_r+0x38>
 8006534:	2b1d      	cmp	r3, #29
 8006536:	d001      	beq.n	800653c <__sflush_r+0xb8>
 8006538:	2b16      	cmp	r3, #22
 800653a:	d101      	bne.n	8006540 <__sflush_r+0xbc>
 800653c:	602e      	str	r6, [r5, #0]
 800653e:	e7ad      	b.n	800649c <__sflush_r+0x18>
 8006540:	89a2      	ldrh	r2, [r4, #12]
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	4313      	orrs	r3, r2
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	e7a9      	b.n	800649e <__sflush_r+0x1a>
 800654a:	690e      	ldr	r6, [r1, #16]
 800654c:	2e00      	cmp	r6, #0
 800654e:	d0a5      	beq.n	800649c <__sflush_r+0x18>
 8006550:	680f      	ldr	r7, [r1, #0]
 8006552:	600e      	str	r6, [r1, #0]
 8006554:	1bba      	subs	r2, r7, r6
 8006556:	9201      	str	r2, [sp, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	079b      	lsls	r3, r3, #30
 800655c:	d100      	bne.n	8006560 <__sflush_r+0xdc>
 800655e:	694a      	ldr	r2, [r1, #20]
 8006560:	60a2      	str	r2, [r4, #8]
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd99      	ble.n	800649c <__sflush_r+0x18>
 8006568:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800656a:	0032      	movs	r2, r6
 800656c:	001f      	movs	r7, r3
 800656e:	0028      	movs	r0, r5
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	6a21      	ldr	r1, [r4, #32]
 8006574:	47b8      	blx	r7
 8006576:	2800      	cmp	r0, #0
 8006578:	dc06      	bgt.n	8006588 <__sflush_r+0x104>
 800657a:	2340      	movs	r3, #64	; 0x40
 800657c:	2001      	movs	r0, #1
 800657e:	89a2      	ldrh	r2, [r4, #12]
 8006580:	4240      	negs	r0, r0
 8006582:	4313      	orrs	r3, r2
 8006584:	81a3      	strh	r3, [r4, #12]
 8006586:	e78a      	b.n	800649e <__sflush_r+0x1a>
 8006588:	9b01      	ldr	r3, [sp, #4]
 800658a:	1836      	adds	r6, r6, r0
 800658c:	1a1b      	subs	r3, r3, r0
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	e7e7      	b.n	8006562 <__sflush_r+0xde>
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	dfbffffe 	.word	0xdfbffffe

08006598 <_fflush_r>:
 8006598:	690b      	ldr	r3, [r1, #16]
 800659a:	b570      	push	{r4, r5, r6, lr}
 800659c:	0005      	movs	r5, r0
 800659e:	000c      	movs	r4, r1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <_fflush_r+0x12>
 80065a4:	2500      	movs	r5, #0
 80065a6:	0028      	movs	r0, r5
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d004      	beq.n	80065b8 <_fflush_r+0x20>
 80065ae:	6a03      	ldr	r3, [r0, #32]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <_fflush_r+0x20>
 80065b4:	f7ff fcf8 	bl	8005fa8 <__sinit>
 80065b8:	220c      	movs	r2, #12
 80065ba:	5ea3      	ldrsh	r3, [r4, r2]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0f1      	beq.n	80065a4 <_fflush_r+0xc>
 80065c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065c2:	07d2      	lsls	r2, r2, #31
 80065c4:	d404      	bmi.n	80065d0 <_fflush_r+0x38>
 80065c6:	059b      	lsls	r3, r3, #22
 80065c8:	d402      	bmi.n	80065d0 <_fflush_r+0x38>
 80065ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065cc:	f7ff ff05 	bl	80063da <__retarget_lock_acquire_recursive>
 80065d0:	0028      	movs	r0, r5
 80065d2:	0021      	movs	r1, r4
 80065d4:	f7ff ff56 	bl	8006484 <__sflush_r>
 80065d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065da:	0005      	movs	r5, r0
 80065dc:	07db      	lsls	r3, r3, #31
 80065de:	d4e2      	bmi.n	80065a6 <_fflush_r+0xe>
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	059b      	lsls	r3, r3, #22
 80065e4:	d4df      	bmi.n	80065a6 <_fflush_r+0xe>
 80065e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e8:	f7ff fef8 	bl	80063dc <__retarget_lock_release_recursive>
 80065ec:	e7db      	b.n	80065a6 <_fflush_r+0xe>
	...

080065f0 <__swhatbuf_r>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	000e      	movs	r6, r1
 80065f4:	001d      	movs	r5, r3
 80065f6:	230e      	movs	r3, #14
 80065f8:	5ec9      	ldrsh	r1, [r1, r3]
 80065fa:	0014      	movs	r4, r2
 80065fc:	b096      	sub	sp, #88	; 0x58
 80065fe:	2900      	cmp	r1, #0
 8006600:	da0c      	bge.n	800661c <__swhatbuf_r+0x2c>
 8006602:	89b2      	ldrh	r2, [r6, #12]
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	0011      	movs	r1, r2
 8006608:	4019      	ands	r1, r3
 800660a:	421a      	tst	r2, r3
 800660c:	d013      	beq.n	8006636 <__swhatbuf_r+0x46>
 800660e:	2100      	movs	r1, #0
 8006610:	3b40      	subs	r3, #64	; 0x40
 8006612:	2000      	movs	r0, #0
 8006614:	6029      	str	r1, [r5, #0]
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	b016      	add	sp, #88	; 0x58
 800661a:	bd70      	pop	{r4, r5, r6, pc}
 800661c:	466a      	mov	r2, sp
 800661e:	f000 f84d 	bl	80066bc <_fstat_r>
 8006622:	2800      	cmp	r0, #0
 8006624:	dbed      	blt.n	8006602 <__swhatbuf_r+0x12>
 8006626:	23f0      	movs	r3, #240	; 0xf0
 8006628:	9901      	ldr	r1, [sp, #4]
 800662a:	021b      	lsls	r3, r3, #8
 800662c:	4019      	ands	r1, r3
 800662e:	4b03      	ldr	r3, [pc, #12]	; (800663c <__swhatbuf_r+0x4c>)
 8006630:	18c9      	adds	r1, r1, r3
 8006632:	424b      	negs	r3, r1
 8006634:	4159      	adcs	r1, r3
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	e7ea      	b.n	8006612 <__swhatbuf_r+0x22>
 800663c:	ffffe000 	.word	0xffffe000

08006640 <__smakebuf_r>:
 8006640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006642:	2602      	movs	r6, #2
 8006644:	898b      	ldrh	r3, [r1, #12]
 8006646:	0005      	movs	r5, r0
 8006648:	000c      	movs	r4, r1
 800664a:	4233      	tst	r3, r6
 800664c:	d006      	beq.n	800665c <__smakebuf_r+0x1c>
 800664e:	0023      	movs	r3, r4
 8006650:	3347      	adds	r3, #71	; 0x47
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	6123      	str	r3, [r4, #16]
 8006656:	2301      	movs	r3, #1
 8006658:	6163      	str	r3, [r4, #20]
 800665a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800665c:	466a      	mov	r2, sp
 800665e:	ab01      	add	r3, sp, #4
 8006660:	f7ff ffc6 	bl	80065f0 <__swhatbuf_r>
 8006664:	9900      	ldr	r1, [sp, #0]
 8006666:	0007      	movs	r7, r0
 8006668:	0028      	movs	r0, r5
 800666a:	f7ff fb7b 	bl	8005d64 <_malloc_r>
 800666e:	2800      	cmp	r0, #0
 8006670:	d108      	bne.n	8006684 <__smakebuf_r+0x44>
 8006672:	220c      	movs	r2, #12
 8006674:	5ea3      	ldrsh	r3, [r4, r2]
 8006676:	059a      	lsls	r2, r3, #22
 8006678:	d4ef      	bmi.n	800665a <__smakebuf_r+0x1a>
 800667a:	2203      	movs	r2, #3
 800667c:	4393      	bics	r3, r2
 800667e:	431e      	orrs	r6, r3
 8006680:	81a6      	strh	r6, [r4, #12]
 8006682:	e7e4      	b.n	800664e <__smakebuf_r+0xe>
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	89a2      	ldrh	r2, [r4, #12]
 8006688:	6020      	str	r0, [r4, #0]
 800668a:	4313      	orrs	r3, r2
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	9b00      	ldr	r3, [sp, #0]
 8006690:	6120      	str	r0, [r4, #16]
 8006692:	6163      	str	r3, [r4, #20]
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <__smakebuf_r+0x74>
 800669a:	0028      	movs	r0, r5
 800669c:	230e      	movs	r3, #14
 800669e:	5ee1      	ldrsh	r1, [r4, r3]
 80066a0:	f000 f81e 	bl	80066e0 <_isatty_r>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d005      	beq.n	80066b4 <__smakebuf_r+0x74>
 80066a8:	2303      	movs	r3, #3
 80066aa:	89a2      	ldrh	r2, [r4, #12]
 80066ac:	439a      	bics	r2, r3
 80066ae:	3b02      	subs	r3, #2
 80066b0:	4313      	orrs	r3, r2
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	433b      	orrs	r3, r7
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	e7ce      	b.n	800665a <__smakebuf_r+0x1a>

080066bc <_fstat_r>:
 80066bc:	2300      	movs	r3, #0
 80066be:	b570      	push	{r4, r5, r6, lr}
 80066c0:	4d06      	ldr	r5, [pc, #24]	; (80066dc <_fstat_r+0x20>)
 80066c2:	0004      	movs	r4, r0
 80066c4:	0008      	movs	r0, r1
 80066c6:	0011      	movs	r1, r2
 80066c8:	602b      	str	r3, [r5, #0]
 80066ca:	f7fc f8f6 	bl	80028ba <_fstat>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	d103      	bne.n	80066da <_fstat_r+0x1e>
 80066d2:	682b      	ldr	r3, [r5, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d000      	beq.n	80066da <_fstat_r+0x1e>
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	20000968 	.word	0x20000968

080066e0 <_isatty_r>:
 80066e0:	2300      	movs	r3, #0
 80066e2:	b570      	push	{r4, r5, r6, lr}
 80066e4:	4d06      	ldr	r5, [pc, #24]	; (8006700 <_isatty_r+0x20>)
 80066e6:	0004      	movs	r4, r0
 80066e8:	0008      	movs	r0, r1
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fc f8f3 	bl	80028d6 <_isatty>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d103      	bne.n	80066fc <_isatty_r+0x1c>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d000      	beq.n	80066fc <_isatty_r+0x1c>
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	20000968 	.word	0x20000968

08006704 <_init>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr

08006710 <_fini>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr
