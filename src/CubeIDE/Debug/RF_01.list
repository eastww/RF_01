
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b0  080068b0  00020154  2**0
                  CONTENTS
  4 .ARM          00000000  080068b0  080068b0  00020154  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068b0  080068b0  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b4  080068b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  080068b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000154  08006a0c  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  08006a0c  000209c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001257b  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c98  00000000  00000000  0003273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  000363d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eac  00000000  00000000  00037748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161fd  00000000  00000000  000385f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001caf9  00000000  00000000  0004e7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006be46  00000000  00000000  0006b2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000488c  00000000  00000000  000d7130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000db9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000154 	.word	0x20000154
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006670 	.word	0x08006670

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000158 	.word	0x20000158
 8000104:	08006670 	.word	0x08006670

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <rfUartGetMessage>:
 * @param event 
 * @param newStateData 
 */
void rfUartGetMessage( void *oldStateData, struct event *event,
      void *newStateData )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	led2Toggle();
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <rfUartGetMessage+0x68>)
 800022e:	2201      	movs	r2, #1
 8000230:	2120      	movs	r1, #32
 8000232:	0018      	movs	r0, r3
 8000234:	f002 ffcf 	bl	80031d6 <HAL_GPIO_WritePin>
 8000238:	2032      	movs	r0, #50	; 0x32
 800023a:	f001 fb2b 	bl	8001894 <Delay_Ms>
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <rfUartGetMessage+0x68>)
 8000240:	2200      	movs	r2, #0
 8000242:	2120      	movs	r1, #32
 8000244:	0018      	movs	r0, r3
 8000246:	f002 ffc6 	bl	80031d6 <HAL_GPIO_WritePin>
    bufferSize = uartGetData(BSP_TTL_CHANNEL1, txBuffer + 1, 256);
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <rfUartGetMessage+0x6c>)
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	0052      	lsls	r2, r2, #1
 8000250:	0019      	movs	r1, r3
 8000252:	2000      	movs	r0, #0
 8000254:	f001 fd0e 	bl	8001c74 <uartGetData>
 8000258:	0002      	movs	r2, r0
 800025a:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <rfUartGetMessage+0x70>)
 800025c:	601a      	str	r2, [r3, #0]
	if (bufferSize)
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <rfUartGetMessage+0x70>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d00b      	beq.n	800027e <rfUartGetMessage+0x5e>
        // uartSendData(BSP_TTL_CHANNEL1, txBuffer, bufferSize);
        // HAL_Delay_nMs(1000);

		/* reset the value */
		// bufferSize = 0;
        txBuffer[0] = bufferSize + 1;
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <rfUartGetMessage+0x70>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	3301      	adds	r3, #1
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <rfUartGetMessage+0x74>)
 8000272:	701a      	strb	r2, [r3, #0]
        uartResetData(BSP_TTL_CHANNEL1);
 8000274:	2000      	movs	r0, #0
 8000276:	f001 fd2b 	bl	8001cd0 <uartResetData>
        // RF_StartTx(txBuffer, txBuffer[0] , INFINITE);
        rfEntryTx();
 800027a:	f000 f8d5 	bl	8000428 <rfEntryTx>
	}
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b004      	add	sp, #16
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	48000400 	.word	0x48000400
 800028c:	20000271 	.word	0x20000271
 8000290:	20000370 	.word	0x20000370
 8000294:	20000270 	.word	0x20000270

08000298 <checkGroupStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void checkGroupStateEnter( void *stateData, struct event *event )
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
    // RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
    // rfTimerEnable();
}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	b002      	add	sp, #8
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <checkGroupStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void checkGroupStateExit( void *stateData, struct event *event )
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
    // rfTimerDisable();
    rfEntryRx();
 80002b6:	f000 f89d 	bl	80003f4 <rfEntryRx>
    bufferSize = 0;
 80002ba:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <checkGroupStateExit+0x1c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b002      	add	sp, #8
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000370 	.word	0x20000370

080002cc <errorStateHandler>:
 * 
 * @param stateData 
 * @param event 
 */
void errorStateHandler(void *stateData, struct event *event )
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
   puts( "ENTERED ERROR STATE!" );
 80002d6:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <errorStateHandler+0x1c>)
 80002d8:	0018      	movs	r0, r3
 80002da:	f005 fea5 	bl	8006028 <puts>
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	08006688 	.word	0x08006688

080002ec <rfRecvStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b0c4      	sub	sp, #272	; 0x110
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
    rfExitRx();
 80002f8:	f000 f88e 	bl	8000418 <rfExitRx>
    uint8_t user_rxBuffer[RF_PACKET_SIZE] = { 0 };
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <rfRecvStateAction+0x5c>)
 80002fe:	2488      	movs	r4, #136	; 0x88
 8000300:	0064      	lsls	r4, r4, #1
 8000302:	191b      	adds	r3, r3, r4
 8000304:	19db      	adds	r3, r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	3304      	adds	r3, #4
 800030c:	22fc      	movs	r2, #252	; 0xfc
 800030e:	2100      	movs	r1, #0
 8000310:	0018      	movs	r0, r3
 8000312:	f005 ff85 	bl	8006220 <memset>
    memcpy(user_rxBuffer, g_rxBuffer, g_rxBuffer[0]);
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <rfRecvStateAction+0x60>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	001a      	movs	r2, r3
 800031c:	490b      	ldr	r1, [pc, #44]	; (800034c <rfRecvStateAction+0x60>)
 800031e:	2510      	movs	r5, #16
 8000320:	197b      	adds	r3, r7, r5
 8000322:	0018      	movs	r0, r3
 8000324:	f006 f811 	bl	800634a <memcpy>
    uartSendData(BSP_TTL_CHANNEL1, user_rxBuffer, user_rxBuffer[0]);
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <rfRecvStateAction+0x5c>)
 800032a:	191b      	adds	r3, r3, r4
 800032c:	19db      	adds	r3, r3, r7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	197b      	adds	r3, r7, r5
 8000334:	0019      	movs	r1, r3
 8000336:	2000      	movs	r0, #0
 8000338:	f001 fc3e 	bl	8001bb8 <uartSendData>
    
    rfEntryRx();
 800033c:	f000 f85a 	bl	80003f4 <rfEntryRx>
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b044      	add	sp, #272	; 0x110
 8000346:	bdb0      	pop	{r4, r5, r7, pc}
 8000348:	ffffff00 	.word	0xffffff00
 800034c:	20000170 	.word	0x20000170

08000350 <rfRecvEnableRecv>:
 * @param event 
 * @param newStateData 
 */
void rfRecvEnableRecv( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 800035c:	2301      	movs	r3, #1
 800035e:	425a      	negs	r2, r3
 8000360:	2380      	movs	r3, #128	; 0x80
 8000362:	0059      	lsls	r1, r3, #1
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <rfRecvEnableRecv+0x24>)
 8000366:	0018      	movs	r0, r3
 8000368:	f001 f8d2 	bl	8001510 <RF_StartRx>
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b004      	add	sp, #16
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000170 	.word	0x20000170

08000378 <rfRecvStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateEnter( void *stateData, struct event *event )
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 8000382:	2301      	movs	r3, #1
 8000384:	425a      	negs	r2, r3
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	0059      	lsls	r1, r3, #1
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <rfRecvStateEnter+0x24>)
 800038c:	0018      	movs	r0, r3
 800038e:	f001 f8bf 	bl	8001510 <RF_StartRx>
    // rfTimerEnable();
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b002      	add	sp, #8
 8000398:	bd80      	pop	{r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	20000170 	.word	0x20000170

080003a0 <rfRecvStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateExit( void *stateData, struct event *event )
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
    rfExitRx();
 80003aa:	f000 f835 	bl	8000418 <rfExitRx>
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <rfSendStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b084      	sub	sp, #16
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	60f8      	str	r0, [r7, #12]
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
    
}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b004      	add	sp, #16
 80003c8:	bd80      	pop	{r7, pc}

080003ca <rfSendStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateEnter( void *stateData, struct event *event )
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b082      	sub	sp, #8
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
	
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b002      	add	sp, #8
 80003da:	bd80      	pop	{r7, pc}

080003dc <rfSendStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateExit( void *stateData, struct event *event )
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
//    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
//    rfTimerEnable();
   rfEntryRx();
 80003e6:	f000 f805 	bl	80003f4 <rfEntryRx>
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <rfEntryRx>:
/**
 * @brief rf entry rx status
 * 
 */
void rfEntryRx(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80003f8:	2301      	movs	r3, #1
 80003fa:	425a      	negs	r2, r3
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	0059      	lsls	r1, r3, #1
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <rfEntryRx+0x20>)
 8000402:	0018      	movs	r0, r3
 8000404:	f001 f884 	bl	8001510 <RF_StartRx>
    rfTimerEnable();
 8000408:	f001 fae6 	bl	80019d8 <rfTimerEnable>
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	20000170 	.word	0x20000170

08000418 <rfExitRx>:
/**
 * @brief rf exit rx status
 * 
 */
void rfExitRx(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
    rfTimerDisable();
 800041c:	f001 fae8 	bl	80019f0 <rfTimerDisable>
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <rfEntryTx>:
/**
 * @brief rf entry tx status
 * 
 */
void rfEntryTx(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    RF_StartTx(txBuffer, txBuffer[0] , INFINITE);
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <rfEntryTx+0x20>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	b299      	uxth	r1, r3
 8000432:	2301      	movs	r3, #1
 8000434:	425a      	negs	r2, r3
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <rfEntryTx+0x20>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 f893 	bl	8001564 <RF_StartTx>
    rfTimerEnable();
 800043e:	f001 facb 	bl	80019d8 <rfTimerEnable>
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000270 	.word	0x20000270

0800044c <stateActuator>:
 * 
 * @param None
 * @retval None
 */
void stateActuator(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
   struct msg *msg;
   stateM_init(&m, &rfRecvState, &errorState);
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <stateActuator+0x40>)
 8000454:	490e      	ldr	r1, [pc, #56]	; (8000490 <stateActuator+0x44>)
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <stateActuator+0x48>)
 8000458:	0018      	movs	r0, r3
 800045a:	f005 faf7 	bl	8005a4c <stateM_init>
   mq_init(&mq);
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <stateActuator+0x4c>)
 8000460:	0018      	movs	r0, r3
 8000462:	f005 fa4a 	bl	80058fa <mq_init>

   //  /* triggle state machine */
   //  mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
   
   /* rf default state: rx state */
   rfEntryRx();
 8000466:	f7ff ffc5 	bl	80003f4 <rfEntryRx>

   while ( 1 )
   {
      if ((msg = mq_pop( &mq )) != NULL)
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <stateActuator+0x4c>)
 800046c:	0018      	movs	r0, r3
 800046e:	f005 fabd 	bl	80059ec <mq_pop>
 8000472:	0003      	movs	r3, r0
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f6      	beq.n	800046a <stateActuator+0x1e>
      {
         stateM_handleEvent(&m, (struct event *)msg);
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <stateActuator+0x48>)
 8000480:	0011      	movs	r1, r2
 8000482:	0018      	movs	r0, r3
 8000484:	f005 faf9 	bl	8005a7a <stateM_handleEvent>
      if ((msg = mq_pop( &mq )) != NULL)
 8000488:	e7ef      	b.n	800046a <stateActuator+0x1e>
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	200000b8 	.word	0x200000b8
 8000490:	2000006c 	.word	0x2000006c
 8000494:	20000374 	.word	0x20000374
 8000498:	20000380 	.word	0x20000380

0800049c <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 80004a0:	21ff      	movs	r1, #255	; 0xff
 80004a2:	207f      	movs	r0, #127	; 0x7f
 80004a4:	f000 fce8 	bl	8000e78 <Cmt2300_WriteReg>
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 80004b2:	2061      	movs	r0, #97	; 0x61
 80004b4:	f000 fcc9 	bl	8000e4a <Cmt2300_ReadReg>
 80004b8:	0003      	movs	r3, r0
 80004ba:	001a      	movs	r2, r3
 80004bc:	230f      	movs	r3, #15
 80004be:	4013      	ands	r3, r2
 80004c0:	b2db      	uxtb	r3, r3
}
 80004c2:	0018      	movs	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 80004c8:	b5b0      	push	{r4, r5, r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	0002      	movs	r2, r0
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 80004d4:	230f      	movs	r3, #15
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e013      	b.n	8000506 <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 80004de:	250e      	movs	r5, #14
 80004e0:	197c      	adds	r4, r7, r5
 80004e2:	f7ff ffe4 	bl	80004ae <Cmt2300_GetChipStatus>
 80004e6:	0003      	movs	r3, r0
 80004e8:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 80004ea:	1dfa      	adds	r2, r7, #7
 80004ec:	197b      	adds	r3, r7, r5
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d101      	bne.n	80004fa <Cmt2300_WaitChipStatus+0x32>
            return true;
 80004f6:	2301      	movs	r3, #1
 80004f8:	e00b      	b.n	8000512 <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 80004fa:	210f      	movs	r1, #15
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	187b      	adds	r3, r7, r1
 8000502:	3201      	adds	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	230f      	movs	r3, #15
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b31      	cmp	r3, #49	; 0x31
 800050e:	d9e6      	bls.n	80004de <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 8000510:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b004      	add	sp, #16
 8000518:	bdb0      	pop	{r4, r5, r7, pc}

0800051a <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	0002      	movs	r2, r0
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 8000526:	2045      	movs	r0, #69	; 0x45
 8000528:	f000 fc8f 	bl	8000e4a <Cmt2300_ReadReg>
 800052c:	0003      	movs	r3, r0
 800052e:	0019      	movs	r1, r3
 8000530:	200f      	movs	r0, #15
 8000532:	183b      	adds	r3, r7, r0
 8000534:	2201      	movs	r2, #1
 8000536:	4391      	bics	r1, r2
 8000538:	000a      	movs	r2, r1
 800053a:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 800053c:	183a      	adds	r2, r7, r0
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4313      	orrs	r3, r2
 8000546:	b2db      	uxtb	r3, r3
 8000548:	0019      	movs	r1, r3
 800054a:	2045      	movs	r0, #69	; 0x45
 800054c:	f000 fc94 	bl	8000e78 <Cmt2300_WriteReg>
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b004      	add	sp, #16
 8000556:	bd80      	pop	{r7, pc}

08000558 <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 800055c:	2110      	movs	r1, #16
 800055e:	2060      	movs	r0, #96	; 0x60
 8000560:	f000 fc8a 	bl	8000e78 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff ffaf 	bl	80004c8 <Cmt2300_WaitChipStatus>
 800056a:	0003      	movs	r3, r0
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 8000576:	2102      	movs	r1, #2
 8000578:	2060      	movs	r0, #96	; 0x60
 800057a:	f000 fc7d 	bl	8000e78 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 800057e:	2002      	movs	r0, #2
 8000580:	f7ff ffa2 	bl	80004c8 <Cmt2300_WaitChipStatus>
 8000584:	0003      	movs	r3, r0
}
 8000586:	0018      	movs	r0, r3
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Cmt2300_GoTx>:
* @name    Cmt2300_GoTx
* @desc    Entry Tx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoTx(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_TX);
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	2060      	movs	r0, #96	; 0x60
 8000594:	f000 fc70 	bl	8000e78 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_TX);
 8000598:	2006      	movs	r0, #6
 800059a:	f7ff ff95 	bl	80004c8 <Cmt2300_WaitChipStatus>
 800059e:	0003      	movs	r3, r0
}
 80005a0:	0018      	movs	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <Cmt2300_GoRx>:
* @name    Cmt2300_GoRx
* @desc    Entry Rx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoRx(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_RX);
 80005aa:	2108      	movs	r1, #8
 80005ac:	2060      	movs	r0, #96	; 0x60
 80005ae:	f000 fc63 	bl	8000e78 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_RX);
 80005b2:	2005      	movs	r0, #5
 80005b4:	f7ff ff88 	bl	80004c8 <Cmt2300_WaitChipStatus>
 80005b8:	0003      	movs	r3, r0
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	0002      	movs	r2, r0
 80005c8:	1dfb      	adds	r3, r7, #7
 80005ca:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	0019      	movs	r1, r3
 80005d2:	2065      	movs	r0, #101	; 0x65
 80005d4:	f000 fc50 	bl	8000e78 <Cmt2300_WriteReg>
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	0002      	movs	r2, r0
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	1dbb      	adds	r3, r7, #6
 80005ee:	1c0a      	adds	r2, r1, #0
 80005f0:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	1dfa      	adds	r2, r7, #7
 80005f6:	7812      	ldrb	r2, [r2, #0]
 80005f8:	211f      	movs	r1, #31
 80005fa:	400a      	ands	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 80005fe:	2066      	movs	r0, #102	; 0x66
 8000600:	f000 fc23 	bl	8000e4a <Cmt2300_ReadReg>
 8000604:	0003      	movs	r3, r0
 8000606:	001a      	movs	r2, r3
 8000608:	231f      	movs	r3, #31
 800060a:	439a      	bics	r2, r3
 800060c:	0013      	movs	r3, r2
 800060e:	b25a      	sxtb	r2, r3
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b25b      	sxtb	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b25a      	sxtb	r2, r3
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	0019      	movs	r1, r3
 8000624:	2066      	movs	r0, #102	; 0x66
 8000626:	f000 fc27 	bl	8000e78 <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 800062a:	1dbb      	adds	r3, r7, #6
 800062c:	1dba      	adds	r2, r7, #6
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	211f      	movs	r1, #31
 8000632:	400a      	ands	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 8000636:	2067      	movs	r0, #103	; 0x67
 8000638:	f000 fc07 	bl	8000e4a <Cmt2300_ReadReg>
 800063c:	0003      	movs	r3, r0
 800063e:	001a      	movs	r2, r3
 8000640:	231f      	movs	r3, #31
 8000642:	439a      	bics	r2, r3
 8000644:	0013      	movs	r3, r2
 8000646:	b25a      	sxtb	r2, r3
 8000648:	1dbb      	adds	r3, r7, #6
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b25a      	sxtb	r2, r3
 8000652:	1dbb      	adds	r3, r7, #6
 8000654:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	0019      	movs	r1, r3
 800065c:	2067      	movs	r0, #103	; 0x67
 800065e:	f000 fc0b 	bl	8000e78 <Cmt2300_WriteReg>
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}

0800066a <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 800066a:	b5b0      	push	{r4, r5, r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	0002      	movs	r2, r0
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000676:	250f      	movs	r5, #15
 8000678:	197c      	adds	r4, r7, r5
 800067a:	2066      	movs	r0, #102	; 0x66
 800067c:	f000 fbe5 	bl	8000e4a <Cmt2300_ReadReg>
 8000680:	0003      	movs	r3, r0
 8000682:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10d      	bne.n	80006a8 <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 800068c:	197b      	adds	r3, r7, r5
 800068e:	197a      	adds	r2, r7, r5
 8000690:	7812      	ldrb	r2, [r2, #0]
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	4249      	negs	r1, r1
 8000696:	430a      	orrs	r2, r1
 8000698:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 800069a:	197b      	adds	r3, r7, r5
 800069c:	197a      	adds	r2, r7, r5
 800069e:	7812      	ldrb	r2, [r2, #0]
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	438a      	bics	r2, r1
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	e010      	b.n	80006ca <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d10c      	bne.n	80006ca <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 80006b0:	200f      	movs	r0, #15
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	183a      	adds	r2, r7, r0
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	217f      	movs	r1, #127	; 0x7f
 80006ba:	400a      	ands	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 80006be:	183b      	adds	r3, r7, r0
 80006c0:	183a      	adds	r2, r7, r0
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	430a      	orrs	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 80006ca:	230f      	movs	r3, #15
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	0019      	movs	r1, r3
 80006d2:	2066      	movs	r0, #102	; 0x66
 80006d4:	f000 fbd0 	bl	8000e78 <Cmt2300_WriteReg>
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b004      	add	sp, #16
 80006de:	bdb0      	pop	{r4, r5, r7, pc}

080006e0 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	0019      	movs	r1, r3
 80006f2:	2068      	movs	r0, #104	; 0x68
 80006f4:	f000 fbc0 	bl	8000e78 <Cmt2300_WriteReg>
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b002      	add	sp, #8
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	0002      	movs	r2, r0
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 800070c:	250f      	movs	r5, #15
 800070e:	197c      	adds	r4, r7, r5
 8000710:	2069      	movs	r0, #105	; 0x69
 8000712:	f000 fb9a 	bl	8000e4a <Cmt2300_ReadReg>
 8000716:	0003      	movs	r3, r0
 8000718:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 8000722:	197b      	adds	r3, r7, r5
 8000724:	197a      	adds	r2, r7, r5
 8000726:	7812      	ldrb	r2, [r2, #0]
 8000728:	2102      	movs	r1, #2
 800072a:	430a      	orrs	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e006      	b.n	800073e <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 8000730:	220f      	movs	r2, #15
 8000732:	18bb      	adds	r3, r7, r2
 8000734:	18ba      	adds	r2, r7, r2
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	2102      	movs	r1, #2
 800073a:	438a      	bics	r2, r1
 800073c:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 800073e:	230f      	movs	r3, #15
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	0019      	movs	r1, r3
 8000746:	2069      	movs	r0, #105	; 0x69
 8000748:	f000 fb96 	bl	8000e78 <Cmt2300_WriteReg>
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b004      	add	sp, #16
 8000752:	bdb0      	pop	{r4, r5, r7, pc}

08000754 <Cmt2300_EnableReadFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableReadFifo
* @desc    Enable SPI to read the FIFO.
* *********************************************************/
void Cmt2300_EnableReadFifo(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 800075a:	1dfc      	adds	r4, r7, #7
 800075c:	2069      	movs	r0, #105	; 0x69
 800075e:	f000 fb74 	bl	8000e4a <Cmt2300_ReadReg>
 8000762:	0003      	movs	r3, r0
 8000764:	7023      	strb	r3, [r4, #0]
    tmp &= ~CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	1dfa      	adds	r2, r7, #7
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	2101      	movs	r1, #1
 800076e:	438a      	bics	r2, r1
 8000770:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_FIFO_RX_TX_SEL;
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	1dfa      	adds	r2, r7, #7
 8000776:	7812      	ldrb	r2, [r2, #0]
 8000778:	2104      	movs	r1, #4
 800077a:	438a      	bics	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	0019      	movs	r1, r3
 8000784:	2069      	movs	r0, #105	; 0x69
 8000786:	f000 fb77 	bl	8000e78 <Cmt2300_WriteReg>
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b003      	add	sp, #12
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <Cmt2300_EnableWriteFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableWriteFifo
* @desc    Enable SPI to write the FIFO.
* *********************************************************/
void Cmt2300_EnableWriteFifo(void)
{
 8000792:	b590      	push	{r4, r7, lr}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 8000798:	1dfc      	adds	r4, r7, #7
 800079a:	2069      	movs	r0, #105	; 0x69
 800079c:	f000 fb55 	bl	8000e4a <Cmt2300_ReadReg>
 80007a0:	0003      	movs	r3, r0
 80007a2:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	1dfa      	adds	r2, r7, #7
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	2101      	movs	r1, #1
 80007ac:	430a      	orrs	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
    tmp |= CMT2300_MASK_FIFO_RX_TX_SEL;
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	1dfa      	adds	r2, r7, #7
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	2104      	movs	r1, #4
 80007b8:	430a      	orrs	r2, r1
 80007ba:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	0019      	movs	r1, r3
 80007c2:	2069      	movs	r0, #105	; 0x69
 80007c4:	f000 fb58 	bl	8000e78 <Cmt2300_WriteReg>
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b003      	add	sp, #12
 80007ce:	bd90      	pop	{r4, r7, pc}

080007d0 <Cmt2300_ClearFifo>:
*            CMT2300_MASK_TX_FIFO_FULL_FLG |
*            CMT2300_MASK_TX_FIFO_NMTY_FLG |
*            CMT2300_MASK_TX_FIFO_TH_FLG
* *********************************************************/
uint8_t Cmt2300_ClearFifo(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CLR);
 80007d6:	1dfc      	adds	r4, r7, #7
 80007d8:	206c      	movs	r0, #108	; 0x6c
 80007da:	f000 fb36 	bl	8000e4a <Cmt2300_ReadReg>
 80007de:	0003      	movs	r3, r0
 80007e0:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CLR, CMT2300_MASK_FIFO_CLR_RX | CMT2300_MASK_FIFO_CLR_TX);
 80007e2:	2103      	movs	r1, #3
 80007e4:	206c      	movs	r0, #108	; 0x6c
 80007e6:	f000 fb47 	bl	8000e78 <Cmt2300_WriteReg>
    return tmp;
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
}
 80007ee:	0018      	movs	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b003      	add	sp, #12
 80007f4:	bd90      	pop	{r4, r7, pc}

080007f6 <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 80007f6:	b590      	push	{r4, r7, lr}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 80007fc:	1d7b      	adds	r3, r7, #5
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 8000808:	1cfb      	adds	r3, r7, #3
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 800080e:	1cbc      	adds	r4, r7, #2
 8000810:	2066      	movs	r0, #102	; 0x66
 8000812:	f000 fb1a 	bl	8000e4a <Cmt2300_ReadReg>
 8000816:	0003      	movs	r3, r0
 8000818:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 800081a:	1cbb      	adds	r3, r7, #2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	115b      	asrs	r3, r3, #5
 8000820:	b2da      	uxtb	r2, r3
 8000822:	1cbb      	adds	r3, r7, #2
 8000824:	2101      	movs	r1, #1
 8000826:	400a      	ands	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 800082a:	1dfc      	adds	r4, r7, #7
 800082c:	206d      	movs	r0, #109	; 0x6d
 800082e:	f000 fb0c 	bl	8000e4a <Cmt2300_ReadReg>
 8000832:	0003      	movs	r3, r0
 8000834:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 8000836:	1dbc      	adds	r4, r7, #6
 8000838:	206a      	movs	r0, #106	; 0x6a
 800083a:	f000 fb06 	bl	8000e4a <Cmt2300_ReadReg>
 800083e:	0003      	movs	r3, r0
 8000840:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 8000842:	1cbb      	adds	r3, r7, #2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d009      	beq.n	800085e <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	1dfa      	adds	r2, r7, #7
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	43d2      	mvns	r2, r2
 8000852:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 8000854:	1dbb      	adds	r3, r7, #6
 8000856:	1dba      	adds	r2, r7, #6
 8000858:	7812      	ldrb	r2, [r2, #0]
 800085a:	43d2      	mvns	r2, r2
 800085c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	da05      	bge.n	8000874 <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	1d3a      	adds	r2, r7, #4
 800086c:	7812      	ldrb	r2, [r2, #0]
 800086e:	2120      	movs	r1, #32
 8000870:	430a      	orrs	r2, r1
 8000872:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	4013      	ands	r3, r2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d005      	beq.n	800088e <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	1d3a      	adds	r2, r7, #4
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2220      	movs	r2, #32
 8000894:	4013      	ands	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	2101      	movs	r1, #1
 80008a4:	430a      	orrs	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2210      	movs	r2, #16
 80008ae:	4013      	ands	r3, r2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00b      	beq.n	80008ce <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	1d3a      	adds	r2, r7, #4
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	2110      	movs	r1, #16
 80008be:	430a      	orrs	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 80008c2:	1cfb      	adds	r3, r7, #3
 80008c4:	1cfa      	adds	r2, r7, #3
 80008c6:	7812      	ldrb	r2, [r2, #0]
 80008c8:	2110      	movs	r1, #16
 80008ca:	430a      	orrs	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2208      	movs	r2, #8
 80008d4:	4013      	ands	r3, r2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00b      	beq.n	80008f4 <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	1d3a      	adds	r2, r7, #4
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	2108      	movs	r1, #8
 80008e4:	430a      	orrs	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 80008e8:	1cfb      	adds	r3, r7, #3
 80008ea:	1cfa      	adds	r2, r7, #3
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	2108      	movs	r1, #8
 80008f0:	430a      	orrs	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2204      	movs	r2, #4
 80008fa:	4013      	ands	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00b      	beq.n	800091a <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	1d3a      	adds	r2, r7, #4
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	2104      	movs	r1, #4
 800090a:	430a      	orrs	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 800090e:	1cfb      	adds	r3, r7, #3
 8000910:	1cfa      	adds	r2, r7, #3
 8000912:	7812      	ldrb	r2, [r2, #0]
 8000914:	2104      	movs	r1, #4
 8000916:	430a      	orrs	r2, r1
 8000918:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2202      	movs	r2, #2
 8000920:	4013      	ands	r3, r2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00b      	beq.n	8000940 <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	1d3a      	adds	r2, r7, #4
 800092c:	7812      	ldrb	r2, [r2, #0]
 800092e:	2102      	movs	r1, #2
 8000930:	430a      	orrs	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 8000934:	1cfb      	adds	r3, r7, #3
 8000936:	1cfa      	adds	r2, r7, #3
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	2102      	movs	r1, #2
 800093c:	430a      	orrs	r2, r1
 800093e:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	4013      	ands	r3, r2
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00b      	beq.n	8000966 <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	1d3a      	adds	r2, r7, #4
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	2101      	movs	r1, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 800095a:	1cfb      	adds	r3, r7, #3
 800095c:	1cfa      	adds	r2, r7, #3
 800095e:	7812      	ldrb	r2, [r2, #0]
 8000960:	2101      	movs	r1, #1
 8000962:	430a      	orrs	r2, r1
 8000964:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 8000966:	1dbb      	adds	r3, r7, #6
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2220      	movs	r2, #32
 800096c:	4013      	ands	r3, r2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00c      	beq.n	800098e <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 8000974:	1d7b      	adds	r3, r7, #5
 8000976:	1d7a      	adds	r2, r7, #5
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	2102      	movs	r1, #2
 800097c:	430a      	orrs	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 8000980:	1cfb      	adds	r3, r7, #3
 8000982:	1cfa      	adds	r2, r7, #3
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	4249      	negs	r1, r1
 800098a:	430a      	orrs	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 800098e:	1dbb      	adds	r3, r7, #6
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2210      	movs	r2, #16
 8000994:	4013      	ands	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00b      	beq.n	80009b4 <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 800099c:	1d7b      	adds	r3, r7, #5
 800099e:	1d7a      	adds	r2, r7, #5
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	2101      	movs	r1, #1
 80009a4:	430a      	orrs	r2, r1
 80009a6:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 80009a8:	1cfb      	adds	r3, r7, #3
 80009aa:	1cfa      	adds	r2, r7, #3
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	430a      	orrs	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2208      	movs	r2, #8
 80009ba:	4013      	ands	r3, r2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00b      	beq.n	80009da <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 80009c2:	1d7b      	adds	r3, r7, #5
 80009c4:	1d7a      	adds	r2, r7, #5
 80009c6:	7812      	ldrb	r2, [r2, #0]
 80009c8:	2104      	movs	r1, #4
 80009ca:	430a      	orrs	r2, r1
 80009cc:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 80009ce:	1cfb      	adds	r3, r7, #3
 80009d0:	1cfa      	adds	r2, r7, #3
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	2120      	movs	r1, #32
 80009d6:	430a      	orrs	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 80009da:	1d7b      	adds	r3, r7, #5
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0019      	movs	r1, r3
 80009e0:	206a      	movs	r0, #106	; 0x6a
 80009e2:	f000 fa49 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0019      	movs	r1, r3
 80009ec:	206b      	movs	r0, #107	; 0x6b
 80009ee:	f000 fa43 	bl	8000e78 <Cmt2300_WriteReg>

    if (nIntPolar)
 80009f2:	1cbb      	adds	r3, r7, #2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d004      	beq.n	8000a04 <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 80009fa:	1cfb      	adds	r3, r7, #3
 80009fc:	1cfa      	adds	r2, r7, #3
 80009fe:	7812      	ldrb	r2, [r2, #0]
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 8000a04:	1cfb      	adds	r3, r7, #3
 8000a06:	781b      	ldrb	r3, [r3, #0]
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}

08000a10 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f000 fa14 	bl	8000e4a <Cmt2300_ReadReg>
 8000a22:	0003      	movs	r3, r0
 8000a24:	0019      	movs	r1, r3
 8000a26:	240f      	movs	r4, #15
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	400a      	ands	r2, r1
 8000a2e:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	0013      	movs	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	4a4d      	ldr	r2, [pc, #308]	; (8000b74 <Cmt2300_ConfigDataRate+0x164>)
 8000a3e:	189b      	adds	r3, r3, r2
 8000a40:	2218      	movs	r2, #24
 8000a42:	0019      	movs	r1, r3
 8000a44:	2020      	movs	r0, #32
 8000a46:	f000 f9c8 	bl	8000dda <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	494a      	ldr	r1, [pc, #296]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000a50:	0013      	movs	r3, r2
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	189b      	adds	r3, r3, r2
 8000a56:	5c5b      	ldrb	r3, [r3, r1]
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	4393      	bics	r3, r2
 8000a5e:	b25a      	sxtb	r2, r3
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	2004      	movs	r0, #4
 8000a70:	f000 fa02 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	493f      	ldr	r1, [pc, #252]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	18cb      	adds	r3, r1, r3
 8000a82:	3301      	adds	r3, #1
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	0019      	movs	r1, r3
 8000a88:	2055      	movs	r0, #85	; 0x55
 8000a8a:	f000 f9f5 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	4939      	ldr	r1, [pc, #228]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000a94:	0013      	movs	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	18cb      	adds	r3, r1, r3
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	2056      	movs	r0, #86	; 0x56
 8000aa4:	f000 f9e8 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4932      	ldr	r1, [pc, #200]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000aae:	0013      	movs	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	18cb      	adds	r3, r1, r3
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0019      	movs	r1, r3
 8000abc:	2057      	movs	r0, #87	; 0x57
 8000abe:	f000 f9db 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000ac8:	0013      	movs	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	189b      	adds	r3, r3, r2
 8000ace:	18cb      	adds	r3, r1, r3
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	2058      	movs	r0, #88	; 0x58
 8000ad8:	f000 f9ce 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	4925      	ldr	r1, [pc, #148]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	18cb      	adds	r3, r1, r3
 8000aea:	3305      	adds	r3, #5
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	2059      	movs	r0, #89	; 0x59
 8000af2:	f000 f9c1 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	491f      	ldr	r1, [pc, #124]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000afc:	0013      	movs	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	18cb      	adds	r3, r1, r3
 8000b04:	3306      	adds	r3, #6
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	0019      	movs	r1, r3
 8000b0a:	205a      	movs	r0, #90	; 0x5a
 8000b0c:	f000 f9b4 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4918      	ldr	r1, [pc, #96]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000b16:	0013      	movs	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	18cb      	adds	r3, r1, r3
 8000b1e:	3307      	adds	r3, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0019      	movs	r1, r3
 8000b24:	205b      	movs	r0, #91	; 0x5b
 8000b26:	f000 f9a7 	bl	8000e78 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 8000b2a:	205e      	movs	r0, #94	; 0x5e
 8000b2c:	f000 f98d 	bl	8000e4a <Cmt2300_ReadReg>
 8000b30:	0003      	movs	r3, r0
 8000b32:	0019      	movs	r1, r3
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	223f      	movs	r2, #63	; 0x3f
 8000b38:	400a      	ands	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	490d      	ldr	r1, [pc, #52]	; (8000b78 <Cmt2300_ConfigDataRate+0x168>)
 8000b42:	0013      	movs	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	189b      	adds	r3, r3, r2
 8000b48:	18cb      	adds	r3, r1, r3
 8000b4a:	3308      	adds	r3, #8
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	223f      	movs	r2, #63	; 0x3f
 8000b52:	4393      	bics	r3, r2
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	0019      	movs	r1, r3
 8000b64:	205e      	movs	r0, #94	; 0x5e
 8000b66:	f000 f987 	bl	8000e78 <Cmt2300_WriteReg>
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b005      	add	sp, #20
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	080066c4 	.word	0x080066c4
 8000b78:	08006784 	.word	0x08006784

08000b7c <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	0002      	movs	r2, r0
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 8000b88:	2038      	movs	r0, #56	; 0x38
 8000b8a:	f000 f95e 	bl	8000e4a <Cmt2300_ReadReg>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	0019      	movs	r1, r3
 8000b92:	200f      	movs	r0, #15
 8000b94:	183b      	adds	r3, r7, r0
 8000b96:	2203      	movs	r2, #3
 8000b98:	4391      	bics	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 8000b9e:	183a      	adds	r2, r7, r0
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	0019      	movs	r1, r3
 8000bac:	2038      	movs	r0, #56	; 0x38
 8000bae:	f000 f963 	bl	8000e78 <Cmt2300_WriteReg>
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f93e 	bl	8000e4a <Cmt2300_ReadReg>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4391      	bics	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b07      	cmp	r3, #7
 8000be4:	d902      	bls.n	8000bec <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	2207      	movs	r2, #7
 8000bea:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <Cmt2300_ConfigTxPower+0xcc>)
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	240f      	movs	r4, #15
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	2003      	movs	r0, #3
 8000c10:	f000 f932 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <Cmt2300_ConfigTxPower+0xcc>)
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	3301      	adds	r3, #1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0019      	movs	r1, r3
 8000c24:	205c      	movs	r0, #92	; 0x5c
 8000c26:	f000 f927 	bl	8000e78 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <Cmt2300_ConfigTxPower+0xcc>)
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	3302      	adds	r3, #2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	0019      	movs	r1, r3
 8000c3a:	205d      	movs	r0, #93	; 0x5d
 8000c3c:	f000 f91c 	bl	8000e78 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 8000c40:	205e      	movs	r0, #94	; 0x5e
 8000c42:	f000 f902 	bl	8000e4a <Cmt2300_ReadReg>
 8000c46:	0003      	movs	r3, r0
 8000c48:	0019      	movs	r1, r3
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	223f      	movs	r2, #63	; 0x3f
 8000c4e:	4391      	bics	r1, r2
 8000c50:	000a      	movs	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <Cmt2300_ConfigTxPower+0xcc>)
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	3303      	adds	r3, #3
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	223f      	movs	r2, #63	; 0x3f
 8000c66:	4013      	ands	r3, r2
 8000c68:	b25a      	sxtb	r2, r3
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	0019      	movs	r1, r3
 8000c78:	205e      	movs	r0, #94	; 0x5e
 8000c7a:	f000 f8fd 	bl	8000e78 <Cmt2300_WriteReg>
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b005      	add	sp, #20
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	080067cc 	.word	0x080067cc

08000c8c <Cmt2300_SetPayloadLength>:
* @name    Cmt2300_SetPayloadLength
* @desc    Set payload length.
* @param   nLength
* *********************************************************/
void Cmt2300_SetPayloadLength(uint16_t nLength)
{
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	0002      	movs	r2, r0
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	801a      	strh	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14);
 8000c98:	250f      	movs	r5, #15
 8000c9a:	197c      	adds	r4, r7, r5
 8000c9c:	2045      	movs	r0, #69	; 0x45
 8000c9e:	f000 f8d4 	bl	8000e4a <Cmt2300_ReadReg>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	7023      	strb	r3, [r4, #0]

    tmp &= ~CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	183b      	adds	r3, r7, r0
 8000caa:	183a      	adds	r2, r7, r0
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	2170      	movs	r1, #112	; 0x70
 8000cb0:	438a      	bics	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
    tmp |= (nLength >> 4) & CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	2270      	movs	r2, #112	; 0x70
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	b25a      	sxtb	r2, r3
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	183b      	adds	r3, r7, r0
 8000cd0:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp);
 8000cd2:	0004      	movs	r4, r0
 8000cd4:	183b      	adds	r3, r7, r0
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	0019      	movs	r1, r3
 8000cda:	2045      	movs	r0, #69	; 0x45
 8000cdc:	f000 f8cc 	bl	8000e78 <Cmt2300_WriteReg>

    tmp = nLength & CMT2300_MASK_PAYLOAD_LENG_7_0;
 8000ce0:	0020      	movs	r0, r4
 8000ce2:	183b      	adds	r3, r7, r0
 8000ce4:	1dba      	adds	r2, r7, #6
 8000ce6:	8812      	ldrh	r2, [r2, #0]
 8000ce8:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT15, tmp);
 8000cea:	183b      	adds	r3, r7, r0
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0019      	movs	r1, r3
 8000cf0:	2046      	movs	r0, #70	; 0x46
 8000cf2:	f000 f8c1 	bl	8000e78 <Cmt2300_WriteReg>
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}

08000cfe <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000cfe:	b5b0      	push	{r4, r5, r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	0002      	movs	r2, r0
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000d0a:	250f      	movs	r5, #15
 8000d0c:	197c      	adds	r4, r7, r5
 8000d0e:	200d      	movs	r0, #13
 8000d10:	f000 f89b 	bl	8000e4a <Cmt2300_ReadReg>
 8000d14:	0003      	movs	r3, r0
 8000d16:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d013      	beq.n	8000d48 <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 8000d20:	197b      	adds	r3, r7, r5
 8000d22:	197a      	adds	r2, r7, r5
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	4249      	negs	r1, r1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 8000d2e:	197b      	adds	r3, r7, r5
 8000d30:	197a      	adds	r2, r7, r5
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	430a      	orrs	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 8000d3a:	197b      	adds	r3, r7, r5
 8000d3c:	197a      	adds	r2, r7, r5
 8000d3e:	7812      	ldrb	r2, [r2, #0]
 8000d40:	2120      	movs	r1, #32
 8000d42:	430a      	orrs	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e012      	b.n	8000d6e <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 8000d48:	200f      	movs	r0, #15
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	183a      	adds	r2, r7, r0
 8000d4e:	7812      	ldrb	r2, [r2, #0]
 8000d50:	217f      	movs	r1, #127	; 0x7f
 8000d52:	400a      	ands	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	183a      	adds	r2, r7, r0
 8000d5a:	7812      	ldrb	r2, [r2, #0]
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	438a      	bics	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 8000d62:	183b      	adds	r3, r7, r0
 8000d64:	183a      	adds	r2, r7, r0
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	2120      	movs	r1, #32
 8000d6a:	438a      	bics	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 8000d6e:	230f      	movs	r3, #15
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	0019      	movs	r1, r3
 8000d76:	200d      	movs	r0, #13
 8000d78:	f000 f87e 	bl	8000e78 <Cmt2300_WriteReg>
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b004      	add	sp, #16
 8000d82:	bdb0      	pop	{r4, r5, r7, pc}

08000d84 <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000d8a:	f7ff fb87 	bl	800049c <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f000 fd80 	bl	8001894 <Delay_Ms>
   
    Cmt2300_GoStby();
 8000d94:	f7ff fbed 	bl	8000572 <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000d98:	1dfc      	adds	r4, r7, #7
 8000d9a:	2061      	movs	r0, #97	; 0x61
 8000d9c:	f000 f855 	bl	8000e4a <Cmt2300_ReadReg>
 8000da0:	0003      	movs	r3, r0
 8000da2:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	1dfa      	adds	r2, r7, #7
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	2110      	movs	r1, #16
 8000dac:	430a      	orrs	r2, r1
 8000dae:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	1dfa      	adds	r2, r7, #7
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	2120      	movs	r1, #32
 8000db8:	438a      	bics	r2, r1
 8000dba:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	2061      	movs	r0, #97	; 0x61
 8000dc4:	f000 f858 	bl	8000e78 <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff ff98 	bl	8000cfe <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000dce:	f7ff fd12 	bl	80007f6 <Cmt2300_ClearInterruptFlags>
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b003      	add	sp, #12
 8000dd8:	bd90      	pop	{r4, r7, pc}

08000dda <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000dda:	b590      	push	{r4, r7, lr}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	0011      	movs	r1, r2
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	1c02      	adds	r2, r0, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	1dbb      	adds	r3, r7, #6
 8000dec:	1c0a      	adds	r2, r1, #0
 8000dee:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e014      	b.n	8000e24 <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	187a      	adds	r2, r7, r1
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	18d3      	adds	r3, r2, r3
 8000e06:	b2d8      	uxtb	r0, r3
 8000e08:	000c      	movs	r4, r1
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	18d3      	adds	r3, r2, r3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	0019      	movs	r1, r3
 8000e16:	f000 f82f 	bl	8000e78 <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	3201      	adds	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fa      	adds	r2, r7, r3
 8000e28:	1dbb      	adds	r3, r7, #6
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3e3      	bcc.n	8000dfa <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b005      	add	sp, #20
 8000e3a:	bd90      	pop	{r4, r7, pc}

08000e3c <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000e40:	f000 f876 	bl	8000f30 <cmt_spi3_init>
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000e4a:	b590      	push	{r4, r7, lr}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	0002      	movs	r2, r0
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000e56:	240f      	movs	r4, #15
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	22ff      	movs	r2, #255	; 0xff
 8000e5c:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000e5e:	193a      	adds	r2, r7, r4
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 f974 	bl	8001154 <cmt_spi3_read>

    return dat;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	781b      	ldrb	r3, [r3, #0]
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b005      	add	sp, #20
 8000e76:	bd90      	pop	{r4, r7, pc}

08000e78 <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	0002      	movs	r2, r0
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	1c0a      	adds	r2, r1, #0
 8000e88:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000e8a:	1dbb      	adds	r3, r7, #6
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 f8e9 	bl	800106c <cmt_spi3_write>
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <Cmt2300_ReadFifo>:
* @desc    Reads the contents of the CMT2300 FIFO.
* @param   buf: buffer where to copy the FIFO read data
*          len: number of bytes to be read from the FIFO
* *********************************************************/
void Cmt2300_ReadFifo(uint8_t buf[], uint16_t len)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	000a      	movs	r2, r1
 8000eac:	1cbb      	adds	r3, r7, #2
 8000eae:	801a      	strh	r2, [r3, #0]
    cmt_spi3_read_fifo(buf, len);
 8000eb0:	1cbb      	adds	r3, r7, #2
 8000eb2:	881a      	ldrh	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 fa4b 	bl	8001354 <cmt_spi3_read_fifo>
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <Cmt2300_WriteFifo>:
* @desc    Writes the buffer contents to the CMT2300 FIFO.
* @param   buf: buffer containing data to be put on the FIFO
*          len: number of bytes to be written to the FIFO
* *********************************************************/
void Cmt2300_WriteFifo(const uint8_t buf[], uint16_t len)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	000a      	movs	r2, r1
 8000ed0:	1cbb      	adds	r3, r7, #2
 8000ed2:	801a      	strh	r2, [r3, #0]
    cmt_spi3_write_fifo(buf, len);
 8000ed4:	1cbb      	adds	r3, r7, #2
 8000ed6:	881a      	ldrh	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 f9af 	bl	8001240 <cmt_spi3_write_fifo>
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	607b      	str	r3, [r7, #4]
    while (n--)
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1fa      	bne.n	8000ef6 <cmt_spi3_delay+0xc>
        ;
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <cmt_spi3_delay_us>:

void cmt_spi3_delay_us(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
    uint16_t n = 8;
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	2208      	movs	r2, #8
 8000f14:	801a      	strh	r2, [r3, #0]
    while (n--)
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	1dbb      	adds	r3, r7, #6
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	1dba      	adds	r2, r7, #6
 8000f1e:	1e59      	subs	r1, r3, #1
 8000f20:	8011      	strh	r1, [r2, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f8      	bne.n	8000f18 <cmt_spi3_delay_us+0xe>
        ;
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <cmt_spi3_init>:

void cmt_spi3_init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000f34:	f000 fcd2 	bl	80018dc <spi_gpio_init>
    cmt_spi3_sda_in();
 8000f38:	f000 fd08 	bl	800194c <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000f3c:	f7ff ffd5 	bl	8000eea <cmt_spi3_delay>
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000f52:	230f      	movs	r3, #15
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e034      	b.n	8000fc6 <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	0119      	lsls	r1, r3, #4
 8000f60:	2390      	movs	r3, #144	; 0x90
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	2200      	movs	r2, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 f935 	bl	80031d6 <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	da08      	bge.n	8000f88 <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	0059      	lsls	r1, r3, #1
 8000f7a:	2390      	movs	r3, #144	; 0x90
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	2201      	movs	r2, #1
 8000f80:	0018      	movs	r0, r3
 8000f82:	f002 f928 	bl	80031d6 <HAL_GPIO_WritePin>
 8000f86:	e007      	b.n	8000f98 <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	0059      	lsls	r1, r3, #1
 8000f8c:	2390      	movs	r3, #144	; 0x90
 8000f8e:	05db      	lsls	r3, r3, #23
 8000f90:	2200      	movs	r2, #0
 8000f92:	0018      	movs	r0, r3
 8000f94:	f002 f91f 	bl	80031d6 <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8000f98:	f7ff ffa7 	bl	8000eea <cmt_spi3_delay>

        data8 <<= 1;
 8000f9c:	1dfa      	adds	r2, r7, #7
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	18db      	adds	r3, r3, r3
 8000fa4:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	0119      	lsls	r1, r3, #4
 8000faa:	2390      	movs	r3, #144	; 0x90
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	2201      	movs	r2, #1
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f002 f910 	bl	80031d6 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000fb6:	f7ff ff98 	bl	8000eea <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000fba:	210f      	movs	r1, #15
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	3201      	adds	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b07      	cmp	r3, #7
 8000fce:	d9c5      	bls.n	8000f5c <cmt_spi3_send+0x16>
    }
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e034      	b.n	8001058 <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	0119      	lsls	r1, r3, #4
 8000ff2:	2390      	movs	r3, #144	; 0x90
 8000ff4:	05db      	lsls	r3, r3, #23
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f002 f8ec 	bl	80031d6 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000ffe:	f7ff ff74 	bl	8000eea <cmt_spi3_delay>
        data8 <<= 1;
 8001002:	1dba      	adds	r2, r7, #6
 8001004:	1dbb      	adds	r3, r7, #6
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	18db      	adds	r3, r3, r3
 800100a:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	0119      	lsls	r1, r3, #4
 8001010:	2390      	movs	r3, #144	; 0x90
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	2201      	movs	r2, #1
 8001016:	0018      	movs	r0, r3
 8001018:	f002 f8dd 	bl	80031d6 <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	005a      	lsls	r2, r3, #1
 8001020:	2390      	movs	r3, #144	; 0x90
 8001022:	05db      	lsls	r3, r3, #23
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f002 f8b8 	bl	800319c <HAL_GPIO_ReadPin>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d006      	beq.n	800103e <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	1dba      	adds	r2, r7, #6
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	2101      	movs	r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e005      	b.n	800104a <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	1dba      	adds	r2, r7, #6
 8001042:	7812      	ldrb	r2, [r2, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	438a      	bics	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 800104a:	f7ff ff4e 	bl	8000eea <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	3201      	adds	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b07      	cmp	r3, #7
 800105e:	d9c6      	bls.n	8000fee <cmt_spi3_recv+0x14>
    }

    return data8;
 8001060:	1dbb      	adds	r3, r7, #6
 8001062:	781b      	ldrb	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	0002      	movs	r2, r0
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	1dbb      	adds	r3, r7, #6
 800107a:	1c0a      	adds	r2, r1, #0
 800107c:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 800107e:	f000 fc33 	bl	80018e8 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	0059      	lsls	r1, r3, #1
 8001086:	2390      	movs	r3, #144	; 0x90
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	2201      	movs	r2, #1
 800108c:	0018      	movs	r0, r3
 800108e:	f002 f8a2 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	0119      	lsls	r1, r3, #4
 8001096:	2390      	movs	r3, #144	; 0x90
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	2200      	movs	r2, #0
 800109c:	0018      	movs	r0, r3
 800109e:	f002 f89a 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	0119      	lsls	r1, r3, #4
 80010a6:	2390      	movs	r3, #144	; 0x90
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	2200      	movs	r2, #0
 80010ac:	0018      	movs	r0, r3
 80010ae:	f002 f892 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	01db      	lsls	r3, r3, #7
 80010b6:	4826      	ldr	r0, [pc, #152]	; (8001150 <cmt_spi3_write+0xe4>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	0019      	movs	r1, r3
 80010bc:	f002 f88b 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	01db      	lsls	r3, r3, #7
 80010c4:	4822      	ldr	r0, [pc, #136]	; (8001150 <cmt_spi3_write+0xe4>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	0019      	movs	r1, r3
 80010ca:	f002 f884 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	481f      	ldr	r0, [pc, #124]	; (8001150 <cmt_spi3_write+0xe4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	0019      	movs	r1, r3
 80010d8:	f002 f87d 	bl	80031d6 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 80010dc:	f7ff ff05 	bl	8000eea <cmt_spi3_delay>
    cmt_spi3_delay();
 80010e0:	f7ff ff03 	bl	8000eea <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	227f      	movs	r2, #127	; 0x7f
 80010ea:	4013      	ands	r3, r2
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff ff29 	bl	8000f46 <cmt_spi3_send>

    cmt_spi3_send(dat);
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ff24 	bl	8000f46 <cmt_spi3_send>

    cmt_spi3_scl_0();
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	0119      	lsls	r1, r3, #4
 8001102:	2390      	movs	r3, #144	; 0x90
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2200      	movs	r2, #0
 8001108:	0018      	movs	r0, r3
 800110a:	f002 f864 	bl	80031d6 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 800110e:	f7ff feec 	bl	8000eea <cmt_spi3_delay>
    cmt_spi3_delay();
 8001112:	f7ff feea 	bl	8000eea <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <cmt_spi3_write+0xe4>)
 800111c:	2201      	movs	r2, #1
 800111e:	0019      	movs	r1, r3
 8001120:	f002 f859 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	0059      	lsls	r1, r3, #1
 8001128:	2390      	movs	r3, #144	; 0x90
 800112a:	05db      	lsls	r3, r3, #23
 800112c:	2201      	movs	r2, #1
 800112e:	0018      	movs	r0, r3
 8001130:	f002 f851 	bl	80031d6 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8001134:	f000 fc0a 	bl	800194c <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	01db      	lsls	r3, r3, #7
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <cmt_spi3_write+0xe4>)
 800113e:	2201      	movs	r2, #1
 8001140:	0019      	movs	r1, r3
 8001142:	f002 f848 	bl	80031d6 <HAL_GPIO_WritePin>
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	48000400 	.word	0x48000400

08001154 <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8001162:	f000 fbc1 	bl	80018e8 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	0059      	lsls	r1, r3, #1
 800116a:	2390      	movs	r3, #144	; 0x90
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	2201      	movs	r2, #1
 8001170:	0018      	movs	r0, r3
 8001172:	f002 f830 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	0119      	lsls	r1, r3, #4
 800117a:	2390      	movs	r3, #144	; 0x90
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2200      	movs	r2, #0
 8001180:	0018      	movs	r0, r3
 8001182:	f002 f828 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	0119      	lsls	r1, r3, #4
 800118a:	2390      	movs	r3, #144	; 0x90
 800118c:	05db      	lsls	r3, r3, #23
 800118e:	2200      	movs	r2, #0
 8001190:	0018      	movs	r0, r3
 8001192:	f002 f820 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	01db      	lsls	r3, r3, #7
 800119a:	4828      	ldr	r0, [pc, #160]	; (800123c <cmt_spi3_read+0xe8>)
 800119c:	2201      	movs	r2, #1
 800119e:	0019      	movs	r1, r3
 80011a0:	f002 f819 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	4824      	ldr	r0, [pc, #144]	; (800123c <cmt_spi3_read+0xe8>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	0019      	movs	r1, r3
 80011ae:	f002 f812 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	4821      	ldr	r0, [pc, #132]	; (800123c <cmt_spi3_read+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	0019      	movs	r1, r3
 80011bc:	f002 f80b 	bl	80031d6 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 80011c0:	f7ff fe93 	bl	8000eea <cmt_spi3_delay>
    cmt_spi3_delay();
 80011c4:	f7ff fe91 	bl	8000eea <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	4252      	negs	r2, r2
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff feb6 	bl	8000f46 <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 80011da:	f000 fbb7 	bl	800194c <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 80011de:	f7ff fefc 	bl	8000fda <cmt_spi3_recv>
 80011e2:	0003      	movs	r3, r0
 80011e4:	001a      	movs	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	0119      	lsls	r1, r3, #4
 80011ee:	2390      	movs	r3, #144	; 0x90
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	2200      	movs	r2, #0
 80011f4:	0018      	movs	r0, r3
 80011f6:	f001 ffee 	bl	80031d6 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 80011fa:	f7ff fe76 	bl	8000eea <cmt_spi3_delay>
    cmt_spi3_delay();
 80011fe:	f7ff fe74 	bl	8000eea <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <cmt_spi3_read+0xe8>)
 8001208:	2201      	movs	r2, #1
 800120a:	0019      	movs	r1, r3
 800120c:	f001 ffe3 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	0059      	lsls	r1, r3, #1
 8001214:	2390      	movs	r3, #144	; 0x90
 8001216:	05db      	lsls	r3, r3, #23
 8001218:	2201      	movs	r2, #1
 800121a:	0018      	movs	r0, r3
 800121c:	f001 ffdb 	bl	80031d6 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8001220:	f000 fb94 	bl	800194c <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	01db      	lsls	r3, r3, #7
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <cmt_spi3_read+0xe8>)
 800122a:	2201      	movs	r2, #1
 800122c:	0019      	movs	r1, r3
 800122e:	f001 ffd2 	bl	80031d6 <HAL_GPIO_WritePin>
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	48000400 	.word	0x48000400

08001240 <cmt_spi3_write_fifo>:

void cmt_spi3_write_fifo(const uint8_t *p_buf, uint16_t len)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	000a      	movs	r2, r1
 800124a:	1cbb      	adds	r3, r7, #2
 800124c:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	01db      	lsls	r3, r3, #7
 8001252:	483f      	ldr	r0, [pc, #252]	; (8001350 <cmt_spi3_write_fifo+0x110>)
 8001254:	2201      	movs	r2, #1
 8001256:	0019      	movs	r1, r3
 8001258:	f001 ffbd 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	01db      	lsls	r3, r3, #7
 8001260:	483b      	ldr	r0, [pc, #236]	; (8001350 <cmt_spi3_write_fifo+0x110>)
 8001262:	2201      	movs	r2, #1
 8001264:	0019      	movs	r1, r3
 8001266:	f001 ffb6 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4838      	ldr	r0, [pc, #224]	; (8001350 <cmt_spi3_write_fifo+0x110>)
 8001270:	2201      	movs	r2, #1
 8001272:	0019      	movs	r1, r3
 8001274:	f001 ffaf 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	4834      	ldr	r0, [pc, #208]	; (8001350 <cmt_spi3_write_fifo+0x110>)
 800127e:	2201      	movs	r2, #1
 8001280:	0019      	movs	r1, r3
 8001282:	f001 ffa8 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	0119      	lsls	r1, r3, #4
 800128a:	2390      	movs	r3, #144	; 0x90
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2200      	movs	r2, #0
 8001290:	0018      	movs	r0, r3
 8001292:	f001 ffa0 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	0119      	lsls	r1, r3, #4
 800129a:	2390      	movs	r3, #144	; 0x90
 800129c:	05db      	lsls	r3, r3, #23
 800129e:	2200      	movs	r2, #0
 80012a0:	0018      	movs	r0, r3
 80012a2:	f001 ff98 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_sda_out();
 80012a6:	f000 fb1f 	bl	80018e8 <cmt_spi3_sda_out>

    for (i = 0; i < len; i++)
 80012aa:	230e      	movs	r3, #14
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2200      	movs	r2, #0
 80012b0:	801a      	strh	r2, [r3, #0]
 80012b2:	e039      	b.n	8001328 <cmt_spi3_write_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	4825      	ldr	r0, [pc, #148]	; (8001350 <cmt_spi3_write_fifo+0x110>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	0019      	movs	r1, r3
 80012be:	f001 ff8a 	bl	80031d6 <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 80012c2:	f7ff fe12 	bl	8000eea <cmt_spi3_delay>
        cmt_spi3_delay();
 80012c6:	f7ff fe10 	bl	8000eea <cmt_spi3_delay>

        cmt_spi3_send(p_buf[i]);
 80012ca:	240e      	movs	r4, #14
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	18d3      	adds	r3, r2, r3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7ff fe35 	bl	8000f46 <cmt_spi3_send>

        cmt_spi3_scl_0();
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	0119      	lsls	r1, r3, #4
 80012e0:	2390      	movs	r3, #144	; 0x90
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	2200      	movs	r2, #0
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 ff75 	bl	80031d6 <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 80012ec:	f7ff fe0d 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80012f0:	f7ff fe0b 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80012f4:	f7ff fe09 	bl	8000f0a <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	01db      	lsls	r3, r3, #7
 80012fc:	4814      	ldr	r0, [pc, #80]	; (8001350 <cmt_spi3_write_fifo+0x110>)
 80012fe:	2201      	movs	r2, #1
 8001300:	0019      	movs	r1, r3
 8001302:	f001 ff68 	bl	80031d6 <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 8001306:	f7ff fe00 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800130a:	f7ff fdfe 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800130e:	f7ff fdfc 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001312:	f7ff fdfa 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001316:	f7ff fdf8 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800131a:	f7ff fdf6 	bl	8000f0a <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 800131e:	193b      	adds	r3, r7, r4
 8001320:	881a      	ldrh	r2, [r3, #0]
 8001322:	193b      	adds	r3, r7, r4
 8001324:	3201      	adds	r2, #1
 8001326:	801a      	strh	r2, [r3, #0]
 8001328:	230e      	movs	r3, #14
 800132a:	18fa      	adds	r2, r7, r3
 800132c:	1cbb      	adds	r3, r7, #2
 800132e:	8812      	ldrh	r2, [r2, #0]
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3be      	bcc.n	80012b4 <cmt_spi3_write_fifo+0x74>
    }

    cmt_spi3_sda_in();
 8001336:	f000 fb09 	bl	800194c <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	01db      	lsls	r3, r3, #7
 800133e:	4804      	ldr	r0, [pc, #16]	; (8001350 <cmt_spi3_write_fifo+0x110>)
 8001340:	2201      	movs	r2, #1
 8001342:	0019      	movs	r1, r3
 8001344:	f001 ff47 	bl	80031d6 <HAL_GPIO_WritePin>
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b005      	add	sp, #20
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	48000400 	.word	0x48000400

08001354 <cmt_spi3_read_fifo>:

void cmt_spi3_read_fifo(uint8_t *p_buf, uint16_t len)
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	000a      	movs	r2, r1
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	01db      	lsls	r3, r3, #7
 8001366:	483f      	ldr	r0, [pc, #252]	; (8001464 <cmt_spi3_read_fifo+0x110>)
 8001368:	2201      	movs	r2, #1
 800136a:	0019      	movs	r1, r3
 800136c:	f001 ff33 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	01db      	lsls	r3, r3, #7
 8001374:	483b      	ldr	r0, [pc, #236]	; (8001464 <cmt_spi3_read_fifo+0x110>)
 8001376:	2201      	movs	r2, #1
 8001378:	0019      	movs	r1, r3
 800137a:	f001 ff2c 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	4838      	ldr	r0, [pc, #224]	; (8001464 <cmt_spi3_read_fifo+0x110>)
 8001384:	2201      	movs	r2, #1
 8001386:	0019      	movs	r1, r3
 8001388:	f001 ff25 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	4834      	ldr	r0, [pc, #208]	; (8001464 <cmt_spi3_read_fifo+0x110>)
 8001392:	2201      	movs	r2, #1
 8001394:	0019      	movs	r1, r3
 8001396:	f001 ff1e 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	0119      	lsls	r1, r3, #4
 800139e:	2390      	movs	r3, #144	; 0x90
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	2200      	movs	r2, #0
 80013a4:	0018      	movs	r0, r3
 80013a6:	f001 ff16 	bl	80031d6 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	0119      	lsls	r1, r3, #4
 80013ae:	2390      	movs	r3, #144	; 0x90
 80013b0:	05db      	lsls	r3, r3, #23
 80013b2:	2200      	movs	r2, #0
 80013b4:	0018      	movs	r0, r3
 80013b6:	f001 ff0e 	bl	80031d6 <HAL_GPIO_WritePin>

    cmt_spi3_sda_in();
 80013ba:	f000 fac7 	bl	800194c <cmt_spi3_sda_in>

    for (i = 0; i < len; i++)
 80013be:	230e      	movs	r3, #14
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	2200      	movs	r2, #0
 80013c4:	801a      	strh	r2, [r3, #0]
 80013c6:	e039      	b.n	800143c <cmt_spi3_read_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	01db      	lsls	r3, r3, #7
 80013cc:	4825      	ldr	r0, [pc, #148]	; (8001464 <cmt_spi3_read_fifo+0x110>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	0019      	movs	r1, r3
 80013d2:	f001 ff00 	bl	80031d6 <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 80013d6:	f7ff fd88 	bl	8000eea <cmt_spi3_delay>
        cmt_spi3_delay();
 80013da:	f7ff fd86 	bl	8000eea <cmt_spi3_delay>

        p_buf[i] = cmt_spi3_recv();
 80013de:	250e      	movs	r5, #14
 80013e0:	197b      	adds	r3, r7, r5
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	18d4      	adds	r4, r2, r3
 80013e8:	f7ff fdf7 	bl	8000fda <cmt_spi3_recv>
 80013ec:	0003      	movs	r3, r0
 80013ee:	7023      	strb	r3, [r4, #0]

        cmt_spi3_scl_0();
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	0119      	lsls	r1, r3, #4
 80013f4:	2390      	movs	r3, #144	; 0x90
 80013f6:	05db      	lsls	r3, r3, #23
 80013f8:	2200      	movs	r2, #0
 80013fa:	0018      	movs	r0, r3
 80013fc:	f001 feeb 	bl	80031d6 <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 8001400:	f7ff fd83 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001404:	f7ff fd81 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001408:	f7ff fd7f 	bl	8000f0a <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	01db      	lsls	r3, r3, #7
 8001410:	4814      	ldr	r0, [pc, #80]	; (8001464 <cmt_spi3_read_fifo+0x110>)
 8001412:	2201      	movs	r2, #1
 8001414:	0019      	movs	r1, r3
 8001416:	f001 fede 	bl	80031d6 <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 800141a:	f7ff fd76 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800141e:	f7ff fd74 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001422:	f7ff fd72 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001426:	f7ff fd70 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800142a:	f7ff fd6e 	bl	8000f0a <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800142e:	f7ff fd6c 	bl	8000f0a <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 8001432:	197b      	adds	r3, r7, r5
 8001434:	881a      	ldrh	r2, [r3, #0]
 8001436:	197b      	adds	r3, r7, r5
 8001438:	3201      	adds	r2, #1
 800143a:	801a      	strh	r2, [r3, #0]
 800143c:	230e      	movs	r3, #14
 800143e:	18fa      	adds	r2, r7, r3
 8001440:	1cbb      	adds	r3, r7, #2
 8001442:	8812      	ldrh	r2, [r2, #0]
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d3be      	bcc.n	80013c8 <cmt_spi3_read_fifo+0x74>
    }

    cmt_spi3_sda_in();
 800144a:	f000 fa7f 	bl	800194c <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	4804      	ldr	r0, [pc, #16]	; (8001464 <cmt_spi3_read_fifo+0x110>)
 8001454:	2201      	movs	r2, #1
 8001456:	0019      	movs	r1, r3
 8001458:	f001 febd 	bl	80031d6 <HAL_GPIO_WritePin>
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b004      	add	sp, #16
 8001462:	bdb0      	pop	{r4, r5, r7, pc}
 8001464:	48000400 	.word	0x48000400

08001468 <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 800146c:	f7ff fce6 	bl	8000e3c <Cmt2300_InitGpio>
    Cmt2300_Init();
 8001470:	f7ff fc88 	bl	8000d84 <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <RF_Init+0x60>)
 8001476:	220c      	movs	r2, #12
 8001478:	0019      	movs	r1, r3
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fcad 	bl	8000dda <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <RF_Init+0x64>)
 8001482:	220c      	movs	r2, #12
 8001484:	0019      	movs	r1, r3
 8001486:	200c      	movs	r0, #12
 8001488:	f7ff fca7 	bl	8000dda <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <RF_Init+0x68>)
 800148e:	2208      	movs	r2, #8
 8001490:	0019      	movs	r1, r3
 8001492:	2018      	movs	r0, #24
 8001494:	f7ff fca1 	bl	8000dda <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <RF_Init+0x6c>)
 800149a:	2218      	movs	r2, #24
 800149c:	0019      	movs	r1, r3
 800149e:	2020      	movs	r0, #32
 80014a0:	f7ff fc9b 	bl	8000dda <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <RF_Init+0x70>)
 80014a6:	221d      	movs	r2, #29
 80014a8:	0019      	movs	r1, r3
 80014aa:	2038      	movs	r0, #56	; 0x38
 80014ac:	f7ff fc95 	bl	8000dda <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <RF_Init+0x74>)
 80014b2:	220b      	movs	r2, #11
 80014b4:	0019      	movs	r1, r3
 80014b6:	2055      	movs	r0, #85	; 0x55
 80014b8:	f7ff fc8f 	bl	8000dda <Cmt2300_ConfigRegBank>

    RF_Config();
 80014bc:	f000 f810 	bl	80014e0 <RF_Config>
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	080067ec 	.word	0x080067ec
 80014cc:	080067f8 	.word	0x080067f8
 80014d0:	08006804 	.word	0x08006804
 80014d4:	0800680c 	.word	0x0800680c
 80014d8:	08006824 	.word	0x08006824
 80014dc:	08006844 	.word	0x08006844

080014e0 <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff f8c0 	bl	800066a <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 80014ea:	2020      	movs	r0, #32
 80014ec:	f7ff f868 	bl	80005c0 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 80014f0:	2107      	movs	r1, #7
 80014f2:	200a      	movs	r0, #10
 80014f4:	f7ff f874 	bl	80005e0 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 80014f8:	203f      	movs	r0, #63	; 0x3f
 80014fa:	f7ff f8f1 	bl	80006e0 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fbfd 	bl	8000cfe <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 8001504:	f7ff f828 	bl	8000558 <Cmt2300_GoSleep>
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <RF_StartRx>:
{
    return g_nInterrutFlags;
}

void RF_StartRx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	200a      	movs	r0, #10
 800151c:	183b      	adds	r3, r7, r0
 800151e:	1c0a      	adds	r2, r1, #0
 8001520:	801a      	strh	r2, [r3, #0]
    g_pRxBuffer = buf;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <RF_StartRx+0x44>)
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	601a      	str	r2, [r3, #0]
    g_nRxLength = len;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <RF_StartRx+0x48>)
 800152a:	183a      	adds	r2, r7, r0
 800152c:	8812      	ldrh	r2, [r2, #0]
 800152e:	801a      	strh	r2, [r3, #0]
    g_nRxTimeout = timeout;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <RF_StartRx+0x4c>)
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]

    memset(g_pRxBuffer, 0, g_nRxLength);
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <RF_StartRx+0x44>)
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <RF_StartRx+0x48>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	001a      	movs	r2, r3
 8001540:	2100      	movs	r1, #0
 8001542:	f004 fe6d 	bl	8006220 <memset>

    g_nNextRFState = RF_STATE_RX_START;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <RF_StartRx+0x50>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000494 	.word	0x20000494
 8001558:	2000049c 	.word	0x2000049c
 800155c:	200000d4 	.word	0x200000d4
 8001560:	20000490 	.word	0x20000490

08001564 <RF_StartTx>:

void RF_StartTx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	200a      	movs	r0, #10
 8001570:	183b      	adds	r3, r7, r0
 8001572:	1c0a      	adds	r2, r1, #0
 8001574:	801a      	strh	r2, [r3, #0]
    g_pTxBuffer = buf;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <RF_StartTx+0x34>)
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	601a      	str	r2, [r3, #0]
    g_nTxLength = len;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <RF_StartTx+0x38>)
 800157e:	183a      	adds	r2, r7, r0
 8001580:	8812      	ldrh	r2, [r2, #0]
 8001582:	801a      	strh	r2, [r3, #0]
    g_nTxTimeout = timeout;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <RF_StartTx+0x3c>)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]

    g_nNextRFState = RF_STATE_TX_START;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <RF_StartTx+0x40>)
 800158c:	2205      	movs	r2, #5
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000498 	.word	0x20000498
 800159c:	2000049e 	.word	0x2000049e
 80015a0:	200000d8 	.word	0x200000d8
 80015a4:	20000490 	.word	0x20000490

080015a8 <RF_Process>:

EnumRFResult RF_Process(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
    EnumRFResult nRes = RF_BUSY;
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]

    switch (g_nNextRFState)
 80015b4:	4b8f      	ldr	r3, [pc, #572]	; (80017f4 <RF_Process+0x24c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	d900      	bls.n	80015be <RF_Process+0x16>
 80015bc:	e10e      	b.n	80017dc <RF_Process+0x234>
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	4b8d      	ldr	r3, [pc, #564]	; (80017f8 <RF_Process+0x250>)
 80015c2:	18d3      	adds	r3, r2, r3
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	469f      	mov	pc, r3
    {
    case RF_STATE_IDLE:
    {
        nRes = RF_IDLE;
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
        break;
 80015ce:	e10a      	b.n	80017e6 <RF_Process+0x23e>
    }

    case RF_STATE_RX_START:
    {
        Cmt2300_GoStby();
 80015d0:	f7fe ffcf 	bl	8000572 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 80015d4:	f7ff f90f 	bl	80007f6 <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableReadFifo();
 80015d8:	f7ff f8bc 	bl	8000754 <Cmt2300_EnableReadFifo>
        Cmt2300_ClearFifo();
 80015dc:	f7ff f8f8 	bl	80007d0 <Cmt2300_ClearFifo>

        if (false == Cmt2300_GoRx())
 80015e0:	f7fe ffe1 	bl	80005a6 <Cmt2300_GoRx>
 80015e4:	0003      	movs	r3, r0
 80015e6:	001a      	movs	r2, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	4053      	eors	r3, r2
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <RF_Process+0x52>
        {
            g_nNextRFState = RF_STATE_ERROR;
 80015f2:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <RF_Process+0x24c>)
 80015f4:	2209      	movs	r2, #9
 80015f6:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;

            g_nRxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 80015f8:	e0f5      	b.n	80017e6 <RF_Process+0x23e>
            cmt2300_irq_request=0;
 80015fa:	4b80      	ldr	r3, [pc, #512]	; (80017fc <RF_Process+0x254>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;
 8001600:	4b7c      	ldr	r3, [pc, #496]	; (80017f4 <RF_Process+0x24c>)
 8001602:	2202      	movs	r2, #2
 8001604:	701a      	strb	r2, [r3, #0]
            g_nRxTimeCount = Cmt2300_GetTickCount();
 8001606:	4b7e      	ldr	r3, [pc, #504]	; (8001800 <RF_Process+0x258>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b7e      	ldr	r3, [pc, #504]	; (8001804 <RF_Process+0x25c>)
 800160c:	601a      	str	r2, [r3, #0]
        break;
 800160e:	e0ea      	b.n	80017e6 <RF_Process+0x23e>
    case RF_STATE_RX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_PKT_OK_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG)) /* Read PKT_OK flag */
#else
        if (cmt2300_irq_request) /* Read INT2, PKT_OK */
 8001610:	4b7a      	ldr	r3, [pc, #488]	; (80017fc <RF_Process+0x254>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <RF_Process+0x7e>
#endif
        {
            cmt2300_irq_request=0;
 800161a:	4b78      	ldr	r3, [pc, #480]	; (80017fc <RF_Process+0x254>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_DONE;
 8001620:	4b74      	ldr	r3, [pc, #464]	; (80017f4 <RF_Process+0x24c>)
 8001622:	2203      	movs	r2, #3
 8001624:	701a      	strb	r2, [r3, #0]
        }

        if( (INFINITE != g_nRxTimeout) && ((g_nSysTickCount-g_nRxTimeCount) > g_nRxTimeout) )
 8001626:	4b78      	ldr	r3, [pc, #480]	; (8001808 <RF_Process+0x260>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	d100      	bne.n	8001630 <RF_Process+0x88>
 800162e:	e0d7      	b.n	80017e0 <RF_Process+0x238>
 8001630:	4b73      	ldr	r3, [pc, #460]	; (8001800 <RF_Process+0x258>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b73      	ldr	r3, [pc, #460]	; (8001804 <RF_Process+0x25c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	1ad2      	subs	r2, r2, r3
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <RF_Process+0x260>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d800      	bhi.n	8001644 <RF_Process+0x9c>
 8001642:	e0cd      	b.n	80017e0 <RF_Process+0x238>
            g_nNextRFState = RF_STATE_RX_TIMEOUT;
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <RF_Process+0x24c>)
 8001646:	2204      	movs	r2, #4
 8001648:	701a      	strb	r2, [r3, #0]
        
        break;
 800164a:	e0c9      	b.n	80017e0 <RF_Process+0x238>
    }

    case RF_STATE_RX_DONE:
    {
        Cmt2300_GoStby();
 800164c:	f7fe ff91 	bl	8000572 <Cmt2300_GoStby>

        Cmt2300_ReadFifo(g_pRxBuffer, 1);//读取数据长度
 8001650:	4b6e      	ldr	r3, [pc, #440]	; (800180c <RF_Process+0x264>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	0018      	movs	r0, r3
 8001658:	f7ff fc23 	bl	8000ea2 <Cmt2300_ReadFifo>
           
        PlayLoadlen=g_pRxBuffer[0];
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <RF_Process+0x264>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <RF_Process+0x268>)
 8001664:	701a      	strb	r2, [r3, #0]
        
        /* The length need be smaller than 32 */
        Cmt2300_ReadFifo(g_pRxBuffer, PlayLoadlen);
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <RF_Process+0x264>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b69      	ldr	r3, [pc, #420]	; (8001810 <RF_Process+0x268>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	0019      	movs	r1, r3
 8001672:	0010      	movs	r0, r2
 8001674:	f7ff fc15 	bl	8000ea2 <Cmt2300_ReadFifo>

        g_nInterrutFlags = Cmt2300_ClearInterruptFlags();
 8001678:	f7ff f8bd 	bl	80007f6 <Cmt2300_ClearInterruptFlags>
 800167c:	0003      	movs	r3, r0
 800167e:	001a      	movs	r2, r3
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <RF_Process+0x26c>)
 8001682:	701a      	strb	r2, [r3, #0]

        //        Cmt2300_GoSleep();
#ifdef USE_CUBEIDE
        rfRecvDoneCallback();
 8001684:	f000 fc7e 	bl	8001f84 <rfRecvDoneCallback>
        led2Toggle();
 8001688:	4b63      	ldr	r3, [pc, #396]	; (8001818 <RF_Process+0x270>)
 800168a:	2201      	movs	r2, #1
 800168c:	2120      	movs	r1, #32
 800168e:	0018      	movs	r0, r3
 8001690:	f001 fda1 	bl	80031d6 <HAL_GPIO_WritePin>
 8001694:	2032      	movs	r0, #50	; 0x32
 8001696:	f000 f8fd 	bl	8001894 <Delay_Ms>
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <RF_Process+0x270>)
 800169c:	2200      	movs	r2, #0
 800169e:	2120      	movs	r1, #32
 80016a0:	0018      	movs	r0, r3
 80016a2:	f001 fd98 	bl	80031d6 <HAL_GPIO_WritePin>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <RF_Process+0x24c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_DONE;
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	2202      	movs	r2, #2
 80016b0:	701a      	strb	r2, [r3, #0]
        break;
 80016b2:	e098      	b.n	80017e6 <RF_Process+0x23e>
    case RF_STATE_RX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();
        //
#ifdef USE_CUBEIDE
    	rfRecvTimeoutCallback();
 80016b4:	f000 fc92 	bl	8001fdc <rfRecvTimeoutCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 80016b8:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <RF_Process+0x24c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_TIMEOUT;
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	2203      	movs	r2, #3
 80016c2:	701a      	strb	r2, [r3, #0]

        break;
 80016c4:	e08f      	b.n	80017e6 <RF_Process+0x23e>
    }

    case RF_STATE_TX_START:
    {
        Cmt2300_GoStby();
 80016c6:	f7fe ff54 	bl	8000572 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 80016ca:	f7ff f894 	bl	80007f6 <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableWriteFifo();
 80016ce:	f7ff f860 	bl	8000792 <Cmt2300_EnableWriteFifo>
        Cmt2300_ClearFifo();
 80016d2:	f7ff f87d 	bl	80007d0 <Cmt2300_ClearFifo>

        Cmt2300_SetPayloadLength(g_nTxLength); //发射数据长度
 80016d6:	4b51      	ldr	r3, [pc, #324]	; (800181c <RF_Process+0x274>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff fad6 	bl	8000c8c <Cmt2300_SetPayloadLength>
      
        Cmt2300_WriteFifo(g_pTxBuffer, g_nTxLength);
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <RF_Process+0x278>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b4d      	ldr	r3, [pc, #308]	; (800181c <RF_Process+0x274>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	0019      	movs	r1, r3
 80016ea:	0010      	movs	r0, r2
 80016ec:	f7ff fbeb 	bl	8000ec6 <Cmt2300_WriteFifo>

        if (0 == (CMT2300_MASK_TX_FIFO_NMTY_FLG & Cmt2300_ReadReg(CMT2300_CUS_FIFO_FLAG)))
 80016f0:	206e      	movs	r0, #110	; 0x6e
 80016f2:	f7ff fbaa 	bl	8000e4a <Cmt2300_ReadReg>
 80016f6:	0003      	movs	r3, r0
 80016f8:	001a      	movs	r2, r3
 80016fa:	2302      	movs	r3, #2
 80016fc:	4013      	ands	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <RF_Process+0x162>
        {
            g_nNextRFState = RF_STATE_ERROR;
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <RF_Process+0x24c>)
 8001706:	2209      	movs	r2, #9
 8001708:	701a      	strb	r2, [r3, #0]
        }

        if (false == Cmt2300_GoTx())
 800170a:	f7fe ff3f 	bl	800058c <Cmt2300_GoTx>
 800170e:	0003      	movs	r3, r0
 8001710:	001a      	movs	r2, r3
 8001712:	2301      	movs	r3, #1
 8001714:	4053      	eors	r3, r2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <RF_Process+0x17c>
        {
            g_nNextRFState = RF_STATE_ERROR;
 800171c:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <RF_Process+0x24c>)
 800171e:	2209      	movs	r2, #9
 8001720:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;

            g_nTxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 8001722:	e060      	b.n	80017e6 <RF_Process+0x23e>
            cmt2300_irq_request=0;
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <RF_Process+0x254>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <RF_Process+0x24c>)
 800172c:	2206      	movs	r2, #6
 800172e:	701a      	strb	r2, [r3, #0]
            g_nTxTimeCount = Cmt2300_GetTickCount();
 8001730:	4b33      	ldr	r3, [pc, #204]	; (8001800 <RF_Process+0x258>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <RF_Process+0x27c>)
 8001736:	601a      	str	r2, [r3, #0]
        break;
 8001738:	e055      	b.n	80017e6 <RF_Process+0x23e>
    case RF_STATE_TX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
#else
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
 800173a:	206a      	movs	r0, #106	; 0x6a
 800173c:	f7ff fb85 	bl	8000e4a <Cmt2300_ReadReg>
 8001740:	0003      	movs	r3, r0
 8001742:	001a      	movs	r2, r3
 8001744:	2308      	movs	r3, #8
 8001746:	4013      	ands	r3, r2
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <RF_Process+0x1ac>
#endif
        {         
          g_nNextRFState = RF_STATE_TX_DONE;
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <RF_Process+0x24c>)
 8001750:	2207      	movs	r2, #7
 8001752:	701a      	strb	r2, [r3, #0]
        }
        
        if( (INFINITE != g_nTxTimeout) && ((g_nSysTickCount-g_nTxTimeCount) > g_nTxTimeout) )
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <RF_Process+0x280>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	d043      	beq.n	80017e4 <RF_Process+0x23c>
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <RF_Process+0x258>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <RF_Process+0x27c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad2      	subs	r2, r2, r3
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <RF_Process+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d93a      	bls.n	80017e4 <RF_Process+0x23c>
            g_nNextRFState = RF_STATE_TX_TIMEOUT;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <RF_Process+0x24c>)
 8001770:	2208      	movs	r2, #8
 8001772:	701a      	strb	r2, [r3, #0]

        break;
 8001774:	e036      	b.n	80017e4 <RF_Process+0x23c>
    }

    case RF_STATE_TX_DONE:
    {
        Cmt2300_ClearInterruptFlags();
 8001776:	f7ff f83e 	bl	80007f6 <Cmt2300_ClearInterruptFlags>
        //Cmt2300_GoSleep();
#ifdef USE_CUBEIDE
        rfSendDoneCallback();
 800177a:	f000 fc19 	bl	8001fb0 <rfSendDoneCallback>
        led1Toggle();
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <RF_Process+0x270>)
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	0018      	movs	r0, r3
 8001786:	f001 fd26 	bl	80031d6 <HAL_GPIO_WritePin>
 800178a:	2032      	movs	r0, #50	; 0x32
 800178c:	f000 f882 	bl	8001894 <Delay_Ms>
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <RF_Process+0x270>)
 8001792:	2200      	movs	r2, #0
 8001794:	2110      	movs	r1, #16
 8001796:	0018      	movs	r0, r3
 8001798:	f001 fd1d 	bl	80031d6 <HAL_GPIO_WritePin>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <RF_Process+0x24c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_DONE;
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	2204      	movs	r2, #4
 80017a6:	701a      	strb	r2, [r3, #0]
        break;
 80017a8:	e01d      	b.n	80017e6 <RF_Process+0x23e>
    }

    case RF_STATE_TX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();      
        g_nNextRFState = RF_STATE_IDLE;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <RF_Process+0x24c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_TIMEOUT;
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	2205      	movs	r2, #5
 80017b4:	701a      	strb	r2, [r3, #0]
        break;
 80017b6:	e016      	b.n	80017e6 <RF_Process+0x23e>
    }

    case RF_STATE_ERROR:
    {
        Cmt2300_SoftReset();
 80017b8:	f7fe fe70 	bl	800049c <Cmt2300_SoftReset>
        Delay_Ms(10);
 80017bc:	200a      	movs	r0, #10
 80017be:	f000 f869 	bl	8001894 <Delay_Ms>

        Cmt2300_GoStby();
 80017c2:	f7fe fed6 	bl	8000572 <Cmt2300_GoStby>
        RF_Config();
 80017c6:	f7ff fe8b 	bl	80014e0 <RF_Config>
#ifdef USE_CUBEIDE
        rfRecvErrorCallback();
 80017ca:	f000 fc1d 	bl	8002008 <rfRecvErrorCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <RF_Process+0x24c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
        nRes = RF_ERROR;
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	2206      	movs	r2, #6
 80017d8:	701a      	strb	r2, [r3, #0]
        break;
 80017da:	e004      	b.n	80017e6 <RF_Process+0x23e>
    }

    default:
        break;
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	e002      	b.n	80017e6 <RF_Process+0x23e>
        break;
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	e000      	b.n	80017e6 <RF_Process+0x23e>
        break;
 80017e4:	46c0      	nop			; (mov r8, r8)
    }

    return nRes;
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	20000490 	.word	0x20000490
 80017f8:	08006850 	.word	0x08006850
 80017fc:	200004aa 	.word	0x200004aa
 8001800:	200004ac 	.word	0x200004ac
 8001804:	200004a0 	.word	0x200004a0
 8001808:	200000d4 	.word	0x200000d4
 800180c:	20000494 	.word	0x20000494
 8001810:	200004a8 	.word	0x200004a8
 8001814:	200004a9 	.word	0x200004a9
 8001818:	48000400 	.word	0x48000400
 800181c:	2000049e 	.word	0x2000049e
 8001820:	20000498 	.word	0x20000498
 8001824:	200004a4 	.word	0x200004a4
 8001828:	200000d8 	.word	0x200000d8

0800182c <bspInit>:

/*----------------------------------------------------------------
 *  FUNCTION DEFINITION
 *--------------------------------------------------------------*/
void bspInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
    uartInit(BSP_TTL_CHANNEL1);
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f969 	bl	8001b08 <uartInit>
    
    RF_Init();
 8001836:	f7ff fe17 	bl	8001468 <RF_Init>
//    {
//        led2On();
//    }

    /* level7: 20dbm */
    Cmt2300_ConfigTxPower(7);
 800183a:	2007      	movs	r0, #7
 800183c:	f7ff f9be 	bl	8000bbc <Cmt2300_ConfigTxPower>
    /* rate:1.2kbps */
    Cmt2300_ConfigDataRate(rf_rate_1K2);
 8001840:	2001      	movs	r0, #1
 8001842:	f7ff f8e5 	bl	8000a10 <Cmt2300_ConfigDataRate>
    /* packet type */
    Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 8001846:	2001      	movs	r0, #1
 8001848:	f7fe fe67 	bl	800051a <Cmt2300_ConfigPktLenthType>
    /* packet mode */
    Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 800184c:	2002      	movs	r0, #2
 800184e:	f7ff f995 	bl	8000b7c <Cmt2300_ConfigDataMode>
    /* enable fifo */
    Cmt2300_EnableFifoMerge(true);
 8001852:	2001      	movs	r0, #1
 8001854:	f7fe ff54 	bl	8000700 <Cmt2300_EnableFifoMerge>

    /* disable rf time */
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 8001858:	2301      	movs	r3, #1
 800185a:	425a      	negs	r2, r3
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	0059      	lsls	r1, r3, #1
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <bspInit+0x60>)
 8001862:	0018      	movs	r0, r3
 8001864:	f7ff fe54 	bl	8001510 <RF_StartRx>
    rfTimerEnable();
 8001868:	f000 f8b6 	bl	80019d8 <rfTimerEnable>
    led2Off();
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <bspInit+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	2120      	movs	r1, #32
 8001872:	0018      	movs	r0, r3
 8001874:	f001 fcaf 	bl	80031d6 <HAL_GPIO_WritePin>
    led2Off();
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <bspInit+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	2120      	movs	r1, #32
 800187e:	0018      	movs	r0, r3
 8001880:	f001 fca9 	bl	80031d6 <HAL_GPIO_WritePin>
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	20000170 	.word	0x20000170
 8001890:	48000400 	.word	0x48000400

08001894 <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e00c      	b.n	80018c4 <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	e002      	b.n	80018b6 <Delay_Ms+0x22>
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3301      	adds	r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <Delay_Ms+0x44>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d9f8      	bls.n	80018b0 <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3301      	adds	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d3ee      	bcc.n	80018aa <Delay_Ms+0x16>
  }
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b004      	add	sp, #16
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	000011bb 	.word	0x000011bb

080018dc <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	0018      	movs	r0, r3
 80018f2:	2314      	movs	r3, #20
 80018f4:	001a      	movs	r2, r3
 80018f6:	2100      	movs	r1, #0
 80018f8:	f004 fc92 	bl	8006220 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <cmt_spi3_sda_out+0x60>)
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <cmt_spi3_sda_out+0x60>)
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	0289      	lsls	r1, r1, #10
 8001906:	430a      	orrs	r2, r1
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <cmt_spi3_sda_out+0x60>)
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	029b      	lsls	r3, r3, #10
 8001912:	4013      	ands	r3, r2
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	0052      	lsls	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2201      	movs	r2, #1
 8001924:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2203      	movs	r2, #3
 8001930:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001932:	1d3a      	adds	r2, r7, #4
 8001934:	2390      	movs	r3, #144	; 0x90
 8001936:	05db      	lsls	r3, r3, #23
 8001938:	0011      	movs	r1, r2
 800193a:	0018      	movs	r0, r3
 800193c:	f001 f9ee 	bl	8002d1c <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b006      	add	sp, #24
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000

0800194c <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	0018      	movs	r0, r3
 8001956:	2314      	movs	r3, #20
 8001958:	001a      	movs	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	f004 fc60 	bl	8006220 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <cmt_spi3_sda_in+0x5c>)
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <cmt_spi3_sda_in+0x5c>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0289      	lsls	r1, r1, #10
 800196a:	430a      	orrs	r2, r1
 800196c:	615a      	str	r2, [r3, #20]
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <cmt_spi3_sda_in+0x5c>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	029b      	lsls	r3, r3, #10
 8001976:	4013      	ands	r3, r2
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	0052      	lsls	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001990:	1d3a      	adds	r2, r7, #4
 8001992:	2390      	movs	r3, #144	; 0x90
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	0011      	movs	r1, r2
 8001998:	0018      	movs	r0, r3
 800199a:	f001 f9bf 	bl	8002d1c <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b006      	add	sp, #24
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_GPIO_EXTI_Callback>:
#endif
}

#ifdef USE_CUBEIDE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	0002      	movs	r2, r0
 80019b4:	1dbb      	adds	r3, r7, #6
 80019b6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 80019b8:	1dbb      	adds	r3, r7, #6
 80019ba:	881a      	ldrh	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	015b      	lsls	r3, r3, #5
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d102      	bne.n	80019ca <HAL_GPIO_EXTI_Callback+0x1e>
//        else if (ret == RF_STATE_TX_WAIT)
//        {
//            rfSendDoneCallback();
//        }
        
		cmt2300_irq_request = 1;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
	}
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	200004aa 	.word	0x200004aa

080019d8 <rfTimerEnable>:
/**
 * @brief rf timer enable
 * 
 */
void rfTimerEnable(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim16);
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <rfTimerEnable+0x14>)
 80019de:	0018      	movs	r0, r3
 80019e0:	f002 f9b0 	bl	8003d44 <HAL_TIM_Base_Start_IT>
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	200006d4 	.word	0x200006d4

080019f0 <rfTimerDisable>:
/**
 * @brief rf timer disable
 * 
 */
void rfTimerDisable(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim16);
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <rfTimerDisable+0x14>)
 80019f6:	0018      	movs	r0, r3
 80019f8:	f002 f9f0 	bl	8003ddc <HAL_TIM_Base_Stop_IT>
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	200006d4 	.word	0x200006d4

08001a08 <HAL_TIM_PeriodElapsedCallback>:
 * 
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim14.Instance)
    //	{
    //		time10ms_flag = 1;
    //		timer10InterruptHandler();
    //	}
    if(htim->Instance == htim16.Instance)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d101      	bne.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        HAL_Timer16Callback();
 8001a1c:	f000 fb0a 	bl	8002034 <HAL_Timer16Callback>
    }
    if (htim->Instance == htim17.Instance) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d103      	bne.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x2c>
        uartTimerIrqHandler(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fa00 	bl	8001e34 <uartTimerIrqHandler>
    }
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200006d4 	.word	0x200006d4
 8001a40:	2000071c 	.word	0x2000071c

08001a44 <HAL_SysTick_Handler>:
 * 
 * @param None
 * @retval None
 */
void HAL_SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_SysTick_Handler+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_SysTick_Handler+0x14>)
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200004ac 	.word	0x200004ac

08001a5c <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	609a      	str	r2, [r3, #8]
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <uartInitRxFifo>:
 * 
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0002      	movs	r2, r0
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	011a      	lsls	r2, r3, #4
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <uartInitRxFifo+0x34>)
 8001a90:	18d0      	adds	r0, r2, r3
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	025a      	lsls	r2, r3, #9
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <uartInitRxFifo+0x38>)
 8001a9a:	18d3      	adds	r3, r2, r3
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	f003 fe62 	bl	800576a <kfifo_init>
}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	200006b4 	.word	0x200006b4
 8001ab4:	200004b4 	.word	0x200004b4

08001ab8 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	1dbb      	adds	r3, r7, #6
 8001ac4:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8001ac6:	2517      	movs	r5, #23
 8001ac8:	197b      	adds	r3, r7, r5
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 8001ace:	197c      	adds	r4, r7, r5
 8001ad0:	1dbb      	adds	r3, r7, #6
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f002 fc9b 	bl	8004414 <HAL_UART_Receive_IT>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8001ae2:	197b      	adds	r3, r7, r5
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	2120      	movs	r1, #32
 8001af0:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2278      	movs	r2, #120	; 0x78
 8001af6:	2100      	movs	r1, #0
 8001af8:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8001afa:	2317      	movs	r3, #23
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	781b      	ldrb	r3, [r3, #0]
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b006      	add	sp, #24
 8001b06:	bdb0      	pop	{r4, r5, r7, pc}

08001b08 <uartInit>:
 * 
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	0002      	movs	r2, r0
 8001b10:	1dfb      	adds	r3, r7, #7
 8001b12:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff ffaf 	bl	8001a7c <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <uartInit+0x60>)
 8001b24:	0052      	lsls	r2, r2, #1
 8001b26:	2100      	movs	r1, #0
 8001b28:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <uartInit+0x64>)
 8001b30:	0052      	lsls	r2, r2, #1
 8001b32:	2100      	movs	r1, #0
 8001b34:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <uartInit+0x68>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <uartInit+0x6c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <uartInit+0x70>)
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	1dfb      	adds	r3, r7, #7
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <uartInit+0x74>)
 8001b56:	18d3      	adds	r3, r2, r3
 8001b58:	2201      	movs	r2, #1
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	f7ff ffac 	bl	8001ab8 <UART_Receive_IT>
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200006c4 	.word	0x200006c4
 8001b6c:	200006c8 	.word	0x200006c8
 8001b70:	200006cc 	.word	0x200006cc
 8001b74:	200006d0 	.word	0x200006d0
 8001b78:	200000dc 	.word	0x200000dc
 8001b7c:	200004b0 	.word	0x200004b0

08001b80 <uartRecovery>:
 * 
 * @param channel 
 * @retval None
 */
static void uartRecovery(uartChannel_t channel)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <uartRecovery+0x34>)
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	3304      	adds	r3, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f002 fb5c 	bl	8004258 <HAL_UART_DeInit>
    uartInit(channel);
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7ff ffaf 	bl	8001b08 <uartInit>
}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	200000dc 	.word	0x200000dc

08001bb8 <uartSendData>:
 * @param data
 * @param length
 * @retval None
 */
void uartSendData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6039      	str	r1, [r7, #0]
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	1c02      	adds	r2, r0, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	1c0a      	adds	r2, r1, #0
 8001bcc:	801a      	strh	r2, [r3, #0]
    uart_tx_status[channel] = BSP_UART_TX_START;
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <uartSendData+0x54>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	54d1      	strb	r1, [r2, r3]
	// if (HAL_UART_Transmit_DMA(uartPara[channel].uart_handle_addr, data, length) != HAL_OK)
	/* use IT mode send data */
	// if (HAL_UART_Transmit_IT( uartPara[channel].uart_handle_addr, data, length ) != HAL_OK)
	/* use poll mode send data */
	if (HAL_UART_Transmit(uartPara[channel].uart_handle_addr, data, length, 0xFFFF) != HAL_OK)
 8001bd8:	1dfb      	adds	r3, r7, #7
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <uartSendData+0x58>)
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	18d3      	adds	r3, r2, r3
 8001be2:	3304      	adds	r3, #4
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	4c0b      	ldr	r4, [pc, #44]	; (8001c14 <uartSendData+0x5c>)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	881a      	ldrh	r2, [r3, #0]
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	0023      	movs	r3, r4
 8001bf0:	f002 fb70 	bl	80042d4 <HAL_UART_Transmit>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d004      	beq.n	8001c02 <uartSendData+0x4a>
    {
        uartRecovery(channel);
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff ffbf 	bl	8001b80 <uartRecovery>
    }
}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b003      	add	sp, #12
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	200006cc 	.word	0x200006cc
 8001c10:	200000dc 	.word	0x200000dc
 8001c14:	0000ffff 	.word	0x0000ffff

08001c18 <HAL_UART_TxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001c20:	230f      	movs	r3, #15
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_UART_TxCpltCallback+0x54>)
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	58d2      	ldr	r2, [r2, r3]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d105      	bne.n	8001c4a <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_UART_TxCpltCallback+0x58>)
 8001c44:	2102      	movs	r1, #2
 8001c46:	54d1      	strb	r1, [r2, r3]
            break;
 8001c48:	e00b      	b.n	8001c62 <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	3201      	adds	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	230f      	movs	r3, #15
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0e4      	beq.n	8001c2a <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b004      	add	sp, #16
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	200000dc 	.word	0x200000dc
 8001c70:	200006cc 	.word	0x200006cc

08001c74 <uartGetData>:
 * @param data 
 * @param length 
 * @retval uint32_t 
 */
uint32_t uartGetData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6039      	str	r1, [r7, #0]
 8001c7c:	0011      	movs	r1, r2
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	1c02      	adds	r2, r0, #0
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	1c0a      	adds	r2, r1, #0
 8001c88:	801a      	strh	r2, [r3, #0]
    uint32_t ret = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]

    if (BSP_UART_RX_COMPLETED == uart_rx_status[channel]) 
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <uartGetData+0x54>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d10d      	bne.n	8001cb8 <uartGetData+0x44>
	{
		ret = kfifo_out(&uart_rx_fifo[channel], data, length);
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	011a      	lsls	r2, r3, #4
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <uartGetData+0x58>)
 8001ca4:	18d0      	adds	r0, r2, r3
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	0019      	movs	r1, r3
 8001cae:	f003 fdfd 	bl	80058ac <kfifo_out>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	e001      	b.n	8001cbc <uartGetData+0x48>
	}    
	else
	{
		ret = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
	}

    return ret;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b004      	add	sp, #16
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	200006d0 	.word	0x200006d0
 8001ccc:	200006b4 	.word	0x200006b4

08001cd0 <uartResetData>:
 * 
 * @param channel 
 * @retval None
 */
void uartResetData(uartChannel_t channel)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	701a      	strb	r2, [r3, #0]
    kfifo_reset(&uart_rx_fifo[channel]);
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	011a      	lsls	r2, r3, #4
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <uartResetData+0x3c>)
 8001ce4:	18d3      	adds	r3, r2, r3
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff feb8 	bl	8001a5c <kfifo_reset>
    uart_rx_size[channel] = 0;
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <uartResetData+0x40>)
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	52d1      	strh	r1, [r2, r3]
    uart_rx_status[channel] = BSP_UART_IDLE;
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <uartResetData+0x44>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	54d1      	strb	r1, [r2, r3]
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	200006b4 	.word	0x200006b4
 8001d10:	200006c8 	.word	0x200006c8
 8001d14:	200006d0 	.word	0x200006d0

08001d18 <HAL_UART_RxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001d20:	230f      	movs	r3, #15
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	e072      	b.n	8001e10 <HAL_UART_RxCpltCallback+0xf8>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8001d2a:	240f      	movs	r4, #15
 8001d2c:	193b      	adds	r3, r7, r4
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_UART_RxCpltCallback+0x108>)
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	58d2      	ldr	r2, [r2, r3]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d162      	bne.n	8001e04 <HAL_UART_RxCpltCallback+0xec>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 8001d3e:	193b      	adds	r3, r7, r4
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4a38      	ldr	r2, [pc, #224]	; (8001e24 <HAL_UART_RxCpltCallback+0x10c>)
 8001d44:	2103      	movs	r1, #3
 8001d46:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8001d48:	193b      	adds	r3, r7, r4
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4a34      	ldr	r2, [pc, #208]	; (8001e20 <HAL_UART_RxCpltCallback+0x108>)
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	18d3      	adds	r3, r2, r3
 8001d52:	3308      	adds	r3, #8
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8001d5a:	193b      	adds	r3, r7, r4
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <HAL_UART_RxCpltCallback+0x108>)
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	18d3      	adds	r3, r2, r3
 8001d64:	3308      	adds	r3, #8
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <HAL_UART_RxCpltCallback+0x108>)
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	18d3      	adds	r3, r2, r3
 8001d76:	330c      	adds	r3, #12
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f001 ffe2 	bl	8003d44 <HAL_TIM_Base_Start_IT>
            if (uart_rx_counter[i] >= (UART_BUFFER_SIZE-1))
 8001d80:	193b      	adds	r3, r7, r4
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_UART_RxCpltCallback+0x110>)
 8001d86:	0052      	lsls	r2, r2, #1
 8001d88:	5ad2      	ldrh	r2, [r2, r3]
 8001d8a:	23ff      	movs	r3, #255	; 0xff
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d90d      	bls.n	8001dae <HAL_UART_RxCpltCallback+0x96>
            {
            	kfifo_reset(&uart_rx_fifo[i]);
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	011a      	lsls	r2, r3, #4
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_UART_RxCpltCallback+0x114>)
 8001d9a:	18d3      	adds	r3, r2, r3
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7ff fe5d 	bl	8001a5c <kfifo_reset>
            	uart_rx_counter[i] = 0;
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_UART_RxCpltCallback+0x110>)
 8001da8:	0052      	lsls	r2, r2, #1
 8001daa:	2100      	movs	r1, #0
 8001dac:	52d1      	strh	r1, [r2, r3]
            }
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 8001dae:	210f      	movs	r1, #15
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	011a      	lsls	r2, r3, #4
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_UART_RxCpltCallback+0x114>)
 8001db8:	18d0      	adds	r0, r2, r3
 8001dba:	000c      	movs	r4, r1
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_UART_RxCpltCallback+0x118>)
 8001dc2:	18d3      	adds	r3, r2, r3
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	f003 fd49 	bl	800585e <kfifo_in>
            uart_rx_counter[i]++;
 8001dcc:	0020      	movs	r0, r4
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <HAL_UART_RxCpltCallback+0x110>)
 8001dd4:	0059      	lsls	r1, r3, #1
 8001dd6:	5a8a      	ldrh	r2, [r1, r2]
 8001dd8:	3201      	adds	r2, #1
 8001dda:	b291      	uxth	r1, r2
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <HAL_UART_RxCpltCallback+0x110>)
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 8001de2:	0001      	movs	r1, r0
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_UART_RxCpltCallback+0x108>)
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	18d3      	adds	r3, r2, r3
 8001dee:	3304      	adds	r3, #4
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_UART_RxCpltCallback+0x118>)
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	f7ff fe5b 	bl	8001ab8 <UART_Receive_IT>
            return;
 8001e02:	e00a      	b.n	8001e1a <HAL_UART_RxCpltCallback+0x102>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001e04:	210f      	movs	r1, #15
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	3201      	adds	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	230f      	movs	r3, #15
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d087      	beq.n	8001d2a <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b005      	add	sp, #20
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	200000dc 	.word	0x200000dc
 8001e24:	200006d0 	.word	0x200006d0
 8001e28:	200006c4 	.word	0x200006c4
 8001e2c:	200006b4 	.word	0x200006b4
 8001e30:	200004b0 	.word	0x200004b0

08001e34 <uartTimerIrqHandler>:
 * 
 * @param htim 
 * @retval None
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e060      	b.n	8001f08 <uartTimerIrqHandler+0xd4>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 8001e46:	210f      	movs	r1, #15
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4a33      	ldr	r2, [pc, #204]	; (8001f1c <uartTimerIrqHandler+0xe8>)
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	3308      	adds	r3, #8
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d14e      	bne.n	8001efc <uartTimerIrqHandler+0xc8>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 8001e5e:	000c      	movs	r4, r1
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <uartTimerIrqHandler+0xe8>)
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	18d3      	adds	r3, r2, r3
 8001e6a:	330c      	adds	r3, #12
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f001 ffb4 	bl	8003ddc <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8001e74:	0020      	movs	r0, r4
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <uartTimerIrqHandler+0xec>)
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8001e80:	183b      	adds	r3, r7, r0
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <uartTimerIrqHandler+0xf0>)
 8001e86:	0052      	lsls	r2, r2, #1
 8001e88:	5ad1      	ldrh	r1, [r2, r3]
 8001e8a:	183b      	adds	r3, r7, r0
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <uartTimerIrqHandler+0xf4>)
 8001e90:	0052      	lsls	r2, r2, #1
 8001e92:	5ad3      	ldrh	r3, [r2, r3]
 8001e94:	183a      	adds	r2, r7, r0
 8001e96:	7812      	ldrb	r2, [r2, #0]
 8001e98:	18cb      	adds	r3, r1, r3
 8001e9a:	b299      	uxth	r1, r3
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <uartTimerIrqHandler+0xf0>)
 8001e9e:	0052      	lsls	r2, r2, #1
 8001ea0:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 8001ea2:	183b      	adds	r3, r7, r0
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <uartTimerIrqHandler+0xf0>)
 8001ea8:	0052      	lsls	r2, r2, #1
 8001eaa:	5ad2      	ldrh	r2, [r2, r3]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d919      	bls.n	8001ee8 <uartTimerIrqHandler+0xb4>
            {
            	kfifo_reset(&uart_rx_fifo[i]);
 8001eb4:	0004      	movs	r4, r0
 8001eb6:	183b      	adds	r3, r7, r0
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	011a      	lsls	r2, r3, #4
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <uartTimerIrqHandler+0xf8>)
 8001ebe:	18d3      	adds	r3, r2, r3
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff fdcb 	bl	8001a5c <kfifo_reset>
            	uart_rx_size[i] = uart_rx_counter[i];
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	183b      	adds	r3, r7, r0
 8001eca:	7819      	ldrb	r1, [r3, #0]
 8001ecc:	183b      	adds	r3, r7, r0
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <uartTimerIrqHandler+0xf4>)
 8001ed2:	0049      	lsls	r1, r1, #1
 8001ed4:	5ac9      	ldrh	r1, [r1, r3]
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <uartTimerIrqHandler+0xf0>)
 8001ed8:	0052      	lsls	r2, r2, #1
 8001eda:	52d1      	strh	r1, [r2, r3]
            	uart_rx_size[i] = 0;
 8001edc:	183b      	adds	r3, r7, r0
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <uartTimerIrqHandler+0xf0>)
 8001ee2:	0052      	lsls	r2, r2, #1
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 8001ee8:	230f      	movs	r3, #15
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <uartTimerIrqHandler+0xf4>)
 8001ef0:	0052      	lsls	r2, r2, #1
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	52d1      	strh	r1, [r2, r3]

#ifdef USE_CUBEIDE
            uartRecvDoneCallback();
 8001ef6:	f000 f8a5 	bl	8002044 <uartRecvDoneCallback>
#endif
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 8001efa:	e00b      	b.n	8001f14 <uartTimerIrqHandler+0xe0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001efc:	210f      	movs	r1, #15
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	3201      	adds	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	230f      	movs	r3, #15
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d099      	beq.n	8001e46 <uartTimerIrqHandler+0x12>
        }
    }
}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b005      	add	sp, #20
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	200000dc 	.word	0x200000dc
 8001f20:	200006d0 	.word	0x200006d0
 8001f24:	200006c8 	.word	0x200006c8
 8001f28:	200006c4 	.word	0x200006c4
 8001f2c:	200006b4 	.word	0x200006b4

08001f30 <HAL_UART_ErrorCallback>:
 * 
 * @param huart
 * @retval None 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f38:	230f      	movs	r3, #15
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e014      	b.n	8001f6c <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 8001f42:	210f      	movs	r1, #15
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_UART_ErrorCallback+0x50>)
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	58d2      	ldr	r2, [r2, r3]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d104      	bne.n	8001f60 <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff fe10 	bl	8001b80 <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f60:	210f      	movs	r1, #15
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	3201      	adds	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0e5      	beq.n	8001f42 <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b004      	add	sp, #16
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200000dc 	.word	0x200000dc

08001f84 <rfRecvDoneCallback>:
/**
 * @brief rf recv done callback
 * 
 */
void rfRecvDoneCallback(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvEvent, NULL});
 8001f8a:	003b      	movs	r3, r7
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	003b      	movs	r3, r7
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	003a      	movs	r2, r7
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <rfRecvDoneCallback+0x28>)
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f003 fce9 	bl	8005974 <mq_push>
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	20000380 	.word	0x20000380

08001fb0 <rfSendDoneCallback>:
/**
 * @brief rf send done callback
 * 
 */
void rfSendDoneCallback(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfSendEvent, NULL});
 8001fb6:	003b      	movs	r3, r7
 8001fb8:	2203      	movs	r2, #3
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	003b      	movs	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	003a      	movs	r2, r7
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <rfSendDoneCallback+0x28>)
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f003 fcd3 	bl	8005974 <mq_push>
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000380 	.word	0x20000380

08001fdc <rfRecvTimeoutCallback>:
/**
 * @brief 
 * 
 */
void rfRecvTimeoutCallback(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvTimeoutEvent, NULL});
 8001fe2:	003b      	movs	r3, r7
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	003b      	movs	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	003a      	movs	r2, r7
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <rfRecvTimeoutCallback+0x28>)
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f003 fcbd 	bl	8005974 <mq_push>
}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	20000380 	.word	0x20000380

08002008 <rfRecvErrorCallback>:
/**
 * @brief 
 * 
 */
void rfRecvErrorCallback(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvErrorEvent, NULL});
 800200e:	003b      	movs	r3, r7
 8002010:	2204      	movs	r2, #4
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	003b      	movs	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	003a      	movs	r2, r7
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <rfRecvErrorCallback+0x28>)
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f003 fca7 	bl	8005974 <mq_push>
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	20000380 	.word	0x20000380

08002034 <HAL_Timer16Callback>:
/**
 * @brief timer16 callback,10ms
 *
 */
void HAL_Timer16Callback(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	RF_Process();
 8002038:	f7ff fab6 	bl	80015a8 <RF_Process>
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <uartRecvDoneCallback>:
/**
 * @brief uart recv done callback
 * 
 */
void uartRecvDoneCallback(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){uartRecvEvent, NULL});
 800204a:	003b      	movs	r3, r7
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	003b      	movs	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	003a      	movs	r2, r7
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <uartRecvDoneCallback+0x28>)
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f003 fc89 	bl	8005974 <mq_push>
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	20000380 	.word	0x20000380

08002070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002074:	f000 fc60 	bl	8002938 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002078:	f000 f80f 	bl	800209a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800207c:	f000 f91c 	bl	80022b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002080:	f000 f8ba 	bl	80021f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002084:	f000 f8e8 	bl	8002258 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8002088:	f000 f88e 	bl	80021a8 <MX_TIM17_Init>
  MX_TIM16_Init();
 800208c:	f000 f864 	bl	8002158 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  bspInit();
 8002090:	f7ff fbcc 	bl	800182c <bspInit>
  stateActuator();
 8002094:	f7fe f9da 	bl	800044c <stateActuator>
//  messageQueueTest();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002098:	e7fe      	b.n	8002098 <main+0x28>

0800209a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800209a:	b590      	push	{r4, r7, lr}
 800209c:	b095      	sub	sp, #84	; 0x54
 800209e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a0:	2420      	movs	r4, #32
 80020a2:	193b      	adds	r3, r7, r4
 80020a4:	0018      	movs	r0, r3
 80020a6:	2330      	movs	r3, #48	; 0x30
 80020a8:	001a      	movs	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	f004 f8b8 	bl	8006220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b0:	2310      	movs	r3, #16
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	0018      	movs	r0, r3
 80020b6:	2310      	movs	r3, #16
 80020b8:	001a      	movs	r2, r3
 80020ba:	2100      	movs	r1, #0
 80020bc:	f004 f8b0 	bl	8006220 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c0:	003b      	movs	r3, r7
 80020c2:	0018      	movs	r0, r3
 80020c4:	2310      	movs	r3, #16
 80020c6:	001a      	movs	r2, r3
 80020c8:	2100      	movs	r1, #0
 80020ca:	f004 f8a9 	bl	8006220 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020ce:	0021      	movs	r1, r4
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020d6:	187b      	adds	r3, r7, r1
 80020d8:	2201      	movs	r2, #1
 80020da:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	2202      	movs	r2, #2
 80020e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e2:	187b      	adds	r3, r7, r1
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0252      	lsls	r2, r2, #9
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	02d2      	lsls	r2, r2, #11
 80020f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2200      	movs	r2, #0
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	0018      	movs	r0, r3
 80020fc:	f001 f8a4 	bl	8003248 <HAL_RCC_OscConfig>
 8002100:	1e03      	subs	r3, r0, #0
 8002102:	d001      	beq.n	8002108 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002104:	f000 f9c6 	bl	8002494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002108:	2110      	movs	r1, #16
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002110:	187b      	adds	r3, r7, r1
 8002112:	2202      	movs	r2, #2
 8002114:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800211c:	187b      	adds	r3, r7, r1
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2101      	movs	r1, #1
 8002126:	0018      	movs	r0, r3
 8002128:	f001 fba8 	bl	800387c <HAL_RCC_ClockConfig>
 800212c:	1e03      	subs	r3, r0, #0
 800212e:	d001      	beq.n	8002134 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002130:	f000 f9b0 	bl	8002494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002134:	003b      	movs	r3, r7
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800213a:	003b      	movs	r3, r7
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002140:	003b      	movs	r3, r7
 8002142:	0018      	movs	r0, r3
 8002144:	f001 fce0 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800214c:	f000 f9a2 	bl	8002494 <Error_Handler>
  }
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b015      	add	sp, #84	; 0x54
 8002156:	bd90      	pop	{r4, r7, pc}

08002158 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <MX_TIM16_Init+0x44>)
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <MX_TIM16_Init+0x48>)
 8002160:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <MX_TIM16_Init+0x44>)
 8002164:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <MX_TIM16_Init+0x4c>)
 8002166:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <MX_TIM16_Init+0x44>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10-1;
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <MX_TIM16_Init+0x44>)
 8002170:	2209      	movs	r2, #9
 8002172:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <MX_TIM16_Init+0x44>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <MX_TIM16_Init+0x44>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <MX_TIM16_Init+0x44>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <MX_TIM16_Init+0x44>)
 8002188:	0018      	movs	r0, r3
 800218a:	f001 fd8b 	bl	8003ca4 <HAL_TIM_Base_Init>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002192:	f000 f97f 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200006d4 	.word	0x200006d4
 80021a0:	40014400 	.word	0x40014400
 80021a4:	000012bf 	.word	0x000012bf

080021a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_TIM17_Init+0x44>)
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <MX_TIM17_Init+0x48>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_TIM17_Init+0x44>)
 80021b4:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <MX_TIM17_Init+0x4c>)
 80021b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_TIM17_Init+0x44>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_TIM17_Init+0x44>)
 80021c0:	2223      	movs	r2, #35	; 0x23
 80021c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_TIM17_Init+0x44>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_TIM17_Init+0x44>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_TIM17_Init+0x44>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <MX_TIM17_Init+0x44>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f001 fd63 	bl	8003ca4 <HAL_TIM_Base_Init>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80021e2:	f000 f957 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	2000071c 	.word	0x2000071c
 80021f0:	40014800 	.word	0x40014800
 80021f4:	000012bf 	.word	0x000012bf

080021f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_USART1_UART_Init+0x58>)
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <MX_USART1_UART_Init+0x5c>)
 8002200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_USART1_UART_Init+0x58>)
 8002204:	22e1      	movs	r2, #225	; 0xe1
 8002206:	0252      	lsls	r2, r2, #9
 8002208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MX_USART1_UART_Init+0x58>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_USART1_UART_Init+0x58>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <MX_USART1_UART_Init+0x58>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_USART1_UART_Init+0x58>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <MX_USART1_UART_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <MX_USART1_UART_Init+0x58>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <MX_USART1_UART_Init+0x58>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <MX_USART1_UART_Init+0x58>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <MX_USART1_UART_Init+0x58>)
 800223c:	0018      	movs	r0, r3
 800223e:	f001 ffb7 	bl	80041b0 <HAL_UART_Init>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002246:	f000 f925 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000764 	.word	0x20000764
 8002254:	40013800 	.word	0x40013800

08002258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 800225e:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <MX_USART2_UART_Init+0x5c>)
 8002260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 8002264:	22e1      	movs	r2, #225	; 0xe1
 8002266:	0252      	lsls	r2, r2, #9
 8002268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 800227e:	220c      	movs	r2, #12
 8002280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 8002290:	2200      	movs	r2, #0
 8002292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 8002296:	2200      	movs	r2, #0
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <MX_USART2_UART_Init+0x58>)
 800229c:	0018      	movs	r0, r3
 800229e:	f001 ff87 	bl	80041b0 <HAL_UART_Init>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022a6:	f000 f8f5 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200007ec 	.word	0x200007ec
 80022b4:	40004400 	.word	0x40004400

080022b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022be:	240c      	movs	r4, #12
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	0018      	movs	r0, r3
 80022c4:	2314      	movs	r3, #20
 80022c6:	001a      	movs	r2, r3
 80022c8:	2100      	movs	r1, #0
 80022ca:	f003 ffa9 	bl	8006220 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ce:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <MX_GPIO_Init+0x1d0>)
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <MX_GPIO_Init+0x1d0>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	03c9      	lsls	r1, r1, #15
 80022d8:	430a      	orrs	r2, r1
 80022da:	615a      	str	r2, [r3, #20]
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <MX_GPIO_Init+0x1d0>)
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	03db      	lsls	r3, r3, #15
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <MX_GPIO_Init+0x1d0>)
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	4b66      	ldr	r3, [pc, #408]	; (8002488 <MX_GPIO_Init+0x1d0>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	0289      	lsls	r1, r1, #10
 80022f4:	430a      	orrs	r2, r1
 80022f6:	615a      	str	r2, [r3, #20]
 80022f8:	4b63      	ldr	r3, [pc, #396]	; (8002488 <MX_GPIO_Init+0x1d0>)
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	4013      	ands	r3, r2
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	4b60      	ldr	r3, [pc, #384]	; (8002488 <MX_GPIO_Init+0x1d0>)
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <MX_GPIO_Init+0x1d0>)
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	02c9      	lsls	r1, r1, #11
 8002310:	430a      	orrs	r2, r1
 8002312:	615a      	str	r2, [r3, #20]
 8002314:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <MX_GPIO_Init+0x1d0>)
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	02db      	lsls	r3, r3, #11
 800231c:	4013      	ands	r3, r2
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 8002322:	2381      	movs	r3, #129	; 0x81
 8002324:	0119      	lsls	r1, r3, #4
 8002326:	2390      	movs	r3, #144	; 0x90
 8002328:	05db      	lsls	r3, r3, #23
 800232a:	2200      	movs	r2, #0
 800232c:	0018      	movs	r0, r3
 800232e:	f000 ff52 	bl	80031d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 8002332:	4956      	ldr	r1, [pc, #344]	; (800248c <MX_GPIO_Init+0x1d4>)
 8002334:	4b56      	ldr	r3, [pc, #344]	; (8002490 <MX_GPIO_Init+0x1d8>)
 8002336:	2200      	movs	r2, #0
 8002338:	0018      	movs	r0, r3
 800233a:	f000 ff4c 	bl	80031d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 800233e:	193b      	adds	r3, r7, r4
 8002340:	2210      	movs	r2, #16
 8002342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	193b      	adds	r3, r7, r4
 8002346:	2201      	movs	r2, #1
 8002348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	193b      	adds	r3, r7, r4
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002350:	193b      	adds	r3, r7, r4
 8002352:	2201      	movs	r2, #1
 8002354:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8002356:	193a      	adds	r2, r7, r4
 8002358:	2390      	movs	r3, #144	; 0x90
 800235a:	05db      	lsls	r3, r3, #23
 800235c:	0011      	movs	r1, r2
 800235e:	0018      	movs	r0, r3
 8002360:	f000 fcdc 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 8002364:	0021      	movs	r1, r4
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	0152      	lsls	r2, r2, #5
 800236c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	000c      	movs	r4, r1
 8002370:	193b      	adds	r3, r7, r4
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002376:	193b      	adds	r3, r7, r4
 8002378:	2201      	movs	r2, #1
 800237a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 800237c:	193b      	adds	r3, r7, r4
 800237e:	4a44      	ldr	r2, [pc, #272]	; (8002490 <MX_GPIO_Init+0x1d8>)
 8002380:	0019      	movs	r1, r3
 8002382:	0010      	movs	r0, r2
 8002384:	f000 fcca 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 8002388:	0021      	movs	r1, r4
 800238a:	187b      	adds	r3, r7, r1
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0192      	lsls	r2, r2, #6
 8002390:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002392:	187b      	adds	r3, r7, r1
 8002394:	2288      	movs	r2, #136	; 0x88
 8002396:	0352      	lsls	r2, r2, #13
 8002398:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800239a:	187b      	adds	r3, r7, r1
 800239c:	2201      	movs	r2, #1
 800239e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 80023a0:	000c      	movs	r4, r1
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	4a3a      	ldr	r2, [pc, #232]	; (8002490 <MX_GPIO_Init+0x1d8>)
 80023a6:	0019      	movs	r1, r3
 80023a8:	0010      	movs	r0, r2
 80023aa:	f000 fcb7 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 80023ae:	0021      	movs	r1, r4
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	22c0      	movs	r2, #192	; 0xc0
 80023b4:	0212      	lsls	r2, r2, #8
 80023b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	000c      	movs	r4, r1
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	2201      	movs	r2, #1
 80023be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	193b      	adds	r3, r7, r4
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c6:	193b      	adds	r3, r7, r4
 80023c8:	2203      	movs	r2, #3
 80023ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	4a30      	ldr	r2, [pc, #192]	; (8002490 <MX_GPIO_Init+0x1d8>)
 80023d0:	0019      	movs	r1, r3
 80023d2:	0010      	movs	r0, r2
 80023d4:	f000 fca2 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	0052      	lsls	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	193b      	adds	r3, r7, r4
 80023e2:	2200      	movs	r2, #0
 80023e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 80023ec:	193a      	adds	r2, r7, r4
 80023ee:	2390      	movs	r3, #144	; 0x90
 80023f0:	05db      	lsls	r3, r3, #23
 80023f2:	0011      	movs	r1, r2
 80023f4:	0018      	movs	r0, r3
 80023f6:	f000 fc91 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 80023fa:	0021      	movs	r1, r4
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	000c      	movs	r4, r1
 8002406:	193b      	adds	r3, r7, r4
 8002408:	2201      	movs	r2, #1
 800240a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	193b      	adds	r3, r7, r4
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002412:	193b      	adds	r3, r7, r4
 8002414:	2203      	movs	r2, #3
 8002416:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 8002418:	193a      	adds	r2, r7, r4
 800241a:	2390      	movs	r3, #144	; 0x90
 800241c:	05db      	lsls	r3, r3, #23
 800241e:	0011      	movs	r1, r2
 8002420:	0018      	movs	r0, r3
 8002422:	f000 fc7b 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 8002426:	193b      	adds	r3, r7, r4
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	0152      	lsls	r2, r2, #5
 800242c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242e:	193b      	adds	r3, r7, r4
 8002430:	2288      	movs	r2, #136	; 0x88
 8002432:	0352      	lsls	r2, r2, #13
 8002434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002436:	193b      	adds	r3, r7, r4
 8002438:	2201      	movs	r2, #1
 800243a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 800243c:	193a      	adds	r2, r7, r4
 800243e:	2390      	movs	r3, #144	; 0x90
 8002440:	05db      	lsls	r3, r3, #23
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f000 fc69 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 800244a:	0021      	movs	r1, r4
 800244c:	187b      	adds	r3, r7, r1
 800244e:	2230      	movs	r2, #48	; 0x30
 8002450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	187b      	adds	r3, r7, r1
 8002454:	2201      	movs	r2, #1
 8002456:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	187b      	adds	r3, r7, r1
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800245e:	187b      	adds	r3, r7, r1
 8002460:	2201      	movs	r2, #1
 8002462:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	187b      	adds	r3, r7, r1
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <MX_GPIO_Init+0x1d8>)
 8002468:	0019      	movs	r1, r3
 800246a:	0010      	movs	r0, r2
 800246c:	f000 fc56 	bl	8002d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	2007      	movs	r0, #7
 8002476:	f000 fb91 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800247a:	2007      	movs	r0, #7
 800247c:	f000 fba3 	bl	8002bc6 <HAL_NVIC_EnableIRQ>

}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b009      	add	sp, #36	; 0x24
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	0000c030 	.word	0x0000c030
 8002490:	48000400 	.word	0x48000400

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249c:	e7fe      	b.n	800249c <Error_Handler+0x8>
	...

080024a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_MspInit+0x44>)
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_MspInit+0x44>)
 80024ac:	2101      	movs	r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_MspInit+0x44>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_MspInit+0x44>)
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_MspInit+0x44>)
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0549      	lsls	r1, r1, #21
 80024c8:	430a      	orrs	r2, r1
 80024ca:	61da      	str	r2, [r3, #28]
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_MspInit+0x44>)
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	055b      	lsls	r3, r3, #21
 80024d4:	4013      	ands	r3, r2
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_TIM_Base_MspInit+0x80>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d116      	bne.n	8002528 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024fa:	4b1c      	ldr	r3, [pc, #112]	; (800256c <HAL_TIM_Base_MspInit+0x84>)
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_TIM_Base_MspInit+0x84>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0289      	lsls	r1, r1, #10
 8002504:	430a      	orrs	r2, r1
 8002506:	619a      	str	r2, [r3, #24]
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_TIM_Base_MspInit+0x84>)
 800250a:	699a      	ldr	r2, [r3, #24]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2015      	movs	r0, #21
 800251c:	f000 fb3e 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002520:	2015      	movs	r0, #21
 8002522:	f000 fb50 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002526:	e01a      	b.n	800255e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a10      	ldr	r2, [pc, #64]	; (8002570 <HAL_TIM_Base_MspInit+0x88>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d115      	bne.n	800255e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_TIM_Base_MspInit+0x84>)
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_TIM_Base_MspInit+0x84>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	02c9      	lsls	r1, r1, #11
 800253c:	430a      	orrs	r2, r1
 800253e:	619a      	str	r2, [r3, #24]
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_TIM_Base_MspInit+0x84>)
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	02db      	lsls	r3, r3, #11
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2016      	movs	r0, #22
 8002554:	f000 fb22 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002558:	2016      	movs	r0, #22
 800255a:	f000 fb34 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b004      	add	sp, #16
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	40014400 	.word	0x40014400
 800256c:	40021000 	.word	0x40021000
 8002570:	40014800 	.word	0x40014800

08002574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b08d      	sub	sp, #52	; 0x34
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	241c      	movs	r4, #28
 800257e:	193b      	adds	r3, r7, r4
 8002580:	0018      	movs	r0, r3
 8002582:	2314      	movs	r3, #20
 8002584:	001a      	movs	r2, r3
 8002586:	2100      	movs	r1, #0
 8002588:	f003 fe4a 	bl	8006220 <memset>
  if(huart->Instance==USART1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <HAL_UART_MspInit+0x114>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d13c      	bne.n	8002610 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_UART_MspInit+0x118>)
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	4b3c      	ldr	r3, [pc, #240]	; (800268c <HAL_UART_MspInit+0x118>)
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	01c9      	lsls	r1, r1, #7
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_UART_MspInit+0x118>)
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	01db      	lsls	r3, r3, #7
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	4b36      	ldr	r3, [pc, #216]	; (800268c <HAL_UART_MspInit+0x118>)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_UART_MspInit+0x118>)
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	0289      	lsls	r1, r1, #10
 80025bc:	430a      	orrs	r2, r1
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_UART_MspInit+0x118>)
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4013      	ands	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ce:	193b      	adds	r3, r7, r4
 80025d0:	22c0      	movs	r2, #192	; 0xc0
 80025d2:	00d2      	lsls	r2, r2, #3
 80025d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	0021      	movs	r1, r4
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2202      	movs	r2, #2
 80025dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2203      	movs	r2, #3
 80025e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	2201      	movs	r2, #1
 80025ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	187a      	adds	r2, r7, r1
 80025f2:	2390      	movs	r3, #144	; 0x90
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 fb8f 	bl	8002d1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	201b      	movs	r0, #27
 8002604:	f000 faca 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002608:	201b      	movs	r0, #27
 800260a:	f000 fadc 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800260e:	e037      	b.n	8002680 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <HAL_UART_MspInit+0x11c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d132      	bne.n	8002680 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_UART_MspInit+0x118>)
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_UART_MspInit+0x118>)
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	0289      	lsls	r1, r1, #10
 8002624:	430a      	orrs	r2, r1
 8002626:	61da      	str	r2, [r3, #28]
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_UART_MspInit+0x118>)
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_UART_MspInit+0x118>)
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_UART_MspInit+0x118>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0289      	lsls	r1, r1, #10
 8002640:	430a      	orrs	r2, r1
 8002642:	615a      	str	r2, [r3, #20]
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_UART_MspInit+0x118>)
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	029b      	lsls	r3, r3, #10
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002652:	211c      	movs	r1, #28
 8002654:	187b      	adds	r3, r7, r1
 8002656:	220c      	movs	r2, #12
 8002658:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2202      	movs	r2, #2
 800265e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2203      	movs	r2, #3
 800266a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2201      	movs	r2, #1
 8002670:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	187a      	adds	r2, r7, r1
 8002674:	2390      	movs	r3, #144	; 0x90
 8002676:	05db      	lsls	r3, r3, #23
 8002678:	0011      	movs	r1, r2
 800267a:	0018      	movs	r0, r3
 800267c:	f000 fb4e 	bl	8002d1c <HAL_GPIO_Init>
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b00d      	add	sp, #52	; 0x34
 8002686:	bd90      	pop	{r4, r7, pc}
 8002688:	40013800 	.word	0x40013800
 800268c:	40021000 	.word	0x40021000
 8002690:	40004400 	.word	0x40004400

08002694 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_UART_MspDeInit+0x60>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d111      	bne.n	80026ca <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_UART_MspDeInit+0x64>)
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_UART_MspDeInit+0x64>)
 80026ac:	4913      	ldr	r1, [pc, #76]	; (80026fc <HAL_UART_MspDeInit+0x68>)
 80026ae:	400a      	ands	r2, r1
 80026b0:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80026b2:	23c0      	movs	r3, #192	; 0xc0
 80026b4:	00da      	lsls	r2, r3, #3
 80026b6:	2390      	movs	r3, #144	; 0x90
 80026b8:	05db      	lsls	r3, r3, #23
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 fc9d 	bl	8002ffc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80026c2:	201b      	movs	r0, #27
 80026c4:	f000 fa8f 	bl	8002be6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80026c8:	e010      	b.n	80026ec <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_UART_MspDeInit+0x6c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10b      	bne.n	80026ec <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_UART_MspDeInit+0x64>)
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_UART_MspDeInit+0x64>)
 80026da:	490a      	ldr	r1, [pc, #40]	; (8002704 <HAL_UART_MspDeInit+0x70>)
 80026dc:	400a      	ands	r2, r1
 80026de:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80026e0:	2390      	movs	r3, #144	; 0x90
 80026e2:	05db      	lsls	r3, r3, #23
 80026e4:	210c      	movs	r1, #12
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 fc88 	bl	8002ffc <HAL_GPIO_DeInit>
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	ffffbfff 	.word	0xffffbfff
 8002700:	40004400 	.word	0x40004400
 8002704:	fffdffff 	.word	0xfffdffff

08002708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800270c:	e7fe      	b.n	800270c <NMI_Handler+0x4>

0800270e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <HardFault_Handler+0x4>

08002714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800272c:	f000 f94c 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 8002730:	f7ff f988 	bl	8001a44 <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	0018      	movs	r0, r3
 8002744:	f000 fd64 	bl	8003210 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	019b      	lsls	r3, r3, #6
 800274c:	0018      	movs	r0, r3
 800274e:	f000 fd5f 	bl	8003210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <TIM16_IRQHandler+0x14>)
 800275e:	0018      	movs	r0, r3
 8002760:	f001 fb6a 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	200006d4 	.word	0x200006d4

08002770 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <TIM17_IRQHandler+0x14>)
 8002776:	0018      	movs	r0, r3
 8002778:	f001 fb5e 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	2000071c 	.word	0x2000071c

08002788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <USART1_IRQHandler+0x14>)
 800278e:	0018      	movs	r0, r3
 8002790:	f001 fe98 	bl	80044c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	20000764 	.word	0x20000764

080027a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e00a      	b.n	80027c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b2:	e000      	b.n	80027b6 <_read+0x16>
 80027b4:	bf00      	nop
 80027b6:	0001      	movs	r1, r0
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	b2ca      	uxtb	r2, r1
 80027c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dbf0      	blt.n	80027b2 <_read+0x12>
	}

return len;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b006      	add	sp, #24
 80027d8:	bd80      	pop	{r7, pc}

080027da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e009      	b.n	8002800 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	0018      	movs	r0, r3
 80027f6:	e000      	b.n	80027fa <_write+0x20>
 80027f8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	dbf1      	blt.n	80027ec <_write+0x12>
	}
	return len;
 8002808:	687b      	ldr	r3, [r7, #4]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b006      	add	sp, #24
 8002810:	bd80      	pop	{r7, pc}

08002812 <_close>:

int _close(int file)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	return -1;
 800281a:	2301      	movs	r3, #1
 800281c:	425b      	negs	r3, r3
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}

08002826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	0192      	lsls	r2, r2, #6
 8002836:	605a      	str	r2, [r3, #4]
	return 0;
 8002838:	2300      	movs	r3, #0
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b002      	add	sp, #8
 8002840:	bd80      	pop	{r7, pc}

08002842 <_isatty>:

int _isatty(int file)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	return 1;
 800284a:	2301      	movs	r3, #1
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}

08002854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	return 0;
 8002860:	2300      	movs	r3, #0
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <_sbrk+0x5c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <_sbrk+0x60>)
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <_sbrk+0x64>)
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <_sbrk+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800289c:	f003 fd28 	bl	80062f0 <__errno>
 80028a0:	0003      	movs	r3, r0
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	425b      	negs	r3, r3
 80028aa:	e009      	b.n	80028c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	18d2      	adds	r2, r2, r3
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <_sbrk+0x64>)
 80028bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b006      	add	sp, #24
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20002000 	.word	0x20002000
 80028cc:	00000400 	.word	0x00000400
 80028d0:	20000874 	.word	0x20000874
 80028d4:	200009c8 	.word	0x200009c8

080028d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028e4:	480d      	ldr	r0, [pc, #52]	; (800291c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028e8:	f7ff fff6 	bl	80028d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028ec:	480c      	ldr	r0, [pc, #48]	; (8002920 <LoopForever+0x6>)
  ldr r1, =_edata
 80028ee:	490d      	ldr	r1, [pc, #52]	; (8002924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <LoopForever+0xe>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <LoopForever+0x16>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002912:	f003 fcf3 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002916:	f7ff fbab 	bl	8002070 <main>

0800291a <LoopForever>:

LoopForever:
    b LoopForever
 800291a:	e7fe      	b.n	800291a <LoopForever>
  ldr   r0, =_estack
 800291c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002924:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002928:	080068b8 	.word	0x080068b8
  ldr r2, =_sbss
 800292c:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8002930:	200009c8 	.word	0x200009c8

08002934 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC1_IRQHandler>
	...

08002938 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <HAL_Init+0x24>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_Init+0x24>)
 8002942:	2110      	movs	r1, #16
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002948:	2000      	movs	r0, #0
 800294a:	f000 f809 	bl	8002960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800294e:	f7ff fda7 	bl	80024a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	40022000 	.word	0x40022000

08002960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_InitTick+0x5c>)
 800296a:	681c      	ldr	r4, [r3, #0]
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_InitTick+0x60>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	0019      	movs	r1, r3
 8002972:	23fa      	movs	r3, #250	; 0xfa
 8002974:	0098      	lsls	r0, r3, #2
 8002976:	f7fd fbc7 	bl	8000108 <__udivsi3>
 800297a:	0003      	movs	r3, r0
 800297c:	0019      	movs	r1, r3
 800297e:	0020      	movs	r0, r4
 8002980:	f7fd fbc2 	bl	8000108 <__udivsi3>
 8002984:	0003      	movs	r3, r0
 8002986:	0018      	movs	r0, r3
 8002988:	f000 f93d 	bl	8002c06 <HAL_SYSTICK_Config>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e00f      	b.n	80029b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d80b      	bhi.n	80029b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	2301      	movs	r3, #1
 800299e:	425b      	negs	r3, r3
 80029a0:	2200      	movs	r2, #0
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 f8fa 	bl	8002b9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_InitTick+0x64>)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b003      	add	sp, #12
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	200000ec 	.word	0x200000ec
 80029c0:	200000f4 	.word	0x200000f4
 80029c4:	200000f0 	.word	0x200000f0

080029c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_IncTick+0x1c>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	001a      	movs	r2, r3
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_IncTick+0x20>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	18d2      	adds	r2, r2, r3
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_IncTick+0x20>)
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	200000f4 	.word	0x200000f4
 80029e8:	20000878 	.word	0x20000878

080029ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <HAL_GetTick+0x10>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	20000878 	.word	0x20000878

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	0002      	movs	r2, r0
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a0c:	1dfb      	adds	r3, r7, #7
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b7f      	cmp	r3, #127	; 0x7f
 8002a12:	d809      	bhi.n	8002a28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	001a      	movs	r2, r3
 8002a1a:	231f      	movs	r3, #31
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <__NVIC_EnableIRQ+0x30>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	4091      	lsls	r1, r2
 8002a24:	000a      	movs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
  }
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b7f      	cmp	r3, #127	; 0x7f
 8002a46:	d810      	bhi.n	8002a6a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a48:	1dfb      	adds	r3, r7, #7
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	231f      	movs	r3, #31
 8002a50:	4013      	ands	r3, r2
 8002a52:	4908      	ldr	r1, [pc, #32]	; (8002a74 <__NVIC_DisableIRQ+0x40>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a5e:	f3bf 8f4f 	dsb	sy
}
 8002a62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002a64:	f3bf 8f6f 	isb	sy
}
 8002a68:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	0002      	movs	r2, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a8c:	d828      	bhi.n	8002ae0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a8e:	4a2f      	ldr	r2, [pc, #188]	; (8002b4c <__NVIC_SetPriority+0xd4>)
 8002a90:	1dfb      	adds	r3, r7, #7
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	33c0      	adds	r3, #192	; 0xc0
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	589b      	ldr	r3, [r3, r2]
 8002a9e:	1dfa      	adds	r2, r7, #7
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	00d2      	lsls	r2, r2, #3
 8002aaa:	21ff      	movs	r1, #255	; 0xff
 8002aac:	4091      	lsls	r1, r2
 8002aae:	000a      	movs	r2, r1
 8002ab0:	43d2      	mvns	r2, r2
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	22ff      	movs	r2, #255	; 0xff
 8002abc:	401a      	ands	r2, r3
 8002abe:	1dfb      	adds	r3, r7, #7
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	4003      	ands	r3, r0
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002acc:	481f      	ldr	r0, [pc, #124]	; (8002b4c <__NVIC_SetPriority+0xd4>)
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	33c0      	adds	r3, #192	; 0xc0
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ade:	e031      	b.n	8002b44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <__NVIC_SetPriority+0xd8>)
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	230f      	movs	r3, #15
 8002aea:	400b      	ands	r3, r1
 8002aec:	3b08      	subs	r3, #8
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3306      	adds	r3, #6
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	18d3      	adds	r3, r2, r3
 8002af6:	3304      	adds	r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1dfa      	adds	r2, r7, #7
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	0011      	movs	r1, r2
 8002b00:	2203      	movs	r2, #3
 8002b02:	400a      	ands	r2, r1
 8002b04:	00d2      	lsls	r2, r2, #3
 8002b06:	21ff      	movs	r1, #255	; 0xff
 8002b08:	4091      	lsls	r1, r2
 8002b0a:	000a      	movs	r2, r1
 8002b0c:	43d2      	mvns	r2, r2
 8002b0e:	401a      	ands	r2, r3
 8002b10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	22ff      	movs	r2, #255	; 0xff
 8002b18:	401a      	ands	r2, r3
 8002b1a:	1dfb      	adds	r3, r7, #7
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	2303      	movs	r3, #3
 8002b22:	4003      	ands	r3, r0
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b28:	4809      	ldr	r0, [pc, #36]	; (8002b50 <__NVIC_SetPriority+0xd8>)
 8002b2a:	1dfb      	adds	r3, r7, #7
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	001c      	movs	r4, r3
 8002b30:	230f      	movs	r3, #15
 8002b32:	4023      	ands	r3, r4
 8002b34:	3b08      	subs	r3, #8
 8002b36:	089b      	lsrs	r3, r3, #2
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	3306      	adds	r3, #6
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	18c3      	adds	r3, r0, r3
 8002b40:	3304      	adds	r3, #4
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b003      	add	sp, #12
 8002b4a:	bd90      	pop	{r4, r7, pc}
 8002b4c:	e000e100 	.word	0xe000e100
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	1e5a      	subs	r2, r3, #1
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	045b      	lsls	r3, r3, #17
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d301      	bcc.n	8002b6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e010      	b.n	8002b8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <SysTick_Config+0x44>)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	3a01      	subs	r2, #1
 8002b72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b74:	2301      	movs	r3, #1
 8002b76:	425b      	negs	r3, r3
 8002b78:	2103      	movs	r1, #3
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff ff7c 	bl	8002a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <SysTick_Config+0x44>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <SysTick_Config+0x44>)
 8002b88:	2207      	movs	r2, #7
 8002b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b002      	add	sp, #8
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	e000e010 	.word	0xe000e010

08002b9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	1c02      	adds	r2, r0, #0
 8002bac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff ff5d 	bl	8002a78 <__NVIC_SetPriority>
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b004      	add	sp, #16
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	0002      	movs	r2, r0
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff ff11 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b002      	add	sp, #8
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	0002      	movs	r2, r0
 8002bee:	1dfb      	adds	r3, r7, #7
 8002bf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7ff ff1b 	bl	8002a34 <__NVIC_DisableIRQ>
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b002      	add	sp, #8
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ff9f 	bl	8002b54 <SysTick_Config>
 8002c16:	0003      	movs	r3, r0
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2221      	movs	r2, #33	; 0x21
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d008      	beq.n	8002c46 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2204      	movs	r2, #4
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	2100      	movs	r1, #0
 8002c40:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e020      	b.n	8002c88 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	210e      	movs	r1, #14
 8002c52:	438a      	bics	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	438a      	bics	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4091      	lsls	r1, r2
 8002c72:	000a      	movs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2221      	movs	r2, #33	; 0x21
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	210f      	movs	r1, #15
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2221      	movs	r2, #33	; 0x21
 8002ca4:	5c9b      	ldrb	r3, [r3, r2]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d006      	beq.n	8002cba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e028      	b.n	8002d0c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	210e      	movs	r1, #14
 8002cc6:	438a      	bics	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	438a      	bics	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4091      	lsls	r1, r2
 8002ce6:	000a      	movs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2221      	movs	r2, #33	; 0x21
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	0010      	movs	r0, r2
 8002d0a:	4798      	blx	r3
    }
  }
  return status;
 8002d0c:	230f      	movs	r3, #15
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2a:	e14f      	b.n	8002fcc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4091      	lsls	r1, r2
 8002d36:	000a      	movs	r2, r1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d100      	bne.n	8002d44 <HAL_GPIO_Init+0x28>
 8002d42:	e140      	b.n	8002fc6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d005      	beq.n	8002d5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2203      	movs	r2, #3
 8002d56:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d130      	bne.n	8002dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	0013      	movs	r3, r2
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	0013      	movs	r3, r2
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d92:	2201      	movs	r2, #1
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
 8002d98:	0013      	movs	r3, r2
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	2201      	movs	r2, #1
 8002daa:	401a      	ands	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	409a      	lsls	r2, r3
 8002db0:	0013      	movs	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d017      	beq.n	8002dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	409a      	lsls	r2, r3
 8002dec:	0013      	movs	r3, r2
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2203      	movs	r2, #3
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d123      	bne.n	8002e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	58d3      	ldr	r3, [r2, r3]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2207      	movs	r2, #7
 8002e18:	4013      	ands	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	43da      	mvns	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2107      	movs	r1, #7
 8002e32:	400b      	ands	r3, r1
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	409a      	lsls	r2, r3
 8002e38:	0013      	movs	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	0092      	lsls	r2, r2, #2
 8002e4a:	6939      	ldr	r1, [r7, #16]
 8002e4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	0013      	movs	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	23c0      	movs	r3, #192	; 0xc0
 8002e88:	029b      	lsls	r3, r3, #10
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d100      	bne.n	8002e90 <HAL_GPIO_Init+0x174>
 8002e8e:	e09a      	b.n	8002fc6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e90:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <HAL_GPIO_Init+0x2c8>)
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_GPIO_Init+0x2c8>)
 8002e96:	2101      	movs	r1, #1
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	619a      	str	r2, [r3, #24]
 8002e9c:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <HAL_GPIO_Init+0x2c8>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ea8:	4a4f      	ldr	r2, [pc, #316]	; (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	0013      	movs	r3, r2
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	2390      	movs	r3, #144	; 0x90
 8002ed0:	05db      	lsls	r3, r3, #23
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x1e2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a44      	ldr	r2, [pc, #272]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_Init+0x1de>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a43      	ldr	r2, [pc, #268]	; (8002ff0 <HAL_GPIO_Init+0x2d4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_Init+0x1da>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a42      	ldr	r2, [pc, #264]	; (8002ff4 <HAL_GPIO_Init+0x2d8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_Init+0x1d6>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x1e4>
 8002ef2:	2305      	movs	r3, #5
 8002ef4:	e004      	b.n	8002f00 <HAL_GPIO_Init+0x1e4>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e002      	b.n	8002f00 <HAL_GPIO_Init+0x1e4>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_GPIO_Init+0x1e4>
 8002efe:	2300      	movs	r3, #0
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	2103      	movs	r1, #3
 8002f04:	400a      	ands	r2, r1
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	4093      	lsls	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f10:	4935      	ldr	r1, [pc, #212]	; (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	3302      	adds	r3, #2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1e:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43da      	mvns	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	035b      	lsls	r3, r3, #13
 8002f36:	4013      	ands	r3, r2
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43da      	mvns	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	039b      	lsls	r3, r3, #14
 8002f60:	4013      	ands	r3, r2
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f6c:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	029b      	lsls	r3, r3, #10
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	40da      	lsrs	r2, r3
 8002fd4:	1e13      	subs	r3, r2, #0
 8002fd6:	d000      	beq.n	8002fda <HAL_GPIO_Init+0x2be>
 8002fd8:	e6a8      	b.n	8002d2c <HAL_GPIO_Init+0x10>
  } 
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b006      	add	sp, #24
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	48000400 	.word	0x48000400
 8002ff0:	48000800 	.word	0x48000800
 8002ff4:	48000c00 	.word	0x48000c00
 8002ff8:	40010400 	.word	0x40010400

08002ffc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800300a:	e0b1      	b.n	8003170 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800300c:	2201      	movs	r2, #1
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	409a      	lsls	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d100      	bne.n	8003020 <HAL_GPIO_DeInit+0x24>
 800301e:	e0a4      	b.n	800316a <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003020:	4a59      	ldr	r2, [pc, #356]	; (8003188 <HAL_GPIO_DeInit+0x18c>)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	3302      	adds	r3, #2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	589b      	ldr	r3, [r3, r2]
 800302c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2203      	movs	r2, #3
 8003032:	4013      	ands	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	220f      	movs	r2, #15
 8003038:	409a      	lsls	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	2390      	movs	r3, #144	; 0x90
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	429a      	cmp	r2, r3
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_DeInit+0x76>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4f      	ldr	r2, [pc, #316]	; (800318c <HAL_GPIO_DeInit+0x190>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_DeInit+0x72>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4e      	ldr	r2, [pc, #312]	; (8003190 <HAL_GPIO_DeInit+0x194>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_DeInit+0x6e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4d      	ldr	r2, [pc, #308]	; (8003194 <HAL_GPIO_DeInit+0x198>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_DeInit+0x6a>
 8003062:	2303      	movs	r3, #3
 8003064:	e006      	b.n	8003074 <HAL_GPIO_DeInit+0x78>
 8003066:	2305      	movs	r3, #5
 8003068:	e004      	b.n	8003074 <HAL_GPIO_DeInit+0x78>
 800306a:	2302      	movs	r3, #2
 800306c:	e002      	b.n	8003074 <HAL_GPIO_DeInit+0x78>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_GPIO_DeInit+0x78>
 8003072:	2300      	movs	r3, #0
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	2103      	movs	r1, #3
 8003078:	400a      	ands	r2, r1
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	4093      	lsls	r3, r2
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d132      	bne.n	80030ea <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_GPIO_DeInit+0x19c>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	43d9      	mvns	r1, r3
 800308c:	4b42      	ldr	r3, [pc, #264]	; (8003198 <HAL_GPIO_DeInit+0x19c>)
 800308e:	400a      	ands	r2, r1
 8003090:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_GPIO_DeInit+0x19c>)
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43d9      	mvns	r1, r3
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_GPIO_DeInit+0x19c>)
 800309c:	400a      	ands	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030a0:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <HAL_GPIO_DeInit+0x19c>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	43d9      	mvns	r1, r3
 80030a8:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_GPIO_DeInit+0x19c>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_GPIO_DeInit+0x19c>)
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	43d9      	mvns	r1, r3
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_GPIO_DeInit+0x19c>)
 80030b8:	400a      	ands	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2203      	movs	r2, #3
 80030c0:	4013      	ands	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	409a      	lsls	r2, r3
 80030c8:	0013      	movs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80030cc:	4a2e      	ldr	r2, [pc, #184]	; (8003188 <HAL_GPIO_DeInit+0x18c>)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	589a      	ldr	r2, [r3, r2]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43d9      	mvns	r1, r3
 80030dc:	482a      	ldr	r0, [pc, #168]	; (8003188 <HAL_GPIO_DeInit+0x18c>)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	400a      	ands	r2, r1
 80030e4:	3302      	adds	r3, #2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	0052      	lsls	r2, r2, #1
 80030f2:	2103      	movs	r1, #3
 80030f4:	4091      	lsls	r1, r2
 80030f6:	000a      	movs	r2, r1
 80030f8:	43d2      	mvns	r2, r2
 80030fa:	401a      	ands	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	58d3      	ldr	r3, [r2, r3]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	2107      	movs	r1, #7
 8003110:	400a      	ands	r2, r1
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	210f      	movs	r1, #15
 8003116:	4091      	lsls	r1, r2
 8003118:	000a      	movs	r2, r1
 800311a:	43d1      	mvns	r1, r2
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	08d2      	lsrs	r2, r2, #3
 8003120:	4019      	ands	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	0052      	lsls	r2, r2, #1
 8003132:	2103      	movs	r1, #3
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	43d2      	mvns	r2, r2
 800313a:	401a      	ands	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2101      	movs	r1, #1
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4091      	lsls	r1, r2
 800314a:	000a      	movs	r2, r1
 800314c:	43d2      	mvns	r2, r2
 800314e:	401a      	ands	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	0052      	lsls	r2, r2, #1
 800315c:	2103      	movs	r1, #3
 800315e:	4091      	lsls	r1, r2
 8003160:	000a      	movs	r2, r1
 8003162:	43d2      	mvns	r2, r2
 8003164:	401a      	ands	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]

    }

    position++;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	40da      	lsrs	r2, r3
 8003176:	1e13      	subs	r3, r2, #0
 8003178:	d000      	beq.n	800317c <HAL_GPIO_DeInit+0x180>
 800317a:	e747      	b.n	800300c <HAL_GPIO_DeInit+0x10>
  }
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	b006      	add	sp, #24
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	40010000 	.word	0x40010000
 800318c:	48000400 	.word	0x48000400
 8003190:	48000800 	.word	0x48000800
 8003194:	48000c00 	.word	0x48000c00
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	000a      	movs	r2, r1
 80031a6:	1cbb      	adds	r3, r7, #2
 80031a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	1cba      	adds	r2, r7, #2
 80031b0:	8812      	ldrh	r2, [r2, #0]
 80031b2:	4013      	ands	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80031b6:	230f      	movs	r3, #15
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e003      	b.n	80031c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031c0:	230f      	movs	r3, #15
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80031c8:	230f      	movs	r3, #15
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
  }
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	0008      	movs	r0, r1
 80031e0:	0011      	movs	r1, r2
 80031e2:	1cbb      	adds	r3, r7, #2
 80031e4:	1c02      	adds	r2, r0, #0
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	1c7b      	adds	r3, r7, #1
 80031ea:	1c0a      	adds	r2, r1, #0
 80031ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ee:	1c7b      	adds	r3, r7, #1
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031f6:	1cbb      	adds	r3, r7, #2
 80031f8:	881a      	ldrh	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031fe:	e003      	b.n	8003208 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003200:	1cbb      	adds	r3, r7, #2
 8003202:	881a      	ldrh	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	0002      	movs	r2, r0
 8003218:	1dbb      	adds	r3, r7, #6
 800321a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	1dba      	adds	r2, r7, #6
 8003222:	8812      	ldrh	r2, [r2, #0]
 8003224:	4013      	ands	r3, r2
 8003226:	d008      	beq.n	800323a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800322a:	1dba      	adds	r2, r7, #6
 800322c:	8812      	ldrh	r2, [r2, #0]
 800322e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003230:	1dbb      	adds	r3, r7, #6
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	0018      	movs	r0, r3
 8003236:	f7fe fbb9 	bl	80019ac <HAL_GPIO_EXTI_Callback>
  }
}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	40010400 	.word	0x40010400

08003248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e301      	b.n	800385e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d100      	bne.n	8003266 <HAL_RCC_OscConfig+0x1e>
 8003264:	e08d      	b.n	8003382 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003266:	4bc3      	ldr	r3, [pc, #780]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	220c      	movs	r2, #12
 800326c:	4013      	ands	r3, r2
 800326e:	2b04      	cmp	r3, #4
 8003270:	d00e      	beq.n	8003290 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003272:	4bc0      	ldr	r3, [pc, #768]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	220c      	movs	r2, #12
 8003278:	4013      	ands	r3, r2
 800327a:	2b08      	cmp	r3, #8
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x64>
 800327e:	4bbd      	ldr	r3, [pc, #756]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	025b      	lsls	r3, r3, #9
 8003286:	401a      	ands	r2, r3
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	025b      	lsls	r3, r3, #9
 800328c:	429a      	cmp	r2, r3
 800328e:	d10d      	bne.n	80032ac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	4bb8      	ldr	r3, [pc, #736]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	4013      	ands	r3, r2
 800329a:	d100      	bne.n	800329e <HAL_RCC_OscConfig+0x56>
 800329c:	e070      	b.n	8003380 <HAL_RCC_OscConfig+0x138>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d000      	beq.n	80032a8 <HAL_RCC_OscConfig+0x60>
 80032a6:	e06b      	b.n	8003380 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e2d8      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_OscConfig+0x7c>
 80032b4:	4baf      	ldr	r3, [pc, #700]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4bae      	ldr	r3, [pc, #696]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032ba:	2180      	movs	r1, #128	; 0x80
 80032bc:	0249      	lsls	r1, r1, #9
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e02f      	b.n	8003324 <HAL_RCC_OscConfig+0xdc>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10c      	bne.n	80032e6 <HAL_RCC_OscConfig+0x9e>
 80032cc:	4ba9      	ldr	r3, [pc, #676]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4ba8      	ldr	r3, [pc, #672]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032d2:	49a9      	ldr	r1, [pc, #676]	; (8003578 <HAL_RCC_OscConfig+0x330>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	4ba6      	ldr	r3, [pc, #664]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4ba5      	ldr	r3, [pc, #660]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032de:	49a7      	ldr	r1, [pc, #668]	; (800357c <HAL_RCC_OscConfig+0x334>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e01e      	b.n	8003324 <HAL_RCC_OscConfig+0xdc>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d10e      	bne.n	800330c <HAL_RCC_OscConfig+0xc4>
 80032ee:	4ba1      	ldr	r3, [pc, #644]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4ba0      	ldr	r3, [pc, #640]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	02c9      	lsls	r1, r1, #11
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	4b9d      	ldr	r3, [pc, #628]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b9c      	ldr	r3, [pc, #624]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	0249      	lsls	r1, r1, #9
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xdc>
 800330c:	4b99      	ldr	r3, [pc, #612]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b98      	ldr	r3, [pc, #608]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003312:	4999      	ldr	r1, [pc, #612]	; (8003578 <HAL_RCC_OscConfig+0x330>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	4b96      	ldr	r3, [pc, #600]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b95      	ldr	r3, [pc, #596]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800331e:	4997      	ldr	r1, [pc, #604]	; (800357c <HAL_RCC_OscConfig+0x334>)
 8003320:	400a      	ands	r2, r1
 8003322:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d014      	beq.n	8003356 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7ff fb5e 	bl	80029ec <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003336:	f7ff fb59 	bl	80029ec <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	; 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e28a      	b.n	800385e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003348:	4b8a      	ldr	r3, [pc, #552]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	029b      	lsls	r3, r3, #10
 8003350:	4013      	ands	r3, r2
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0xee>
 8003354:	e015      	b.n	8003382 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7ff fb49 	bl	80029ec <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7ff fb44 	bl	80029ec <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e275      	b.n	800385e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	4b80      	ldr	r3, [pc, #512]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	4013      	ands	r3, r2
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x118>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2202      	movs	r2, #2
 8003388:	4013      	ands	r3, r2
 800338a:	d100      	bne.n	800338e <HAL_RCC_OscConfig+0x146>
 800338c:	e069      	b.n	8003462 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800338e:	4b79      	ldr	r3, [pc, #484]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	220c      	movs	r2, #12
 8003394:	4013      	ands	r3, r2
 8003396:	d00b      	beq.n	80033b0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003398:	4b76      	ldr	r3, [pc, #472]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	220c      	movs	r2, #12
 800339e:	4013      	ands	r3, r2
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d11c      	bne.n	80033de <HAL_RCC_OscConfig+0x196>
 80033a4:	4b73      	ldr	r3, [pc, #460]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	4013      	ands	r3, r2
 80033ae:	d116      	bne.n	80033de <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b0:	4b70      	ldr	r3, [pc, #448]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2202      	movs	r2, #2
 80033b6:	4013      	ands	r3, r2
 80033b8:	d005      	beq.n	80033c6 <HAL_RCC_OscConfig+0x17e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e24b      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c6:	4b6b      	ldr	r3, [pc, #428]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	22f8      	movs	r2, #248	; 0xf8
 80033cc:	4393      	bics	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	00da      	lsls	r2, r3, #3
 80033d6:	4b67      	ldr	r3, [pc, #412]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033dc:	e041      	b.n	8003462 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d024      	beq.n	8003430 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80033ec:	2101      	movs	r1, #1
 80033ee:	430a      	orrs	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7ff fafb 	bl	80029ec <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fc:	f7ff faf6 	bl	80029ec <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e227      	b.n	800385e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b59      	ldr	r3, [pc, #356]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2202      	movs	r2, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d0f1      	beq.n	80033fc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003418:	4b56      	ldr	r3, [pc, #344]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	22f8      	movs	r2, #248	; 0xf8
 800341e:	4393      	bics	r3, r2
 8003420:	0019      	movs	r1, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00da      	lsls	r2, r3, #3
 8003428:	4b52      	ldr	r3, [pc, #328]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e018      	b.n	8003462 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003430:	4b50      	ldr	r3, [pc, #320]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003436:	2101      	movs	r1, #1
 8003438:	438a      	bics	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7ff fad6 	bl	80029ec <HAL_GetTick>
 8003440:	0003      	movs	r3, r0
 8003442:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003446:	f7ff fad1 	bl	80029ec <HAL_GetTick>
 800344a:	0002      	movs	r2, r0
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e202      	b.n	800385e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003458:	4b46      	ldr	r3, [pc, #280]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2202      	movs	r2, #2
 800345e:	4013      	ands	r3, r2
 8003460:	d1f1      	bne.n	8003446 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2208      	movs	r2, #8
 8003468:	4013      	ands	r3, r2
 800346a:	d036      	beq.n	80034da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d019      	beq.n	80034a8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003474:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800347a:	2101      	movs	r1, #1
 800347c:	430a      	orrs	r2, r1
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003480:	f7ff fab4 	bl	80029ec <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348a:	f7ff faaf 	bl	80029ec <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1e0      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2202      	movs	r2, #2
 80034a2:	4013      	ands	r3, r2
 80034a4:	d0f1      	beq.n	800348a <HAL_RCC_OscConfig+0x242>
 80034a6:	e018      	b.n	80034da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80034aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ac:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	2101      	movs	r1, #1
 80034b0:	438a      	bics	r2, r1
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b4:	f7ff fa9a 	bl	80029ec <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034be:	f7ff fa95 	bl	80029ec <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1c6      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d0:	4b28      	ldr	r3, [pc, #160]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2202      	movs	r2, #2
 80034d6:	4013      	ands	r3, r2
 80034d8:	d1f1      	bne.n	80034be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2204      	movs	r2, #4
 80034e0:	4013      	ands	r3, r2
 80034e2:	d100      	bne.n	80034e6 <HAL_RCC_OscConfig+0x29e>
 80034e4:	e0b4      	b.n	8003650 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e6:	201f      	movs	r0, #31
 80034e8:	183b      	adds	r3, r7, r0
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ee:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	055b      	lsls	r3, r3, #21
 80034f6:	4013      	ands	r3, r2
 80034f8:	d110      	bne.n	800351c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	0549      	lsls	r1, r1, #21
 8003504:	430a      	orrs	r2, r1
 8003506:	61da      	str	r2, [r3, #28]
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	055b      	lsls	r3, r3, #21
 8003510:	4013      	ands	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003516:	183b      	adds	r3, r7, r0
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_RCC_OscConfig+0x338>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4013      	ands	r3, r2
 8003526:	d11a      	bne.n	800355e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_RCC_OscConfig+0x338>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_RCC_OscConfig+0x338>)
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	0049      	lsls	r1, r1, #1
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003536:	f7ff fa59 	bl	80029ec <HAL_GetTick>
 800353a:	0003      	movs	r3, r0
 800353c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003540:	f7ff fa54 	bl	80029ec <HAL_GetTick>
 8003544:	0002      	movs	r2, r0
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e185      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_OscConfig+0x338>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4013      	ands	r3, r2
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10e      	bne.n	8003584 <HAL_RCC_OscConfig+0x33c>
 8003566:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	4b02      	ldr	r3, [pc, #8]	; (8003574 <HAL_RCC_OscConfig+0x32c>)
 800356c:	2101      	movs	r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	621a      	str	r2, [r3, #32]
 8003572:	e035      	b.n	80035e0 <HAL_RCC_OscConfig+0x398>
 8003574:	40021000 	.word	0x40021000
 8003578:	fffeffff 	.word	0xfffeffff
 800357c:	fffbffff 	.word	0xfffbffff
 8003580:	40007000 	.word	0x40007000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x35e>
 800358c:	4bb6      	ldr	r3, [pc, #728]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 800358e:	6a1a      	ldr	r2, [r3, #32]
 8003590:	4bb5      	ldr	r3, [pc, #724]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003592:	2101      	movs	r1, #1
 8003594:	438a      	bics	r2, r1
 8003596:	621a      	str	r2, [r3, #32]
 8003598:	4bb3      	ldr	r3, [pc, #716]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	4bb2      	ldr	r3, [pc, #712]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 800359e:	2104      	movs	r1, #4
 80035a0:	438a      	bics	r2, r1
 80035a2:	621a      	str	r2, [r3, #32]
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x398>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x380>
 80035ae:	4bae      	ldr	r3, [pc, #696]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	4bad      	ldr	r3, [pc, #692]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80035b4:	2104      	movs	r1, #4
 80035b6:	430a      	orrs	r2, r1
 80035b8:	621a      	str	r2, [r3, #32]
 80035ba:	4bab      	ldr	r3, [pc, #684]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80035bc:	6a1a      	ldr	r2, [r3, #32]
 80035be:	4baa      	ldr	r3, [pc, #680]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	430a      	orrs	r2, r1
 80035c4:	621a      	str	r2, [r3, #32]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0x398>
 80035c8:	4ba7      	ldr	r3, [pc, #668]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	4ba6      	ldr	r3, [pc, #664]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80035ce:	2101      	movs	r1, #1
 80035d0:	438a      	bics	r2, r1
 80035d2:	621a      	str	r2, [r3, #32]
 80035d4:	4ba4      	ldr	r3, [pc, #656]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	4ba3      	ldr	r3, [pc, #652]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80035da:	2104      	movs	r1, #4
 80035dc:	438a      	bics	r2, r1
 80035de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d014      	beq.n	8003612 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e8:	f7ff fa00 	bl	80029ec <HAL_GetTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	e009      	b.n	8003606 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7ff f9fb 	bl	80029ec <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	4a9b      	ldr	r2, [pc, #620]	; (800386c <HAL_RCC_OscConfig+0x624>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e12b      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	4b98      	ldr	r3, [pc, #608]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x3aa>
 8003610:	e013      	b.n	800363a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7ff f9eb 	bl	80029ec <HAL_GetTick>
 8003616:	0003      	movs	r3, r0
 8003618:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361a:	e009      	b.n	8003630 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7ff f9e6 	bl	80029ec <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	4a91      	ldr	r2, [pc, #580]	; (800386c <HAL_RCC_OscConfig+0x624>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e116      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	4b8d      	ldr	r3, [pc, #564]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	2202      	movs	r2, #2
 8003636:	4013      	ands	r3, r2
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800363a:	231f      	movs	r3, #31
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003644:	4b88      	ldr	r3, [pc, #544]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	4b87      	ldr	r3, [pc, #540]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 800364a:	4989      	ldr	r1, [pc, #548]	; (8003870 <HAL_RCC_OscConfig+0x628>)
 800364c:	400a      	ands	r2, r1
 800364e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2210      	movs	r2, #16
 8003656:	4013      	ands	r3, r2
 8003658:	d063      	beq.n	8003722 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d12a      	bne.n	80036b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003662:	4b81      	ldr	r3, [pc, #516]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003666:	4b80      	ldr	r3, [pc, #512]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003668:	2104      	movs	r1, #4
 800366a:	430a      	orrs	r2, r1
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800366e:	4b7e      	ldr	r3, [pc, #504]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003672:	4b7d      	ldr	r3, [pc, #500]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003674:	2101      	movs	r1, #1
 8003676:	430a      	orrs	r2, r1
 8003678:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367a:	f7ff f9b7 	bl	80029ec <HAL_GetTick>
 800367e:	0003      	movs	r3, r0
 8003680:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003684:	f7ff f9b2 	bl	80029ec <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0e3      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003696:	4b74      	ldr	r3, [pc, #464]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	2202      	movs	r2, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d0f1      	beq.n	8003684 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036a0:	4b71      	ldr	r3, [pc, #452]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	22f8      	movs	r2, #248	; 0xf8
 80036a6:	4393      	bics	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	00da      	lsls	r2, r3, #3
 80036b0:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036b2:	430a      	orrs	r2, r1
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34
 80036b6:	e034      	b.n	8003722 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	3305      	adds	r3, #5
 80036be:	d111      	bne.n	80036e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80036c0:	4b69      	ldr	r3, [pc, #420]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c4:	4b68      	ldr	r3, [pc, #416]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036c6:	2104      	movs	r1, #4
 80036c8:	438a      	bics	r2, r1
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036cc:	4b66      	ldr	r3, [pc, #408]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	22f8      	movs	r2, #248	; 0xf8
 80036d2:	4393      	bics	r3, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	00da      	lsls	r2, r3, #3
 80036dc:	4b62      	ldr	r3, [pc, #392]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036de:	430a      	orrs	r2, r1
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34
 80036e2:	e01e      	b.n	8003722 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036e4:	4b60      	ldr	r3, [pc, #384]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e8:	4b5f      	ldr	r3, [pc, #380]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036ea:	2104      	movs	r1, #4
 80036ec:	430a      	orrs	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80036f0:	4b5d      	ldr	r3, [pc, #372]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f4:	4b5c      	ldr	r3, [pc, #368]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80036f6:	2101      	movs	r1, #1
 80036f8:	438a      	bics	r2, r1
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fc:	f7ff f976 	bl	80029ec <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003706:	f7ff f971 	bl	80029ec <HAL_GetTick>
 800370a:	0002      	movs	r2, r0
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0a2      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	d1f1      	bne.n	8003706 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d100      	bne.n	800372c <HAL_RCC_OscConfig+0x4e4>
 800372a:	e097      	b.n	800385c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372c:	4b4e      	ldr	r3, [pc, #312]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	220c      	movs	r2, #12
 8003732:	4013      	ands	r3, r2
 8003734:	2b08      	cmp	r3, #8
 8003736:	d100      	bne.n	800373a <HAL_RCC_OscConfig+0x4f2>
 8003738:	e06b      	b.n	8003812 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d14c      	bne.n	80037dc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b49      	ldr	r3, [pc, #292]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b48      	ldr	r3, [pc, #288]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003748:	494a      	ldr	r1, [pc, #296]	; (8003874 <HAL_RCC_OscConfig+0x62c>)
 800374a:	400a      	ands	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7ff f94d 	bl	80029ec <HAL_GetTick>
 8003752:	0003      	movs	r3, r0
 8003754:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7ff f948 	bl	80029ec <HAL_GetTick>
 800375c:	0002      	movs	r2, r0
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e079      	b.n	800385e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376a:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	049b      	lsls	r3, r3, #18
 8003772:	4013      	ands	r3, r2
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003776:	4b3c      	ldr	r3, [pc, #240]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	220f      	movs	r2, #15
 800377c:	4393      	bics	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003786:	430a      	orrs	r2, r1
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
 800378a:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a3a      	ldr	r2, [pc, #232]	; (8003878 <HAL_RCC_OscConfig+0x630>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	431a      	orrs	r2, r3
 800379e:	4b32      	ldr	r3, [pc, #200]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80037a0:	430a      	orrs	r2, r1
 80037a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b30      	ldr	r3, [pc, #192]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b2f      	ldr	r3, [pc, #188]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	0449      	lsls	r1, r1, #17
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7ff f91b 	bl	80029ec <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7ff f916 	bl	80029ec <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e047      	b.n	800385e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	049b      	lsls	r3, r3, #18
 80037d6:	4013      	ands	r3, r2
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x574>
 80037da:	e03f      	b.n	800385c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 80037e2:	4924      	ldr	r1, [pc, #144]	; (8003874 <HAL_RCC_OscConfig+0x62c>)
 80037e4:	400a      	ands	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7ff f900 	bl	80029ec <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f2:	f7ff f8fb 	bl	80029ec <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e02c      	b.n	800385e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	049b      	lsls	r3, r3, #18
 800380c:	4013      	ands	r3, r2
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x5aa>
 8003810:	e024      	b.n	800385c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e01f      	b.n	800385e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <HAL_RCC_OscConfig+0x620>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	025b      	lsls	r3, r3, #9
 8003830:	401a      	ands	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	429a      	cmp	r2, r3
 8003838:	d10e      	bne.n	8003858 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	220f      	movs	r2, #15
 800383e:	401a      	ands	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d107      	bne.n	8003858 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	23f0      	movs	r3, #240	; 0xf0
 800384c:	039b      	lsls	r3, r3, #14
 800384e:	401a      	ands	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b008      	add	sp, #32
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	40021000 	.word	0x40021000
 800386c:	00001388 	.word	0x00001388
 8003870:	efffffff 	.word	0xefffffff
 8003874:	feffffff 	.word	0xfeffffff
 8003878:	ffc2ffff 	.word	0xffc2ffff

0800387c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b3      	b.n	80039f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b5b      	ldr	r3, [pc, #364]	; (8003a00 <HAL_RCC_ClockConfig+0x184>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d911      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b58      	ldr	r3, [pc, #352]	; (8003a00 <HAL_RCC_ClockConfig+0x184>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	4393      	bics	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	4b55      	ldr	r3, [pc, #340]	; (8003a00 <HAL_RCC_ClockConfig+0x184>)
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b0:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_ClockConfig+0x184>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4013      	ands	r3, r2
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e09a      	b.n	80039f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d015      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	d006      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80038d6:	4b4b      	ldr	r3, [pc, #300]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4b4a      	ldr	r3, [pc, #296]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 80038dc:	21e0      	movs	r1, #224	; 0xe0
 80038de:	00c9      	lsls	r1, r1, #3
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	22f0      	movs	r2, #240	; 0xf0
 80038ea:	4393      	bics	r3, r2
 80038ec:	0019      	movs	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	4b44      	ldr	r3, [pc, #272]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	d040      	beq.n	8003984 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	029b      	lsls	r3, r3, #10
 8003912:	4013      	ands	r3, r2
 8003914:	d114      	bne.n	8003940 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e06e      	b.n	80039f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	049b      	lsls	r3, r3, #18
 800392a:	4013      	ands	r3, r2
 800392c:	d108      	bne.n	8003940 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e062      	b.n	80039f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	4b34      	ldr	r3, [pc, #208]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2202      	movs	r2, #2
 8003938:	4013      	ands	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e05b      	b.n	80039f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003940:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2203      	movs	r2, #3
 8003946:	4393      	bics	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	4b2d      	ldr	r3, [pc, #180]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003954:	f7ff f84a 	bl	80029ec <HAL_GetTick>
 8003958:	0003      	movs	r3, r0
 800395a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395c:	e009      	b.n	8003972 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395e:	f7ff f845 	bl	80029ec <HAL_GetTick>
 8003962:	0002      	movs	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <HAL_RCC_ClockConfig+0x18c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e042      	b.n	80039f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	220c      	movs	r2, #12
 8003978:	401a      	ands	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1ec      	bne.n	800395e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003984:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <HAL_RCC_ClockConfig+0x184>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2201      	movs	r2, #1
 800398a:	4013      	ands	r3, r2
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d211      	bcs.n	80039b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_ClockConfig+0x184>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	4393      	bics	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <HAL_RCC_ClockConfig+0x184>)
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a4:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <HAL_RCC_ClockConfig+0x184>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	4013      	ands	r3, r2
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e020      	b.n	80039f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2204      	movs	r2, #4
 80039bc:	4013      	ands	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <HAL_RCC_ClockConfig+0x190>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039d4:	f000 f820 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80039d8:	0001      	movs	r1, r0
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <HAL_RCC_ClockConfig+0x188>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	220f      	movs	r2, #15
 80039e2:	4013      	ands	r3, r2
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <HAL_RCC_ClockConfig+0x194>)
 80039e6:	5cd3      	ldrb	r3, [r2, r3]
 80039e8:	000a      	movs	r2, r1
 80039ea:	40da      	lsrs	r2, r3
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x198>)
 80039ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7fe ffb5 	bl	8002960 <HAL_InitTick>
  
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40022000 	.word	0x40022000
 8003a04:	40021000 	.word	0x40021000
 8003a08:	00001388 	.word	0x00001388
 8003a0c:	fffff8ff 	.word	0xfffff8ff
 8003a10:	08006878 	.word	0x08006878
 8003a14:	200000ec 	.word	0x200000ec

08003a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a32:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d002      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x30>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x36>
 8003a46:	e02c      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a4a:	613b      	str	r3, [r7, #16]
      break;
 8003a4c:	e02c      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0c9b      	lsrs	r3, r3, #18
 8003a52:	220f      	movs	r2, #15
 8003a54:	4013      	ands	r3, r2
 8003a56:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a58:	5cd3      	ldrb	r3, [r2, r3]
 8003a5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003a5c:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	220f      	movs	r2, #15
 8003a62:	4013      	ands	r3, r2
 8003a64:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	025b      	lsls	r3, r3, #9
 8003a70:	4013      	ands	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4810      	ldr	r0, [pc, #64]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a78:	f7fc fb46 	bl	8000108 <__udivsi3>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	001a      	movs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4353      	muls	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e009      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	000a      	movs	r2, r1
 8003a8c:	0152      	lsls	r2, r2, #5
 8003a8e:	1a52      	subs	r2, r2, r1
 8003a90:	0193      	lsls	r3, r2, #6
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	185b      	adds	r3, r3, r1
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	613b      	str	r3, [r7, #16]
      break;
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003aa4:	613b      	str	r3, [r7, #16]
      break;
 8003aa6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003aa8:	693b      	ldr	r3, [r7, #16]
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b006      	add	sp, #24
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	00f42400 	.word	0x00f42400
 8003abc:	08006890 	.word	0x08006890
 8003ac0:	080068a0 	.word	0x080068a0
 8003ac4:	007a1200 	.word	0x007a1200

08003ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	200000ec 	.word	0x200000ec

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ae0:	f7ff fff2 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae4:	0001      	movs	r1, r0
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	2207      	movs	r2, #7
 8003aee:	4013      	ands	r3, r2
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	40d9      	lsrs	r1, r3
 8003af6:	000b      	movs	r3, r1
}    
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08006888 	.word	0x08006888

08003b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	025b      	lsls	r3, r3, #9
 8003b20:	4013      	ands	r3, r2
 8003b22:	d100      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003b24:	e08e      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003b26:	2017      	movs	r0, #23
 8003b28:	183b      	adds	r3, r7, r0
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2e:	4b57      	ldr	r3, [pc, #348]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	055b      	lsls	r3, r3, #21
 8003b36:	4013      	ands	r3, r2
 8003b38:	d110      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	4b54      	ldr	r3, [pc, #336]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	0549      	lsls	r1, r1, #21
 8003b44:	430a      	orrs	r2, r1
 8003b46:	61da      	str	r2, [r3, #28]
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	055b      	lsls	r3, r3, #21
 8003b50:	4013      	ands	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	183b      	adds	r3, r7, r0
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	4b4c      	ldr	r3, [pc, #304]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4013      	ands	r3, r2
 8003b66:	d11a      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b68:	4b49      	ldr	r3, [pc, #292]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b48      	ldr	r3, [pc, #288]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b6e:	2180      	movs	r1, #128	; 0x80
 8003b70:	0049      	lsls	r1, r1, #1
 8003b72:	430a      	orrs	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fe ff39 	bl	80029ec <HAL_GetTick>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fe ff34 	bl	80029ec <HAL_GetTick>
 8003b84:	0002      	movs	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e077      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ba0:	6a1a      	ldr	r2, [r3, #32]
 8003ba2:	23c0      	movs	r3, #192	; 0xc0
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d034      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	23c0      	movs	r3, #192	; 0xc0
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d02c      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	4b2f      	ldr	r3, [pc, #188]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0249      	lsls	r1, r1, #9
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd8:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bde:	492e      	ldr	r1, [pc, #184]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003be4:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fefb 	bl	80029ec <HAL_GetTick>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	e009      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fe fef6 	bl	80029ec <HAL_GetTick>
 8003c00:	0002      	movs	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	4a25      	ldr	r2, [pc, #148]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e038      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	2202      	movs	r2, #2
 8003c16:	4013      	ands	r3, r2
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c2e:	2317      	movs	r3, #23
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d105      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c38:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c3e:	4918      	ldr	r1, [pc, #96]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	2203      	movs	r2, #3
 8003c54:	4393      	bics	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2220      	movs	r2, #32
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	2210      	movs	r2, #16
 8003c72:	4393      	bics	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b006      	add	sp, #24
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
 8003c94:	fffffcff 	.word	0xfffffcff
 8003c98:	fffeffff 	.word	0xfffeffff
 8003c9c:	00001388 	.word	0x00001388
 8003ca0:	efffffff 	.word	0xefffffff

08003ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e042      	b.n	8003d3c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	223d      	movs	r2, #61	; 0x3d
 8003cba:	5c9b      	ldrb	r3, [r3, r2]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d107      	bne.n	8003cd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	223c      	movs	r2, #60	; 0x3c
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7fe fc0b 	bl	80024e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	223d      	movs	r2, #61	; 0x3d
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	0010      	movs	r0, r2
 8003ce6:	f000 f9dd 	bl	80040a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2246      	movs	r2, #70	; 0x46
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	223e      	movs	r2, #62	; 0x3e
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	223f      	movs	r2, #63	; 0x3f
 8003cfe:	2101      	movs	r1, #1
 8003d00:	5499      	strb	r1, [r3, r2]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2240      	movs	r2, #64	; 0x40
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2241      	movs	r2, #65	; 0x41
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2242      	movs	r2, #66	; 0x42
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2243      	movs	r2, #67	; 0x43
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2244      	movs	r2, #68	; 0x44
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2245      	movs	r2, #69	; 0x45
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	223d      	movs	r2, #61	; 0x3d
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	223d      	movs	r2, #61	; 0x3d
 8003d50:	5c9b      	ldrb	r3, [r3, r2]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d001      	beq.n	8003d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e035      	b.n	8003dc8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	223d      	movs	r2, #61	; 0x3d
 8003d60:	2102      	movs	r1, #2
 8003d62:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	430a      	orrs	r2, r1
 8003d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <HAL_TIM_Base_Start_IT+0x8c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <HAL_TIM_Base_Start_IT+0x4e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <HAL_TIM_Base_Start_IT+0x90>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <HAL_TIM_Base_Start_IT+0x4e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <HAL_TIM_Base_Start_IT+0x94>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d111      	bne.n	8003db6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2207      	movs	r2, #7
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b06      	cmp	r3, #6
 8003da2:	d010      	beq.n	8003dc6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	e007      	b.n	8003dc6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b004      	add	sp, #16
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40014000 	.word	0x40014000

08003ddc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2101      	movs	r1, #1
 8003df0:	438a      	bics	r2, r1
 8003df2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <HAL_TIM_Base_Stop_IT+0x54>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d10d      	bne.n	8003e1c <HAL_TIM_Base_Stop_IT+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <HAL_TIM_Base_Stop_IT+0x58>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d107      	bne.n	8003e1c <HAL_TIM_Base_Stop_IT+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2101      	movs	r1, #1
 8003e18:	438a      	bics	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	223d      	movs	r2, #61	; 0x3d
 8003e20:	2101      	movs	r1, #1
 8003e22:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b002      	add	sp, #8
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	00001111 	.word	0x00001111
 8003e34:	00000444 	.word	0x00000444

08003e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2202      	movs	r2, #2
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d124      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2202      	movs	r2, #2
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d11d      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2203      	movs	r2, #3
 8003e62:	4252      	negs	r2, r2
 8003e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2203      	movs	r2, #3
 8003e74:	4013      	ands	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 f8fa 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e007      	b.n	8003e92 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f000 f8ed 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 f8f9 	bl	8004084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d125      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2204      	movs	r2, #4
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d11e      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2205      	movs	r2, #5
 8003eba:	4252      	negs	r2, r2
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	23c0      	movs	r3, #192	; 0xc0
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f8cd 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003eda:	e007      	b.n	8003eec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 f8c0 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 f8cc 	bl	8004084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2208      	movs	r2, #8
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d124      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2208      	movs	r2, #8
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d11d      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2209      	movs	r2, #9
 8003f14:	4252      	negs	r2, r2
 8003f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	2203      	movs	r2, #3
 8003f26:	4013      	ands	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 f8a1 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003f32:	e007      	b.n	8003f44 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 f894 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 f8a0 	bl	8004084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2210      	movs	r2, #16
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d125      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2210      	movs	r2, #16
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d11e      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2211      	movs	r2, #17
 8003f6c:	4252      	negs	r2, r2
 8003f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2208      	movs	r2, #8
 8003f74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	23c0      	movs	r3, #192	; 0xc0
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4013      	ands	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 f874 	bl	8004074 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e007      	b.n	8003f9e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 f867 	bl	8004064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 f873 	bl	8004084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2201      	movs	r2, #1
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d108      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4252      	negs	r2, r2
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7fd fd1b 	bl	8001a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d10f      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2280      	movs	r2, #128	; 0x80
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b80      	cmp	r3, #128	; 0x80
 8003fec:	d108      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2281      	movs	r2, #129	; 0x81
 8003ff4:	4252      	negs	r2, r2
 8003ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 f8d0 	bl	80041a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	4013      	ands	r3, r2
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d10f      	bne.n	800402e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	4013      	ands	r3, r2
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d108      	bne.n	800402e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2241      	movs	r2, #65	; 0x41
 8004022:	4252      	negs	r2, r2
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0018      	movs	r0, r3
 800402a:	f000 f833 	bl	8004094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2220      	movs	r2, #32
 8004036:	4013      	ands	r3, r2
 8004038:	2b20      	cmp	r3, #32
 800403a:	d10f      	bne.n	800405c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	4013      	ands	r3, r2
 8004046:	2b20      	cmp	r3, #32
 8004048:	d108      	bne.n	800405c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2221      	movs	r2, #33	; 0x21
 8004050:	4252      	negs	r2, r2
 8004052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0018      	movs	r0, r3
 8004058:	f000 f89a 	bl	8004190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	b002      	add	sp, #8
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	b002      	add	sp, #8
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <TIM_Base_SetConfig+0xd0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0x20>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a2e      	ldr	r2, [pc, #184]	; (8004178 <TIM_Base_SetConfig+0xd4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d108      	bne.n	80040d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2270      	movs	r2, #112	; 0x70
 80040c8:	4393      	bics	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a26      	ldr	r2, [pc, #152]	; (8004174 <TIM_Base_SetConfig+0xd0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a25      	ldr	r2, [pc, #148]	; (8004178 <TIM_Base_SetConfig+0xd4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a24      	ldr	r2, [pc, #144]	; (800417c <TIM_Base_SetConfig+0xd8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a23      	ldr	r2, [pc, #140]	; (8004180 <TIM_Base_SetConfig+0xdc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <TIM_Base_SetConfig+0xe0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a21      	ldr	r2, [pc, #132]	; (8004188 <TIM_Base_SetConfig+0xe4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <TIM_Base_SetConfig+0xe8>)
 800410a:	4013      	ands	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2280      	movs	r2, #128	; 0x80
 800411c:	4393      	bics	r3, r2
 800411e:	001a      	movs	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <TIM_Base_SetConfig+0xd0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00b      	beq.n	800415e <TIM_Base_SetConfig+0xba>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a0d      	ldr	r2, [pc, #52]	; (8004180 <TIM_Base_SetConfig+0xdc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_Base_SetConfig+0xba>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <TIM_Base_SetConfig+0xe0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_Base_SetConfig+0xba>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <TIM_Base_SetConfig+0xe4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d103      	bne.n	8004166 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	615a      	str	r2, [r3, #20]
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b004      	add	sp, #16
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40000400 	.word	0x40000400
 800417c:	40002000 	.word	0x40002000
 8004180:	40014000 	.word	0x40014000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800
 800418c:	fffffcff 	.word	0xfffffcff

08004190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e044      	b.n	800424c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2278      	movs	r2, #120	; 0x78
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7fe f9cd 	bl	8002574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	; 0x24
 80041de:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2101      	movs	r1, #1
 80041ec:	438a      	bics	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 fc3a 	bl	8004a6c <UART_SetConfig>
 80041f8:	0003      	movs	r3, r0
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e024      	b.n	800424c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 fd6d 	bl	8004cec <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	490d      	ldr	r1, [pc, #52]	; (8004254 <HAL_UART_Init+0xa4>)
 800421e:	400a      	ands	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2108      	movs	r1, #8
 800422e:	438a      	bics	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2101      	movs	r1, #1
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fe05 	bl	8004e54 <UART_CheckIdleState>
 800424a:	0003      	movs	r3, r0
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b002      	add	sp, #8
 8004252:	bd80      	pop	{r7, pc}
 8004254:	fffff7ff 	.word	0xfffff7ff

08004258 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e030      	b.n	80042cc <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2224      	movs	r2, #36	; 0x24
 800426e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2101      	movs	r1, #1
 800427c:	438a      	bics	r2, r1
 800427e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2200      	movs	r2, #0
 800428e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0018      	movs	r0, r3
 800429c:	f7fe f9fa 	bl	8002694 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2284      	movs	r2, #132	; 0x84
 80042a4:	2100      	movs	r1, #0
 80042a6:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	2100      	movs	r1, #0
 80042b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2278      	movs	r2, #120	; 0x78
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d000      	beq.n	80042ee <HAL_UART_Transmit+0x1a>
 80042ec:	e08d      	b.n	800440a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_UART_Transmit+0x28>
 80042f4:	1dbb      	adds	r3, r7, #6
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e085      	b.n	800440c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	429a      	cmp	r2, r3
 800430a:	d109      	bne.n	8004320 <HAL_UART_Transmit+0x4c>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2201      	movs	r2, #1
 8004318:	4013      	ands	r3, r2
 800431a:	d001      	beq.n	8004320 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e075      	b.n	800440c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2284      	movs	r2, #132	; 0x84
 8004324:	2100      	movs	r1, #0
 8004326:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2221      	movs	r2, #33	; 0x21
 800432c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432e:	f7fe fb5d 	bl	80029ec <HAL_GetTick>
 8004332:	0003      	movs	r3, r0
 8004334:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1dba      	adds	r2, r7, #6
 800433a:	2150      	movs	r1, #80	; 0x50
 800433c:	8812      	ldrh	r2, [r2, #0]
 800433e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1dba      	adds	r2, r7, #6
 8004344:	2152      	movs	r1, #82	; 0x52
 8004346:	8812      	ldrh	r2, [r2, #0]
 8004348:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	015b      	lsls	r3, r3, #5
 8004352:	429a      	cmp	r2, r3
 8004354:	d108      	bne.n	8004368 <HAL_UART_Transmit+0x94>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e003      	b.n	8004370 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004370:	e030      	b.n	80043d4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	0013      	movs	r3, r2
 800437c:	2200      	movs	r2, #0
 800437e:	2180      	movs	r1, #128	; 0x80
 8004380:	f000 fe10 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004384:	1e03      	subs	r3, r0, #0
 8004386:	d004      	beq.n	8004392 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e03c      	b.n	800440c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	881a      	ldrh	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	05d2      	lsls	r2, r2, #23
 80043a2:	0dd2      	lsrs	r2, r2, #23
 80043a4:	b292      	uxth	r2, r2
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	3302      	adds	r3, #2
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e008      	b.n	80043c2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	b292      	uxth	r2, r2
 80043ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	3301      	adds	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2252      	movs	r2, #82	; 0x52
 80043c6:	5a9b      	ldrh	r3, [r3, r2]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b299      	uxth	r1, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2252      	movs	r2, #82	; 0x52
 80043d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2252      	movs	r2, #82	; 0x52
 80043d8:	5a9b      	ldrh	r3, [r3, r2]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1c8      	bne.n	8004372 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	0013      	movs	r3, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	2140      	movs	r1, #64	; 0x40
 80043ee:	f000 fdd9 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d004      	beq.n	8004400 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e005      	b.n	800440c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b008      	add	sp, #32
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	1dbb      	adds	r3, r7, #6
 8004420:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2280      	movs	r2, #128	; 0x80
 8004426:	589b      	ldr	r3, [r3, r2]
 8004428:	2b20      	cmp	r3, #32
 800442a:	d145      	bne.n	80044b8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_UART_Receive_IT+0x26>
 8004432:	1dbb      	adds	r3, r7, #6
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e03d      	b.n	80044ba <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	015b      	lsls	r3, r3, #5
 8004446:	429a      	cmp	r2, r3
 8004448:	d109      	bne.n	800445e <HAL_UART_Receive_IT+0x4a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2201      	movs	r2, #1
 8004456:	4013      	ands	r3, r2
 8004458:	d001      	beq.n	800445e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e02d      	b.n	80044ba <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	041b      	lsls	r3, r3, #16
 800446e:	4013      	ands	r3, r2
 8004470:	d019      	beq.n	80044a6 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004472:	f3ef 8310 	mrs	r3, PRIMASK
 8004476:	613b      	str	r3, [r7, #16]
  return(result);
 8004478:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f383 8810 	msr	PRIMASK, r3
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	04c9      	lsls	r1, r1, #19
 8004496:	430a      	orrs	r2, r1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	881a      	ldrh	r2, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 fde2 	bl	8005078 <UART_Start_Receive_IT>
 80044b4:	0003      	movs	r3, r0
 80044b6:	e000      	b.n	80044ba <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
  }
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b008      	add	sp, #32
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b0ab      	sub	sp, #172	; 0xac
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	22a4      	movs	r2, #164	; 0xa4
 80044d4:	18b9      	adds	r1, r7, r2
 80044d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	20a0      	movs	r0, #160	; 0xa0
 80044e0:	1839      	adds	r1, r7, r0
 80044e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	219c      	movs	r1, #156	; 0x9c
 80044ec:	1879      	adds	r1, r7, r1
 80044ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044f0:	0011      	movs	r1, r2
 80044f2:	18bb      	adds	r3, r7, r2
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a99      	ldr	r2, [pc, #612]	; (800475c <HAL_UART_IRQHandler+0x298>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	2298      	movs	r2, #152	; 0x98
 80044fc:	18bc      	adds	r4, r7, r2
 80044fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004500:	18bb      	adds	r3, r7, r2
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d114      	bne.n	8004532 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004508:	187b      	adds	r3, r7, r1
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2220      	movs	r2, #32
 800450e:	4013      	ands	r3, r2
 8004510:	d00f      	beq.n	8004532 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004512:	183b      	adds	r3, r7, r0
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2220      	movs	r2, #32
 8004518:	4013      	ands	r3, r2
 800451a:	d00a      	beq.n	8004532 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004520:	2b00      	cmp	r3, #0
 8004522:	d100      	bne.n	8004526 <HAL_UART_IRQHandler+0x62>
 8004524:	e286      	b.n	8004a34 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	0010      	movs	r0, r2
 800452e:	4798      	blx	r3
      }
      return;
 8004530:	e280      	b.n	8004a34 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004532:	2398      	movs	r3, #152	; 0x98
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d100      	bne.n	800453e <HAL_UART_IRQHandler+0x7a>
 800453c:	e114      	b.n	8004768 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800453e:	239c      	movs	r3, #156	; 0x9c
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	4013      	ands	r3, r2
 8004548:	d106      	bne.n	8004558 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800454a:	23a0      	movs	r3, #160	; 0xa0
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a83      	ldr	r2, [pc, #524]	; (8004760 <HAL_UART_IRQHandler+0x29c>)
 8004552:	4013      	ands	r3, r2
 8004554:	d100      	bne.n	8004558 <HAL_UART_IRQHandler+0x94>
 8004556:	e107      	b.n	8004768 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004558:	23a4      	movs	r3, #164	; 0xa4
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2201      	movs	r2, #1
 8004560:	4013      	ands	r3, r2
 8004562:	d012      	beq.n	800458a <HAL_UART_IRQHandler+0xc6>
 8004564:	23a0      	movs	r3, #160	; 0xa0
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	4013      	ands	r3, r2
 8004570:	d00b      	beq.n	800458a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2284      	movs	r2, #132	; 0x84
 800457e:	589b      	ldr	r3, [r3, r2]
 8004580:	2201      	movs	r2, #1
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2184      	movs	r1, #132	; 0x84
 8004588:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800458a:	23a4      	movs	r3, #164	; 0xa4
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2202      	movs	r2, #2
 8004592:	4013      	ands	r3, r2
 8004594:	d011      	beq.n	80045ba <HAL_UART_IRQHandler+0xf6>
 8004596:	239c      	movs	r3, #156	; 0x9c
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	4013      	ands	r3, r2
 80045a0:	d00b      	beq.n	80045ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2202      	movs	r2, #2
 80045a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2284      	movs	r2, #132	; 0x84
 80045ae:	589b      	ldr	r3, [r3, r2]
 80045b0:	2204      	movs	r2, #4
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2184      	movs	r1, #132	; 0x84
 80045b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045ba:	23a4      	movs	r3, #164	; 0xa4
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2204      	movs	r2, #4
 80045c2:	4013      	ands	r3, r2
 80045c4:	d011      	beq.n	80045ea <HAL_UART_IRQHandler+0x126>
 80045c6:	239c      	movs	r3, #156	; 0x9c
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2201      	movs	r2, #1
 80045ce:	4013      	ands	r3, r2
 80045d0:	d00b      	beq.n	80045ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2204      	movs	r2, #4
 80045d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2284      	movs	r2, #132	; 0x84
 80045de:	589b      	ldr	r3, [r3, r2]
 80045e0:	2202      	movs	r2, #2
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2184      	movs	r1, #132	; 0x84
 80045e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045ea:	23a4      	movs	r3, #164	; 0xa4
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2208      	movs	r2, #8
 80045f2:	4013      	ands	r3, r2
 80045f4:	d017      	beq.n	8004626 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f6:	23a0      	movs	r3, #160	; 0xa0
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2220      	movs	r2, #32
 80045fe:	4013      	ands	r3, r2
 8004600:	d105      	bne.n	800460e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004602:	239c      	movs	r3, #156	; 0x9c
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2201      	movs	r2, #1
 800460a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800460c:	d00b      	beq.n	8004626 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2208      	movs	r2, #8
 8004614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2284      	movs	r2, #132	; 0x84
 800461a:	589b      	ldr	r3, [r3, r2]
 800461c:	2208      	movs	r2, #8
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2184      	movs	r1, #132	; 0x84
 8004624:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004626:	23a4      	movs	r3, #164	; 0xa4
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	4013      	ands	r3, r2
 8004632:	d013      	beq.n	800465c <HAL_UART_IRQHandler+0x198>
 8004634:	23a0      	movs	r3, #160	; 0xa0
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	04db      	lsls	r3, r3, #19
 800463e:	4013      	ands	r3, r2
 8004640:	d00c      	beq.n	800465c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2280      	movs	r2, #128	; 0x80
 8004648:	0112      	lsls	r2, r2, #4
 800464a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2284      	movs	r2, #132	; 0x84
 8004650:	589b      	ldr	r3, [r3, r2]
 8004652:	2220      	movs	r2, #32
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2184      	movs	r1, #132	; 0x84
 800465a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2284      	movs	r2, #132	; 0x84
 8004660:	589b      	ldr	r3, [r3, r2]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d100      	bne.n	8004668 <HAL_UART_IRQHandler+0x1a4>
 8004666:	e1e7      	b.n	8004a38 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004668:	23a4      	movs	r3, #164	; 0xa4
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2220      	movs	r2, #32
 8004670:	4013      	ands	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004674:	23a0      	movs	r3, #160	; 0xa0
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2220      	movs	r2, #32
 800467c:	4013      	ands	r3, r2
 800467e:	d008      	beq.n	8004692 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	0010      	movs	r0, r2
 8004690:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2284      	movs	r2, #132	; 0x84
 8004696:	589b      	ldr	r3, [r3, r2]
 8004698:	2194      	movs	r1, #148	; 0x94
 800469a:	187a      	adds	r2, r7, r1
 800469c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d004      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046ac:	187b      	adds	r3, r7, r1
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2228      	movs	r2, #40	; 0x28
 80046b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046b4:	d047      	beq.n	8004746 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 fd93 	bl	80051e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2240      	movs	r2, #64	; 0x40
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d137      	bne.n	800473c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046cc:	f3ef 8310 	mrs	r3, PRIMASK
 80046d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80046d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d4:	2090      	movs	r0, #144	; 0x90
 80046d6:	183a      	adds	r2, r7, r0
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	2301      	movs	r3, #1
 80046dc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046e0:	f383 8810 	msr	PRIMASK, r3
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2140      	movs	r1, #64	; 0x40
 80046f2:	438a      	bics	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
 80046f6:	183b      	adds	r3, r7, r0
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046fe:	f383 8810 	msr	PRIMASK, r3
}
 8004702:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <HAL_UART_IRQHandler+0x2a0>)
 8004712:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	0018      	movs	r0, r3
 800471a:	f7fe fab9 	bl	8002c90 <HAL_DMA_Abort_IT>
 800471e:	1e03      	subs	r3, r0, #0
 8004720:	d01a      	beq.n	8004758 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	0018      	movs	r0, r3
 800472e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e012      	b.n	8004758 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0018      	movs	r0, r3
 8004736:	f7fd fbfb 	bl	8001f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473a:	e00d      	b.n	8004758 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	0018      	movs	r0, r3
 8004740:	f7fd fbf6 	bl	8001f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	e008      	b.n	8004758 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0018      	movs	r0, r3
 800474a:	f7fd fbf1 	bl	8001f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2284      	movs	r2, #132	; 0x84
 8004752:	2100      	movs	r1, #0
 8004754:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004756:	e16f      	b.n	8004a38 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	46c0      	nop			; (mov r8, r8)
    return;
 800475a:	e16d      	b.n	8004a38 <HAL_UART_IRQHandler+0x574>
 800475c:	0000080f 	.word	0x0000080f
 8004760:	04000120 	.word	0x04000120
 8004764:	080052ad 	.word	0x080052ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476c:	2b01      	cmp	r3, #1
 800476e:	d000      	beq.n	8004772 <HAL_UART_IRQHandler+0x2ae>
 8004770:	e139      	b.n	80049e6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004772:	23a4      	movs	r3, #164	; 0xa4
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2210      	movs	r2, #16
 800477a:	4013      	ands	r3, r2
 800477c:	d100      	bne.n	8004780 <HAL_UART_IRQHandler+0x2bc>
 800477e:	e132      	b.n	80049e6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004780:	23a0      	movs	r3, #160	; 0xa0
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2210      	movs	r2, #16
 8004788:	4013      	ands	r3, r2
 800478a:	d100      	bne.n	800478e <HAL_UART_IRQHandler+0x2ca>
 800478c:	e12b      	b.n	80049e6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2210      	movs	r2, #16
 8004794:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2240      	movs	r2, #64	; 0x40
 800479e:	4013      	ands	r3, r2
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d000      	beq.n	80047a6 <HAL_UART_IRQHandler+0x2e2>
 80047a4:	e09f      	b.n	80048e6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	217e      	movs	r1, #126	; 0x7e
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d100      	bne.n	80047be <HAL_UART_IRQHandler+0x2fa>
 80047bc:	e13e      	b.n	8004a3c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2258      	movs	r2, #88	; 0x58
 80047c2:	5a9b      	ldrh	r3, [r3, r2]
 80047c4:	187a      	adds	r2, r7, r1
 80047c6:	8812      	ldrh	r2, [r2, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d300      	bcc.n	80047ce <HAL_UART_IRQHandler+0x30a>
 80047cc:	e136      	b.n	8004a3c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	187a      	adds	r2, r7, r1
 80047d2:	215a      	movs	r1, #90	; 0x5a
 80047d4:	8812      	ldrh	r2, [r2, #0]
 80047d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d06f      	beq.n	80048c2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e2:	f3ef 8310 	mrs	r3, PRIMASK
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ec:	2301      	movs	r3, #1
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4992      	ldr	r1, [pc, #584]	; (8004a4c <HAL_UART_IRQHandler+0x588>)
 8004804:	400a      	ands	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800480a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	f383 8810 	msr	PRIMASK, r3
}
 8004812:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800481a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	677b      	str	r3, [r7, #116]	; 0x74
 800481e:	2301      	movs	r3, #1
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2101      	movs	r1, #1
 8004836:	438a      	bics	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
 800483a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800483c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004840:	f383 8810 	msr	PRIMASK, r3
}
 8004844:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004846:	f3ef 8310 	mrs	r3, PRIMASK
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	673b      	str	r3, [r7, #112]	; 0x70
 8004850:	2301      	movs	r3, #1
 8004852:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	f383 8810 	msr	PRIMASK, r3
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2140      	movs	r1, #64	; 0x40
 8004868:	438a      	bics	r2, r1
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800486e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004872:	f383 8810 	msr	PRIMASK, r3
}
 8004876:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	2120      	movs	r1, #32
 800487e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004886:	f3ef 8310 	mrs	r3, PRIMASK
 800488a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800488c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004890:	2301      	movs	r3, #1
 8004892:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004896:	f383 8810 	msr	PRIMASK, r3
}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2110      	movs	r1, #16
 80048a8:	438a      	bics	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b2:	f383 8810 	msr	PRIMASK, r3
}
 80048b6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048bc:	0018      	movs	r0, r3
 80048be:	f7fe f9af 	bl	8002c20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2258      	movs	r2, #88	; 0x58
 80048cc:	5a9a      	ldrh	r2, [r3, r2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	215a      	movs	r1, #90	; 0x5a
 80048d2:	5a5b      	ldrh	r3, [r3, r1]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0011      	movs	r1, r2
 80048de:	0018      	movs	r0, r3
 80048e0:	f000 f8b8 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048e4:	e0aa      	b.n	8004a3c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2258      	movs	r2, #88	; 0x58
 80048ea:	5a99      	ldrh	r1, [r3, r2]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	225a      	movs	r2, #90	; 0x5a
 80048f0:	5a9b      	ldrh	r3, [r3, r2]
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	208e      	movs	r0, #142	; 0x8e
 80048f6:	183b      	adds	r3, r7, r0
 80048f8:	1a8a      	subs	r2, r1, r2
 80048fa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	225a      	movs	r2, #90	; 0x5a
 8004900:	5a9b      	ldrh	r3, [r3, r2]
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d100      	bne.n	800490a <HAL_UART_IRQHandler+0x446>
 8004908:	e09a      	b.n	8004a40 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800490a:	183b      	adds	r3, r7, r0
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d100      	bne.n	8004914 <HAL_UART_IRQHandler+0x450>
 8004912:	e095      	b.n	8004a40 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004914:	f3ef 8310 	mrs	r3, PRIMASK
 8004918:	60fb      	str	r3, [r7, #12]
  return(result);
 800491a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800491c:	2488      	movs	r4, #136	; 0x88
 800491e:	193a      	adds	r2, r7, r4
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	2301      	movs	r3, #1
 8004924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f383 8810 	msr	PRIMASK, r3
}
 800492c:	46c0      	nop			; (mov r8, r8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4945      	ldr	r1, [pc, #276]	; (8004a50 <HAL_UART_IRQHandler+0x58c>)
 800493a:	400a      	ands	r2, r1
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	193b      	adds	r3, r7, r4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f383 8810 	msr	PRIMASK, r3
}
 800494a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494c:	f3ef 8310 	mrs	r3, PRIMASK
 8004950:	61bb      	str	r3, [r7, #24]
  return(result);
 8004952:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004954:	2484      	movs	r4, #132	; 0x84
 8004956:	193a      	adds	r2, r7, r4
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	2301      	movs	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	438a      	bics	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	193b      	adds	r3, r7, r4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	f383 8810 	msr	PRIMASK, r3
}
 8004982:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2280      	movs	r2, #128	; 0x80
 8004988:	2120      	movs	r1, #32
 800498a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004998:	f3ef 8310 	mrs	r3, PRIMASK
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a0:	2480      	movs	r4, #128	; 0x80
 80049a2:	193a      	adds	r2, r7, r4
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	2301      	movs	r3, #1
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	f383 8810 	msr	PRIMASK, r3
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2110      	movs	r1, #16
 80049be:	438a      	bics	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	193b      	adds	r3, r7, r4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049d6:	183b      	adds	r3, r7, r0
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	0011      	movs	r1, r2
 80049de:	0018      	movs	r0, r3
 80049e0:	f000 f838 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049e4:	e02c      	b.n	8004a40 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049e6:	23a4      	movs	r3, #164	; 0xa4
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2280      	movs	r2, #128	; 0x80
 80049ee:	4013      	ands	r3, r2
 80049f0:	d00f      	beq.n	8004a12 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049f2:	23a0      	movs	r3, #160	; 0xa0
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	4013      	ands	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01e      	beq.n	8004a44 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	0010      	movs	r0, r2
 8004a0e:	4798      	blx	r3
    }
    return;
 8004a10:	e018      	b.n	8004a44 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a12:	23a4      	movs	r3, #164	; 0xa4
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2240      	movs	r2, #64	; 0x40
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_UART_IRQHandler+0x582>
 8004a1e:	23a0      	movs	r3, #160	; 0xa0
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2240      	movs	r2, #64	; 0x40
 8004a26:	4013      	ands	r3, r2
 8004a28:	d00d      	beq.n	8004a46 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f000 fc54 	bl	80052da <UART_EndTransmit_IT>
    return;
 8004a32:	e008      	b.n	8004a46 <HAL_UART_IRQHandler+0x582>
      return;
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	e006      	b.n	8004a46 <HAL_UART_IRQHandler+0x582>
    return;
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	e004      	b.n	8004a46 <HAL_UART_IRQHandler+0x582>
      return;
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	e002      	b.n	8004a46 <HAL_UART_IRQHandler+0x582>
      return;
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	e000      	b.n	8004a46 <HAL_UART_IRQHandler+0x582>
    return;
 8004a44:	46c0      	nop			; (mov r8, r8)
  }

}
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b02b      	add	sp, #172	; 0xac
 8004a4a:	bd90      	pop	{r4, r7, pc}
 8004a4c:	fffffeff 	.word	0xfffffeff
 8004a50:	fffffedf 	.word	0xfffffedf

08004a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	000a      	movs	r2, r1
 8004a5e:	1cbb      	adds	r3, r7, #2
 8004a60:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b002      	add	sp, #8
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a74:	231e      	movs	r3, #30
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a8d      	ldr	r2, [pc, #564]	; (8004cd0 <UART_SetConfig+0x264>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4a88      	ldr	r2, [pc, #544]	; (8004cd4 <UART_SetConfig+0x268>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a7f      	ldr	r2, [pc, #508]	; (8004cd8 <UART_SetConfig+0x26c>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a7b      	ldr	r2, [pc, #492]	; (8004cdc <UART_SetConfig+0x270>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d127      	bne.n	8004b42 <UART_SetConfig+0xd6>
 8004af2:	4b7b      	ldr	r3, [pc, #492]	; (8004ce0 <UART_SetConfig+0x274>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	2203      	movs	r2, #3
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d00d      	beq.n	8004b1a <UART_SetConfig+0xae>
 8004afe:	d81b      	bhi.n	8004b38 <UART_SetConfig+0xcc>
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d014      	beq.n	8004b2e <UART_SetConfig+0xc2>
 8004b04:	d818      	bhi.n	8004b38 <UART_SetConfig+0xcc>
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <UART_SetConfig+0xa4>
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d00a      	beq.n	8004b24 <UART_SetConfig+0xb8>
 8004b0e:	e013      	b.n	8004b38 <UART_SetConfig+0xcc>
 8004b10:	231f      	movs	r3, #31
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e021      	b.n	8004b5e <UART_SetConfig+0xf2>
 8004b1a:	231f      	movs	r3, #31
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	2202      	movs	r2, #2
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e01c      	b.n	8004b5e <UART_SetConfig+0xf2>
 8004b24:	231f      	movs	r3, #31
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	2204      	movs	r2, #4
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e017      	b.n	8004b5e <UART_SetConfig+0xf2>
 8004b2e:	231f      	movs	r3, #31
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	2208      	movs	r2, #8
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	e012      	b.n	8004b5e <UART_SetConfig+0xf2>
 8004b38:	231f      	movs	r3, #31
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e00d      	b.n	8004b5e <UART_SetConfig+0xf2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a67      	ldr	r2, [pc, #412]	; (8004ce4 <UART_SetConfig+0x278>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d104      	bne.n	8004b56 <UART_SetConfig+0xea>
 8004b4c:	231f      	movs	r3, #31
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e003      	b.n	8004b5e <UART_SetConfig+0xf2>
 8004b56:	231f      	movs	r3, #31
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d15c      	bne.n	8004c24 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004b6a:	231f      	movs	r3, #31
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d015      	beq.n	8004ba0 <UART_SetConfig+0x134>
 8004b74:	dc18      	bgt.n	8004ba8 <UART_SetConfig+0x13c>
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d00d      	beq.n	8004b96 <UART_SetConfig+0x12a>
 8004b7a:	dc15      	bgt.n	8004ba8 <UART_SetConfig+0x13c>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <UART_SetConfig+0x11a>
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d005      	beq.n	8004b90 <UART_SetConfig+0x124>
 8004b84:	e010      	b.n	8004ba8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7fe ffa9 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	61bb      	str	r3, [r7, #24]
        break;
 8004b8e:	e012      	b.n	8004bb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b90:	4b55      	ldr	r3, [pc, #340]	; (8004ce8 <UART_SetConfig+0x27c>)
 8004b92:	61bb      	str	r3, [r7, #24]
        break;
 8004b94:	e00f      	b.n	8004bb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b96:	f7fe ff3f 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	61bb      	str	r3, [r7, #24]
        break;
 8004b9e:	e00a      	b.n	8004bb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba0:	2380      	movs	r3, #128	; 0x80
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	61bb      	str	r3, [r7, #24]
        break;
 8004ba6:	e006      	b.n	8004bb6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bac:	231e      	movs	r3, #30
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
        break;
 8004bb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d100      	bne.n	8004bbe <UART_SetConfig+0x152>
 8004bbc:	e07a      	b.n	8004cb4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	005a      	lsls	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	18d2      	adds	r2, r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	0019      	movs	r1, r3
 8004bd0:	0010      	movs	r0, r2
 8004bd2:	f7fb fa99 	bl	8000108 <__udivsi3>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b0f      	cmp	r3, #15
 8004bde:	d91c      	bls.n	8004c1a <UART_SetConfig+0x1ae>
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	025b      	lsls	r3, r3, #9
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d217      	bcs.n	8004c1a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	200e      	movs	r0, #14
 8004bf0:	183b      	adds	r3, r7, r0
 8004bf2:	210f      	movs	r1, #15
 8004bf4:	438a      	bics	r2, r1
 8004bf6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2207      	movs	r2, #7
 8004c00:	4013      	ands	r3, r2
 8004c02:	b299      	uxth	r1, r3
 8004c04:	183b      	adds	r3, r7, r0
 8004c06:	183a      	adds	r2, r7, r0
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	183a      	adds	r2, r7, r0
 8004c14:	8812      	ldrh	r2, [r2, #0]
 8004c16:	60da      	str	r2, [r3, #12]
 8004c18:	e04c      	b.n	8004cb4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1a:	231e      	movs	r3, #30
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e047      	b.n	8004cb4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c24:	231f      	movs	r3, #31
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d015      	beq.n	8004c5a <UART_SetConfig+0x1ee>
 8004c2e:	dc18      	bgt.n	8004c62 <UART_SetConfig+0x1f6>
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d00d      	beq.n	8004c50 <UART_SetConfig+0x1e4>
 8004c34:	dc15      	bgt.n	8004c62 <UART_SetConfig+0x1f6>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <UART_SetConfig+0x1d4>
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d005      	beq.n	8004c4a <UART_SetConfig+0x1de>
 8004c3e:	e010      	b.n	8004c62 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fe ff4c 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8004c44:	0003      	movs	r3, r0
 8004c46:	61bb      	str	r3, [r7, #24]
        break;
 8004c48:	e012      	b.n	8004c70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <UART_SetConfig+0x27c>)
 8004c4c:	61bb      	str	r3, [r7, #24]
        break;
 8004c4e:	e00f      	b.n	8004c70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c50:	f7fe fee2 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8004c54:	0003      	movs	r3, r0
 8004c56:	61bb      	str	r3, [r7, #24]
        break;
 8004c58:	e00a      	b.n	8004c70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	61bb      	str	r3, [r7, #24]
        break;
 8004c60:	e006      	b.n	8004c70 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c66:	231e      	movs	r3, #30
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
        break;
 8004c6e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01e      	beq.n	8004cb4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	085a      	lsrs	r2, r3, #1
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	18d2      	adds	r2, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	0019      	movs	r1, r3
 8004c86:	0010      	movs	r0, r2
 8004c88:	f7fb fa3e 	bl	8000108 <__udivsi3>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b0f      	cmp	r3, #15
 8004c94:	d90a      	bls.n	8004cac <UART_SetConfig+0x240>
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	025b      	lsls	r3, r3, #9
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d205      	bcs.n	8004cac <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	e003      	b.n	8004cb4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004cac:	231e      	movs	r3, #30
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004cc0:	231e      	movs	r3, #30
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	781b      	ldrb	r3, [r3, #0]
}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b008      	add	sp, #32
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	ffff69f3 	.word	0xffff69f3
 8004cd4:	ffffcfff 	.word	0xffffcfff
 8004cd8:	fffff4ff 	.word	0xfffff4ff
 8004cdc:	40013800 	.word	0x40013800
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40004400 	.word	0x40004400
 8004ce8:	007a1200 	.word	0x007a1200

08004cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <UART_AdvFeatureConfig+0x144>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	0019      	movs	r1, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4a43      	ldr	r2, [pc, #268]	; (8004e34 <UART_AdvFeatureConfig+0x148>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a3b      	ldr	r2, [pc, #236]	; (8004e38 <UART_AdvFeatureConfig+0x14c>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2208      	movs	r2, #8
 8004d60:	4013      	ands	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4a34      	ldr	r2, [pc, #208]	; (8004e3c <UART_AdvFeatureConfig+0x150>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	0019      	movs	r1, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2210      	movs	r2, #16
 8004d82:	4013      	ands	r3, r2
 8004d84:	d00b      	beq.n	8004d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <UART_AdvFeatureConfig+0x154>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	0019      	movs	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2220      	movs	r2, #32
 8004da4:	4013      	ands	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <UART_AdvFeatureConfig+0x158>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	2240      	movs	r2, #64	; 0x40
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d01d      	beq.n	8004e06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <UART_AdvFeatureConfig+0x15c>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	035b      	lsls	r3, r3, #13
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d10b      	bne.n	8004e06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <UART_AdvFeatureConfig+0x160>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2280      	movs	r2, #128	; 0x80
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <UART_AdvFeatureConfig+0x164>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
  }
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	fffdffff 	.word	0xfffdffff
 8004e34:	fffeffff 	.word	0xfffeffff
 8004e38:	fffbffff 	.word	0xfffbffff
 8004e3c:	ffff7fff 	.word	0xffff7fff
 8004e40:	ffffefff 	.word	0xffffefff
 8004e44:	ffffdfff 	.word	0xffffdfff
 8004e48:	ffefffff 	.word	0xffefffff
 8004e4c:	ff9fffff 	.word	0xff9fffff
 8004e50:	fff7ffff 	.word	0xfff7ffff

08004e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b092      	sub	sp, #72	; 0x48
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2284      	movs	r2, #132	; 0x84
 8004e60:	2100      	movs	r1, #0
 8004e62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e64:	f7fd fdc2 	bl	80029ec <HAL_GetTick>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2208      	movs	r2, #8
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d12c      	bne.n	8004ed4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7c:	2280      	movs	r2, #128	; 0x80
 8004e7e:	0391      	lsls	r1, r2, #14
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4a46      	ldr	r2, [pc, #280]	; (8004f9c <UART_CheckIdleState+0x148>)
 8004e84:	9200      	str	r2, [sp, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f000 f88c 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004e8c:	1e03      	subs	r3, r0, #0
 8004e8e:	d021      	beq.n	8004ed4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e90:	f3ef 8310 	mrs	r3, PRIMASK
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2180      	movs	r1, #128	; 0x80
 8004eb2:	438a      	bics	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	f383 8810 	msr	PRIMASK, r3
}
 8004ec0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2278      	movs	r2, #120	; 0x78
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e05f      	b.n	8004f94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2204      	movs	r2, #4
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d146      	bne.n	8004f70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee4:	2280      	movs	r2, #128	; 0x80
 8004ee6:	03d1      	lsls	r1, r2, #15
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <UART_CheckIdleState+0x148>)
 8004eec:	9200      	str	r2, [sp, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f000 f858 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004ef4:	1e03      	subs	r3, r0, #0
 8004ef6:	d03b      	beq.n	8004f70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004efe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
 8004f02:	2301      	movs	r3, #1
 8004f04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4921      	ldr	r1, [pc, #132]	; (8004fa0 <UART_CheckIdleState+0x14c>)
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
 8004f34:	2301      	movs	r3, #1
 8004f36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f383 8810 	msr	PRIMASK, r3
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	438a      	bics	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	f383 8810 	msr	PRIMASK, r3
}
 8004f5a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2280      	movs	r2, #128	; 0x80
 8004f60:	2120      	movs	r1, #32
 8004f62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2278      	movs	r2, #120	; 0x78
 8004f68:	2100      	movs	r1, #0
 8004f6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e011      	b.n	8004f94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2280      	movs	r2, #128	; 0x80
 8004f7a:	2120      	movs	r1, #32
 8004f7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2278      	movs	r2, #120	; 0x78
 8004f8e:	2100      	movs	r1, #0
 8004f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b010      	add	sp, #64	; 0x40
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	01ffffff 	.word	0x01ffffff
 8004fa0:	fffffedf 	.word	0xfffffedf

08004fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	1dfb      	adds	r3, r7, #7
 8004fb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	e04b      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	d048      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7fd fd16 	bl	80029ec <HAL_GetTick>
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e04b      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2204      	movs	r2, #4
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d035      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d111      	bne.n	8005014 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f000 f8f2 	bl	80051e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2284      	movs	r2, #132	; 0x84
 8005004:	2108      	movs	r1, #8
 8005006:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2278      	movs	r2, #120	; 0x78
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e02c      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69da      	ldr	r2, [r3, #28]
 800501a:	2380      	movs	r3, #128	; 0x80
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	401a      	ands	r2, r3
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	429a      	cmp	r2, r3
 8005026:	d112      	bne.n	800504e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2280      	movs	r2, #128	; 0x80
 800502e:	0112      	lsls	r2, r2, #4
 8005030:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0018      	movs	r0, r3
 8005036:	f000 f8d5 	bl	80051e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2284      	movs	r2, #132	; 0x84
 800503e:	2120      	movs	r1, #32
 8005040:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2278      	movs	r2, #120	; 0x78
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e00f      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	4013      	ands	r3, r2
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	425a      	negs	r2, r3
 800505e:	4153      	adcs	r3, r2
 8005060:	b2db      	uxtb	r3, r3
 8005062:	001a      	movs	r2, r3
 8005064:	1dfb      	adds	r3, r7, #7
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d0a4      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b004      	add	sp, #16
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b090      	sub	sp, #64	; 0x40
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	1dbb      	adds	r3, r7, #6
 8005084:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	1dba      	adds	r2, r7, #6
 8005090:	2158      	movs	r1, #88	; 0x58
 8005092:	8812      	ldrh	r2, [r2, #0]
 8005094:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1dba      	adds	r2, r7, #6
 800509a:	215a      	movs	r1, #90	; 0x5a
 800509c:	8812      	ldrh	r2, [r2, #0]
 800509e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	015b      	lsls	r3, r3, #5
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d10d      	bne.n	80050ce <UART_Start_Receive_IT+0x56>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <UART_Start_Receive_IT+0x4c>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	225c      	movs	r2, #92	; 0x5c
 80050be:	4946      	ldr	r1, [pc, #280]	; (80051d8 <UART_Start_Receive_IT+0x160>)
 80050c0:	5299      	strh	r1, [r3, r2]
 80050c2:	e01a      	b.n	80050fa <UART_Start_Receive_IT+0x82>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	225c      	movs	r2, #92	; 0x5c
 80050c8:	21ff      	movs	r1, #255	; 0xff
 80050ca:	5299      	strh	r1, [r3, r2]
 80050cc:	e015      	b.n	80050fa <UART_Start_Receive_IT+0x82>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <UART_Start_Receive_IT+0x7a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <UART_Start_Receive_IT+0x70>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	225c      	movs	r2, #92	; 0x5c
 80050e2:	21ff      	movs	r1, #255	; 0xff
 80050e4:	5299      	strh	r1, [r3, r2]
 80050e6:	e008      	b.n	80050fa <UART_Start_Receive_IT+0x82>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	225c      	movs	r2, #92	; 0x5c
 80050ec:	217f      	movs	r1, #127	; 0x7f
 80050ee:	5299      	strh	r1, [r3, r2]
 80050f0:	e003      	b.n	80050fa <UART_Start_Receive_IT+0x82>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	225c      	movs	r2, #92	; 0x5c
 80050f6:	2100      	movs	r1, #0
 80050f8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2284      	movs	r2, #132	; 0x84
 80050fe:	2100      	movs	r1, #0
 8005100:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	2122      	movs	r1, #34	; 0x22
 8005108:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800510a:	f3ef 8310 	mrs	r3, PRIMASK
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005114:	2301      	movs	r3, #1
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	f383 8810 	msr	PRIMASK, r3
}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2101      	movs	r1, #1
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005132:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	015b      	lsls	r3, r3, #5
 8005144:	429a      	cmp	r2, r3
 8005146:	d107      	bne.n	8005158 <UART_Start_Receive_IT+0xe0>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a22      	ldr	r2, [pc, #136]	; (80051dc <UART_Start_Receive_IT+0x164>)
 8005154:	669a      	str	r2, [r3, #104]	; 0x68
 8005156:	e002      	b.n	800515e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <UART_Start_Receive_IT+0x168>)
 800515c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d019      	beq.n	800519a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005166:	f3ef 8310 	mrs	r3, PRIMASK
 800516a:	61fb      	str	r3, [r7, #28]
  return(result);
 800516c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
 8005170:	2301      	movs	r3, #1
 8005172:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2190      	movs	r1, #144	; 0x90
 8005188:	0049      	lsls	r1, r1, #1
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	e018      	b.n	80051cc <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519a:	f3ef 8310 	mrs	r3, PRIMASK
 800519e:	613b      	str	r3, [r7, #16]
  return(result);
 80051a0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80051a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2120      	movs	r1, #32
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f383 8810 	msr	PRIMASK, r3
}
 80051ca:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	0018      	movs	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b010      	add	sp, #64	; 0x40
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	000001ff 	.word	0x000001ff
 80051dc:	080054e9 	.word	0x080054e9
 80051e0:	08005331 	.word	0x08005331

080051e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	; 0x38
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ec:	f3ef 8310 	mrs	r3, PRIMASK
 80051f0:	617b      	str	r3, [r7, #20]
  return(result);
 80051f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
 80051f6:	2301      	movs	r3, #1
 80051f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f383 8810 	msr	PRIMASK, r3
}
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4926      	ldr	r1, [pc, #152]	; (80052a8 <UART_EndRxTransfer+0xc4>)
 800520e:	400a      	ands	r2, r1
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f383 8810 	msr	PRIMASK, r3
}
 800521c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521e:	f3ef 8310 	mrs	r3, PRIMASK
 8005222:	623b      	str	r3, [r7, #32]
  return(result);
 8005224:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
 8005228:	2301      	movs	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	f383 8810 	msr	PRIMASK, r3
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2101      	movs	r1, #1
 8005240:	438a      	bics	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005254:	2b01      	cmp	r3, #1
 8005256:	d118      	bne.n	800528a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005258:	f3ef 8310 	mrs	r3, PRIMASK
 800525c:	60bb      	str	r3, [r7, #8]
  return(result);
 800525e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005262:	2301      	movs	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2110      	movs	r1, #16
 800527a:	438a      	bics	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2280      	movs	r2, #128	; 0x80
 800528e:	2120      	movs	r1, #32
 8005290:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b00e      	add	sp, #56	; 0x38
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	fffffedf 	.word	0xfffffedf

080052ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	225a      	movs	r2, #90	; 0x5a
 80052be:	2100      	movs	r1, #0
 80052c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2252      	movs	r2, #82	; 0x52
 80052c6:	2100      	movs	r1, #0
 80052c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fc fe2f 	bl	8001f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b004      	add	sp, #16
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b086      	sub	sp, #24
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e2:	f3ef 8310 	mrs	r3, PRIMASK
 80052e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80052e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	2301      	movs	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2140      	movs	r1, #64	; 0x40
 8005304:	438a      	bics	r2, r1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f383 8810 	msr	PRIMASK, r3
}
 8005312:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	0018      	movs	r0, r3
 8005324:	f7fc fc78 	bl	8001c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005328:	46c0      	nop			; (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b006      	add	sp, #24
 800532e:	bd80      	pop	{r7, pc}

08005330 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b094      	sub	sp, #80	; 0x50
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005338:	204e      	movs	r0, #78	; 0x4e
 800533a:	183b      	adds	r3, r7, r0
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	215c      	movs	r1, #92	; 0x5c
 8005340:	5a52      	ldrh	r2, [r2, r1]
 8005342:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	589b      	ldr	r3, [r3, r2]
 800534a:	2b22      	cmp	r3, #34	; 0x22
 800534c:	d000      	beq.n	8005350 <UART_RxISR_8BIT+0x20>
 800534e:	e0ba      	b.n	80054c6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	214c      	movs	r1, #76	; 0x4c
 8005356:	187b      	adds	r3, r7, r1
 8005358:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800535a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800535c:	187b      	adds	r3, r7, r1
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	183b      	adds	r3, r7, r0
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b2d9      	uxtb	r1, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	400a      	ands	r2, r1
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	225a      	movs	r2, #90	; 0x5a
 8005380:	5a9b      	ldrh	r3, [r3, r2]
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b299      	uxth	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	225a      	movs	r2, #90	; 0x5a
 800538c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	225a      	movs	r2, #90	; 0x5a
 8005392:	5a9b      	ldrh	r3, [r3, r2]
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d000      	beq.n	800539c <UART_RxISR_8BIT+0x6c>
 800539a:	e09c      	b.n	80054d6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800539c:	f3ef 8310 	mrs	r3, PRIMASK
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a6:	2301      	movs	r3, #1
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	f383 8810 	msr	PRIMASK, r3
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4948      	ldr	r1, [pc, #288]	; (80054e0 <UART_RxISR_8BIT+0x1b0>)
 80053be:	400a      	ands	r2, r1
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	f383 8810 	msr	PRIMASK, r3
}
 80053cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ce:	f3ef 8310 	mrs	r3, PRIMASK
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	647b      	str	r3, [r7, #68]	; 0x44
 80053d8:	2301      	movs	r3, #1
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	f383 8810 	msr	PRIMASK, r3
}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2101      	movs	r1, #1
 80053f0:	438a      	bics	r2, r1
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	f383 8810 	msr	PRIMASK, r3
}
 80053fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2280      	movs	r2, #128	; 0x80
 8005404:	2120      	movs	r1, #32
 8005406:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	4013      	ands	r3, r2
 8005420:	d018      	beq.n	8005454 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005422:	f3ef 8310 	mrs	r3, PRIMASK
 8005426:	61bb      	str	r3, [r7, #24]
  return(result);
 8005428:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800542a:	643b      	str	r3, [r7, #64]	; 0x40
 800542c:	2301      	movs	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f383 8810 	msr	PRIMASK, r3
}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4928      	ldr	r1, [pc, #160]	; (80054e4 <UART_RxISR_8BIT+0x1b4>)
 8005444:	400a      	ands	r2, r1
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	f383 8810 	msr	PRIMASK, r3
}
 8005452:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005458:	2b01      	cmp	r3, #1
 800545a:	d12f      	bne.n	80054bc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005462:	f3ef 8310 	mrs	r3, PRIMASK
 8005466:	60fb      	str	r3, [r7, #12]
  return(result);
 8005468:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800546c:	2301      	movs	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f383 8810 	msr	PRIMASK, r3
}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2110      	movs	r1, #16
 8005484:	438a      	bics	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	2210      	movs	r2, #16
 800549c:	4013      	ands	r3, r2
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d103      	bne.n	80054aa <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2210      	movs	r2, #16
 80054a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2258      	movs	r2, #88	; 0x58
 80054ae:	5a9a      	ldrh	r2, [r3, r2]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0011      	movs	r1, r2
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7ff facd 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054ba:	e00c      	b.n	80054d6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	0018      	movs	r0, r3
 80054c0:	f7fc fc2a 	bl	8001d18 <HAL_UART_RxCpltCallback>
}
 80054c4:	e007      	b.n	80054d6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2108      	movs	r1, #8
 80054d2:	430a      	orrs	r2, r1
 80054d4:	619a      	str	r2, [r3, #24]
}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	46bd      	mov	sp, r7
 80054da:	b014      	add	sp, #80	; 0x50
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	fffffedf 	.word	0xfffffedf
 80054e4:	fbffffff 	.word	0xfbffffff

080054e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b094      	sub	sp, #80	; 0x50
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054f0:	204e      	movs	r0, #78	; 0x4e
 80054f2:	183b      	adds	r3, r7, r0
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	215c      	movs	r1, #92	; 0x5c
 80054f8:	5a52      	ldrh	r2, [r2, r1]
 80054fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	589b      	ldr	r3, [r3, r2]
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	d000      	beq.n	8005508 <UART_RxISR_16BIT+0x20>
 8005506:	e0ba      	b.n	800567e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	214c      	movs	r1, #76	; 0x4c
 800550e:	187b      	adds	r3, r7, r1
 8005510:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005512:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800551a:	187b      	adds	r3, r7, r1
 800551c:	183a      	adds	r2, r7, r0
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	8812      	ldrh	r2, [r2, #0]
 8005522:	4013      	ands	r3, r2
 8005524:	b29a      	uxth	r2, r3
 8005526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005528:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	1c9a      	adds	r2, r3, #2
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	225a      	movs	r2, #90	; 0x5a
 8005538:	5a9b      	ldrh	r3, [r3, r2]
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b299      	uxth	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	225a      	movs	r2, #90	; 0x5a
 8005544:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	225a      	movs	r2, #90	; 0x5a
 800554a:	5a9b      	ldrh	r3, [r3, r2]
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d000      	beq.n	8005554 <UART_RxISR_16BIT+0x6c>
 8005552:	e09c      	b.n	800568e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005554:	f3ef 8310 	mrs	r3, PRIMASK
 8005558:	623b      	str	r3, [r7, #32]
  return(result);
 800555a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555c:	647b      	str	r3, [r7, #68]	; 0x44
 800555e:	2301      	movs	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4948      	ldr	r1, [pc, #288]	; (8005698 <UART_RxISR_16BIT+0x1b0>)
 8005576:	400a      	ands	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	f383 8810 	msr	PRIMASK, r3
}
 8005584:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005586:	f3ef 8310 	mrs	r3, PRIMASK
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	643b      	str	r3, [r7, #64]	; 0x40
 8005590:	2301      	movs	r3, #1
 8005592:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	f383 8810 	msr	PRIMASK, r3
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2101      	movs	r1, #1
 80055a8:	438a      	bics	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	f383 8810 	msr	PRIMASK, r3
}
 80055b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2280      	movs	r2, #128	; 0x80
 80055bc:	2120      	movs	r1, #32
 80055be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	4013      	ands	r3, r2
 80055d8:	d018      	beq.n	800560c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055da:	f3ef 8310 	mrs	r3, PRIMASK
 80055de:	617b      	str	r3, [r7, #20]
  return(result);
 80055e0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e4:	2301      	movs	r3, #1
 80055e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f383 8810 	msr	PRIMASK, r3
}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4928      	ldr	r1, [pc, #160]	; (800569c <UART_RxISR_16BIT+0x1b4>)
 80055fc:	400a      	ands	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005602:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f383 8810 	msr	PRIMASK, r3
}
 800560a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	d12f      	bne.n	8005674 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561a:	f3ef 8310 	mrs	r3, PRIMASK
 800561e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005620:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005622:	63bb      	str	r3, [r7, #56]	; 0x38
 8005624:	2301      	movs	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f383 8810 	msr	PRIMASK, r3
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2110      	movs	r1, #16
 800563c:	438a      	bics	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f383 8810 	msr	PRIMASK, r3
}
 800564a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	2210      	movs	r2, #16
 8005654:	4013      	ands	r3, r2
 8005656:	2b10      	cmp	r3, #16
 8005658:	d103      	bne.n	8005662 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2210      	movs	r2, #16
 8005660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2258      	movs	r2, #88	; 0x58
 8005666:	5a9a      	ldrh	r2, [r3, r2]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	0011      	movs	r1, r2
 800566c:	0018      	movs	r0, r3
 800566e:	f7ff f9f1 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005672:	e00c      	b.n	800568e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	0018      	movs	r0, r3
 8005678:	f7fc fb4e 	bl	8001d18 <HAL_UART_RxCpltCallback>
}
 800567c:	e007      	b.n	800568e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2108      	movs	r1, #8
 800568a:	430a      	orrs	r2, r1
 800568c:	619a      	str	r2, [r3, #24]
}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	46bd      	mov	sp, r7
 8005692:	b014      	add	sp, #80	; 0x50
 8005694:	bd80      	pop	{r7, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	fffffedf 	.word	0xfffffedf
 800569c:	fbffffff 	.word	0xfbffffff

080056a0 <kfifo_reset>:
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	609a      	str	r2, [r3, #8]
}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b002      	add	sp, #8
 80056bc:	bd80      	pop	{r7, pc}

080056be <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
	return fifo->size;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
}
 80056ca:	0018      	movs	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b002      	add	sp, #8
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 80056d2:	b590      	push	{r4, r7, lr}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	1b1b      	subs	r3, r3, r4
}
 80056e4:	0018      	movs	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b003      	add	sp, #12
 80056ea:	bd90      	pop	{r4, r7, pc}

080056ec <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7ff ffe1 	bl	80056be <kfifo_size>
 80056fc:	0004      	movs	r4, r0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f7ff ffe6 	bl	80056d2 <kfifo_len>
 8005706:	0003      	movs	r3, r0
 8005708:	1ae3      	subs	r3, r4, r3
}
 800570a:	0018      	movs	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	b003      	add	sp, #12
 8005710:	bd90      	pop	{r4, r7, pc}

08005712 <__kfifo_add_out>:
/*
 * __kfifo_add_out internal helper function for updating the out offset
 */
static __inline void __kfifo_add_out(struct kfifo *fifo,
				unsigned int off)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
	fifo->out += off;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	18d2      	adds	r2, r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]
}
 8005728:	46c0      	nop			; (mov r8, r8)
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}

08005730 <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	18d2      	adds	r2, r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]
}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	46bd      	mov	sp, r7
 800574a:	b002      	add	sp, #8
 800574c:	bd80      	pop	{r7, pc}

0800574e <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	3b01      	subs	r3, #1
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	4013      	ands	r3, r2
}
 8005762:	0018      	movs	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	b002      	add	sp, #8
 8005768:	bd80      	pop	{r7, pc}

0800576a <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	0018      	movs	r0, r3
 8005786:	f7ff ff8b 	bl	80056a0 <kfifo_reset>
}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	46bd      	mov	sp, r7
 800578e:	b004      	add	sp, #16
 8005790:	bd80      	pop	{r7, pc}

08005792 <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	18d2      	adds	r2, r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	0011      	movs	r1, r2
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7ff ffce 	bl	800574e <__kfifo_off>
 80057b2:	0003      	movs	r3, r0
 80057b4:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	1ad2      	subs	r2, r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d900      	bls.n	80057c6 <__kfifo_in_data+0x34>
 80057c4:	0013      	movs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	18d3      	adds	r3, r2, r3
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 fdb8 	bl	800634a <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	18d1      	adds	r1, r2, r3
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	001a      	movs	r2, r3
 80057ec:	f000 fdad 	bl	800634a <memcpy>
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b006      	add	sp, #24
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <__kfifo_out_data>:

static __inline void __kfifo_out_data(struct kfifo *fifo,
		void *to, unsigned int len, unsigned int off)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->in index -before- we
	 * start removing bytes from the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->out + off);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	18d2      	adds	r2, r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	0011      	movs	r1, r2
 8005812:	0018      	movs	r0, r3
 8005814:	f7ff ff9b 	bl	800574e <__kfifo_off>
 8005818:	0003      	movs	r3, r0
 800581a:	603b      	str	r3, [r7, #0]

	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - off);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4293      	cmp	r3, r2
 8005828:	d900      	bls.n	800582c <__kfifo_out_data+0x34>
 800582a:	0013      	movs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
	memcpy( (char*)to, fifo->buffer + off, l);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	18d1      	adds	r1, r2, r3
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	0018      	movs	r0, r3
 800583c:	f000 fd85 	bl	800634a <memcpy>

	/* then get the rest (if any) from the beginning of the buffer */
	memcpy( (char*)to + l, fifo->buffer, len - l);
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	18d0      	adds	r0, r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	001a      	movs	r2, r3
 8005852:	f000 fd7a 	bl	800634a <memcpy>
}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	46bd      	mov	sp, r7
 800585a:	b006      	add	sp, #24
 800585c:	bd80      	pop	{r7, pc}

0800585e <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	0018      	movs	r0, r3
 800586e:	f7ff ff3d 	bl	80056ec <kfifo_avail>
 8005872:	0002      	movs	r2, r0
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4293      	cmp	r3, r2
 8005878:	d905      	bls.n	8005886 <kfifo_in+0x28>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff ff35 	bl	80056ec <kfifo_avail>
 8005882:	0003      	movs	r3, r0
 8005884:	e000      	b.n	8005888 <kfifo_in+0x2a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	2300      	movs	r3, #0
 8005892:	f7ff ff7e 	bl	8005792 <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	0011      	movs	r1, r2
 800589c:	0018      	movs	r0, r3
 800589e:	f7ff ff47 	bl	8005730 <__kfifo_add_in>
	return len;
 80058a2:	687b      	ldr	r3, [r7, #4]
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b004      	add	sp, #16
 80058aa:	bd80      	pop	{r7, pc}

080058ac <kfifo_out>:
 *
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
	len = min(kfifo_len(fifo), len);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7ff ff09 	bl	80056d2 <kfifo_len>
 80058c0:	0002      	movs	r2, r0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d905      	bls.n	80058d4 <kfifo_out+0x28>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff ff01 	bl	80056d2 <kfifo_len>
 80058d0:	0003      	movs	r3, r0
 80058d2:	e000      	b.n	80058d6 <kfifo_out+0x2a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	607b      	str	r3, [r7, #4]

	__kfifo_out_data(fifo, to, len, 0);
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	2300      	movs	r3, #0
 80058e0:	f7ff ff8a 	bl	80057f8 <__kfifo_out_data>
	__kfifo_add_out(fifo, len);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	0011      	movs	r1, r2
 80058ea:	0018      	movs	r0, r3
 80058ec:	f7ff ff11 	bl	8005712 <__kfifo_add_out>

	return len;
 80058f0:	687b      	ldr	r3, [r7, #4]
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bd80      	pop	{r7, pc}

080058fa <mq_init>:
 * 
 * @param None
 * @return struct msgQueue   
 */
void mq_init(struct msgQueue *queue)
{
 80058fa:	b590      	push	{r4, r7, lr}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
    struct msgQueue *mq = (struct msgQueue *)malloc(sizeof(struct msgQueue));
 8005902:	2388      	movs	r3, #136	; 0x88
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	0018      	movs	r0, r3
 8005908:	f000 f9b6 	bl	8005c78 <malloc>
 800590c:	0003      	movs	r3, r0
 800590e:	60bb      	str	r3, [r7, #8]
    if (mq == NULL)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <mq_init+0x20>
    {
    	queue = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	607b      	str	r3, [r7, #4]
    }
    mq->lock = 0;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
    mq->size = MSGQUEUESIZE;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2220      	movs	r2, #32
 8005924:	605a      	str	r2, [r3, #4]
    mq->head = 0;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	609a      	str	r2, [r3, #8]
    mq->tail = 0;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2200      	movs	r2, #0
 8005930:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 8005932:	230f      	movs	r3, #15
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e011      	b.n	8005960 <mq_init+0x66>
    {
        memset(&(mq->list[i]), 0, sizeof(struct msgQueue));
 800593c:	240f      	movs	r4, #15
 800593e:	193b      	adds	r3, r7, r4
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	3302      	adds	r3, #2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	18d3      	adds	r3, r2, r3
 800594a:	2288      	movs	r2, #136	; 0x88
 800594c:	0052      	lsls	r2, r2, #1
 800594e:	2100      	movs	r1, #0
 8005950:	0018      	movs	r0, r3
 8005952:	f000 fc65 	bl	8006220 <memset>
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 8005956:	193b      	adds	r3, r7, r4
 8005958:	781a      	ldrb	r2, [r3, #0]
 800595a:	193b      	adds	r3, r7, r4
 800595c:	3201      	adds	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	230f      	movs	r3, #15
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b1f      	cmp	r3, #31
 8005968:	d9e8      	bls.n	800593c <mq_init+0x42>
    }
}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	b005      	add	sp, #20
 8005972:	bd90      	pop	{r4, r7, pc}

08005974 <mq_push>:
 * @param queue 
 * @param msg 
 * @return uint32_t 
 */
uint32_t mq_push(struct msgQueue *queue, struct msg *msg)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
    if (queue == NULL || msg == NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <mq_push+0x16>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <mq_push+0x1a>
    {
        return 0;
 800598a:	2300      	movs	r3, #0
 800598c:	e02a      	b.n	80059e4 <mq_push+0x70>
    }
//    if ((queue->head - queue->tail) == MSGQUEUESIZE - 1)
//    {
//        queue->head -= MSGQUEUESIZE - 1;
//    }
    if (queue->head >= MSGQUEUESIZE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b1f      	cmp	r3, #31
 8005994:	d905      	bls.n	80059a2 <mq_push+0x2e>
    {
    	queue->head -= MSGQUEUESIZE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	3b20      	subs	r3, #32
 800599c:	001a      	movs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
    }

    uint8_t index = queue->head & (MSGQUEUESIZE - 1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	200f      	movs	r0, #15
 80059aa:	183b      	adds	r3, r7, r0
 80059ac:	211f      	movs	r1, #31
 80059ae:	400a      	ands	r2, r1
 80059b0:	701a      	strb	r2, [r3, #0]
    queue->list[index].type = msg->type;
 80059b2:	183b      	adds	r3, r7, r0
 80059b4:	781a      	ldrb	r2, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6819      	ldr	r1, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3202      	adds	r2, #2
 80059be:	00d2      	lsls	r2, r2, #3
 80059c0:	50d1      	str	r1, [r2, r3]
    queue->list[index].data = msg->data;
 80059c2:	183b      	adds	r3, r7, r0
 80059c4:	7818      	ldrb	r0, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	1c83      	adds	r3, r0, #2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	18cb      	adds	r3, r1, r3
 80059d2:	3304      	adds	r3, #4
 80059d4:	601a      	str	r2, [r3, #0]
    queue->head++;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	609a      	str	r2, [r3, #8]

    return queue->head;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
}
 80059e4:	0018      	movs	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b004      	add	sp, #16
 80059ea:	bd80      	pop	{r7, pc}

080059ec <mq_pop>:
 * 
 * @param queue 
 * @return struct msg* 
 */
struct msg *mq_pop(struct msgQueue *queue)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <mq_pop+0x12>
    {
        return NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e022      	b.n	8005a44 <mq_pop+0x58>
    }

    if (queue->head == queue->tail)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d101      	bne.n	8005a0e <mq_pop+0x22>
    {
        return NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e01a      	b.n	8005a44 <mq_pop+0x58>
    }
    
    uint8_t index = queue->tail & (MSGQUEUESIZE - 1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	230f      	movs	r3, #15
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	211f      	movs	r1, #31
 8005a1a:	400a      	ands	r2, r1
 8005a1c:	701a      	strb	r2, [r3, #0]
    queue->tail++;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
    if (queue->tail == MSGQUEUESIZE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d102      	bne.n	8005a36 <mq_pop+0x4a>
	{
		queue->tail = 0;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	60da      	str	r2, [r3, #12]
	}
    return &(queue->list[index]);
 8005a36:	230f      	movs	r3, #15
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	18d3      	adds	r3, r2, r3
}
 8005a44:	0018      	movs	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b004      	add	sp, #16
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <stateM_init>:
static struct transition *getTransition( struct stateMachine *stateMachine,
      struct state *state, struct event *const event );

void stateM_init( struct stateMachine *fsm,
      struct state *initialState, struct state *errorState )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
   if ( !fsm )
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <stateM_init+0x26>
      return;

   fsm->currentState = initialState;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	601a      	str	r2, [r3, #0]
   fsm->previousState = NULL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	605a      	str	r2, [r3, #4]
   fsm->errorState = errorState;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	e000      	b.n	8005a74 <stateM_init+0x28>
      return;
 8005a72:	46c0      	nop			; (mov r8, r8)
}
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b004      	add	sp, #16
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <stateM_handleEvent>:

int stateM_handleEvent( struct stateMachine *fsm,
      struct event *event )
{
 8005a7a:	b590      	push	{r4, r7, lr}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
   if ( !fsm || !event )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <stateM_handleEvent+0x16>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <stateM_handleEvent+0x1c>
      return stateM_errArg;
 8005a90:	2302      	movs	r3, #2
 8005a92:	425b      	negs	r3, r3
 8005a94:	e093      	b.n	8005bbe <stateM_handleEvent+0x144>

   if ( !fsm->currentState )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <stateM_handleEvent+0x36>
   {
      goToErrorState( fsm, event );
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	0011      	movs	r1, r2
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 f88e 	bl	8005bc6 <goToErrorState>
      return stateM_errorStateReached;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	425b      	negs	r3, r3
 8005aae:	e086      	b.n	8005bbe <stateM_handleEvent+0x144>
   }

   if ( !fsm->currentState->numTransitions )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <stateM_handleEvent+0x44>
      return stateM_noStateChange;
 8005aba:	2302      	movs	r3, #2
 8005abc:	e07f      	b.n	8005bbe <stateM_handleEvent+0x144>

   struct state *nextState = fsm->currentState;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]
   do {
      struct transition *transition = getTransition( fsm, nextState, event );
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f000 f89e 	bl	8005c0c <getTransition>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	60bb      	str	r3, [r7, #8]

      /* If there were no transitions for the given event for the current
       * state, check if there are any transitions for any of the parent
       * states (if any): */
      if ( !transition )
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <stateM_handleEvent+0x68>
      {
         nextState = nextState->parentState;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]
         continue;
 8005ae0:	e069      	b.n	8005bb6 <stateM_handleEvent+0x13c>
      }

      /* A transition must have a next state defined. If the user has not
       * defined the next state, go to error state: */
      if ( !transition->nextState )
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d108      	bne.n	8005afc <stateM_handleEvent+0x82>
      {
         goToErrorState( fsm, event );
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	0011      	movs	r1, r2
 8005af0:	0018      	movs	r0, r3
 8005af2:	f000 f868 	bl	8005bc6 <goToErrorState>
         return stateM_errorStateReached;
 8005af6:	2301      	movs	r3, #1
 8005af8:	425b      	negs	r3, r3
 8005afa:	e060      	b.n	8005bbe <stateM_handleEvent+0x144>
      }

      nextState = transition->nextState;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	60fb      	str	r3, [r7, #12]

      /* If the new state is a parent state, enter its entry state (if it has
       * one). Step down through the whole family tree until a state without
       * an entry state is found: */
      while ( nextState->entryState )
 8005b02:	e002      	b.n	8005b0a <stateM_handleEvent+0x90>
         nextState = nextState->entryState;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f8      	bne.n	8005b04 <stateM_handleEvent+0x8a>

      /* Run exit action only if the current state is left (only if it does
       * not return to itself): */
      if ( nextState != fsm->currentState && fsm->currentState->exitAction )
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d00d      	beq.n	8005b38 <stateM_handleEvent+0xbe>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <stateM_handleEvent+0xbe>
         fsm->currentState->exitAction( fsm->currentState->data, event );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	0018      	movs	r0, r3
 8005b36:	4790      	blx	r2

      /* Run transition action (if any): */
      if ( transition->action )
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <stateM_handleEvent+0xda>
         transition->action( fsm->currentState->data, event, nextState->
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	68dc      	ldr	r4, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6918      	ldr	r0, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691a      	ldr	r2, [r3, #16]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	0019      	movs	r1, r3
 8005b52:	47a0      	blx	r4
               data );

      /* Call the new state's entry action if it has any (only if state does
       * not return to itself): */
      if ( nextState != fsm->currentState && nextState->entryAction )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d00a      	beq.n	8005b74 <stateM_handleEvent+0xfa>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d006      	beq.n	8005b74 <stateM_handleEvent+0xfa>
         nextState->entryAction( nextState->data, event );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	0018      	movs	r0, r3
 8005b72:	4790      	blx	r2

      fsm->previousState = fsm->currentState;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]
      fsm->currentState = nextState;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	601a      	str	r2, [r3, #0]
      
      /* If the state returned to itself: */
      if ( fsm->currentState == fsm->previousState )
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d101      	bne.n	8005b92 <stateM_handleEvent+0x118>
         return stateM_stateLoopSelf;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e015      	b.n	8005bbe <stateM_handleEvent+0x144>

      if ( fsm->currentState == fsm->errorState )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d102      	bne.n	8005ba4 <stateM_handleEvent+0x12a>
         return stateM_errorStateReached;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	425b      	negs	r3, r3
 8005ba2:	e00c      	b.n	8005bbe <stateM_handleEvent+0x144>

      /* If the new state is a final state, notify user that the state
       * machine has stopped: */
      if ( !fsm->currentState->numTransitions )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <stateM_handleEvent+0x138>
         return stateM_finalStateReached;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e005      	b.n	8005bbe <stateM_handleEvent+0x144>

      return stateM_stateChanged;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e003      	b.n	8005bbe <stateM_handleEvent+0x144>
   } while ( nextState );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d183      	bne.n	8005ac4 <stateM_handleEvent+0x4a>

   return stateM_noStateChange;
 8005bbc:	2302      	movs	r3, #2
}
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	b005      	add	sp, #20
 8005bc4:	bd90      	pop	{r4, r7, pc}

08005bc6 <goToErrorState>:
}


static void goToErrorState( struct stateMachine *fsm,
      struct event *const event )
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
   fsm->previousState = fsm->currentState;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]
   fsm->currentState = fsm->errorState;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]

   if ( fsm->currentState && fsm->currentState->entryAction )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00d      	beq.n	8005c04 <goToErrorState+0x3e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <goToErrorState+0x3e>
      fsm->currentState->entryAction( fsm->currentState->data, event );
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	0018      	movs	r0, r3
 8005c02:	4790      	blx	r2
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <getTransition>:

static struct transition *getTransition( struct stateMachine *fsm,
      struct state *state, struct event *const event )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
   size_t i;

   for ( i = 0; i < state->numTransitions; ++i )
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e022      	b.n	8005c64 <getTransition+0x58>
   {
      struct transition *t = &state->transitions[ i ];
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6899      	ldr	r1, [r3, #8]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	0013      	movs	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	189b      	adds	r3, r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	18cb      	adds	r3, r1, r3
 8005c2e:	613b      	str	r3, [r7, #16]

      /* A transition for the given event has been found: */
      if ( t->eventType == event->type )
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d110      	bne.n	8005c5e <getTransition+0x52>
      {
         if ( !t->guard )
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <getTransition+0x3c>
            return t;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	e013      	b.n	8005c70 <getTransition+0x64>
         /* If transition is guarded, ensure that the condition is held: */
         else if ( t->guard( t->condition, event ) )
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	0018      	movs	r0, r3
 8005c54:	4790      	blx	r2
 8005c56:	1e03      	subs	r3, r0, #0
 8005c58:	d001      	beq.n	8005c5e <getTransition+0x52>
            return t;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	e008      	b.n	8005c70 <getTransition+0x64>
   for ( i = 0; i < state->numTransitions; ++i )
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	3301      	adds	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3d7      	bcc.n	8005c1e <getTransition+0x12>
      }
   }

   /* No transitions found for given event for given state: */
   return NULL;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b006      	add	sp, #24
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <malloc>:
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	4b03      	ldr	r3, [pc, #12]	; (8005c88 <malloc+0x10>)
 8005c7c:	0001      	movs	r1, r0
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f000 f826 	bl	8005cd0 <_malloc_r>
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	20000150 	.word	0x20000150

08005c8c <sbrk_aligned>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	4e0f      	ldr	r6, [pc, #60]	; (8005ccc <sbrk_aligned+0x40>)
 8005c90:	000d      	movs	r5, r1
 8005c92:	6831      	ldr	r1, [r6, #0]
 8005c94:	0004      	movs	r4, r0
 8005c96:	2900      	cmp	r1, #0
 8005c98:	d102      	bne.n	8005ca0 <sbrk_aligned+0x14>
 8005c9a:	f000 fb03 	bl	80062a4 <_sbrk_r>
 8005c9e:	6030      	str	r0, [r6, #0]
 8005ca0:	0029      	movs	r1, r5
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f000 fafe 	bl	80062a4 <_sbrk_r>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d00a      	beq.n	8005cc2 <sbrk_aligned+0x36>
 8005cac:	2303      	movs	r3, #3
 8005cae:	1cc5      	adds	r5, r0, #3
 8005cb0:	439d      	bics	r5, r3
 8005cb2:	42a8      	cmp	r0, r5
 8005cb4:	d007      	beq.n	8005cc6 <sbrk_aligned+0x3a>
 8005cb6:	1a29      	subs	r1, r5, r0
 8005cb8:	0020      	movs	r0, r4
 8005cba:	f000 faf3 	bl	80062a4 <_sbrk_r>
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d101      	bne.n	8005cc6 <sbrk_aligned+0x3a>
 8005cc2:	2501      	movs	r5, #1
 8005cc4:	426d      	negs	r5, r5
 8005cc6:	0028      	movs	r0, r5
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	20000880 	.word	0x20000880

08005cd0 <_malloc_r>:
 8005cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	1ccb      	adds	r3, r1, #3
 8005cd6:	4393      	bics	r3, r2
 8005cd8:	3308      	adds	r3, #8
 8005cda:	0006      	movs	r6, r0
 8005cdc:	001f      	movs	r7, r3
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	d238      	bcs.n	8005d54 <_malloc_r+0x84>
 8005ce2:	270c      	movs	r7, #12
 8005ce4:	42b9      	cmp	r1, r7
 8005ce6:	d837      	bhi.n	8005d58 <_malloc_r+0x88>
 8005ce8:	0030      	movs	r0, r6
 8005cea:	f000 f873 	bl	8005dd4 <__malloc_lock>
 8005cee:	4b38      	ldr	r3, [pc, #224]	; (8005dd0 <_malloc_r+0x100>)
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	001c      	movs	r4, r3
 8005cf6:	2c00      	cmp	r4, #0
 8005cf8:	d133      	bne.n	8005d62 <_malloc_r+0x92>
 8005cfa:	0039      	movs	r1, r7
 8005cfc:	0030      	movs	r0, r6
 8005cfe:	f7ff ffc5 	bl	8005c8c <sbrk_aligned>
 8005d02:	0004      	movs	r4, r0
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d15e      	bne.n	8005dc6 <_malloc_r+0xf6>
 8005d08:	9b00      	ldr	r3, [sp, #0]
 8005d0a:	681c      	ldr	r4, [r3, #0]
 8005d0c:	0025      	movs	r5, r4
 8005d0e:	2d00      	cmp	r5, #0
 8005d10:	d14e      	bne.n	8005db0 <_malloc_r+0xe0>
 8005d12:	2c00      	cmp	r4, #0
 8005d14:	d051      	beq.n	8005dba <_malloc_r+0xea>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	0029      	movs	r1, r5
 8005d1a:	18e3      	adds	r3, r4, r3
 8005d1c:	0030      	movs	r0, r6
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	f000 fac0 	bl	80062a4 <_sbrk_r>
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	4283      	cmp	r3, r0
 8005d28:	d147      	bne.n	8005dba <_malloc_r+0xea>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	0030      	movs	r0, r6
 8005d2e:	1aff      	subs	r7, r7, r3
 8005d30:	0039      	movs	r1, r7
 8005d32:	f7ff ffab 	bl	8005c8c <sbrk_aligned>
 8005d36:	3001      	adds	r0, #1
 8005d38:	d03f      	beq.n	8005dba <_malloc_r+0xea>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	19db      	adds	r3, r3, r7
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	9b00      	ldr	r3, [sp, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d040      	beq.n	8005dca <_malloc_r+0xfa>
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	42a2      	cmp	r2, r4
 8005d4c:	d133      	bne.n	8005db6 <_malloc_r+0xe6>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	605a      	str	r2, [r3, #4]
 8005d52:	e014      	b.n	8005d7e <_malloc_r+0xae>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	dac5      	bge.n	8005ce4 <_malloc_r+0x14>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	2500      	movs	r5, #0
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	0028      	movs	r0, r5
 8005d60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d62:	6821      	ldr	r1, [r4, #0]
 8005d64:	1bc9      	subs	r1, r1, r7
 8005d66:	d420      	bmi.n	8005daa <_malloc_r+0xda>
 8005d68:	290b      	cmp	r1, #11
 8005d6a:	d918      	bls.n	8005d9e <_malloc_r+0xce>
 8005d6c:	19e2      	adds	r2, r4, r7
 8005d6e:	6027      	str	r7, [r4, #0]
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	d112      	bne.n	8005d9a <_malloc_r+0xca>
 8005d74:	9b00      	ldr	r3, [sp, #0]
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	6863      	ldr	r3, [r4, #4]
 8005d7a:	6011      	str	r1, [r2, #0]
 8005d7c:	6053      	str	r3, [r2, #4]
 8005d7e:	0030      	movs	r0, r6
 8005d80:	0025      	movs	r5, r4
 8005d82:	f000 f82f 	bl	8005de4 <__malloc_unlock>
 8005d86:	2207      	movs	r2, #7
 8005d88:	350b      	adds	r5, #11
 8005d8a:	1d23      	adds	r3, r4, #4
 8005d8c:	4395      	bics	r5, r2
 8005d8e:	1aea      	subs	r2, r5, r3
 8005d90:	429d      	cmp	r5, r3
 8005d92:	d0e4      	beq.n	8005d5e <_malloc_r+0x8e>
 8005d94:	1b5b      	subs	r3, r3, r5
 8005d96:	50a3      	str	r3, [r4, r2]
 8005d98:	e7e1      	b.n	8005d5e <_malloc_r+0x8e>
 8005d9a:	605a      	str	r2, [r3, #4]
 8005d9c:	e7ec      	b.n	8005d78 <_malloc_r+0xa8>
 8005d9e:	6862      	ldr	r2, [r4, #4]
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	d1d5      	bne.n	8005d50 <_malloc_r+0x80>
 8005da4:	9b00      	ldr	r3, [sp, #0]
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e7e9      	b.n	8005d7e <_malloc_r+0xae>
 8005daa:	0023      	movs	r3, r4
 8005dac:	6864      	ldr	r4, [r4, #4]
 8005dae:	e7a2      	b.n	8005cf6 <_malloc_r+0x26>
 8005db0:	002c      	movs	r4, r5
 8005db2:	686d      	ldr	r5, [r5, #4]
 8005db4:	e7ab      	b.n	8005d0e <_malloc_r+0x3e>
 8005db6:	0013      	movs	r3, r2
 8005db8:	e7c4      	b.n	8005d44 <_malloc_r+0x74>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	0030      	movs	r0, r6
 8005dbe:	6033      	str	r3, [r6, #0]
 8005dc0:	f000 f810 	bl	8005de4 <__malloc_unlock>
 8005dc4:	e7cb      	b.n	8005d5e <_malloc_r+0x8e>
 8005dc6:	6027      	str	r7, [r4, #0]
 8005dc8:	e7d9      	b.n	8005d7e <_malloc_r+0xae>
 8005dca:	605b      	str	r3, [r3, #4]
 8005dcc:	deff      	udf	#255	; 0xff
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	2000087c 	.word	0x2000087c

08005dd4 <__malloc_lock>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	4802      	ldr	r0, [pc, #8]	; (8005de0 <__malloc_lock+0xc>)
 8005dd8:	f000 fab5 	bl	8006346 <__retarget_lock_acquire_recursive>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	200009c4 	.word	0x200009c4

08005de4 <__malloc_unlock>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4802      	ldr	r0, [pc, #8]	; (8005df0 <__malloc_unlock+0xc>)
 8005de8:	f000 faae 	bl	8006348 <__retarget_lock_release_recursive>
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	200009c4 	.word	0x200009c4

08005df4 <std>:
 8005df4:	2300      	movs	r3, #0
 8005df6:	b510      	push	{r4, lr}
 8005df8:	0004      	movs	r4, r0
 8005dfa:	6003      	str	r3, [r0, #0]
 8005dfc:	6043      	str	r3, [r0, #4]
 8005dfe:	6083      	str	r3, [r0, #8]
 8005e00:	8181      	strh	r1, [r0, #12]
 8005e02:	6643      	str	r3, [r0, #100]	; 0x64
 8005e04:	81c2      	strh	r2, [r0, #14]
 8005e06:	6103      	str	r3, [r0, #16]
 8005e08:	6143      	str	r3, [r0, #20]
 8005e0a:	6183      	str	r3, [r0, #24]
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	2208      	movs	r2, #8
 8005e10:	305c      	adds	r0, #92	; 0x5c
 8005e12:	f000 fa05 	bl	8006220 <memset>
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <std+0x50>)
 8005e18:	6224      	str	r4, [r4, #32]
 8005e1a:	6263      	str	r3, [r4, #36]	; 0x24
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <std+0x54>)
 8005e1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <std+0x58>)
 8005e22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <std+0x5c>)
 8005e26:	6323      	str	r3, [r4, #48]	; 0x30
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <std+0x60>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d005      	beq.n	8005e3a <std+0x46>
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <std+0x64>)
 8005e30:	429c      	cmp	r4, r3
 8005e32:	d002      	beq.n	8005e3a <std+0x46>
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <std+0x68>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d103      	bne.n	8005e42 <std+0x4e>
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	3058      	adds	r0, #88	; 0x58
 8005e3e:	f000 fa81 	bl	8006344 <__retarget_lock_init_recursive>
 8005e42:	bd10      	pop	{r4, pc}
 8005e44:	0800603d 	.word	0x0800603d
 8005e48:	08006065 	.word	0x08006065
 8005e4c:	0800609d 	.word	0x0800609d
 8005e50:	080060c9 	.word	0x080060c9
 8005e54:	20000884 	.word	0x20000884
 8005e58:	200008ec 	.word	0x200008ec
 8005e5c:	20000954 	.word	0x20000954

08005e60 <stdio_exit_handler>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4a03      	ldr	r2, [pc, #12]	; (8005e70 <stdio_exit_handler+0x10>)
 8005e64:	4903      	ldr	r1, [pc, #12]	; (8005e74 <stdio_exit_handler+0x14>)
 8005e66:	4804      	ldr	r0, [pc, #16]	; (8005e78 <stdio_exit_handler+0x18>)
 8005e68:	f000 f86c 	bl	8005f44 <_fwalk_sglue>
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	200000f8 	.word	0x200000f8
 8005e74:	08006505 	.word	0x08006505
 8005e78:	20000104 	.word	0x20000104

08005e7c <cleanup_stdio>:
 8005e7c:	6841      	ldr	r1, [r0, #4]
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <cleanup_stdio+0x30>)
 8005e80:	b510      	push	{r4, lr}
 8005e82:	0004      	movs	r4, r0
 8005e84:	4299      	cmp	r1, r3
 8005e86:	d001      	beq.n	8005e8c <cleanup_stdio+0x10>
 8005e88:	f000 fb3c 	bl	8006504 <_fflush_r>
 8005e8c:	68a1      	ldr	r1, [r4, #8]
 8005e8e:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <cleanup_stdio+0x34>)
 8005e90:	4299      	cmp	r1, r3
 8005e92:	d002      	beq.n	8005e9a <cleanup_stdio+0x1e>
 8005e94:	0020      	movs	r0, r4
 8005e96:	f000 fb35 	bl	8006504 <_fflush_r>
 8005e9a:	68e1      	ldr	r1, [r4, #12]
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <cleanup_stdio+0x38>)
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	d002      	beq.n	8005ea8 <cleanup_stdio+0x2c>
 8005ea2:	0020      	movs	r0, r4
 8005ea4:	f000 fb2e 	bl	8006504 <_fflush_r>
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	20000884 	.word	0x20000884
 8005eb0:	200008ec 	.word	0x200008ec
 8005eb4:	20000954 	.word	0x20000954

08005eb8 <global_stdio_init.part.0>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <global_stdio_init.part.0+0x28>)
 8005ebc:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <global_stdio_init.part.0+0x2c>)
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	4809      	ldr	r0, [pc, #36]	; (8005ee8 <global_stdio_init.part.0+0x30>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f7ff ff95 	bl	8005df4 <std>
 8005eca:	2201      	movs	r2, #1
 8005ecc:	2109      	movs	r1, #9
 8005ece:	4807      	ldr	r0, [pc, #28]	; (8005eec <global_stdio_init.part.0+0x34>)
 8005ed0:	f7ff ff90 	bl	8005df4 <std>
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	2112      	movs	r1, #18
 8005ed8:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <global_stdio_init.part.0+0x38>)
 8005eda:	f7ff ff8b 	bl	8005df4 <std>
 8005ede:	bd10      	pop	{r4, pc}
 8005ee0:	200009bc 	.word	0x200009bc
 8005ee4:	08005e61 	.word	0x08005e61
 8005ee8:	20000884 	.word	0x20000884
 8005eec:	200008ec 	.word	0x200008ec
 8005ef0:	20000954 	.word	0x20000954

08005ef4 <__sfp_lock_acquire>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4802      	ldr	r0, [pc, #8]	; (8005f00 <__sfp_lock_acquire+0xc>)
 8005ef8:	f000 fa25 	bl	8006346 <__retarget_lock_acquire_recursive>
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	200009c5 	.word	0x200009c5

08005f04 <__sfp_lock_release>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	4802      	ldr	r0, [pc, #8]	; (8005f10 <__sfp_lock_release+0xc>)
 8005f08:	f000 fa1e 	bl	8006348 <__retarget_lock_release_recursive>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	200009c5 	.word	0x200009c5

08005f14 <__sinit>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	0004      	movs	r4, r0
 8005f18:	f7ff ffec 	bl	8005ef4 <__sfp_lock_acquire>
 8005f1c:	6a23      	ldr	r3, [r4, #32]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <__sinit+0x14>
 8005f22:	f7ff ffef 	bl	8005f04 <__sfp_lock_release>
 8005f26:	bd10      	pop	{r4, pc}
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <__sinit+0x28>)
 8005f2a:	6223      	str	r3, [r4, #32]
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <__sinit+0x2c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f6      	bne.n	8005f22 <__sinit+0xe>
 8005f34:	f7ff ffc0 	bl	8005eb8 <global_stdio_init.part.0>
 8005f38:	e7f3      	b.n	8005f22 <__sinit+0xe>
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	08005e7d 	.word	0x08005e7d
 8005f40:	200009bc 	.word	0x200009bc

08005f44 <_fwalk_sglue>:
 8005f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f46:	0014      	movs	r4, r2
 8005f48:	2600      	movs	r6, #0
 8005f4a:	9000      	str	r0, [sp, #0]
 8005f4c:	9101      	str	r1, [sp, #4]
 8005f4e:	68a5      	ldr	r5, [r4, #8]
 8005f50:	6867      	ldr	r7, [r4, #4]
 8005f52:	3f01      	subs	r7, #1
 8005f54:	d504      	bpl.n	8005f60 <_fwalk_sglue+0x1c>
 8005f56:	6824      	ldr	r4, [r4, #0]
 8005f58:	2c00      	cmp	r4, #0
 8005f5a:	d1f8      	bne.n	8005f4e <_fwalk_sglue+0xa>
 8005f5c:	0030      	movs	r0, r6
 8005f5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f60:	89ab      	ldrh	r3, [r5, #12]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d908      	bls.n	8005f78 <_fwalk_sglue+0x34>
 8005f66:	220e      	movs	r2, #14
 8005f68:	5eab      	ldrsh	r3, [r5, r2]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	d004      	beq.n	8005f78 <_fwalk_sglue+0x34>
 8005f6e:	0029      	movs	r1, r5
 8005f70:	9800      	ldr	r0, [sp, #0]
 8005f72:	9b01      	ldr	r3, [sp, #4]
 8005f74:	4798      	blx	r3
 8005f76:	4306      	orrs	r6, r0
 8005f78:	3568      	adds	r5, #104	; 0x68
 8005f7a:	e7ea      	b.n	8005f52 <_fwalk_sglue+0xe>

08005f7c <_puts_r>:
 8005f7c:	6a03      	ldr	r3, [r0, #32]
 8005f7e:	b570      	push	{r4, r5, r6, lr}
 8005f80:	0005      	movs	r5, r0
 8005f82:	000e      	movs	r6, r1
 8005f84:	6884      	ldr	r4, [r0, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <_puts_r+0x12>
 8005f8a:	f7ff ffc3 	bl	8005f14 <__sinit>
 8005f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f90:	07db      	lsls	r3, r3, #31
 8005f92:	d405      	bmi.n	8005fa0 <_puts_r+0x24>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	059b      	lsls	r3, r3, #22
 8005f98:	d402      	bmi.n	8005fa0 <_puts_r+0x24>
 8005f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f9c:	f000 f9d3 	bl	8006346 <__retarget_lock_acquire_recursive>
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	071b      	lsls	r3, r3, #28
 8005fa4:	d502      	bpl.n	8005fac <_puts_r+0x30>
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d11f      	bne.n	8005fec <_puts_r+0x70>
 8005fac:	0021      	movs	r1, r4
 8005fae:	0028      	movs	r0, r5
 8005fb0:	f000 f8d2 	bl	8006158 <__swsetup_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d019      	beq.n	8005fec <_puts_r+0x70>
 8005fb8:	2501      	movs	r5, #1
 8005fba:	426d      	negs	r5, r5
 8005fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fbe:	07db      	lsls	r3, r3, #31
 8005fc0:	d405      	bmi.n	8005fce <_puts_r+0x52>
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	059b      	lsls	r3, r3, #22
 8005fc6:	d402      	bmi.n	8005fce <_puts_r+0x52>
 8005fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fca:	f000 f9bd 	bl	8006348 <__retarget_lock_release_recursive>
 8005fce:	0028      	movs	r0, r5
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	3601      	adds	r6, #1
 8005fd4:	60a3      	str	r3, [r4, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da04      	bge.n	8005fe4 <_puts_r+0x68>
 8005fda:	69a2      	ldr	r2, [r4, #24]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	dc16      	bgt.n	800600e <_puts_r+0x92>
 8005fe0:	290a      	cmp	r1, #10
 8005fe2:	d014      	beq.n	800600e <_puts_r+0x92>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	7019      	strb	r1, [r3, #0]
 8005fec:	68a3      	ldr	r3, [r4, #8]
 8005fee:	7831      	ldrb	r1, [r6, #0]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	2900      	cmp	r1, #0
 8005ff4:	d1ed      	bne.n	8005fd2 <_puts_r+0x56>
 8005ff6:	60a3      	str	r3, [r4, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	da0f      	bge.n	800601c <_puts_r+0xa0>
 8005ffc:	0028      	movs	r0, r5
 8005ffe:	0022      	movs	r2, r4
 8006000:	310a      	adds	r1, #10
 8006002:	f000 f867 	bl	80060d4 <__swbuf_r>
 8006006:	250a      	movs	r5, #10
 8006008:	3001      	adds	r0, #1
 800600a:	d1d7      	bne.n	8005fbc <_puts_r+0x40>
 800600c:	e7d4      	b.n	8005fb8 <_puts_r+0x3c>
 800600e:	0022      	movs	r2, r4
 8006010:	0028      	movs	r0, r5
 8006012:	f000 f85f 	bl	80060d4 <__swbuf_r>
 8006016:	3001      	adds	r0, #1
 8006018:	d1e8      	bne.n	8005fec <_puts_r+0x70>
 800601a:	e7cd      	b.n	8005fb8 <_puts_r+0x3c>
 800601c:	250a      	movs	r5, #10
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	6022      	str	r2, [r4, #0]
 8006024:	701d      	strb	r5, [r3, #0]
 8006026:	e7c9      	b.n	8005fbc <_puts_r+0x40>

08006028 <puts>:
 8006028:	b510      	push	{r4, lr}
 800602a:	4b03      	ldr	r3, [pc, #12]	; (8006038 <puts+0x10>)
 800602c:	0001      	movs	r1, r0
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	f7ff ffa4 	bl	8005f7c <_puts_r>
 8006034:	bd10      	pop	{r4, pc}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	20000150 	.word	0x20000150

0800603c <__sread>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	000c      	movs	r4, r1
 8006040:	250e      	movs	r5, #14
 8006042:	5f49      	ldrsh	r1, [r1, r5]
 8006044:	f000 f91a 	bl	800627c <_read_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	db03      	blt.n	8006054 <__sread+0x18>
 800604c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800604e:	181b      	adds	r3, r3, r0
 8006050:	6563      	str	r3, [r4, #84]	; 0x54
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	4a02      	ldr	r2, [pc, #8]	; (8006060 <__sread+0x24>)
 8006058:	4013      	ands	r3, r2
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	e7f9      	b.n	8006052 <__sread+0x16>
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	ffffefff 	.word	0xffffefff

08006064 <__swrite>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	001f      	movs	r7, r3
 8006068:	898b      	ldrh	r3, [r1, #12]
 800606a:	0005      	movs	r5, r0
 800606c:	000c      	movs	r4, r1
 800606e:	0016      	movs	r6, r2
 8006070:	05db      	lsls	r3, r3, #23
 8006072:	d505      	bpl.n	8006080 <__swrite+0x1c>
 8006074:	230e      	movs	r3, #14
 8006076:	5ec9      	ldrsh	r1, [r1, r3]
 8006078:	2200      	movs	r2, #0
 800607a:	2302      	movs	r3, #2
 800607c:	f000 f8ea 	bl	8006254 <_lseek_r>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	4a05      	ldr	r2, [pc, #20]	; (8006098 <__swrite+0x34>)
 8006084:	0028      	movs	r0, r5
 8006086:	4013      	ands	r3, r2
 8006088:	81a3      	strh	r3, [r4, #12]
 800608a:	0032      	movs	r2, r6
 800608c:	230e      	movs	r3, #14
 800608e:	5ee1      	ldrsh	r1, [r4, r3]
 8006090:	003b      	movs	r3, r7
 8006092:	f000 f919 	bl	80062c8 <_write_r>
 8006096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006098:	ffffefff 	.word	0xffffefff

0800609c <__sseek>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	000c      	movs	r4, r1
 80060a0:	250e      	movs	r5, #14
 80060a2:	5f49      	ldrsh	r1, [r1, r5]
 80060a4:	f000 f8d6 	bl	8006254 <_lseek_r>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	1c42      	adds	r2, r0, #1
 80060ac:	d103      	bne.n	80060b6 <__sseek+0x1a>
 80060ae:	4a05      	ldr	r2, [pc, #20]	; (80060c4 <__sseek+0x28>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	bd70      	pop	{r4, r5, r6, pc}
 80060b6:	2280      	movs	r2, #128	; 0x80
 80060b8:	0152      	lsls	r2, r2, #5
 80060ba:	4313      	orrs	r3, r2
 80060bc:	81a3      	strh	r3, [r4, #12]
 80060be:	6560      	str	r0, [r4, #84]	; 0x54
 80060c0:	e7f8      	b.n	80060b4 <__sseek+0x18>
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	ffffefff 	.word	0xffffefff

080060c8 <__sclose>:
 80060c8:	b510      	push	{r4, lr}
 80060ca:	230e      	movs	r3, #14
 80060cc:	5ec9      	ldrsh	r1, [r1, r3]
 80060ce:	f000 f8af 	bl	8006230 <_close_r>
 80060d2:	bd10      	pop	{r4, pc}

080060d4 <__swbuf_r>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	0006      	movs	r6, r0
 80060d8:	000d      	movs	r5, r1
 80060da:	0014      	movs	r4, r2
 80060dc:	2800      	cmp	r0, #0
 80060de:	d004      	beq.n	80060ea <__swbuf_r+0x16>
 80060e0:	6a03      	ldr	r3, [r0, #32]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <__swbuf_r+0x16>
 80060e6:	f7ff ff15 	bl	8005f14 <__sinit>
 80060ea:	69a3      	ldr	r3, [r4, #24]
 80060ec:	60a3      	str	r3, [r4, #8]
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	071b      	lsls	r3, r3, #28
 80060f2:	d528      	bpl.n	8006146 <__swbuf_r+0x72>
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d025      	beq.n	8006146 <__swbuf_r+0x72>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6820      	ldr	r0, [r4, #0]
 80060fe:	b2ef      	uxtb	r7, r5
 8006100:	1ac0      	subs	r0, r0, r3
 8006102:	6963      	ldr	r3, [r4, #20]
 8006104:	b2ed      	uxtb	r5, r5
 8006106:	4283      	cmp	r3, r0
 8006108:	dc05      	bgt.n	8006116 <__swbuf_r+0x42>
 800610a:	0021      	movs	r1, r4
 800610c:	0030      	movs	r0, r6
 800610e:	f000 f9f9 	bl	8006504 <_fflush_r>
 8006112:	2800      	cmp	r0, #0
 8006114:	d11d      	bne.n	8006152 <__swbuf_r+0x7e>
 8006116:	68a3      	ldr	r3, [r4, #8]
 8006118:	3001      	adds	r0, #1
 800611a:	3b01      	subs	r3, #1
 800611c:	60a3      	str	r3, [r4, #8]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	6022      	str	r2, [r4, #0]
 8006124:	701f      	strb	r7, [r3, #0]
 8006126:	6963      	ldr	r3, [r4, #20]
 8006128:	4283      	cmp	r3, r0
 800612a:	d004      	beq.n	8006136 <__swbuf_r+0x62>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	07db      	lsls	r3, r3, #31
 8006130:	d507      	bpl.n	8006142 <__swbuf_r+0x6e>
 8006132:	2d0a      	cmp	r5, #10
 8006134:	d105      	bne.n	8006142 <__swbuf_r+0x6e>
 8006136:	0021      	movs	r1, r4
 8006138:	0030      	movs	r0, r6
 800613a:	f000 f9e3 	bl	8006504 <_fflush_r>
 800613e:	2800      	cmp	r0, #0
 8006140:	d107      	bne.n	8006152 <__swbuf_r+0x7e>
 8006142:	0028      	movs	r0, r5
 8006144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006146:	0021      	movs	r1, r4
 8006148:	0030      	movs	r0, r6
 800614a:	f000 f805 	bl	8006158 <__swsetup_r>
 800614e:	2800      	cmp	r0, #0
 8006150:	d0d3      	beq.n	80060fa <__swbuf_r+0x26>
 8006152:	2501      	movs	r5, #1
 8006154:	426d      	negs	r5, r5
 8006156:	e7f4      	b.n	8006142 <__swbuf_r+0x6e>

08006158 <__swsetup_r>:
 8006158:	4b30      	ldr	r3, [pc, #192]	; (800621c <__swsetup_r+0xc4>)
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	0005      	movs	r5, r0
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	000c      	movs	r4, r1
 8006162:	2800      	cmp	r0, #0
 8006164:	d004      	beq.n	8006170 <__swsetup_r+0x18>
 8006166:	6a03      	ldr	r3, [r0, #32]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <__swsetup_r+0x18>
 800616c:	f7ff fed2 	bl	8005f14 <__sinit>
 8006170:	230c      	movs	r3, #12
 8006172:	5ee2      	ldrsh	r2, [r4, r3]
 8006174:	b293      	uxth	r3, r2
 8006176:	0711      	lsls	r1, r2, #28
 8006178:	d423      	bmi.n	80061c2 <__swsetup_r+0x6a>
 800617a:	06d9      	lsls	r1, r3, #27
 800617c:	d407      	bmi.n	800618e <__swsetup_r+0x36>
 800617e:	2309      	movs	r3, #9
 8006180:	2001      	movs	r0, #1
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	3337      	adds	r3, #55	; 0x37
 8006186:	4313      	orrs	r3, r2
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	4240      	negs	r0, r0
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	075b      	lsls	r3, r3, #29
 8006190:	d513      	bpl.n	80061ba <__swsetup_r+0x62>
 8006192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006194:	2900      	cmp	r1, #0
 8006196:	d008      	beq.n	80061aa <__swsetup_r+0x52>
 8006198:	0023      	movs	r3, r4
 800619a:	3344      	adds	r3, #68	; 0x44
 800619c:	4299      	cmp	r1, r3
 800619e:	d002      	beq.n	80061a6 <__swsetup_r+0x4e>
 80061a0:	0028      	movs	r0, r5
 80061a2:	f000 f8db 	bl	800635c <_free_r>
 80061a6:	2300      	movs	r3, #0
 80061a8:	6363      	str	r3, [r4, #52]	; 0x34
 80061aa:	2224      	movs	r2, #36	; 0x24
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	4393      	bics	r3, r2
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	2300      	movs	r3, #0
 80061b4:	6063      	str	r3, [r4, #4]
 80061b6:	6923      	ldr	r3, [r4, #16]
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	2308      	movs	r3, #8
 80061bc:	89a2      	ldrh	r2, [r4, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	81a3      	strh	r3, [r4, #12]
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <__swsetup_r+0x88>
 80061c8:	21a0      	movs	r1, #160	; 0xa0
 80061ca:	2280      	movs	r2, #128	; 0x80
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	0089      	lsls	r1, r1, #2
 80061d0:	0092      	lsls	r2, r2, #2
 80061d2:	400b      	ands	r3, r1
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <__swsetup_r+0x88>
 80061d8:	0021      	movs	r1, r4
 80061da:	0028      	movs	r0, r5
 80061dc:	f000 f9e6 	bl	80065ac <__smakebuf_r>
 80061e0:	220c      	movs	r2, #12
 80061e2:	5ea3      	ldrsh	r3, [r4, r2]
 80061e4:	2001      	movs	r0, #1
 80061e6:	001a      	movs	r2, r3
 80061e8:	b299      	uxth	r1, r3
 80061ea:	4002      	ands	r2, r0
 80061ec:	4203      	tst	r3, r0
 80061ee:	d00f      	beq.n	8006210 <__swsetup_r+0xb8>
 80061f0:	2200      	movs	r2, #0
 80061f2:	60a2      	str	r2, [r4, #8]
 80061f4:	6962      	ldr	r2, [r4, #20]
 80061f6:	4252      	negs	r2, r2
 80061f8:	61a2      	str	r2, [r4, #24]
 80061fa:	2000      	movs	r0, #0
 80061fc:	6922      	ldr	r2, [r4, #16]
 80061fe:	4282      	cmp	r2, r0
 8006200:	d1c4      	bne.n	800618c <__swsetup_r+0x34>
 8006202:	0609      	lsls	r1, r1, #24
 8006204:	d5c2      	bpl.n	800618c <__swsetup_r+0x34>
 8006206:	2240      	movs	r2, #64	; 0x40
 8006208:	4313      	orrs	r3, r2
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	3801      	subs	r0, #1
 800620e:	e7bd      	b.n	800618c <__swsetup_r+0x34>
 8006210:	0788      	lsls	r0, r1, #30
 8006212:	d400      	bmi.n	8006216 <__swsetup_r+0xbe>
 8006214:	6962      	ldr	r2, [r4, #20]
 8006216:	60a2      	str	r2, [r4, #8]
 8006218:	e7ef      	b.n	80061fa <__swsetup_r+0xa2>
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	20000150 	.word	0x20000150

08006220 <memset>:
 8006220:	0003      	movs	r3, r0
 8006222:	1882      	adds	r2, r0, r2
 8006224:	4293      	cmp	r3, r2
 8006226:	d100      	bne.n	800622a <memset+0xa>
 8006228:	4770      	bx	lr
 800622a:	7019      	strb	r1, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	e7f9      	b.n	8006224 <memset+0x4>

08006230 <_close_r>:
 8006230:	2300      	movs	r3, #0
 8006232:	b570      	push	{r4, r5, r6, lr}
 8006234:	4d06      	ldr	r5, [pc, #24]	; (8006250 <_close_r+0x20>)
 8006236:	0004      	movs	r4, r0
 8006238:	0008      	movs	r0, r1
 800623a:	602b      	str	r3, [r5, #0]
 800623c:	f7fc fae9 	bl	8002812 <_close>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d103      	bne.n	800624c <_close_r+0x1c>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d000      	beq.n	800624c <_close_r+0x1c>
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	200009c0 	.word	0x200009c0

08006254 <_lseek_r>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	0004      	movs	r4, r0
 8006258:	0008      	movs	r0, r1
 800625a:	0011      	movs	r1, r2
 800625c:	001a      	movs	r2, r3
 800625e:	2300      	movs	r3, #0
 8006260:	4d05      	ldr	r5, [pc, #20]	; (8006278 <_lseek_r+0x24>)
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	f7fc faf6 	bl	8002854 <_lseek>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d103      	bne.n	8006274 <_lseek_r+0x20>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d000      	beq.n	8006274 <_lseek_r+0x20>
 8006272:	6023      	str	r3, [r4, #0]
 8006274:	bd70      	pop	{r4, r5, r6, pc}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	200009c0 	.word	0x200009c0

0800627c <_read_r>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	0004      	movs	r4, r0
 8006280:	0008      	movs	r0, r1
 8006282:	0011      	movs	r1, r2
 8006284:	001a      	movs	r2, r3
 8006286:	2300      	movs	r3, #0
 8006288:	4d05      	ldr	r5, [pc, #20]	; (80062a0 <_read_r+0x24>)
 800628a:	602b      	str	r3, [r5, #0]
 800628c:	f7fc fa88 	bl	80027a0 <_read>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d103      	bne.n	800629c <_read_r+0x20>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d000      	beq.n	800629c <_read_r+0x20>
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	bd70      	pop	{r4, r5, r6, pc}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	200009c0 	.word	0x200009c0

080062a4 <_sbrk_r>:
 80062a4:	2300      	movs	r3, #0
 80062a6:	b570      	push	{r4, r5, r6, lr}
 80062a8:	4d06      	ldr	r5, [pc, #24]	; (80062c4 <_sbrk_r+0x20>)
 80062aa:	0004      	movs	r4, r0
 80062ac:	0008      	movs	r0, r1
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	f7fc fadc 	bl	800286c <_sbrk>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d103      	bne.n	80062c0 <_sbrk_r+0x1c>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d000      	beq.n	80062c0 <_sbrk_r+0x1c>
 80062be:	6023      	str	r3, [r4, #0]
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	200009c0 	.word	0x200009c0

080062c8 <_write_r>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	0004      	movs	r4, r0
 80062cc:	0008      	movs	r0, r1
 80062ce:	0011      	movs	r1, r2
 80062d0:	001a      	movs	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	4d05      	ldr	r5, [pc, #20]	; (80062ec <_write_r+0x24>)
 80062d6:	602b      	str	r3, [r5, #0]
 80062d8:	f7fc fa7f 	bl	80027da <_write>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d103      	bne.n	80062e8 <_write_r+0x20>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d000      	beq.n	80062e8 <_write_r+0x20>
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	200009c0 	.word	0x200009c0

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	; (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	20000150 	.word	0x20000150

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	2600      	movs	r6, #0
 8006300:	4c0c      	ldr	r4, [pc, #48]	; (8006334 <__libc_init_array+0x38>)
 8006302:	4d0d      	ldr	r5, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006304:	1b64      	subs	r4, r4, r5
 8006306:	10a4      	asrs	r4, r4, #2
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	2600      	movs	r6, #0
 800630e:	f000 f9af 	bl	8006670 <_init>
 8006312:	4c0a      	ldr	r4, [pc, #40]	; (800633c <__libc_init_array+0x40>)
 8006314:	4d0a      	ldr	r5, [pc, #40]	; (8006340 <__libc_init_array+0x44>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	00b3      	lsls	r3, r6, #2
 8006322:	58eb      	ldr	r3, [r5, r3]
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	00b3      	lsls	r3, r6, #2
 800632c:	58eb      	ldr	r3, [r5, r3]
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	080068b0 	.word	0x080068b0
 8006338:	080068b0 	.word	0x080068b0
 800633c:	080068b4 	.word	0x080068b4
 8006340:	080068b0 	.word	0x080068b0

08006344 <__retarget_lock_init_recursive>:
 8006344:	4770      	bx	lr

08006346 <__retarget_lock_acquire_recursive>:
 8006346:	4770      	bx	lr

08006348 <__retarget_lock_release_recursive>:
 8006348:	4770      	bx	lr

0800634a <memcpy>:
 800634a:	2300      	movs	r3, #0
 800634c:	b510      	push	{r4, lr}
 800634e:	429a      	cmp	r2, r3
 8006350:	d100      	bne.n	8006354 <memcpy+0xa>
 8006352:	bd10      	pop	{r4, pc}
 8006354:	5ccc      	ldrb	r4, [r1, r3]
 8006356:	54c4      	strb	r4, [r0, r3]
 8006358:	3301      	adds	r3, #1
 800635a:	e7f8      	b.n	800634e <memcpy+0x4>

0800635c <_free_r>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	0005      	movs	r5, r0
 8006360:	2900      	cmp	r1, #0
 8006362:	d010      	beq.n	8006386 <_free_r+0x2a>
 8006364:	1f0c      	subs	r4, r1, #4
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	da00      	bge.n	800636e <_free_r+0x12>
 800636c:	18e4      	adds	r4, r4, r3
 800636e:	0028      	movs	r0, r5
 8006370:	f7ff fd30 	bl	8005dd4 <__malloc_lock>
 8006374:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <_free_r+0x90>)
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <_free_r+0x2c>
 800637c:	6063      	str	r3, [r4, #4]
 800637e:	6014      	str	r4, [r2, #0]
 8006380:	0028      	movs	r0, r5
 8006382:	f7ff fd2f 	bl	8005de4 <__malloc_unlock>
 8006386:	bd70      	pop	{r4, r5, r6, pc}
 8006388:	42a3      	cmp	r3, r4
 800638a:	d908      	bls.n	800639e <_free_r+0x42>
 800638c:	6820      	ldr	r0, [r4, #0]
 800638e:	1821      	adds	r1, r4, r0
 8006390:	428b      	cmp	r3, r1
 8006392:	d1f3      	bne.n	800637c <_free_r+0x20>
 8006394:	6819      	ldr	r1, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	1809      	adds	r1, r1, r0
 800639a:	6021      	str	r1, [r4, #0]
 800639c:	e7ee      	b.n	800637c <_free_r+0x20>
 800639e:	001a      	movs	r2, r3
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <_free_r+0x4e>
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	d9f9      	bls.n	800639e <_free_r+0x42>
 80063aa:	6811      	ldr	r1, [r2, #0]
 80063ac:	1850      	adds	r0, r2, r1
 80063ae:	42a0      	cmp	r0, r4
 80063b0:	d10b      	bne.n	80063ca <_free_r+0x6e>
 80063b2:	6820      	ldr	r0, [r4, #0]
 80063b4:	1809      	adds	r1, r1, r0
 80063b6:	1850      	adds	r0, r2, r1
 80063b8:	6011      	str	r1, [r2, #0]
 80063ba:	4283      	cmp	r3, r0
 80063bc:	d1e0      	bne.n	8006380 <_free_r+0x24>
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	1841      	adds	r1, r0, r1
 80063c4:	6011      	str	r1, [r2, #0]
 80063c6:	6053      	str	r3, [r2, #4]
 80063c8:	e7da      	b.n	8006380 <_free_r+0x24>
 80063ca:	42a0      	cmp	r0, r4
 80063cc:	d902      	bls.n	80063d4 <_free_r+0x78>
 80063ce:	230c      	movs	r3, #12
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	e7d5      	b.n	8006380 <_free_r+0x24>
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	1821      	adds	r1, r4, r0
 80063d8:	428b      	cmp	r3, r1
 80063da:	d103      	bne.n	80063e4 <_free_r+0x88>
 80063dc:	6819      	ldr	r1, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	1809      	adds	r1, r1, r0
 80063e2:	6021      	str	r1, [r4, #0]
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	6054      	str	r4, [r2, #4]
 80063e8:	e7ca      	b.n	8006380 <_free_r+0x24>
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	2000087c 	.word	0x2000087c

080063f0 <__sflush_r>:
 80063f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063f2:	898b      	ldrh	r3, [r1, #12]
 80063f4:	0005      	movs	r5, r0
 80063f6:	000c      	movs	r4, r1
 80063f8:	071a      	lsls	r2, r3, #28
 80063fa:	d45c      	bmi.n	80064b6 <__sflush_r+0xc6>
 80063fc:	684a      	ldr	r2, [r1, #4]
 80063fe:	2a00      	cmp	r2, #0
 8006400:	dc04      	bgt.n	800640c <__sflush_r+0x1c>
 8006402:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006404:	2a00      	cmp	r2, #0
 8006406:	dc01      	bgt.n	800640c <__sflush_r+0x1c>
 8006408:	2000      	movs	r0, #0
 800640a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800640c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800640e:	2f00      	cmp	r7, #0
 8006410:	d0fa      	beq.n	8006408 <__sflush_r+0x18>
 8006412:	2200      	movs	r2, #0
 8006414:	2080      	movs	r0, #128	; 0x80
 8006416:	682e      	ldr	r6, [r5, #0]
 8006418:	602a      	str	r2, [r5, #0]
 800641a:	001a      	movs	r2, r3
 800641c:	0140      	lsls	r0, r0, #5
 800641e:	6a21      	ldr	r1, [r4, #32]
 8006420:	4002      	ands	r2, r0
 8006422:	4203      	tst	r3, r0
 8006424:	d034      	beq.n	8006490 <__sflush_r+0xa0>
 8006426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	075b      	lsls	r3, r3, #29
 800642c:	d506      	bpl.n	800643c <__sflush_r+0x4c>
 800642e:	6863      	ldr	r3, [r4, #4]
 8006430:	1ac0      	subs	r0, r0, r3
 8006432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <__sflush_r+0x4c>
 8006438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800643a:	1ac0      	subs	r0, r0, r3
 800643c:	0002      	movs	r2, r0
 800643e:	2300      	movs	r3, #0
 8006440:	0028      	movs	r0, r5
 8006442:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006444:	6a21      	ldr	r1, [r4, #32]
 8006446:	47b8      	blx	r7
 8006448:	89a2      	ldrh	r2, [r4, #12]
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	d106      	bne.n	800645c <__sflush_r+0x6c>
 800644e:	6829      	ldr	r1, [r5, #0]
 8006450:	291d      	cmp	r1, #29
 8006452:	d82c      	bhi.n	80064ae <__sflush_r+0xbe>
 8006454:	4b2a      	ldr	r3, [pc, #168]	; (8006500 <__sflush_r+0x110>)
 8006456:	410b      	asrs	r3, r1
 8006458:	07db      	lsls	r3, r3, #31
 800645a:	d428      	bmi.n	80064ae <__sflush_r+0xbe>
 800645c:	2300      	movs	r3, #0
 800645e:	6063      	str	r3, [r4, #4]
 8006460:	6923      	ldr	r3, [r4, #16]
 8006462:	6023      	str	r3, [r4, #0]
 8006464:	04d2      	lsls	r2, r2, #19
 8006466:	d505      	bpl.n	8006474 <__sflush_r+0x84>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <__sflush_r+0x82>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d100      	bne.n	8006474 <__sflush_r+0x84>
 8006472:	6560      	str	r0, [r4, #84]	; 0x54
 8006474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006476:	602e      	str	r6, [r5, #0]
 8006478:	2900      	cmp	r1, #0
 800647a:	d0c5      	beq.n	8006408 <__sflush_r+0x18>
 800647c:	0023      	movs	r3, r4
 800647e:	3344      	adds	r3, #68	; 0x44
 8006480:	4299      	cmp	r1, r3
 8006482:	d002      	beq.n	800648a <__sflush_r+0x9a>
 8006484:	0028      	movs	r0, r5
 8006486:	f7ff ff69 	bl	800635c <_free_r>
 800648a:	2000      	movs	r0, #0
 800648c:	6360      	str	r0, [r4, #52]	; 0x34
 800648e:	e7bc      	b.n	800640a <__sflush_r+0x1a>
 8006490:	2301      	movs	r3, #1
 8006492:	0028      	movs	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	d1c6      	bne.n	8006428 <__sflush_r+0x38>
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0c3      	beq.n	8006428 <__sflush_r+0x38>
 80064a0:	2b1d      	cmp	r3, #29
 80064a2:	d001      	beq.n	80064a8 <__sflush_r+0xb8>
 80064a4:	2b16      	cmp	r3, #22
 80064a6:	d101      	bne.n	80064ac <__sflush_r+0xbc>
 80064a8:	602e      	str	r6, [r5, #0]
 80064aa:	e7ad      	b.n	8006408 <__sflush_r+0x18>
 80064ac:	89a2      	ldrh	r2, [r4, #12]
 80064ae:	2340      	movs	r3, #64	; 0x40
 80064b0:	4313      	orrs	r3, r2
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	e7a9      	b.n	800640a <__sflush_r+0x1a>
 80064b6:	690e      	ldr	r6, [r1, #16]
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	d0a5      	beq.n	8006408 <__sflush_r+0x18>
 80064bc:	680f      	ldr	r7, [r1, #0]
 80064be:	600e      	str	r6, [r1, #0]
 80064c0:	1bba      	subs	r2, r7, r6
 80064c2:	9201      	str	r2, [sp, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	079b      	lsls	r3, r3, #30
 80064c8:	d100      	bne.n	80064cc <__sflush_r+0xdc>
 80064ca:	694a      	ldr	r2, [r1, #20]
 80064cc:	60a2      	str	r2, [r4, #8]
 80064ce:	9b01      	ldr	r3, [sp, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dd99      	ble.n	8006408 <__sflush_r+0x18>
 80064d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064d6:	0032      	movs	r2, r6
 80064d8:	001f      	movs	r7, r3
 80064da:	0028      	movs	r0, r5
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	6a21      	ldr	r1, [r4, #32]
 80064e0:	47b8      	blx	r7
 80064e2:	2800      	cmp	r0, #0
 80064e4:	dc06      	bgt.n	80064f4 <__sflush_r+0x104>
 80064e6:	2340      	movs	r3, #64	; 0x40
 80064e8:	2001      	movs	r0, #1
 80064ea:	89a2      	ldrh	r2, [r4, #12]
 80064ec:	4240      	negs	r0, r0
 80064ee:	4313      	orrs	r3, r2
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	e78a      	b.n	800640a <__sflush_r+0x1a>
 80064f4:	9b01      	ldr	r3, [sp, #4]
 80064f6:	1836      	adds	r6, r6, r0
 80064f8:	1a1b      	subs	r3, r3, r0
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	e7e7      	b.n	80064ce <__sflush_r+0xde>
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	dfbffffe 	.word	0xdfbffffe

08006504 <_fflush_r>:
 8006504:	690b      	ldr	r3, [r1, #16]
 8006506:	b570      	push	{r4, r5, r6, lr}
 8006508:	0005      	movs	r5, r0
 800650a:	000c      	movs	r4, r1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <_fflush_r+0x12>
 8006510:	2500      	movs	r5, #0
 8006512:	0028      	movs	r0, r5
 8006514:	bd70      	pop	{r4, r5, r6, pc}
 8006516:	2800      	cmp	r0, #0
 8006518:	d004      	beq.n	8006524 <_fflush_r+0x20>
 800651a:	6a03      	ldr	r3, [r0, #32]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <_fflush_r+0x20>
 8006520:	f7ff fcf8 	bl	8005f14 <__sinit>
 8006524:	220c      	movs	r2, #12
 8006526:	5ea3      	ldrsh	r3, [r4, r2]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f1      	beq.n	8006510 <_fflush_r+0xc>
 800652c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800652e:	07d2      	lsls	r2, r2, #31
 8006530:	d404      	bmi.n	800653c <_fflush_r+0x38>
 8006532:	059b      	lsls	r3, r3, #22
 8006534:	d402      	bmi.n	800653c <_fflush_r+0x38>
 8006536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006538:	f7ff ff05 	bl	8006346 <__retarget_lock_acquire_recursive>
 800653c:	0028      	movs	r0, r5
 800653e:	0021      	movs	r1, r4
 8006540:	f7ff ff56 	bl	80063f0 <__sflush_r>
 8006544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006546:	0005      	movs	r5, r0
 8006548:	07db      	lsls	r3, r3, #31
 800654a:	d4e2      	bmi.n	8006512 <_fflush_r+0xe>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	059b      	lsls	r3, r3, #22
 8006550:	d4df      	bmi.n	8006512 <_fflush_r+0xe>
 8006552:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006554:	f7ff fef8 	bl	8006348 <__retarget_lock_release_recursive>
 8006558:	e7db      	b.n	8006512 <_fflush_r+0xe>
	...

0800655c <__swhatbuf_r>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	000e      	movs	r6, r1
 8006560:	001d      	movs	r5, r3
 8006562:	230e      	movs	r3, #14
 8006564:	5ec9      	ldrsh	r1, [r1, r3]
 8006566:	0014      	movs	r4, r2
 8006568:	b096      	sub	sp, #88	; 0x58
 800656a:	2900      	cmp	r1, #0
 800656c:	da0c      	bge.n	8006588 <__swhatbuf_r+0x2c>
 800656e:	89b2      	ldrh	r2, [r6, #12]
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	0011      	movs	r1, r2
 8006574:	4019      	ands	r1, r3
 8006576:	421a      	tst	r2, r3
 8006578:	d013      	beq.n	80065a2 <__swhatbuf_r+0x46>
 800657a:	2100      	movs	r1, #0
 800657c:	3b40      	subs	r3, #64	; 0x40
 800657e:	2000      	movs	r0, #0
 8006580:	6029      	str	r1, [r5, #0]
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	b016      	add	sp, #88	; 0x58
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	466a      	mov	r2, sp
 800658a:	f000 f84d 	bl	8006628 <_fstat_r>
 800658e:	2800      	cmp	r0, #0
 8006590:	dbed      	blt.n	800656e <__swhatbuf_r+0x12>
 8006592:	23f0      	movs	r3, #240	; 0xf0
 8006594:	9901      	ldr	r1, [sp, #4]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	4019      	ands	r1, r3
 800659a:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <__swhatbuf_r+0x4c>)
 800659c:	18c9      	adds	r1, r1, r3
 800659e:	424b      	negs	r3, r1
 80065a0:	4159      	adcs	r1, r3
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	e7ea      	b.n	800657e <__swhatbuf_r+0x22>
 80065a8:	ffffe000 	.word	0xffffe000

080065ac <__smakebuf_r>:
 80065ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ae:	2602      	movs	r6, #2
 80065b0:	898b      	ldrh	r3, [r1, #12]
 80065b2:	0005      	movs	r5, r0
 80065b4:	000c      	movs	r4, r1
 80065b6:	4233      	tst	r3, r6
 80065b8:	d006      	beq.n	80065c8 <__smakebuf_r+0x1c>
 80065ba:	0023      	movs	r3, r4
 80065bc:	3347      	adds	r3, #71	; 0x47
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	6123      	str	r3, [r4, #16]
 80065c2:	2301      	movs	r3, #1
 80065c4:	6163      	str	r3, [r4, #20]
 80065c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80065c8:	466a      	mov	r2, sp
 80065ca:	ab01      	add	r3, sp, #4
 80065cc:	f7ff ffc6 	bl	800655c <__swhatbuf_r>
 80065d0:	9900      	ldr	r1, [sp, #0]
 80065d2:	0007      	movs	r7, r0
 80065d4:	0028      	movs	r0, r5
 80065d6:	f7ff fb7b 	bl	8005cd0 <_malloc_r>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d108      	bne.n	80065f0 <__smakebuf_r+0x44>
 80065de:	220c      	movs	r2, #12
 80065e0:	5ea3      	ldrsh	r3, [r4, r2]
 80065e2:	059a      	lsls	r2, r3, #22
 80065e4:	d4ef      	bmi.n	80065c6 <__smakebuf_r+0x1a>
 80065e6:	2203      	movs	r2, #3
 80065e8:	4393      	bics	r3, r2
 80065ea:	431e      	orrs	r6, r3
 80065ec:	81a6      	strh	r6, [r4, #12]
 80065ee:	e7e4      	b.n	80065ba <__smakebuf_r+0xe>
 80065f0:	2380      	movs	r3, #128	; 0x80
 80065f2:	89a2      	ldrh	r2, [r4, #12]
 80065f4:	6020      	str	r0, [r4, #0]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	9b00      	ldr	r3, [sp, #0]
 80065fc:	6120      	str	r0, [r4, #16]
 80065fe:	6163      	str	r3, [r4, #20]
 8006600:	9b01      	ldr	r3, [sp, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00c      	beq.n	8006620 <__smakebuf_r+0x74>
 8006606:	0028      	movs	r0, r5
 8006608:	230e      	movs	r3, #14
 800660a:	5ee1      	ldrsh	r1, [r4, r3]
 800660c:	f000 f81e 	bl	800664c <_isatty_r>
 8006610:	2800      	cmp	r0, #0
 8006612:	d005      	beq.n	8006620 <__smakebuf_r+0x74>
 8006614:	2303      	movs	r3, #3
 8006616:	89a2      	ldrh	r2, [r4, #12]
 8006618:	439a      	bics	r2, r3
 800661a:	3b02      	subs	r3, #2
 800661c:	4313      	orrs	r3, r2
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	433b      	orrs	r3, r7
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	e7ce      	b.n	80065c6 <__smakebuf_r+0x1a>

08006628 <_fstat_r>:
 8006628:	2300      	movs	r3, #0
 800662a:	b570      	push	{r4, r5, r6, lr}
 800662c:	4d06      	ldr	r5, [pc, #24]	; (8006648 <_fstat_r+0x20>)
 800662e:	0004      	movs	r4, r0
 8006630:	0008      	movs	r0, r1
 8006632:	0011      	movs	r1, r2
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	f7fc f8f6 	bl	8002826 <_fstat>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d103      	bne.n	8006646 <_fstat_r+0x1e>
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d000      	beq.n	8006646 <_fstat_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	200009c0 	.word	0x200009c0

0800664c <_isatty_r>:
 800664c:	2300      	movs	r3, #0
 800664e:	b570      	push	{r4, r5, r6, lr}
 8006650:	4d06      	ldr	r5, [pc, #24]	; (800666c <_isatty_r+0x20>)
 8006652:	0004      	movs	r4, r0
 8006654:	0008      	movs	r0, r1
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	f7fc f8f3 	bl	8002842 <_isatty>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d103      	bne.n	8006668 <_isatty_r+0x1c>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d000      	beq.n	8006668 <_isatty_r+0x1c>
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	bd70      	pop	{r4, r5, r6, pc}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	200009c0 	.word	0x200009c0

08006670 <_init>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr

0800667c <_fini>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr
