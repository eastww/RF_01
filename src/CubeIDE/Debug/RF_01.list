
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005018  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052dc  080052dc  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080052dc  080052dc  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052dc  080052dc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080052e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000024  08005308  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005308  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115ac  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfb  00000000  00000000  000315f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00035370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012fc7  00000000  00000000  000362a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015325  00000000  00000000  00049267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069cb7  00000000  00000000  0005e58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8243  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000c8294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050c0 	.word	0x080050c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	080050c0 	.word	0x080050c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 8000224:	21ff      	movs	r1, #255	; 0xff
 8000226:	207f      	movs	r0, #127	; 0x7f
 8000228:	f000 fd0c 	bl	8000c44 <Cmt2300_WriteReg>
}
 800022c:	46c0      	nop			; (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}

08000232 <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 8000236:	2061      	movs	r0, #97	; 0x61
 8000238:	f000 fced 	bl	8000c16 <Cmt2300_ReadReg>
 800023c:	0003      	movs	r3, r0
 800023e:	001a      	movs	r2, r3
 8000240:	230f      	movs	r3, #15
 8000242:	4013      	ands	r3, r2
 8000244:	b2db      	uxtb	r3, r3
}
 8000246:	0018      	movs	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 800024c:	b5b0      	push	{r4, r5, r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	1dfb      	adds	r3, r7, #7
 8000256:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 8000258:	230f      	movs	r3, #15
 800025a:	18fb      	adds	r3, r7, r3
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
 8000260:	e013      	b.n	800028a <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 8000262:	250e      	movs	r5, #14
 8000264:	197c      	adds	r4, r7, r5
 8000266:	f7ff ffe4 	bl	8000232 <Cmt2300_GetChipStatus>
 800026a:	0003      	movs	r3, r0
 800026c:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 800026e:	1dfa      	adds	r2, r7, #7
 8000270:	197b      	adds	r3, r7, r5
 8000272:	7812      	ldrb	r2, [r2, #0]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	d101      	bne.n	800027e <Cmt2300_WaitChipStatus+0x32>
            return true;
 800027a:	2301      	movs	r3, #1
 800027c:	e00b      	b.n	8000296 <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 800027e:	210f      	movs	r1, #15
 8000280:	187b      	adds	r3, r7, r1
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	187b      	adds	r3, r7, r1
 8000286:	3201      	adds	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b31      	cmp	r3, #49	; 0x31
 8000292:	d9e6      	bls.n	8000262 <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 8000294:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 8000296:	0018      	movs	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	b004      	add	sp, #16
 800029c:	bdb0      	pop	{r4, r5, r7, pc}

0800029e <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	0002      	movs	r2, r0
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 80002aa:	2045      	movs	r0, #69	; 0x45
 80002ac:	f000 fcb3 	bl	8000c16 <Cmt2300_ReadReg>
 80002b0:	0003      	movs	r3, r0
 80002b2:	0019      	movs	r1, r3
 80002b4:	200f      	movs	r0, #15
 80002b6:	183b      	adds	r3, r7, r0
 80002b8:	2201      	movs	r2, #1
 80002ba:	4391      	bics	r1, r2
 80002bc:	000a      	movs	r2, r1
 80002be:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 80002c0:	183a      	adds	r2, r7, r0
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	7812      	ldrb	r2, [r2, #0]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	0019      	movs	r1, r3
 80002ce:	2045      	movs	r0, #69	; 0x45
 80002d0:	f000 fcb8 	bl	8000c44 <Cmt2300_WriteReg>
}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b004      	add	sp, #16
 80002da:	bd80      	pop	{r7, pc}

080002dc <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 80002e0:	2110      	movs	r1, #16
 80002e2:	2060      	movs	r0, #96	; 0x60
 80002e4:	f000 fcae 	bl	8000c44 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f7ff ffaf 	bl	800024c <Cmt2300_WaitChipStatus>
 80002ee:	0003      	movs	r3, r0
}
 80002f0:	0018      	movs	r0, r3
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 80002fa:	2102      	movs	r1, #2
 80002fc:	2060      	movs	r0, #96	; 0x60
 80002fe:	f000 fca1 	bl	8000c44 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 8000302:	2002      	movs	r0, #2
 8000304:	f7ff ffa2 	bl	800024c <Cmt2300_WaitChipStatus>
 8000308:	0003      	movs	r3, r0
}
 800030a:	0018      	movs	r0, r3
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <Cmt2300_GoTx>:
* @name    Cmt2300_GoTx
* @desc    Entry Tx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoTx(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_TX);
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	2060      	movs	r0, #96	; 0x60
 8000318:	f000 fc94 	bl	8000c44 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_TX);
 800031c:	2006      	movs	r0, #6
 800031e:	f7ff ff95 	bl	800024c <Cmt2300_WaitChipStatus>
 8000322:	0003      	movs	r3, r0
}
 8000324:	0018      	movs	r0, r3
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <Cmt2300_GoRx>:
* @name    Cmt2300_GoRx
* @desc    Entry Rx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoRx(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_RX);
 800032e:	2108      	movs	r1, #8
 8000330:	2060      	movs	r0, #96	; 0x60
 8000332:	f000 fc87 	bl	8000c44 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_RX);
 8000336:	2005      	movs	r0, #5
 8000338:	f7ff ff88 	bl	800024c <Cmt2300_WaitChipStatus>
 800033c:	0003      	movs	r3, r0
}
 800033e:	0018      	movs	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	0002      	movs	r2, r0
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 8000350:	1dfb      	adds	r3, r7, #7
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	0019      	movs	r1, r3
 8000356:	2065      	movs	r0, #101	; 0x65
 8000358:	f000 fc74 	bl	8000c44 <Cmt2300_WriteReg>
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}

08000364 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	0002      	movs	r2, r0
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	701a      	strb	r2, [r3, #0]
 8000370:	1dbb      	adds	r3, r7, #6
 8000372:	1c0a      	adds	r2, r1, #0
 8000374:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	1dfa      	adds	r2, r7, #7
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	211f      	movs	r1, #31
 800037e:	400a      	ands	r2, r1
 8000380:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000382:	2066      	movs	r0, #102	; 0x66
 8000384:	f000 fc47 	bl	8000c16 <Cmt2300_ReadReg>
 8000388:	0003      	movs	r3, r0
 800038a:	001a      	movs	r2, r3
 800038c:	231f      	movs	r3, #31
 800038e:	439a      	bics	r2, r3
 8000390:	0013      	movs	r3, r2
 8000392:	b25a      	sxtb	r2, r3
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b25b      	sxtb	r3, r3
 800039a:	4313      	orrs	r3, r2
 800039c:	b25a      	sxtb	r2, r3
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	0019      	movs	r1, r3
 80003a8:	2066      	movs	r0, #102	; 0x66
 80003aa:	f000 fc4b 	bl	8000c44 <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	1dba      	adds	r2, r7, #6
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	211f      	movs	r1, #31
 80003b6:	400a      	ands	r2, r1
 80003b8:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 80003ba:	2067      	movs	r0, #103	; 0x67
 80003bc:	f000 fc2b 	bl	8000c16 <Cmt2300_ReadReg>
 80003c0:	0003      	movs	r3, r0
 80003c2:	001a      	movs	r2, r3
 80003c4:	231f      	movs	r3, #31
 80003c6:	439a      	bics	r2, r3
 80003c8:	0013      	movs	r3, r2
 80003ca:	b25a      	sxtb	r2, r3
 80003cc:	1dbb      	adds	r3, r7, #6
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	4313      	orrs	r3, r2
 80003d4:	b25a      	sxtb	r2, r3
 80003d6:	1dbb      	adds	r3, r7, #6
 80003d8:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 80003da:	1dbb      	adds	r3, r7, #6
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	0019      	movs	r1, r3
 80003e0:	2067      	movs	r0, #103	; 0x67
 80003e2:	f000 fc2f 	bl	8000c44 <Cmt2300_WriteReg>
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b002      	add	sp, #8
 80003ec:	bd80      	pop	{r7, pc}

080003ee <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 80003ee:	b5b0      	push	{r4, r5, r7, lr}
 80003f0:	b084      	sub	sp, #16
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	0002      	movs	r2, r0
 80003f6:	1dfb      	adds	r3, r7, #7
 80003f8:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 80003fa:	250f      	movs	r5, #15
 80003fc:	197c      	adds	r4, r7, r5
 80003fe:	2066      	movs	r0, #102	; 0x66
 8000400:	f000 fc09 	bl	8000c16 <Cmt2300_ReadReg>
 8000404:	0003      	movs	r3, r0
 8000406:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d10d      	bne.n	800042c <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 8000410:	197b      	adds	r3, r7, r5
 8000412:	197a      	adds	r2, r7, r5
 8000414:	7812      	ldrb	r2, [r2, #0]
 8000416:	2180      	movs	r1, #128	; 0x80
 8000418:	4249      	negs	r1, r1
 800041a:	430a      	orrs	r2, r1
 800041c:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 800041e:	197b      	adds	r3, r7, r5
 8000420:	197a      	adds	r2, r7, r5
 8000422:	7812      	ldrb	r2, [r2, #0]
 8000424:	2140      	movs	r1, #64	; 0x40
 8000426:	438a      	bics	r2, r1
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	e010      	b.n	800044e <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d10c      	bne.n	800044e <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 8000434:	200f      	movs	r0, #15
 8000436:	183b      	adds	r3, r7, r0
 8000438:	183a      	adds	r2, r7, r0
 800043a:	7812      	ldrb	r2, [r2, #0]
 800043c:	217f      	movs	r1, #127	; 0x7f
 800043e:	400a      	ands	r2, r1
 8000440:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 8000442:	183b      	adds	r3, r7, r0
 8000444:	183a      	adds	r2, r7, r0
 8000446:	7812      	ldrb	r2, [r2, #0]
 8000448:	2140      	movs	r1, #64	; 0x40
 800044a:	430a      	orrs	r2, r1
 800044c:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 800044e:	230f      	movs	r3, #15
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	0019      	movs	r1, r3
 8000456:	2066      	movs	r0, #102	; 0x66
 8000458:	f000 fbf4 	bl	8000c44 <Cmt2300_WriteReg>
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b004      	add	sp, #16
 8000462:	bdb0      	pop	{r4, r5, r7, pc}

08000464 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	0002      	movs	r2, r0
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	0019      	movs	r1, r3
 8000476:	2068      	movs	r0, #104	; 0x68
 8000478:	f000 fbe4 	bl	8000c44 <Cmt2300_WriteReg>
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}

08000484 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	0002      	movs	r2, r0
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 8000490:	250f      	movs	r5, #15
 8000492:	197c      	adds	r4, r7, r5
 8000494:	2069      	movs	r0, #105	; 0x69
 8000496:	f000 fbbe 	bl	8000c16 <Cmt2300_ReadReg>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d006      	beq.n	80004b4 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 80004a6:	197b      	adds	r3, r7, r5
 80004a8:	197a      	adds	r2, r7, r5
 80004aa:	7812      	ldrb	r2, [r2, #0]
 80004ac:	2102      	movs	r1, #2
 80004ae:	430a      	orrs	r2, r1
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	e006      	b.n	80004c2 <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 80004b4:	220f      	movs	r2, #15
 80004b6:	18bb      	adds	r3, r7, r2
 80004b8:	18ba      	adds	r2, r7, r2
 80004ba:	7812      	ldrb	r2, [r2, #0]
 80004bc:	2102      	movs	r1, #2
 80004be:	438a      	bics	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80004c2:	230f      	movs	r3, #15
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	0019      	movs	r1, r3
 80004ca:	2069      	movs	r0, #105	; 0x69
 80004cc:	f000 fbba 	bl	8000c44 <Cmt2300_WriteReg>
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b004      	add	sp, #16
 80004d6:	bdb0      	pop	{r4, r5, r7, pc}

080004d8 <Cmt2300_EnableReadFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableReadFifo
* @desc    Enable SPI to read the FIFO.
* *********************************************************/
void Cmt2300_EnableReadFifo(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 80004de:	1dfc      	adds	r4, r7, #7
 80004e0:	2069      	movs	r0, #105	; 0x69
 80004e2:	f000 fb98 	bl	8000c16 <Cmt2300_ReadReg>
 80004e6:	0003      	movs	r3, r0
 80004e8:	7023      	strb	r3, [r4, #0]
    tmp &= ~CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	1dfa      	adds	r2, r7, #7
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	2101      	movs	r1, #1
 80004f2:	438a      	bics	r2, r1
 80004f4:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_FIFO_RX_TX_SEL;
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	1dfa      	adds	r2, r7, #7
 80004fa:	7812      	ldrb	r2, [r2, #0]
 80004fc:	2104      	movs	r1, #4
 80004fe:	438a      	bics	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	0019      	movs	r1, r3
 8000508:	2069      	movs	r0, #105	; 0x69
 800050a:	f000 fb9b 	bl	8000c44 <Cmt2300_WriteReg>
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b003      	add	sp, #12
 8000514:	bd90      	pop	{r4, r7, pc}

08000516 <Cmt2300_EnableWriteFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableWriteFifo
* @desc    Enable SPI to write the FIFO.
* *********************************************************/
void Cmt2300_EnableWriteFifo(void)
{
 8000516:	b590      	push	{r4, r7, lr}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 800051c:	1dfc      	adds	r4, r7, #7
 800051e:	2069      	movs	r0, #105	; 0x69
 8000520:	f000 fb79 	bl	8000c16 <Cmt2300_ReadReg>
 8000524:	0003      	movs	r3, r0
 8000526:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	1dfa      	adds	r2, r7, #7
 800052c:	7812      	ldrb	r2, [r2, #0]
 800052e:	2101      	movs	r1, #1
 8000530:	430a      	orrs	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
    tmp |= CMT2300_MASK_FIFO_RX_TX_SEL;
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	1dfa      	adds	r2, r7, #7
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	2104      	movs	r1, #4
 800053c:	430a      	orrs	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	0019      	movs	r1, r3
 8000546:	2069      	movs	r0, #105	; 0x69
 8000548:	f000 fb7c 	bl	8000c44 <Cmt2300_WriteReg>
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b003      	add	sp, #12
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <Cmt2300_ClearFifo>:
*            CMT2300_MASK_TX_FIFO_FULL_FLG |
*            CMT2300_MASK_TX_FIFO_NMTY_FLG |
*            CMT2300_MASK_TX_FIFO_TH_FLG
* *********************************************************/
uint8_t Cmt2300_ClearFifo(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CLR);
 800055a:	1dfc      	adds	r4, r7, #7
 800055c:	206c      	movs	r0, #108	; 0x6c
 800055e:	f000 fb5a 	bl	8000c16 <Cmt2300_ReadReg>
 8000562:	0003      	movs	r3, r0
 8000564:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CLR, CMT2300_MASK_FIFO_CLR_RX | CMT2300_MASK_FIFO_CLR_TX);
 8000566:	2103      	movs	r1, #3
 8000568:	206c      	movs	r0, #108	; 0x6c
 800056a:	f000 fb6b 	bl	8000c44 <Cmt2300_WriteReg>
    return tmp;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
}
 8000572:	0018      	movs	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	b003      	add	sp, #12
 8000578:	bd90      	pop	{r4, r7, pc}

0800057a <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 800057a:	b590      	push	{r4, r7, lr}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 8000580:	1d7b      	adds	r3, r7, #5
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 800058c:	1cfb      	adds	r3, r7, #3
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000592:	1cbc      	adds	r4, r7, #2
 8000594:	2066      	movs	r0, #102	; 0x66
 8000596:	f000 fb3e 	bl	8000c16 <Cmt2300_ReadReg>
 800059a:	0003      	movs	r3, r0
 800059c:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 800059e:	1cbb      	adds	r3, r7, #2
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	115b      	asrs	r3, r3, #5
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	1cbb      	adds	r3, r7, #2
 80005a8:	2101      	movs	r1, #1
 80005aa:	400a      	ands	r2, r1
 80005ac:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 80005ae:	1dfc      	adds	r4, r7, #7
 80005b0:	206d      	movs	r0, #109	; 0x6d
 80005b2:	f000 fb30 	bl	8000c16 <Cmt2300_ReadReg>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 80005ba:	1dbc      	adds	r4, r7, #6
 80005bc:	206a      	movs	r0, #106	; 0x6a
 80005be:	f000 fb2a 	bl	8000c16 <Cmt2300_ReadReg>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 80005c6:	1cbb      	adds	r3, r7, #2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d009      	beq.n	80005e2 <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	1dfa      	adds	r2, r7, #7
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	43d2      	mvns	r2, r2
 80005d6:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	1dba      	adds	r2, r7, #6
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	43d2      	mvns	r2, r2
 80005e0:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da05      	bge.n	80005f8 <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	2120      	movs	r1, #32
 80005f4:	430a      	orrs	r2, r1
 80005f6:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	4013      	ands	r3, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d005      	beq.n	8000612 <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	1d3a      	adds	r2, r7, #4
 800060a:	7812      	ldrb	r2, [r2, #0]
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2220      	movs	r2, #32
 8000618:	4013      	ands	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	1d3a      	adds	r2, r7, #4
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	2101      	movs	r1, #1
 8000628:	430a      	orrs	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2210      	movs	r2, #16
 8000632:	4013      	ands	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00b      	beq.n	8000652 <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	1d3a      	adds	r2, r7, #4
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	2110      	movs	r1, #16
 8000642:	430a      	orrs	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	1cfa      	adds	r2, r7, #3
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	2110      	movs	r1, #16
 800064e:	430a      	orrs	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2208      	movs	r2, #8
 8000658:	4013      	ands	r3, r2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00b      	beq.n	8000678 <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	1d3a      	adds	r2, r7, #4
 8000664:	7812      	ldrb	r2, [r2, #0]
 8000666:	2108      	movs	r1, #8
 8000668:	430a      	orrs	r2, r1
 800066a:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 800066c:	1cfb      	adds	r3, r7, #3
 800066e:	1cfa      	adds	r2, r7, #3
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	2108      	movs	r1, #8
 8000674:	430a      	orrs	r2, r1
 8000676:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2204      	movs	r2, #4
 800067e:	4013      	ands	r3, r2
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00b      	beq.n	800069e <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	1d3a      	adds	r2, r7, #4
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	2104      	movs	r1, #4
 800068e:	430a      	orrs	r2, r1
 8000690:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 8000692:	1cfb      	adds	r3, r7, #3
 8000694:	1cfa      	adds	r2, r7, #3
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	2104      	movs	r1, #4
 800069a:	430a      	orrs	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2202      	movs	r2, #2
 80006a4:	4013      	ands	r3, r2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00b      	beq.n	80006c4 <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	1d3a      	adds	r2, r7, #4
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	2102      	movs	r1, #2
 80006b4:	430a      	orrs	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 80006b8:	1cfb      	adds	r3, r7, #3
 80006ba:	1cfa      	adds	r2, r7, #3
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	2102      	movs	r1, #2
 80006c0:	430a      	orrs	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2201      	movs	r2, #1
 80006ca:	4013      	ands	r3, r2
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00b      	beq.n	80006ea <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	1d3a      	adds	r2, r7, #4
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 80006de:	1cfb      	adds	r3, r7, #3
 80006e0:	1cfa      	adds	r2, r7, #3
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	2101      	movs	r1, #1
 80006e6:	430a      	orrs	r2, r1
 80006e8:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 80006ea:	1dbb      	adds	r3, r7, #6
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2220      	movs	r2, #32
 80006f0:	4013      	ands	r3, r2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00c      	beq.n	8000712 <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 80006f8:	1d7b      	adds	r3, r7, #5
 80006fa:	1d7a      	adds	r2, r7, #5
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	2102      	movs	r1, #2
 8000700:	430a      	orrs	r2, r1
 8000702:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 8000704:	1cfb      	adds	r3, r7, #3
 8000706:	1cfa      	adds	r2, r7, #3
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	4249      	negs	r1, r1
 800070e:	430a      	orrs	r2, r1
 8000710:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 8000712:	1dbb      	adds	r3, r7, #6
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2210      	movs	r2, #16
 8000718:	4013      	ands	r3, r2
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d00b      	beq.n	8000738 <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 8000720:	1d7b      	adds	r3, r7, #5
 8000722:	1d7a      	adds	r2, r7, #5
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	2101      	movs	r1, #1
 8000728:	430a      	orrs	r2, r1
 800072a:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 800072c:	1cfb      	adds	r3, r7, #3
 800072e:	1cfa      	adds	r2, r7, #3
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	430a      	orrs	r2, r1
 8000736:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2208      	movs	r2, #8
 800073e:	4013      	ands	r3, r2
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00b      	beq.n	800075e <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 8000746:	1d7b      	adds	r3, r7, #5
 8000748:	1d7a      	adds	r2, r7, #5
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	2104      	movs	r1, #4
 800074e:	430a      	orrs	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 8000752:	1cfb      	adds	r3, r7, #3
 8000754:	1cfa      	adds	r2, r7, #3
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	2120      	movs	r1, #32
 800075a:	430a      	orrs	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 800075e:	1d7b      	adds	r3, r7, #5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	0019      	movs	r1, r3
 8000764:	206a      	movs	r0, #106	; 0x6a
 8000766:	f000 fa6d 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	0019      	movs	r1, r3
 8000770:	206b      	movs	r0, #107	; 0x6b
 8000772:	f000 fa67 	bl	8000c44 <Cmt2300_WriteReg>

    if (nIntPolar)
 8000776:	1cbb      	adds	r3, r7, #2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 800077e:	1cfb      	adds	r3, r7, #3
 8000780:	1cfa      	adds	r2, r7, #3
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	43d2      	mvns	r2, r2
 8000786:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 8000788:	1cfb      	adds	r3, r7, #3
 800078a:	781b      	ldrb	r3, [r3, #0]
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b003      	add	sp, #12
 8000792:	bd90      	pop	{r4, r7, pc}

08000794 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 fa38 	bl	8000c16 <Cmt2300_ReadReg>
 80007a6:	0003      	movs	r3, r0
 80007a8:	0019      	movs	r1, r3
 80007aa:	240f      	movs	r4, #15
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	220f      	movs	r2, #15
 80007b0:	400a      	ands	r2, r1
 80007b2:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	0013      	movs	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	189b      	adds	r3, r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4a4d      	ldr	r2, [pc, #308]	; (80008f8 <Cmt2300_ConfigDataRate+0x164>)
 80007c2:	189b      	adds	r3, r3, r2
 80007c4:	2218      	movs	r2, #24
 80007c6:	0019      	movs	r1, r3
 80007c8:	2020      	movs	r0, #32
 80007ca:	f000 f9ec 	bl	8000ba6 <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	494a      	ldr	r1, [pc, #296]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 80007d4:	0013      	movs	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	189b      	adds	r3, r3, r2
 80007da:	5c5b      	ldrb	r3, [r3, r1]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	220f      	movs	r2, #15
 80007e0:	4393      	bics	r3, r2
 80007e2:	b25a      	sxtb	r2, r3
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	0019      	movs	r1, r3
 80007f2:	2004      	movs	r0, #4
 80007f4:	f000 fa26 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	493f      	ldr	r1, [pc, #252]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 80007fe:	0013      	movs	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	189b      	adds	r3, r3, r2
 8000804:	18cb      	adds	r3, r1, r3
 8000806:	3301      	adds	r3, #1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	0019      	movs	r1, r3
 800080c:	2055      	movs	r0, #85	; 0x55
 800080e:	f000 fa19 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	4939      	ldr	r1, [pc, #228]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 8000818:	0013      	movs	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	189b      	adds	r3, r3, r2
 800081e:	18cb      	adds	r3, r1, r3
 8000820:	3302      	adds	r3, #2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	0019      	movs	r1, r3
 8000826:	2056      	movs	r0, #86	; 0x56
 8000828:	f000 fa0c 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	4932      	ldr	r1, [pc, #200]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 8000832:	0013      	movs	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	189b      	adds	r3, r3, r2
 8000838:	18cb      	adds	r3, r1, r3
 800083a:	3303      	adds	r3, #3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	0019      	movs	r1, r3
 8000840:	2057      	movs	r0, #87	; 0x57
 8000842:	f000 f9ff 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	492c      	ldr	r1, [pc, #176]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 800084c:	0013      	movs	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	189b      	adds	r3, r3, r2
 8000852:	18cb      	adds	r3, r1, r3
 8000854:	3304      	adds	r3, #4
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	0019      	movs	r1, r3
 800085a:	2058      	movs	r0, #88	; 0x58
 800085c:	f000 f9f2 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4925      	ldr	r1, [pc, #148]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 8000866:	0013      	movs	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	189b      	adds	r3, r3, r2
 800086c:	18cb      	adds	r3, r1, r3
 800086e:	3305      	adds	r3, #5
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0019      	movs	r1, r3
 8000874:	2059      	movs	r0, #89	; 0x59
 8000876:	f000 f9e5 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	491f      	ldr	r1, [pc, #124]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 8000880:	0013      	movs	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	189b      	adds	r3, r3, r2
 8000886:	18cb      	adds	r3, r1, r3
 8000888:	3306      	adds	r3, #6
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	0019      	movs	r1, r3
 800088e:	205a      	movs	r0, #90	; 0x5a
 8000890:	f000 f9d8 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4918      	ldr	r1, [pc, #96]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 800089a:	0013      	movs	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	189b      	adds	r3, r3, r2
 80008a0:	18cb      	adds	r3, r1, r3
 80008a2:	3307      	adds	r3, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0019      	movs	r1, r3
 80008a8:	205b      	movs	r0, #91	; 0x5b
 80008aa:	f000 f9cb 	bl	8000c44 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 80008ae:	205e      	movs	r0, #94	; 0x5e
 80008b0:	f000 f9b1 	bl	8000c16 <Cmt2300_ReadReg>
 80008b4:	0003      	movs	r3, r0
 80008b6:	0019      	movs	r1, r3
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	223f      	movs	r2, #63	; 0x3f
 80008bc:	400a      	ands	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	490d      	ldr	r1, [pc, #52]	; (80008fc <Cmt2300_ConfigDataRate+0x168>)
 80008c6:	0013      	movs	r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	189b      	adds	r3, r3, r2
 80008cc:	18cb      	adds	r3, r1, r3
 80008ce:	3308      	adds	r3, #8
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	223f      	movs	r2, #63	; 0x3f
 80008d6:	4393      	bics	r3, r2
 80008d8:	b25a      	sxtb	r2, r3
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	0019      	movs	r1, r3
 80008e8:	205e      	movs	r0, #94	; 0x5e
 80008ea:	f000 f9ab 	bl	8000c44 <Cmt2300_WriteReg>
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b005      	add	sp, #20
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	080050f0 	.word	0x080050f0
 80008fc:	080051b0 	.word	0x080051b0

08000900 <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	0002      	movs	r2, r0
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 800090c:	2038      	movs	r0, #56	; 0x38
 800090e:	f000 f982 	bl	8000c16 <Cmt2300_ReadReg>
 8000912:	0003      	movs	r3, r0
 8000914:	0019      	movs	r1, r3
 8000916:	200f      	movs	r0, #15
 8000918:	183b      	adds	r3, r7, r0
 800091a:	2203      	movs	r2, #3
 800091c:	4391      	bics	r1, r2
 800091e:	000a      	movs	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 8000922:	183a      	adds	r2, r7, r0
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4313      	orrs	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	0019      	movs	r1, r3
 8000930:	2038      	movs	r0, #56	; 0x38
 8000932:	f000 f987 	bl	8000c44 <Cmt2300_WriteReg>
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b004      	add	sp, #16
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	0002      	movs	r2, r0
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f962 	bl	8000c16 <Cmt2300_ReadReg>
 8000952:	0003      	movs	r3, r0
 8000954:	0019      	movs	r1, r3
 8000956:	230f      	movs	r3, #15
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	2201      	movs	r2, #1
 800095c:	4391      	bics	r1, r2
 800095e:	000a      	movs	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b07      	cmp	r3, #7
 8000968:	d902      	bls.n	8000970 <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	2207      	movs	r2, #7
 800096e:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <Cmt2300_ConfigTxPower+0xcc>)
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	2201      	movs	r2, #1
 800097e:	4013      	ands	r3, r2
 8000980:	b25a      	sxtb	r2, r3
 8000982:	240f      	movs	r4, #15
 8000984:	193b      	adds	r3, r7, r4
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b25b      	sxtb	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b25b      	sxtb	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	0019      	movs	r1, r3
 8000992:	2003      	movs	r0, #3
 8000994:	f000 f956 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <Cmt2300_ConfigTxPower+0xcc>)
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	3301      	adds	r3, #1
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	0019      	movs	r1, r3
 80009a8:	205c      	movs	r0, #92	; 0x5c
 80009aa:	f000 f94b 	bl	8000c44 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <Cmt2300_ConfigTxPower+0xcc>)
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	3302      	adds	r3, #2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	0019      	movs	r1, r3
 80009be:	205d      	movs	r0, #93	; 0x5d
 80009c0:	f000 f940 	bl	8000c44 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 80009c4:	205e      	movs	r0, #94	; 0x5e
 80009c6:	f000 f926 	bl	8000c16 <Cmt2300_ReadReg>
 80009ca:	0003      	movs	r3, r0
 80009cc:	0019      	movs	r1, r3
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	223f      	movs	r2, #63	; 0x3f
 80009d2:	4391      	bics	r1, r2
 80009d4:	000a      	movs	r2, r1
 80009d6:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <Cmt2300_ConfigTxPower+0xcc>)
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	18d3      	adds	r3, r2, r3
 80009e2:	3303      	adds	r3, #3
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	223f      	movs	r2, #63	; 0x3f
 80009ea:	4013      	ands	r3, r2
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	0019      	movs	r1, r3
 80009fc:	205e      	movs	r0, #94	; 0x5e
 80009fe:	f000 f921 	bl	8000c44 <Cmt2300_WriteReg>
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b005      	add	sp, #20
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	080051f8 	.word	0x080051f8

08000a10 <Cmt2300_IsExist>:
* @name    Cmt2300_IsExist
* @desc    Chip indentify.
* @return  true: chip is exist, false: chip not found
* *********************************************************/
bool Cmt2300_IsExist(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
    uint8_t back, dat;

    back = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000a16:	1dfc      	adds	r4, r7, #7
 8000a18:	2048      	movs	r0, #72	; 0x48
 8000a1a:	f000 f8fc 	bl	8000c16 <Cmt2300_ReadReg>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, 0xAA);
 8000a22:	21aa      	movs	r1, #170	; 0xaa
 8000a24:	2048      	movs	r0, #72	; 0x48
 8000a26:	f000 f90d 	bl	8000c44 <Cmt2300_WriteReg>

    // system_delay_us(5*20);

    dat = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000a2a:	1dbc      	adds	r4, r7, #6
 8000a2c:	2048      	movs	r0, #72	; 0x48
 8000a2e:	f000 f8f2 	bl	8000c16 <Cmt2300_ReadReg>
 8000a32:	0003      	movs	r3, r0
 8000a34:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, back);
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	2048      	movs	r0, #72	; 0x48
 8000a3e:	f000 f901 	bl	8000c44 <Cmt2300_WriteReg>

    if (0xAA == dat)
 8000a42:	1dbb      	adds	r3, r7, #6
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2baa      	cmp	r3, #170	; 0xaa
 8000a48:	d101      	bne.n	8000a4e <Cmt2300_IsExist+0x3e>
        return true;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <Cmt2300_IsExist+0x40>

    return false;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b003      	add	sp, #12
 8000a56:	bd90      	pop	{r4, r7, pc}

08000a58 <Cmt2300_SetPayloadLength>:
* @name    Cmt2300_SetPayloadLength
* @desc    Set payload length.
* @param   nLength
* *********************************************************/
void Cmt2300_SetPayloadLength(uint16_t nLength)
{
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	1dbb      	adds	r3, r7, #6
 8000a62:	801a      	strh	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14);
 8000a64:	250f      	movs	r5, #15
 8000a66:	197c      	adds	r4, r7, r5
 8000a68:	2045      	movs	r0, #69	; 0x45
 8000a6a:	f000 f8d4 	bl	8000c16 <Cmt2300_ReadReg>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	7023      	strb	r3, [r4, #0]

    tmp &= ~CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000a72:	0028      	movs	r0, r5
 8000a74:	183b      	adds	r3, r7, r0
 8000a76:	183a      	adds	r2, r7, r0
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	2170      	movs	r1, #112	; 0x70
 8000a7c:	438a      	bics	r2, r1
 8000a7e:	701a      	strb	r2, [r3, #0]
    tmp |= (nLength >> 4) & CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000a80:	1dbb      	adds	r3, r7, #6
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	091b      	lsrs	r3, r3, #4
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	2270      	movs	r2, #112	; 0x70
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	b25a      	sxtb	r2, r3
 8000a90:	183b      	adds	r3, r7, r0
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	183b      	adds	r3, r7, r0
 8000a9c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp);
 8000a9e:	0004      	movs	r4, r0
 8000aa0:	183b      	adds	r3, r7, r0
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	2045      	movs	r0, #69	; 0x45
 8000aa8:	f000 f8cc 	bl	8000c44 <Cmt2300_WriteReg>

    tmp = nLength & CMT2300_MASK_PAYLOAD_LENG_7_0;
 8000aac:	0020      	movs	r0, r4
 8000aae:	183b      	adds	r3, r7, r0
 8000ab0:	1dba      	adds	r2, r7, #6
 8000ab2:	8812      	ldrh	r2, [r2, #0]
 8000ab4:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT15, tmp);
 8000ab6:	183b      	adds	r3, r7, r0
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0019      	movs	r1, r3
 8000abc:	2046      	movs	r0, #70	; 0x46
 8000abe:	f000 f8c1 	bl	8000c44 <Cmt2300_WriteReg>
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b004      	add	sp, #16
 8000ac8:	bdb0      	pop	{r4, r5, r7, pc}

08000aca <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000aca:	b5b0      	push	{r4, r5, r7, lr}
 8000acc:	b084      	sub	sp, #16
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	0002      	movs	r2, r0
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000ad6:	250f      	movs	r5, #15
 8000ad8:	197c      	adds	r4, r7, r5
 8000ada:	200d      	movs	r0, #13
 8000adc:	f000 f89b 	bl	8000c16 <Cmt2300_ReadReg>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d013      	beq.n	8000b14 <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 8000aec:	197b      	adds	r3, r7, r5
 8000aee:	197a      	adds	r2, r7, r5
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	4249      	negs	r1, r1
 8000af6:	430a      	orrs	r2, r1
 8000af8:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 8000afa:	197b      	adds	r3, r7, r5
 8000afc:	197a      	adds	r2, r7, r5
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	430a      	orrs	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 8000b06:	197b      	adds	r3, r7, r5
 8000b08:	197a      	adds	r2, r7, r5
 8000b0a:	7812      	ldrb	r2, [r2, #0]
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e012      	b.n	8000b3a <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 8000b14:	200f      	movs	r0, #15
 8000b16:	183b      	adds	r3, r7, r0
 8000b18:	183a      	adds	r2, r7, r0
 8000b1a:	7812      	ldrb	r2, [r2, #0]
 8000b1c:	217f      	movs	r1, #127	; 0x7f
 8000b1e:	400a      	ands	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 8000b22:	183b      	adds	r3, r7, r0
 8000b24:	183a      	adds	r2, r7, r0
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	438a      	bics	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 8000b2e:	183b      	adds	r3, r7, r0
 8000b30:	183a      	adds	r2, r7, r0
 8000b32:	7812      	ldrb	r2, [r2, #0]
 8000b34:	2120      	movs	r1, #32
 8000b36:	438a      	bics	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	0019      	movs	r1, r3
 8000b42:	200d      	movs	r0, #13
 8000b44:	f000 f87e 	bl	8000c44 <Cmt2300_WriteReg>
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b004      	add	sp, #16
 8000b4e:	bdb0      	pop	{r4, r5, r7, pc}

08000b50 <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000b56:	f7ff fb63 	bl	8000220 <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000b5a:	200a      	movs	r0, #10
 8000b5c:	f000 fd3a 	bl	80015d4 <Delay_Ms>
   
    Cmt2300_GoStby();
 8000b60:	f7ff fbc9 	bl	80002f6 <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000b64:	1dfc      	adds	r4, r7, #7
 8000b66:	2061      	movs	r0, #97	; 0x61
 8000b68:	f000 f855 	bl	8000c16 <Cmt2300_ReadReg>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	2110      	movs	r1, #16
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	1dfa      	adds	r2, r7, #7
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	2120      	movs	r1, #32
 8000b84:	438a      	bics	r2, r1
 8000b86:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	2061      	movs	r0, #97	; 0x61
 8000b90:	f000 f858 	bl	8000c44 <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ff98 	bl	8000aca <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000b9a:	f7ff fcee 	bl	800057a <Cmt2300_ClearInterruptFlags>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b003      	add	sp, #12
 8000ba4:	bd90      	pop	{r4, r7, pc}

08000ba6 <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000ba6:	b590      	push	{r4, r7, lr}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	1c0a      	adds	r2, r1, #0
 8000bba:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e014      	b.n	8000bf0 <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	187a      	adds	r2, r7, r1
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	b2d8      	uxtb	r0, r3
 8000bd4:	000c      	movs	r4, r1
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	0019      	movs	r1, r3
 8000be2:	f000 f82f 	bl	8000c44 <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	3201      	adds	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fa      	adds	r2, r7, r3
 8000bf4:	1dbb      	adds	r3, r7, #6
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d3e3      	bcc.n	8000bc6 <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b005      	add	sp, #20
 8000c06:	bd90      	pop	{r4, r7, pc}

08000c08 <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000c0c:	f000 f876 	bl	8000cfc <cmt_spi3_init>
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000c16:	b590      	push	{r4, r7, lr}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	0002      	movs	r2, r0
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000c22:	240f      	movs	r4, #15
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	22ff      	movs	r2, #255	; 0xff
 8000c28:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000c2a:	193a      	adds	r2, r7, r4
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 f974 	bl	8000f20 <cmt_spi3_read>

    return dat;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	781b      	ldrb	r3, [r3, #0]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b005      	add	sp, #20
 8000c42:	bd90      	pop	{r4, r7, pc}

08000c44 <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	1dbb      	adds	r3, r7, #6
 8000c52:	1c0a      	adds	r2, r1, #0
 8000c54:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000c56:	1dbb      	adds	r3, r7, #6
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 f8e9 	bl	8000e38 <cmt_spi3_write>
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Cmt2300_ReadFifo>:
* @desc    Reads the contents of the CMT2300 FIFO.
* @param   buf: buffer where to copy the FIFO read data
*          len: number of bytes to be read from the FIFO
* *********************************************************/
void Cmt2300_ReadFifo(uint8_t buf[], uint16_t len)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	000a      	movs	r2, r1
 8000c78:	1cbb      	adds	r3, r7, #2
 8000c7a:	801a      	strh	r2, [r3, #0]
    cmt_spi3_read_fifo(buf, len);
 8000c7c:	1cbb      	adds	r3, r7, #2
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fa4b 	bl	8001120 <cmt_spi3_read_fifo>
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <Cmt2300_WriteFifo>:
* @desc    Writes the buffer contents to the CMT2300 FIFO.
* @param   buf: buffer containing data to be put on the FIFO
*          len: number of bytes to be written to the FIFO
* *********************************************************/
void Cmt2300_WriteFifo(const uint8_t buf[], uint16_t len)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	1cbb      	adds	r3, r7, #2
 8000c9e:	801a      	strh	r2, [r3, #0]
    cmt_spi3_write_fifo(buf, len);
 8000ca0:	1cbb      	adds	r3, r7, #2
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 f9af 	bl	800100c <cmt_spi3_write_fifo>
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	607b      	str	r3, [r7, #4]
    while (n--)
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	1e5a      	subs	r2, r3, #1
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1fa      	bne.n	8000cc2 <cmt_spi3_delay+0xc>
        ;
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <cmt_spi3_delay_us>:

void cmt_spi3_delay_us(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
    uint16_t n = 8;
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	2208      	movs	r2, #8
 8000ce0:	801a      	strh	r2, [r3, #0]
    while (n--)
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	1dba      	adds	r2, r7, #6
 8000cea:	1e59      	subs	r1, r3, #1
 8000cec:	8011      	strh	r1, [r2, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f8      	bne.n	8000ce4 <cmt_spi3_delay_us+0xe>
        ;
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <cmt_spi3_init>:

void cmt_spi3_init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000d00:	f000 fc8c 	bl	800161c <spi_gpio_init>
    cmt_spi3_sda_in();
 8000d04:	f000 fcc2 	bl	800168c <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000d08:	f7ff ffd5 	bl	8000cb6 <cmt_spi3_delay>
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	0002      	movs	r2, r0
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000d1e:	230f      	movs	r3, #15
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e034      	b.n	8000d92 <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	0119      	lsls	r1, r3, #4
 8000d2c:	2390      	movs	r3, #144	; 0x90
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2200      	movs	r2, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 ff05 	bl	8002b42 <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	da08      	bge.n	8000d54 <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	0059      	lsls	r1, r3, #1
 8000d46:	2390      	movs	r3, #144	; 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fef8 	bl	8002b42 <HAL_GPIO_WritePin>
 8000d52:	e007      	b.n	8000d64 <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	0059      	lsls	r1, r3, #1
 8000d58:	2390      	movs	r3, #144	; 0x90
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f001 feef 	bl	8002b42 <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8000d64:	f7ff ffa7 	bl	8000cb6 <cmt_spi3_delay>

        data8 <<= 1;
 8000d68:	1dfa      	adds	r2, r7, #7
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	18db      	adds	r3, r3, r3
 8000d70:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	0119      	lsls	r1, r3, #4
 8000d76:	2390      	movs	r3, #144	; 0x90
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fee0 	bl	8002b42 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000d82:	f7ff ff98 	bl	8000cb6 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000d86:	210f      	movs	r1, #15
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	3201      	adds	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	230f      	movs	r3, #15
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b07      	cmp	r3, #7
 8000d9a:	d9c5      	bls.n	8000d28 <cmt_spi3_send+0x16>
    }
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 8000dac:	1dbb      	adds	r3, r7, #6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e034      	b.n	8000e24 <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	0119      	lsls	r1, r3, #4
 8000dbe:	2390      	movs	r3, #144	; 0x90
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f001 febc 	bl	8002b42 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000dca:	f7ff ff74 	bl	8000cb6 <cmt_spi3_delay>
        data8 <<= 1;
 8000dce:	1dba      	adds	r2, r7, #6
 8000dd0:	1dbb      	adds	r3, r7, #6
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	18db      	adds	r3, r3, r3
 8000dd6:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	0119      	lsls	r1, r3, #4
 8000ddc:	2390      	movs	r3, #144	; 0x90
 8000dde:	05db      	lsls	r3, r3, #23
 8000de0:	2201      	movs	r2, #1
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 fead 	bl	8002b42 <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	005a      	lsls	r2, r3, #1
 8000dec:	2390      	movs	r3, #144	; 0x90
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 fe88 	bl	8002b08 <HAL_GPIO_ReadPin>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d006      	beq.n	8000e0a <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 8000dfc:	1dbb      	adds	r3, r7, #6
 8000dfe:	1dba      	adds	r2, r7, #6
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e005      	b.n	8000e16 <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 8000e0a:	1dbb      	adds	r3, r7, #6
 8000e0c:	1dba      	adds	r2, r7, #6
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	438a      	bics	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 8000e16:	f7ff ff4e 	bl	8000cb6 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	3201      	adds	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d9c6      	bls.n	8000dba <cmt_spi3_recv+0x14>
    }

    return data8;
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	781b      	ldrb	r3, [r3, #0]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	0002      	movs	r2, r0
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	1dbb      	adds	r3, r7, #6
 8000e46:	1c0a      	adds	r2, r1, #0
 8000e48:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8000e4a:	f000 fbed 	bl	8001628 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	0059      	lsls	r1, r3, #1
 8000e52:	2390      	movs	r3, #144	; 0x90
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	2201      	movs	r2, #1
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 fe72 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	0119      	lsls	r1, r3, #4
 8000e62:	2390      	movs	r3, #144	; 0x90
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2200      	movs	r2, #0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fe6a 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	0119      	lsls	r1, r3, #4
 8000e72:	2390      	movs	r3, #144	; 0x90
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	2200      	movs	r2, #0
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 fe62 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	01db      	lsls	r3, r3, #7
 8000e82:	4826      	ldr	r0, [pc, #152]	; (8000f1c <cmt_spi3_write+0xe4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	0019      	movs	r1, r3
 8000e88:	f001 fe5b 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	01db      	lsls	r3, r3, #7
 8000e90:	4822      	ldr	r0, [pc, #136]	; (8000f1c <cmt_spi3_write+0xe4>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	0019      	movs	r1, r3
 8000e96:	f001 fe54 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	481f      	ldr	r0, [pc, #124]	; (8000f1c <cmt_spi3_write+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	f001 fe4d 	bl	8002b42 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000ea8:	f7ff ff05 	bl	8000cb6 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000eac:	f7ff ff03 	bl	8000cb6 <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	227f      	movs	r2, #127	; 0x7f
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff ff29 	bl	8000d12 <cmt_spi3_send>

    cmt_spi3_send(dat);
 8000ec0:	1dbb      	adds	r3, r7, #6
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff24 	bl	8000d12 <cmt_spi3_send>

    cmt_spi3_scl_0();
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	0119      	lsls	r1, r3, #4
 8000ece:	2390      	movs	r3, #144	; 0x90
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 fe34 	bl	8002b42 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000eda:	f7ff feec 	bl	8000cb6 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000ede:	f7ff feea 	bl	8000cb6 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <cmt_spi3_write+0xe4>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	0019      	movs	r1, r3
 8000eec:	f001 fe29 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	0059      	lsls	r1, r3, #1
 8000ef4:	2390      	movs	r3, #144	; 0x90
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	2201      	movs	r2, #1
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 fe21 	bl	8002b42 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8000f00:	f000 fbc4 	bl	800168c <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	01db      	lsls	r3, r3, #7
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <cmt_spi3_write+0xe4>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	f001 fe18 	bl	8002b42 <HAL_GPIO_WritePin>
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	48000400 	.word	0x48000400

08000f20 <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8000f2e:	f000 fb7b 	bl	8001628 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	0059      	lsls	r1, r3, #1
 8000f36:	2390      	movs	r3, #144	; 0x90
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fe00 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	0119      	lsls	r1, r3, #4
 8000f46:	2390      	movs	r3, #144	; 0x90
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f001 fdf8 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	0119      	lsls	r1, r3, #4
 8000f56:	2390      	movs	r3, #144	; 0x90
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 fdf0 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	4828      	ldr	r0, [pc, #160]	; (8001008 <cmt_spi3_read+0xe8>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	f001 fde9 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	01db      	lsls	r3, r3, #7
 8000f74:	4824      	ldr	r0, [pc, #144]	; (8001008 <cmt_spi3_read+0xe8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	0019      	movs	r1, r3
 8000f7a:	f001 fde2 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <cmt_spi3_read+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	0019      	movs	r1, r3
 8000f88:	f001 fddb 	bl	8002b42 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000f8c:	f7ff fe93 	bl	8000cb6 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000f90:	f7ff fe91 	bl	8000cb6 <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	4252      	negs	r2, r2
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff feb6 	bl	8000d12 <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 8000fa6:	f000 fb71 	bl	800168c <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 8000faa:	f7ff fefc 	bl	8000da6 <cmt_spi3_recv>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	0119      	lsls	r1, r3, #4
 8000fba:	2390      	movs	r3, #144	; 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f001 fdbe 	bl	8002b42 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000fc6:	f7ff fe76 	bl	8000cb6 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000fca:	f7ff fe74 	bl	8000cb6 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <cmt_spi3_read+0xe8>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	f001 fdb3 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	0059      	lsls	r1, r3, #1
 8000fe0:	2390      	movs	r3, #144	; 0x90
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f001 fdab 	bl	8002b42 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8000fec:	f000 fb4e 	bl	800168c <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	01db      	lsls	r3, r3, #7
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <cmt_spi3_read+0xe8>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	f001 fda2 	bl	8002b42 <HAL_GPIO_WritePin>
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	48000400 	.word	0x48000400

0800100c <cmt_spi3_write_fifo>:

void cmt_spi3_write_fifo(const uint8_t *p_buf, uint16_t len)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	000a      	movs	r2, r1
 8001016:	1cbb      	adds	r3, r7, #2
 8001018:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	01db      	lsls	r3, r3, #7
 800101e:	483f      	ldr	r0, [pc, #252]	; (800111c <cmt_spi3_write_fifo+0x110>)
 8001020:	2201      	movs	r2, #1
 8001022:	0019      	movs	r1, r3
 8001024:	f001 fd8d 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	01db      	lsls	r3, r3, #7
 800102c:	483b      	ldr	r0, [pc, #236]	; (800111c <cmt_spi3_write_fifo+0x110>)
 800102e:	2201      	movs	r2, #1
 8001030:	0019      	movs	r1, r3
 8001032:	f001 fd86 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	4838      	ldr	r0, [pc, #224]	; (800111c <cmt_spi3_write_fifo+0x110>)
 800103c:	2201      	movs	r2, #1
 800103e:	0019      	movs	r1, r3
 8001040:	f001 fd7f 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	4834      	ldr	r0, [pc, #208]	; (800111c <cmt_spi3_write_fifo+0x110>)
 800104a:	2201      	movs	r2, #1
 800104c:	0019      	movs	r1, r3
 800104e:	f001 fd78 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	0119      	lsls	r1, r3, #4
 8001056:	2390      	movs	r3, #144	; 0x90
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	2200      	movs	r2, #0
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fd70 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	0119      	lsls	r1, r3, #4
 8001066:	2390      	movs	r3, #144	; 0x90
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	2200      	movs	r2, #0
 800106c:	0018      	movs	r0, r3
 800106e:	f001 fd68 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_sda_out();
 8001072:	f000 fad9 	bl	8001628 <cmt_spi3_sda_out>

    for (i = 0; i < len; i++)
 8001076:	230e      	movs	r3, #14
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	2200      	movs	r2, #0
 800107c:	801a      	strh	r2, [r3, #0]
 800107e:	e039      	b.n	80010f4 <cmt_spi3_write_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	01db      	lsls	r3, r3, #7
 8001084:	4825      	ldr	r0, [pc, #148]	; (800111c <cmt_spi3_write_fifo+0x110>)
 8001086:	2200      	movs	r2, #0
 8001088:	0019      	movs	r1, r3
 800108a:	f001 fd5a 	bl	8002b42 <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 800108e:	f7ff fe12 	bl	8000cb6 <cmt_spi3_delay>
        cmt_spi3_delay();
 8001092:	f7ff fe10 	bl	8000cb6 <cmt_spi3_delay>

        cmt_spi3_send(p_buf[i]);
 8001096:	240e      	movs	r4, #14
 8001098:	193b      	adds	r3, r7, r4
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	18d3      	adds	r3, r2, r3
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff fe35 	bl	8000d12 <cmt_spi3_send>

        cmt_spi3_scl_0();
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	0119      	lsls	r1, r3, #4
 80010ac:	2390      	movs	r3, #144	; 0x90
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	2200      	movs	r2, #0
 80010b2:	0018      	movs	r0, r3
 80010b4:	f001 fd45 	bl	8002b42 <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 80010b8:	f7ff fe0d 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80010bc:	f7ff fe0b 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80010c0:	f7ff fe09 	bl	8000cd6 <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	01db      	lsls	r3, r3, #7
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <cmt_spi3_write_fifo+0x110>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	0019      	movs	r1, r3
 80010ce:	f001 fd38 	bl	8002b42 <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 80010d2:	f7ff fe00 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80010d6:	f7ff fdfe 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80010da:	f7ff fdfc 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80010de:	f7ff fdfa 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80010e2:	f7ff fdf8 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80010e6:	f7ff fdf6 	bl	8000cd6 <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	881a      	ldrh	r2, [r3, #0]
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	3201      	adds	r2, #1
 80010f2:	801a      	strh	r2, [r3, #0]
 80010f4:	230e      	movs	r3, #14
 80010f6:	18fa      	adds	r2, r7, r3
 80010f8:	1cbb      	adds	r3, r7, #2
 80010fa:	8812      	ldrh	r2, [r2, #0]
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d3be      	bcc.n	8001080 <cmt_spi3_write_fifo+0x74>
    }

    cmt_spi3_sda_in();
 8001102:	f000 fac3 	bl	800168c <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <cmt_spi3_write_fifo+0x110>)
 800110c:	2201      	movs	r2, #1
 800110e:	0019      	movs	r1, r3
 8001110:	f001 fd17 	bl	8002b42 <HAL_GPIO_WritePin>
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b005      	add	sp, #20
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	48000400 	.word	0x48000400

08001120 <cmt_spi3_read_fifo>:

void cmt_spi3_read_fifo(uint8_t *p_buf, uint16_t len)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	000a      	movs	r2, r1
 800112a:	1cbb      	adds	r3, r7, #2
 800112c:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	01db      	lsls	r3, r3, #7
 8001132:	483f      	ldr	r0, [pc, #252]	; (8001230 <cmt_spi3_read_fifo+0x110>)
 8001134:	2201      	movs	r2, #1
 8001136:	0019      	movs	r1, r3
 8001138:	f001 fd03 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	483b      	ldr	r0, [pc, #236]	; (8001230 <cmt_spi3_read_fifo+0x110>)
 8001142:	2201      	movs	r2, #1
 8001144:	0019      	movs	r1, r3
 8001146:	f001 fcfc 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	4838      	ldr	r0, [pc, #224]	; (8001230 <cmt_spi3_read_fifo+0x110>)
 8001150:	2201      	movs	r2, #1
 8001152:	0019      	movs	r1, r3
 8001154:	f001 fcf5 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	4834      	ldr	r0, [pc, #208]	; (8001230 <cmt_spi3_read_fifo+0x110>)
 800115e:	2201      	movs	r2, #1
 8001160:	0019      	movs	r1, r3
 8001162:	f001 fcee 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	0119      	lsls	r1, r3, #4
 800116a:	2390      	movs	r3, #144	; 0x90
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	2200      	movs	r2, #0
 8001170:	0018      	movs	r0, r3
 8001172:	f001 fce6 	bl	8002b42 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	0119      	lsls	r1, r3, #4
 800117a:	2390      	movs	r3, #144	; 0x90
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2200      	movs	r2, #0
 8001180:	0018      	movs	r0, r3
 8001182:	f001 fcde 	bl	8002b42 <HAL_GPIO_WritePin>

    cmt_spi3_sda_in();
 8001186:	f000 fa81 	bl	800168c <cmt_spi3_sda_in>

    for (i = 0; i < len; i++)
 800118a:	230e      	movs	r3, #14
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2200      	movs	r2, #0
 8001190:	801a      	strh	r2, [r3, #0]
 8001192:	e039      	b.n	8001208 <cmt_spi3_read_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	01db      	lsls	r3, r3, #7
 8001198:	4825      	ldr	r0, [pc, #148]	; (8001230 <cmt_spi3_read_fifo+0x110>)
 800119a:	2200      	movs	r2, #0
 800119c:	0019      	movs	r1, r3
 800119e:	f001 fcd0 	bl	8002b42 <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 80011a2:	f7ff fd88 	bl	8000cb6 <cmt_spi3_delay>
        cmt_spi3_delay();
 80011a6:	f7ff fd86 	bl	8000cb6 <cmt_spi3_delay>

        p_buf[i] = cmt_spi3_recv();
 80011aa:	250e      	movs	r5, #14
 80011ac:	197b      	adds	r3, r7, r5
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	18d4      	adds	r4, r2, r3
 80011b4:	f7ff fdf7 	bl	8000da6 <cmt_spi3_recv>
 80011b8:	0003      	movs	r3, r0
 80011ba:	7023      	strb	r3, [r4, #0]

        cmt_spi3_scl_0();
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	0119      	lsls	r1, r3, #4
 80011c0:	2390      	movs	r3, #144	; 0x90
 80011c2:	05db      	lsls	r3, r3, #23
 80011c4:	2200      	movs	r2, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 fcbb 	bl	8002b42 <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 80011cc:	f7ff fd83 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80011d0:	f7ff fd81 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80011d4:	f7ff fd7f 	bl	8000cd6 <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	01db      	lsls	r3, r3, #7
 80011dc:	4814      	ldr	r0, [pc, #80]	; (8001230 <cmt_spi3_read_fifo+0x110>)
 80011de:	2201      	movs	r2, #1
 80011e0:	0019      	movs	r1, r3
 80011e2:	f001 fcae 	bl	8002b42 <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 80011e6:	f7ff fd76 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80011ea:	f7ff fd74 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80011ee:	f7ff fd72 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80011f2:	f7ff fd70 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80011f6:	f7ff fd6e 	bl	8000cd6 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80011fa:	f7ff fd6c 	bl	8000cd6 <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 80011fe:	197b      	adds	r3, r7, r5
 8001200:	881a      	ldrh	r2, [r3, #0]
 8001202:	197b      	adds	r3, r7, r5
 8001204:	3201      	adds	r2, #1
 8001206:	801a      	strh	r2, [r3, #0]
 8001208:	230e      	movs	r3, #14
 800120a:	18fa      	adds	r2, r7, r3
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	8812      	ldrh	r2, [r2, #0]
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d3be      	bcc.n	8001194 <cmt_spi3_read_fifo+0x74>
    }

    cmt_spi3_sda_in();
 8001216:	f000 fa39 	bl	800168c <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	01db      	lsls	r3, r3, #7
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <cmt_spi3_read_fifo+0x110>)
 8001220:	2201      	movs	r2, #1
 8001222:	0019      	movs	r1, r3
 8001224:	f001 fc8d 	bl	8002b42 <HAL_GPIO_WritePin>
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	48000400 	.word	0x48000400

08001234 <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 8001238:	f7ff fce6 	bl	8000c08 <Cmt2300_InitGpio>
    Cmt2300_Init();
 800123c:	f7ff fc88 	bl	8000b50 <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <RF_Init+0x60>)
 8001242:	220c      	movs	r2, #12
 8001244:	0019      	movs	r1, r3
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fcad 	bl	8000ba6 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <RF_Init+0x64>)
 800124e:	220c      	movs	r2, #12
 8001250:	0019      	movs	r1, r3
 8001252:	200c      	movs	r0, #12
 8001254:	f7ff fca7 	bl	8000ba6 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <RF_Init+0x68>)
 800125a:	2208      	movs	r2, #8
 800125c:	0019      	movs	r1, r3
 800125e:	2018      	movs	r0, #24
 8001260:	f7ff fca1 	bl	8000ba6 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <RF_Init+0x6c>)
 8001266:	2218      	movs	r2, #24
 8001268:	0019      	movs	r1, r3
 800126a:	2020      	movs	r0, #32
 800126c:	f7ff fc9b 	bl	8000ba6 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <RF_Init+0x70>)
 8001272:	221d      	movs	r2, #29
 8001274:	0019      	movs	r1, r3
 8001276:	2038      	movs	r0, #56	; 0x38
 8001278:	f7ff fc95 	bl	8000ba6 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <RF_Init+0x74>)
 800127e:	220b      	movs	r2, #11
 8001280:	0019      	movs	r1, r3
 8001282:	2055      	movs	r0, #85	; 0x55
 8001284:	f7ff fc8f 	bl	8000ba6 <Cmt2300_ConfigRegBank>

    RF_Config();
 8001288:	f000 f810 	bl	80012ac <RF_Config>
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	08005218 	.word	0x08005218
 8001298:	08005224 	.word	0x08005224
 800129c:	08005230 	.word	0x08005230
 80012a0:	08005238 	.word	0x08005238
 80012a4:	08005250 	.word	0x08005250
 80012a8:	08005270 	.word	0x08005270

080012ac <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff f89c 	bl	80003ee <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 80012b6:	2020      	movs	r0, #32
 80012b8:	f7ff f844 	bl	8000344 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 80012bc:	2107      	movs	r1, #7
 80012be:	200a      	movs	r0, #10
 80012c0:	f7ff f850 	bl	8000364 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 80012c4:	203f      	movs	r0, #63	; 0x3f
 80012c6:	f7ff f8cd 	bl	8000464 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fbfd 	bl	8000aca <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 80012d0:	f7ff f804 	bl	80002dc <Cmt2300_GoSleep>
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <RF_StartTx>:

    g_nNextRFState = RF_STATE_RX_START;
}

void RF_StartTx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	200a      	movs	r0, #10
 80012e8:	183b      	adds	r3, r7, r0
 80012ea:	1c0a      	adds	r2, r1, #0
 80012ec:	801a      	strh	r2, [r3, #0]
    g_pTxBuffer = buf;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <RF_StartTx+0x34>)
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	601a      	str	r2, [r3, #0]
    g_nTxLength = len;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <RF_StartTx+0x38>)
 80012f6:	183a      	adds	r2, r7, r0
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	801a      	strh	r2, [r3, #0]
    g_nTxTimeout = timeout;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <RF_StartTx+0x3c>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]

    g_nNextRFState = RF_STATE_TX_START;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <RF_StartTx+0x40>)
 8001304:	2205      	movs	r2, #5
 8001306:	701a      	strb	r2, [r3, #0]
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b004      	add	sp, #16
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000048 	.word	0x20000048
 8001314:	2000004c 	.word	0x2000004c
 8001318:	20000004 	.word	0x20000004
 800131c:	20000040 	.word	0x20000040

08001320 <RF_Process>:

EnumRFResult RF_Process(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
    EnumRFResult nRes = RF_BUSY;
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]

    switch (g_nNextRFState)
 800132c:	4b7c      	ldr	r3, [pc, #496]	; (8001520 <RF_Process+0x200>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d900      	bls.n	8001336 <RF_Process+0x16>
 8001334:	e0e8      	b.n	8001508 <RF_Process+0x1e8>
 8001336:	009a      	lsls	r2, r3, #2
 8001338:	4b7a      	ldr	r3, [pc, #488]	; (8001524 <RF_Process+0x204>)
 800133a:	18d3      	adds	r3, r2, r3
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	469f      	mov	pc, r3
    {
    case RF_STATE_IDLE:
    {
        nRes = RF_IDLE;
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
        break;
 8001346:	e0e4      	b.n	8001512 <RF_Process+0x1f2>
    }

    case RF_STATE_RX_START:
    {
        Cmt2300_GoStby();
 8001348:	f7fe ffd5 	bl	80002f6 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 800134c:	f7ff f915 	bl	800057a <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableReadFifo();
 8001350:	f7ff f8c2 	bl	80004d8 <Cmt2300_EnableReadFifo>
        Cmt2300_ClearFifo();
 8001354:	f7ff f8fe 	bl	8000554 <Cmt2300_ClearFifo>

        if (false == Cmt2300_GoRx())
 8001358:	f7fe ffe7 	bl	800032a <Cmt2300_GoRx>
 800135c:	0003      	movs	r3, r0
 800135e:	001a      	movs	r2, r3
 8001360:	2301      	movs	r3, #1
 8001362:	4053      	eors	r3, r2
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <RF_Process+0x52>
        {
            g_nNextRFState = RF_STATE_ERROR;
 800136a:	4b6d      	ldr	r3, [pc, #436]	; (8001520 <RF_Process+0x200>)
 800136c:	2209      	movs	r2, #9
 800136e:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;

            g_nRxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 8001370:	e0cf      	b.n	8001512 <RF_Process+0x1f2>
            cmt2300_irq_request=0;
 8001372:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <RF_Process+0x208>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;
 8001378:	4b69      	ldr	r3, [pc, #420]	; (8001520 <RF_Process+0x200>)
 800137a:	2202      	movs	r2, #2
 800137c:	701a      	strb	r2, [r3, #0]
            g_nRxTimeCount = Cmt2300_GetTickCount();
 800137e:	4b6b      	ldr	r3, [pc, #428]	; (800152c <RF_Process+0x20c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <RF_Process+0x210>)
 8001384:	601a      	str	r2, [r3, #0]
        break;
 8001386:	e0c4      	b.n	8001512 <RF_Process+0x1f2>
    case RF_STATE_RX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_PKT_OK_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG)) /* Read PKT_OK flag */
#else
        if (cmt2300_irq_request) /* Read INT2, PKT_OK */
 8001388:	4b67      	ldr	r3, [pc, #412]	; (8001528 <RF_Process+0x208>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <RF_Process+0x7e>
#endif
        {
            cmt2300_irq_request=0;
 8001392:	4b65      	ldr	r3, [pc, #404]	; (8001528 <RF_Process+0x208>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_DONE;
 8001398:	4b61      	ldr	r3, [pc, #388]	; (8001520 <RF_Process+0x200>)
 800139a:	2203      	movs	r2, #3
 800139c:	701a      	strb	r2, [r3, #0]
        }

        if( (INFINITE != g_nRxTimeout) && ((g_nSysTickCount-g_nRxTimeCount) > g_nRxTimeout) )
 800139e:	4b65      	ldr	r3, [pc, #404]	; (8001534 <RF_Process+0x214>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	d100      	bne.n	80013a8 <RF_Process+0x88>
 80013a6:	e0b1      	b.n	800150c <RF_Process+0x1ec>
 80013a8:	4b60      	ldr	r3, [pc, #384]	; (800152c <RF_Process+0x20c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b60      	ldr	r3, [pc, #384]	; (8001530 <RF_Process+0x210>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1ad2      	subs	r2, r2, r3
 80013b2:	4b60      	ldr	r3, [pc, #384]	; (8001534 <RF_Process+0x214>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d800      	bhi.n	80013bc <RF_Process+0x9c>
 80013ba:	e0a7      	b.n	800150c <RF_Process+0x1ec>
            g_nNextRFState = RF_STATE_RX_TIMEOUT;
 80013bc:	4b58      	ldr	r3, [pc, #352]	; (8001520 <RF_Process+0x200>)
 80013be:	2204      	movs	r2, #4
 80013c0:	701a      	strb	r2, [r3, #0]
        
        break;
 80013c2:	e0a3      	b.n	800150c <RF_Process+0x1ec>
    }

    case RF_STATE_RX_DONE:
    {
        Cmt2300_GoStby();
 80013c4:	f7fe ff97 	bl	80002f6 <Cmt2300_GoStby>

        Cmt2300_ReadFifo(g_pRxBuffer, 1);//读取数据长度
 80013c8:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <RF_Process+0x218>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff fc4d 	bl	8000c6e <Cmt2300_ReadFifo>
           
        PlayLoadlen=g_pRxBuffer[0];
 80013d4:	4b58      	ldr	r3, [pc, #352]	; (8001538 <RF_Process+0x218>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	4b58      	ldr	r3, [pc, #352]	; (800153c <RF_Process+0x21c>)
 80013dc:	701a      	strb	r2, [r3, #0]
        
        /* The length need be smaller than 32 */
        Cmt2300_ReadFifo(g_pRxBuffer, PlayLoadlen);
 80013de:	4b56      	ldr	r3, [pc, #344]	; (8001538 <RF_Process+0x218>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b56      	ldr	r3, [pc, #344]	; (800153c <RF_Process+0x21c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	0019      	movs	r1, r3
 80013ea:	0010      	movs	r0, r2
 80013ec:	f7ff fc3f 	bl	8000c6e <Cmt2300_ReadFifo>

        g_nInterrutFlags = Cmt2300_ClearInterruptFlags();
 80013f0:	f7ff f8c3 	bl	800057a <Cmt2300_ClearInterruptFlags>
 80013f4:	0003      	movs	r3, r0
 80013f6:	001a      	movs	r2, r3
 80013f8:	4b51      	ldr	r3, [pc, #324]	; (8001540 <RF_Process+0x220>)
 80013fa:	701a      	strb	r2, [r3, #0]

        //        Cmt2300_GoSleep();
        g_nNextRFState = RF_STATE_IDLE;
 80013fc:	4b48      	ldr	r3, [pc, #288]	; (8001520 <RF_Process+0x200>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_DONE;
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	2202      	movs	r2, #2
 8001406:	701a      	strb	r2, [r3, #0]
        break;
 8001408:	e083      	b.n	8001512 <RF_Process+0x1f2>

    case RF_STATE_RX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();
        //
        g_nNextRFState = RF_STATE_IDLE;
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <RF_Process+0x200>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_TIMEOUT;
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	2203      	movs	r2, #3
 8001414:	701a      	strb	r2, [r3, #0]
                
        break;
 8001416:	e07c      	b.n	8001512 <RF_Process+0x1f2>
    }

    case RF_STATE_TX_START:
    {
        Cmt2300_GoStby();
 8001418:	f7fe ff6d 	bl	80002f6 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 800141c:	f7ff f8ad 	bl	800057a <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableWriteFifo();
 8001420:	f7ff f879 	bl	8000516 <Cmt2300_EnableWriteFifo>
        Cmt2300_ClearFifo();
 8001424:	f7ff f896 	bl	8000554 <Cmt2300_ClearFifo>

        Cmt2300_SetPayloadLength(g_nTxLength); //发射数据长度
 8001428:	4b46      	ldr	r3, [pc, #280]	; (8001544 <RF_Process+0x224>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff fb13 	bl	8000a58 <Cmt2300_SetPayloadLength>
      
        Cmt2300_WriteFifo(g_pTxBuffer, g_nTxLength);
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <RF_Process+0x228>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <RF_Process+0x224>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	0019      	movs	r1, r3
 800143c:	0010      	movs	r0, r2
 800143e:	f7ff fc28 	bl	8000c92 <Cmt2300_WriteFifo>

        if (0 == (CMT2300_MASK_TX_FIFO_NMTY_FLG & Cmt2300_ReadReg(CMT2300_CUS_FIFO_FLAG)))
 8001442:	206e      	movs	r0, #110	; 0x6e
 8001444:	f7ff fbe7 	bl	8000c16 <Cmt2300_ReadReg>
 8001448:	0003      	movs	r3, r0
 800144a:	001a      	movs	r2, r3
 800144c:	2302      	movs	r3, #2
 800144e:	4013      	ands	r3, r2
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <RF_Process+0x13c>
        {
            g_nNextRFState = RF_STATE_ERROR;
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <RF_Process+0x200>)
 8001458:	2209      	movs	r2, #9
 800145a:	701a      	strb	r2, [r3, #0]
        }

        if (false == Cmt2300_GoTx())
 800145c:	f7fe ff58 	bl	8000310 <Cmt2300_GoTx>
 8001460:	0003      	movs	r3, r0
 8001462:	001a      	movs	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	4053      	eors	r3, r2
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <RF_Process+0x156>
        {
            g_nNextRFState = RF_STATE_ERROR;
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <RF_Process+0x200>)
 8001470:	2209      	movs	r2, #9
 8001472:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;

            g_nTxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 8001474:	e04d      	b.n	8001512 <RF_Process+0x1f2>
            cmt2300_irq_request=0;
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <RF_Process+0x208>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <RF_Process+0x200>)
 800147e:	2206      	movs	r2, #6
 8001480:	701a      	strb	r2, [r3, #0]
            g_nTxTimeCount = Cmt2300_GetTickCount();
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <RF_Process+0x20c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <RF_Process+0x22c>)
 8001488:	601a      	str	r2, [r3, #0]
        break;
 800148a:	e042      	b.n	8001512 <RF_Process+0x1f2>
    case RF_STATE_TX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
#else
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
 800148c:	206a      	movs	r0, #106	; 0x6a
 800148e:	f7ff fbc2 	bl	8000c16 <Cmt2300_ReadReg>
 8001492:	0003      	movs	r3, r0
 8001494:	001a      	movs	r2, r3
 8001496:	2308      	movs	r3, #8
 8001498:	4013      	ands	r3, r2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <RF_Process+0x186>
#endif
        {         
          g_nNextRFState = RF_STATE_TX_DONE;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <RF_Process+0x200>)
 80014a2:	2207      	movs	r2, #7
 80014a4:	701a      	strb	r2, [r3, #0]
        }
        
        if( (INFINITE != g_nTxTimeout) && ((g_nSysTickCount-g_nTxTimeCount) > g_nTxTimeout) )
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <RF_Process+0x230>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	d030      	beq.n	8001510 <RF_Process+0x1f0>
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <RF_Process+0x20c>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <RF_Process+0x22c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1ad2      	subs	r2, r2, r3
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <RF_Process+0x230>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d927      	bls.n	8001510 <RF_Process+0x1f0>
            g_nNextRFState = RF_STATE_TX_TIMEOUT;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <RF_Process+0x200>)
 80014c2:	2208      	movs	r2, #8
 80014c4:	701a      	strb	r2, [r3, #0]

        break;
 80014c6:	e023      	b.n	8001510 <RF_Process+0x1f0>
    }

    case RF_STATE_TX_DONE:
    {
        Cmt2300_ClearInterruptFlags();
 80014c8:	f7ff f857 	bl	800057a <Cmt2300_ClearInterruptFlags>
        //Cmt2300_GoSleep();

        g_nNextRFState = RF_STATE_IDLE;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <RF_Process+0x200>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_DONE;
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	2204      	movs	r2, #4
 80014d6:	701a      	strb	r2, [r3, #0]
        break;
 80014d8:	e01b      	b.n	8001512 <RF_Process+0x1f2>
    }

    case RF_STATE_TX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();      
        g_nNextRFState = RF_STATE_IDLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <RF_Process+0x200>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_TIMEOUT;
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	2205      	movs	r2, #5
 80014e4:	701a      	strb	r2, [r3, #0]
        break;
 80014e6:	e014      	b.n	8001512 <RF_Process+0x1f2>
    }

    case RF_STATE_ERROR:
    {
        Cmt2300_SoftReset();
 80014e8:	f7fe fe9a 	bl	8000220 <Cmt2300_SoftReset>
        Delay_Ms(10);
 80014ec:	200a      	movs	r0, #10
 80014ee:	f000 f871 	bl	80015d4 <Delay_Ms>

        Cmt2300_GoStby();
 80014f2:	f7fe ff00 	bl	80002f6 <Cmt2300_GoStby>
        RF_Config();
 80014f6:	f7ff fed9 	bl	80012ac <RF_Config>

        g_nNextRFState = RF_STATE_IDLE;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <RF_Process+0x200>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
        nRes = RF_ERROR;
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	2206      	movs	r2, #6
 8001504:	701a      	strb	r2, [r3, #0]
        break;
 8001506:	e004      	b.n	8001512 <RF_Process+0x1f2>
    }

    default:
        break;
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	e002      	b.n	8001512 <RF_Process+0x1f2>
        break;
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	e000      	b.n	8001512 <RF_Process+0x1f2>
        break;
 8001510:	46c0      	nop			; (mov r8, r8)
    }

    return nRes;
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000040 	.word	0x20000040
 8001524:	0800527c 	.word	0x0800527c
 8001528:	2000005a 	.word	0x2000005a
 800152c:	2000005c 	.word	0x2000005c
 8001530:	20000050 	.word	0x20000050
 8001534:	20000000 	.word	0x20000000
 8001538:	20000044 	.word	0x20000044
 800153c:	20000058 	.word	0x20000058
 8001540:	20000059 	.word	0x20000059
 8001544:	2000004c 	.word	0x2000004c
 8001548:	20000048 	.word	0x20000048
 800154c:	20000054 	.word	0x20000054
 8001550:	20000004 	.word	0x20000004

08001554 <rfTxTest>:
 * @brief rf send test
 * @param None
 * @retval None
 */
static void rfTxTest(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
    uint8_t g_txBuffer[]={0x09,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07}; /* RF Tx buffer */
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4a17      	ldr	r2, [pc, #92]	; (80015bc <rfTxTest+0x68>)
 800155e:	ca03      	ldmia	r2!, {r0, r1}
 8001560:	c303      	stmia	r3!, {r0, r1}
 8001562:	7812      	ldrb	r2, [r2, #0]
 8001564:	701a      	strb	r2, [r3, #0]
    RF_StartTx(g_txBuffer,  g_txBuffer[0], INFINITE); 
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b299      	uxth	r1, r3
 800156c:	2301      	movs	r3, #1
 800156e:	425a      	negs	r2, r3
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	0018      	movs	r0, r3
 8001574:	f7ff feb2 	bl	80012dc <RF_StartTx>

    while ( 1 )
    {
        switch (RF_Process())
 8001578:	f7ff fed2 	bl	8001320 <RF_Process>
 800157c:	1e03      	subs	r3, r0, #0
 800157e:	d002      	beq.n	8001586 <rfTxTest+0x32>
 8001580:	2b04      	cmp	r3, #4
 8001582:	d00a      	beq.n	800159a <rfTxTest+0x46>
        case RF_TX_DONE: //发射完成
            led1Toggle();
            break;
    
        default:
            break;
 8001584:	e019      	b.n	80015ba <rfTxTest+0x66>
            RF_StartTx(g_txBuffer,  g_txBuffer[0] , INFINITE);//发射数据
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b299      	uxth	r1, r3
 800158c:	2301      	movs	r3, #1
 800158e:	425a      	negs	r2, r3
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff fea2 	bl	80012dc <RF_StartTx>
            break;
 8001598:	e00f      	b.n	80015ba <rfTxTest+0x66>
            led1Toggle();
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <rfTxTest+0x6c>)
 800159c:	2200      	movs	r2, #0
 800159e:	2110      	movs	r1, #16
 80015a0:	0018      	movs	r0, r3
 80015a2:	f001 face 	bl	8002b42 <HAL_GPIO_WritePin>
 80015a6:	2032      	movs	r0, #50	; 0x32
 80015a8:	f000 f814 	bl	80015d4 <Delay_Ms>
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <rfTxTest+0x6c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	2110      	movs	r1, #16
 80015b2:	0018      	movs	r0, r3
 80015b4:	f001 fac5 	bl	8002b42 <HAL_GPIO_WritePin>
            break;
 80015b8:	46c0      	nop			; (mov r8, r8)
        switch (RF_Process())
 80015ba:	e7dd      	b.n	8001578 <rfTxTest+0x24>
 80015bc:	080050e4 	.word	0x080050e4
 80015c0:	48000400 	.word	0x48000400

080015c4 <bspTest>:
 * @brief bsp test api
 * @param None
 * @retval None
 */
void bspTest(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
#endif
#if 0
    uartTest();
#endif
#if 1
    rfTxTest();
 80015c8:	f7ff ffc4 	bl	8001554 <rfTxTest>
#endif
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e00c      	b.n	8001604 <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	e002      	b.n	80015f6 <Delay_Ms+0x22>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	3301      	adds	r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <Delay_Ms+0x44>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d9f8      	bls.n	80015f0 <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3ee      	bcc.n	80015ea <Delay_Ms+0x16>
  }
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b004      	add	sp, #16
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	000011bb 	.word	0x000011bb

0800161c <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	0018      	movs	r0, r3
 8001632:	2314      	movs	r3, #20
 8001634:	001a      	movs	r2, r3
 8001636:	2100      	movs	r1, #0
 8001638:	f003 fd39 	bl	80050ae <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <cmt_spi3_sda_out+0x60>)
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <cmt_spi3_sda_out+0x60>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	0289      	lsls	r1, r1, #10
 8001646:	430a      	orrs	r2, r1
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <cmt_spi3_sda_out+0x60>)
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	029b      	lsls	r3, r3, #10
 8001652:	4013      	ands	r3, r2
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	0052      	lsls	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2201      	movs	r2, #1
 8001664:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2203      	movs	r2, #3
 8001670:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001672:	1d3a      	adds	r2, r7, #4
 8001674:	2390      	movs	r3, #144	; 0x90
 8001676:	05db      	lsls	r3, r3, #23
 8001678:	0011      	movs	r1, r2
 800167a:	0018      	movs	r0, r3
 800167c:	f001 f804 	bl	8002688 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b006      	add	sp, #24
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000

0800168c <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	0018      	movs	r0, r3
 8001696:	2314      	movs	r3, #20
 8001698:	001a      	movs	r2, r3
 800169a:	2100      	movs	r1, #0
 800169c:	f003 fd07 	bl	80050ae <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <cmt_spi3_sda_in+0x5c>)
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <cmt_spi3_sda_in+0x5c>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0289      	lsls	r1, r1, #10
 80016aa:	430a      	orrs	r2, r1
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <cmt_spi3_sda_in+0x5c>)
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	0052      	lsls	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 80016d0:	1d3a      	adds	r2, r7, #4
 80016d2:	2390      	movs	r3, #144	; 0x90
 80016d4:	05db      	lsls	r3, r3, #23
 80016d6:	0011      	movs	r1, r2
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 ffd5 	bl	8002688 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b006      	add	sp, #24
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_GPIO_EXTI_Callback>:
  NVIC_Init(&NVIC_InitStructure);
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	0002      	movs	r2, r0
 80016f4:	1dbb      	adds	r3, r7, #6
 80016f6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 80016f8:	1dbb      	adds	r3, r7, #6
 80016fa:	881a      	ldrh	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	015b      	lsls	r3, r3, #5
 8001700:	429a      	cmp	r2, r3
 8001702:	d102      	bne.n	800170a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		cmt2300_irq_request = 1;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GPIO_EXTI_Callback+0x28>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
	}
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	2000005a 	.word	0x2000005a

08001718 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer interrupt callback function
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim16.Instance)
    //	{
    //		time100ms_flag = 1;
    //		timer100InterruptHandler();
    //	}
    if (htim->Instance == htim17.Instance) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d103      	bne.n	8001734 <HAL_TIM_PeriodElapsedCallback+0x1c>
        uartTimerIrqHandler(htim);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0018      	movs	r0, r3
 8001730:	f000 f964 	bl	80019fc <uartTimerIrqHandler>
    }
}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b002      	add	sp, #8
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000184 	.word	0x20000184

08001740 <HAL_SysTick_Handler>:

void HAL_SysTick_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_SysTick_Handler+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	4b02      	ldr	r3, [pc, #8]	; (8001754 <HAL_SysTick_Handler+0x14>)
 800174c:	601a      	str	r2, [r3, #0]
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000005c 	.word	0x2000005c

08001758 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <uartInitRxFifo>:
 * @brief Init uart fifo
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	0002      	movs	r2, r0
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	011a      	lsls	r2, r3, #4
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <uartInitRxFifo+0x34>)
 800178c:	18d0      	adds	r0, r2, r3
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	021a      	lsls	r2, r3, #8
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <uartInitRxFifo+0x38>)
 8001796:	18d3      	adds	r3, r2, r3
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	0019      	movs	r1, r3
 800179e:	f003 fbeb 	bl	8004f78 <kfifo_init>
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	20000164 	.word	0x20000164
 80017b0:	20000064 	.word	0x20000064

080017b4 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	1dbb      	adds	r3, r7, #6
 80017c0:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80017c2:	2517      	movs	r5, #23
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 80017ca:	197c      	adds	r4, r7, r5
 80017cc:	1dbb      	adds	r3, r7, #6
 80017ce:	881a      	ldrh	r2, [r3, #0]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f002 fa33 	bl	8003c40 <HAL_UART_Receive_IT>
 80017da:	0003      	movs	r3, r0
 80017dc:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80017de:	197b      	adds	r3, r7, r5
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	2120      	movs	r1, #32
 80017ec:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2278      	movs	r2, #120	; 0x78
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]
    }

    return status;
 80017f6:	2317      	movs	r3, #23
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	781b      	ldrb	r3, [r3, #0]
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b006      	add	sp, #24
 8001802:	bdb0      	pop	{r4, r5, r7, pc}

08001804 <uartInit>:
 * @brief Uart init
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	0002      	movs	r2, r0
 800180c:	1dfb      	adds	r3, r7, #7
 800180e:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff ffaf 	bl	8001778 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <uartInit+0x60>)
 8001820:	0052      	lsls	r2, r2, #1
 8001822:	2100      	movs	r1, #0
 8001824:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <uartInit+0x64>)
 800182c:	0052      	lsls	r2, r2, #1
 800182e:	2100      	movs	r1, #0
 8001830:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <uartInit+0x68>)
 8001834:	2200      	movs	r2, #0
 8001836:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <uartInit+0x6c>)
 800183a:	2200      	movs	r2, #0
 800183c:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <uartInit+0x70>)
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	18d3      	adds	r3, r2, r3
 8001848:	3304      	adds	r3, #4
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <uartInit+0x74>)
 8001852:	18d3      	adds	r3, r2, r3
 8001854:	2201      	movs	r2, #1
 8001856:	0019      	movs	r1, r3
 8001858:	f7ff ffac 	bl	80017b4 <UART_Receive_IT>
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000174 	.word	0x20000174
 8001868:	20000178 	.word	0x20000178
 800186c:	2000017c 	.word	0x2000017c
 8001870:	20000180 	.word	0x20000180
 8001874:	20000008 	.word	0x20000008
 8001878:	20000060 	.word	0x20000060

0800187c <uartRecovery>:
/**
 * @brief uart recovery mode
 * @param channel 
 */
static void uartRecovery(uartChannel_t channel)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	0002      	movs	r2, r0
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <uartRecovery+0x34>)
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	18d3      	adds	r3, r2, r3
 8001892:	3304      	adds	r3, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0018      	movs	r0, r3
 8001898:	f002 f994 	bl	8003bc4 <HAL_UART_DeInit>
    uartInit(channel);
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff ffaf 	bl	8001804 <uartInit>
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	20000008 	.word	0x20000008

080018b4 <HAL_UART_TxCpltCallback>:
 * @brief uart send done callback function
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80018bc:	230f      	movs	r3, #15
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e015      	b.n	80018f2 <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 80018c6:	210f      	movs	r1, #15
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_UART_TxCpltCallback+0x54>)
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	58d2      	ldr	r2, [r2, r3]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d105      	bne.n	80018e6 <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_UART_TxCpltCallback+0x58>)
 80018e0:	2102      	movs	r1, #2
 80018e2:	54d1      	strb	r1, [r2, r3]
            break;
 80018e4:	e00b      	b.n	80018fe <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80018e6:	210f      	movs	r1, #15
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	3201      	adds	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	230f      	movs	r3, #15
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0e4      	beq.n	80018c6 <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b004      	add	sp, #16
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	20000008 	.word	0x20000008
 800190c:	2000017c 	.word	0x2000017c

08001910 <HAL_UART_RxCpltCallback>:
/**
 * @brief Uart rx callback
 * @param huart 
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001918:	230f      	movs	r3, #15
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e059      	b.n	80019d6 <HAL_UART_RxCpltCallback+0xc6>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8001922:	240f      	movs	r4, #15
 8001924:	193b      	adds	r3, r7, r4
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_UART_RxCpltCallback+0xd8>)
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	58d2      	ldr	r2, [r2, r3]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d149      	bne.n	80019ca <HAL_UART_RxCpltCallback+0xba>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 8001936:	193b      	adds	r3, r7, r4
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4a2c      	ldr	r2, [pc, #176]	; (80019ec <HAL_UART_RxCpltCallback+0xdc>)
 800193c:	2103      	movs	r1, #3
 800193e:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8001940:	193b      	adds	r3, r7, r4
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <HAL_UART_RxCpltCallback+0xd8>)
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	18d3      	adds	r3, r2, r3
 800194a:	3308      	adds	r3, #8
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8001952:	193b      	adds	r3, r7, r4
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <HAL_UART_RxCpltCallback+0xd8>)
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	18d3      	adds	r3, r2, r3
 800195c:	3308      	adds	r3, #8
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001964:	193b      	adds	r3, r7, r4
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_UART_RxCpltCallback+0xd8>)
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	330c      	adds	r3, #12
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0018      	movs	r0, r3
 8001974:	f001 fe9c 	bl	80036b0 <HAL_TIM_Base_Start_IT>
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 8001978:	193b      	adds	r3, r7, r4
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	011a      	lsls	r2, r3, #4
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_UART_RxCpltCallback+0xe0>)
 8001980:	18d0      	adds	r0, r2, r3
 8001982:	193b      	adds	r3, r7, r4
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_UART_RxCpltCallback+0xe4>)
 8001988:	18d3      	adds	r3, r2, r3
 800198a:	2201      	movs	r2, #1
 800198c:	0019      	movs	r1, r3
 800198e:	f003 fb3a 	bl	8005006 <kfifo_in>
            uart_rx_counter[i]++;
 8001992:	0020      	movs	r0, r4
 8001994:	193b      	adds	r3, r7, r4
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_UART_RxCpltCallback+0xe8>)
 800199a:	0059      	lsls	r1, r3, #1
 800199c:	5a8a      	ldrh	r2, [r1, r2]
 800199e:	3201      	adds	r2, #1
 80019a0:	b291      	uxth	r1, r2
 80019a2:	4a15      	ldr	r2, [pc, #84]	; (80019f8 <HAL_UART_RxCpltCallback+0xe8>)
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 80019a8:	0001      	movs	r1, r0
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_UART_RxCpltCallback+0xd8>)
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	18d3      	adds	r3, r2, r3
 80019b4:	3304      	adds	r3, #4
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_UART_RxCpltCallback+0xe4>)
 80019be:	18d3      	adds	r3, r2, r3
 80019c0:	2201      	movs	r2, #1
 80019c2:	0019      	movs	r1, r3
 80019c4:	f7ff fef6 	bl	80017b4 <UART_Receive_IT>
            return;
 80019c8:	e00a      	b.n	80019e0 <HAL_UART_RxCpltCallback+0xd0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80019ca:	210f      	movs	r1, #15
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	3201      	adds	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	230f      	movs	r3, #15
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0a0      	beq.n	8001922 <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b005      	add	sp, #20
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000180 	.word	0x20000180
 80019f0:	20000164 	.word	0x20000164
 80019f4:	20000060 	.word	0x20000060
 80019f8:	20000174 	.word	0x20000174

080019fc <uartTimerIrqHandler>:
/**
 * @brief Uart rx timeout callback
 * @param htim 
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001a04:	230f      	movs	r3, #15
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e05d      	b.n	8001aca <uartTimerIrqHandler+0xce>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 8001a0e:	210f      	movs	r1, #15
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <uartTimerIrqHandler+0xe4>)
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	18d3      	adds	r3, r2, r3
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d14b      	bne.n	8001abe <uartTimerIrqHandler+0xc2>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 8001a26:	000c      	movs	r4, r1
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ae0 <uartTimerIrqHandler+0xe4>)
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	18d3      	adds	r3, r2, r3
 8001a32:	330c      	adds	r3, #12
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f001 fe86 	bl	8003748 <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8001a3c:	0020      	movs	r0, r4
 8001a3e:	183b      	adds	r3, r7, r0
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <uartTimerIrqHandler+0xe8>)
 8001a44:	2104      	movs	r1, #4
 8001a46:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8001a48:	183b      	adds	r3, r7, r0
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <uartTimerIrqHandler+0xec>)
 8001a4e:	0052      	lsls	r2, r2, #1
 8001a50:	5ad1      	ldrh	r1, [r2, r3]
 8001a52:	183b      	adds	r3, r7, r0
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b25      	ldr	r3, [pc, #148]	; (8001aec <uartTimerIrqHandler+0xf0>)
 8001a58:	0052      	lsls	r2, r2, #1
 8001a5a:	5ad3      	ldrh	r3, [r2, r3]
 8001a5c:	183a      	adds	r2, r7, r0
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	18cb      	adds	r3, r1, r3
 8001a62:	b299      	uxth	r1, r3
 8001a64:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <uartTimerIrqHandler+0xec>)
 8001a66:	0052      	lsls	r2, r2, #1
 8001a68:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <uartTimerIrqHandler+0xec>)
 8001a70:	0052      	lsls	r2, r2, #1
 8001a72:	5ad2      	ldrh	r2, [r2, r3]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d918      	bls.n	8001aae <uartTimerIrqHandler+0xb2>
            {
            	uart_rx_size[i] = uart_rx_counter[i];
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	7819      	ldrb	r1, [r3, #0]
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <uartTimerIrqHandler+0xf0>)
 8001a86:	0049      	lsls	r1, r1, #1
 8001a88:	5ac9      	ldrh	r1, [r1, r3]
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <uartTimerIrqHandler+0xec>)
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	52d1      	strh	r1, [r2, r3]
            	kfifo_reset(&uart_rx_fifo[i]);
 8001a90:	0004      	movs	r4, r0
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	011a      	lsls	r2, r3, #4
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <uartTimerIrqHandler+0xf4>)
 8001a9a:	18d3      	adds	r3, r2, r3
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fe5b 	bl	8001758 <kfifo_reset>
            	uart_rx_size[i] = 0;
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <uartTimerIrqHandler+0xec>)
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	2100      	movs	r1, #0
 8001aac:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 8001aae:	230f      	movs	r3, #15
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <uartTimerIrqHandler+0xf0>)
 8001ab6:	0052      	lsls	r2, r2, #1
 8001ab8:	2100      	movs	r1, #0
 8001aba:	52d1      	strh	r1, [r2, r3]
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 8001abc:	e00b      	b.n	8001ad6 <uartTimerIrqHandler+0xda>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001abe:	210f      	movs	r1, #15
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	3201      	adds	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	230f      	movs	r3, #15
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d09c      	beq.n	8001a0e <uartTimerIrqHandler+0x12>
        }
    }
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b005      	add	sp, #20
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000180 	.word	0x20000180
 8001ae8:	20000178 	.word	0x20000178
 8001aec:	20000174 	.word	0x20000174
 8001af0:	20000164 	.word	0x20000164

08001af4 <HAL_UART_ErrorCallback>:
/**
 * @brief uart error callback
 * @param huart 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001afc:	230f      	movs	r3, #15
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e014      	b.n	8001b30 <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 8001b06:	210f      	movs	r1, #15
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_UART_ErrorCallback+0x50>)
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	58d2      	ldr	r2, [r2, r3]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d104      	bne.n	8001b24 <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff feac 	bl	800187c <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001b24:	210f      	movs	r1, #15
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	3201      	adds	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	230f      	movs	r3, #15
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0e5      	beq.n	8001b06 <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000008 	.word	0x20000008

08001b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0c2      	sub	sp, #264	; 0x108
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t buffer[256] = { 0 };
 8001b4e:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <main+0x90>)
 8001b50:	2284      	movs	r2, #132	; 0x84
 8001b52:	0052      	lsls	r2, r2, #1
 8001b54:	189b      	adds	r3, r3, r2
 8001b56:	19db      	adds	r3, r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	22fc      	movs	r2, #252	; 0xfc
 8001b60:	2100      	movs	r1, #0
 8001b62:	0018      	movs	r0, r3
 8001b64:	f003 faa3 	bl	80050ae <memset>
  uint32_t bufferSize = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	1d7a      	adds	r2, r7, #5
 8001b6c:	32ff      	adds	r2, #255	; 0xff
 8001b6e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b70:	f000 fb98 	bl	80022a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b74:	f000 f834 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b78:	f000 f91a 	bl	8001db0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b7c:	f000 f8b8 	bl	8001cf0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b80:	f000 f8e6 	bl	8001d50 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001b84:	f000 f88c 	bl	8001ca0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  uartInit(BSP_TTL_CHANNEL1);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fe3b 	bl	8001804 <uartInit>
  RF_Init();
 8001b8e:	f7ff fb51 	bl	8001234 <RF_Init>

  /* check rf is inited ok */
  if (Cmt2300_IsExist())
 8001b92:	f7fe ff3d 	bl	8000a10 <Cmt2300_IsExist>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d006      	beq.n	8001ba8 <main+0x60>
  {
	  led1On();
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <main+0x94>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 ffce 	bl	8002b42 <HAL_GPIO_WritePin>
 8001ba6:	e005      	b.n	8001bb4 <main+0x6c>
  }
  else
  {
	  led2On();
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <main+0x94>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	2120      	movs	r1, #32
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 ffc7 	bl	8002b42 <HAL_GPIO_WritePin>
  }

  /* level7: 20dbm */
  Cmt2300_ConfigTxPower(7);
 8001bb4:	2007      	movs	r0, #7
 8001bb6:	f7fe fec3 	bl	8000940 <Cmt2300_ConfigTxPower>
  /* rate:1.2kbps */
  Cmt2300_ConfigDataRate(rf_rate_1K2);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7fe fdea 	bl	8000794 <Cmt2300_ConfigDataRate>
  /* packet type */
  Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7fe fb6c 	bl	800029e <Cmt2300_ConfigPktLenthType>
  /* packet mode */
  Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f7fe fe9a 	bl	8000900 <Cmt2300_ConfigDataMode>
  /* enable fifo */
  Cmt2300_EnableFifoMerge(true);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7fe fc59 	bl	8000484 <Cmt2300_EnableFifoMerge>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if BSP_TEST_ENABLE
	bspTest();
 8001bd2:	f7ff fcf7 	bl	80015c4 <bspTest>
 8001bd6:	e7fc      	b.n	8001bd2 <main+0x8a>
 8001bd8:	fffffefc 	.word	0xfffffefc
 8001bdc:	48000400 	.word	0x48000400

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b095      	sub	sp, #84	; 0x54
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	2420      	movs	r4, #32
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	0018      	movs	r0, r3
 8001bec:	2330      	movs	r3, #48	; 0x30
 8001bee:	001a      	movs	r2, r3
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	f003 fa5c 	bl	80050ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	001a      	movs	r2, r3
 8001c00:	2100      	movs	r1, #0
 8001c02:	f003 fa54 	bl	80050ae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c06:	003b      	movs	r3, r7
 8001c08:	0018      	movs	r0, r3
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f003 fa4d 	bl	80050ae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c14:	0021      	movs	r1, r4
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2201      	movs	r2, #1
 8001c20:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2202      	movs	r2, #2
 8001c26:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0252      	lsls	r2, r2, #9
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	02d2      	lsls	r2, r2, #11
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 ffb7 	bl	8002bb4 <HAL_RCC_OscConfig>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c4a:	f000 f99f 	bl	8001f8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4e:	2110      	movs	r1, #16
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	2207      	movs	r2, #7
 8001c54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2202      	movs	r2, #2
 8001c5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f001 fabb 	bl	80031e8 <HAL_RCC_ClockConfig>
 8001c72:	1e03      	subs	r3, r0, #0
 8001c74:	d001      	beq.n	8001c7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c76:	f000 f989 	bl	8001f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c7a:	003b      	movs	r3, r7
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c80:	003b      	movs	r3, r7
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c86:	003b      	movs	r3, r7
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f001 fbf3 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001c92:	f000 f97b 	bl	8001f8c <Error_Handler>
  }
}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b015      	add	sp, #84	; 0x54
 8001c9c:	bd90      	pop	{r4, r7, pc}
	...

08001ca0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_TIM17_Init+0x44>)
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <MX_TIM17_Init+0x48>)
 8001ca8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_TIM17_Init+0x44>)
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <MX_TIM17_Init+0x4c>)
 8001cae:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_TIM17_Init+0x44>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_TIM17_Init+0x44>)
 8001cb8:	2223      	movs	r2, #35	; 0x23
 8001cba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_TIM17_Init+0x44>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_TIM17_Init+0x44>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_TIM17_Init+0x44>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <MX_TIM17_Init+0x44>)
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f001 fc9d 	bl	8003610 <HAL_TIM_Base_Init>
 8001cd6:	1e03      	subs	r3, r0, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001cda:	f000 f957 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000184 	.word	0x20000184
 8001ce8:	40014800 	.word	0x40014800
 8001cec:	000012bf 	.word	0x000012bf

08001cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <MX_USART1_UART_Init+0x5c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001cfc:	22e1      	movs	r2, #225	; 0xe1
 8001cfe:	0252      	lsls	r2, r2, #9
 8001d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d34:	0018      	movs	r0, r3
 8001d36:	f001 fef1 	bl	8003b1c <HAL_UART_Init>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d3e:	f000 f925 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200001cc 	.word	0x200001cc
 8001d4c:	40013800 	.word	0x40013800

08001d50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <MX_USART2_UART_Init+0x5c>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d5c:	22e1      	movs	r2, #225	; 0xe1
 8001d5e:	0252      	lsls	r2, r2, #9
 8001d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <MX_USART2_UART_Init+0x58>)
 8001d94:	0018      	movs	r0, r3
 8001d96:	f001 fec1 	bl	8003b1c <HAL_UART_Init>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f000 f8f5 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000254 	.word	0x20000254
 8001dac:	40004400 	.word	0x40004400

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	240c      	movs	r4, #12
 8001db8:	193b      	adds	r3, r7, r4
 8001dba:	0018      	movs	r0, r3
 8001dbc:	2314      	movs	r3, #20
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	f003 f974 	bl	80050ae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dc6:	4b6e      	ldr	r3, [pc, #440]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	4b6d      	ldr	r3, [pc, #436]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	03c9      	lsls	r1, r1, #15
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	615a      	str	r2, [r3, #20]
 8001dd4:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	03db      	lsls	r3, r3, #15
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b67      	ldr	r3, [pc, #412]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001de8:	2180      	movs	r1, #128	; 0x80
 8001dea:	0289      	lsls	r1, r1, #10
 8001dec:	430a      	orrs	r2, r1
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	029b      	lsls	r3, r3, #10
 8001df8:	4013      	ands	r3, r2
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b60      	ldr	r3, [pc, #384]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	02c9      	lsls	r1, r1, #11
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	4b5c      	ldr	r3, [pc, #368]	; (8001f80 <MX_GPIO_Init+0x1d0>)
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	02db      	lsls	r3, r3, #11
 8001e14:	4013      	ands	r3, r2
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 8001e1a:	2381      	movs	r3, #129	; 0x81
 8001e1c:	0119      	lsls	r1, r3, #4
 8001e1e:	2390      	movs	r3, #144	; 0x90
 8001e20:	05db      	lsls	r3, r3, #23
 8001e22:	2200      	movs	r2, #0
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 fe8c 	bl	8002b42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 8001e2a:	4956      	ldr	r1, [pc, #344]	; (8001f84 <MX_GPIO_Init+0x1d4>)
 8001e2c:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <MX_GPIO_Init+0x1d8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 fe86 	bl	8002b42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 8001e36:	193b      	adds	r3, r7, r4
 8001e38:	2210      	movs	r2, #16
 8001e3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	2201      	movs	r2, #1
 8001e40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	193b      	adds	r3, r7, r4
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	193a      	adds	r2, r7, r4
 8001e50:	2390      	movs	r3, #144	; 0x90
 8001e52:	05db      	lsls	r3, r3, #23
 8001e54:	0011      	movs	r1, r2
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 fc16 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 8001e5c:	0021      	movs	r1, r4
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	0152      	lsls	r2, r2, #5
 8001e64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e66:	000c      	movs	r4, r1
 8001e68:	193b      	adds	r3, r7, r4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6e:	193b      	adds	r3, r7, r4
 8001e70:	2201      	movs	r2, #1
 8001e72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8001e74:	193b      	adds	r3, r7, r4
 8001e76:	4a44      	ldr	r2, [pc, #272]	; (8001f88 <MX_GPIO_Init+0x1d8>)
 8001e78:	0019      	movs	r1, r3
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	f000 fc04 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 8001e80:	0021      	movs	r1, r4
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	0192      	lsls	r2, r2, #6
 8001e88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8a:	187b      	adds	r3, r7, r1
 8001e8c:	2288      	movs	r2, #136	; 0x88
 8001e8e:	0352      	lsls	r2, r2, #13
 8001e90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2201      	movs	r2, #1
 8001e96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8001e98:	000c      	movs	r4, r1
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	4a3a      	ldr	r2, [pc, #232]	; (8001f88 <MX_GPIO_Init+0x1d8>)
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	0010      	movs	r0, r2
 8001ea2:	f000 fbf1 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 8001ea6:	0021      	movs	r1, r4
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	22c0      	movs	r2, #192	; 0xc0
 8001eac:	0212      	lsls	r2, r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb0:	000c      	movs	r4, r1
 8001eb2:	193b      	adds	r3, r7, r4
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ebe:	193b      	adds	r3, r7, r4
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	193b      	adds	r3, r7, r4
 8001ec6:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <MX_GPIO_Init+0x1d8>)
 8001ec8:	0019      	movs	r1, r3
 8001eca:	0010      	movs	r0, r2
 8001ecc:	f000 fbdc 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001ed0:	193b      	adds	r3, r7, r4
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	0052      	lsls	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	2200      	movs	r2, #0
 8001edc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	193b      	adds	r3, r7, r4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	193a      	adds	r2, r7, r4
 8001ee6:	2390      	movs	r3, #144	; 0x90
 8001ee8:	05db      	lsls	r3, r3, #23
 8001eea:	0011      	movs	r1, r2
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 fbcb 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 8001ef2:	0021      	movs	r1, r4
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	000c      	movs	r4, r1
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	2201      	movs	r2, #1
 8001f02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	193b      	adds	r3, r7, r4
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f10:	193a      	adds	r2, r7, r4
 8001f12:	2390      	movs	r3, #144	; 0x90
 8001f14:	05db      	lsls	r3, r3, #23
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 fbb5 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	0152      	lsls	r2, r2, #5
 8001f24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f26:	193b      	adds	r3, r7, r4
 8001f28:	2288      	movs	r2, #136	; 0x88
 8001f2a:	0352      	lsls	r2, r2, #13
 8001f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	2201      	movs	r2, #1
 8001f32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8001f34:	193a      	adds	r2, r7, r4
 8001f36:	2390      	movs	r3, #144	; 0x90
 8001f38:	05db      	lsls	r3, r3, #23
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 fba3 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 8001f42:	0021      	movs	r1, r4
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2230      	movs	r2, #48	; 0x30
 8001f48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	2201      	movs	r2, #1
 8001f5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <MX_GPIO_Init+0x1d8>)
 8001f60:	0019      	movs	r1, r3
 8001f62:	0010      	movs	r0, r2
 8001f64:	f000 fb90 	bl	8002688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2007      	movs	r0, #7
 8001f6e:	f000 facb 	bl	8002508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001f72:	2007      	movs	r0, #7
 8001f74:	f000 fadd 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b009      	add	sp, #36	; 0x24
 8001f7e:	bd90      	pop	{r4, r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	0000c030 	.word	0x0000c030
 8001f88:	48000400 	.word	0x48000400

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <Error_Handler+0x8>
	...

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_MspInit+0x44>)
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_MspInit+0x44>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	619a      	str	r2, [r3, #24]
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_MspInit+0x44>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_MspInit+0x44>)
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_MspInit+0x44>)
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	0549      	lsls	r1, r1, #21
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	61da      	str	r2, [r3, #28]
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_MspInit+0x44>)
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	055b      	lsls	r3, r3, #21
 8001fcc:	4013      	ands	r3, r2
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <HAL_TIM_Base_MspInit+0x48>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d115      	bne.n	800201e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_TIM_Base_MspInit+0x4c>)
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_TIM_Base_MspInit+0x4c>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	02c9      	lsls	r1, r1, #11
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	619a      	str	r2, [r3, #24]
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_TIM_Base_MspInit+0x4c>)
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	02db      	lsls	r3, r3, #11
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	2016      	movs	r0, #22
 8002014:	f000 fa78 	bl	8002508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002018:	2016      	movs	r0, #22
 800201a:	f000 fa8a 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	40014800 	.word	0x40014800
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08d      	sub	sp, #52	; 0x34
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	241c      	movs	r4, #28
 800203a:	193b      	adds	r3, r7, r4
 800203c:	0018      	movs	r0, r3
 800203e:	2314      	movs	r3, #20
 8002040:	001a      	movs	r2, r3
 8002042:	2100      	movs	r1, #0
 8002044:	f003 f833 	bl	80050ae <memset>
  if(huart->Instance==USART1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <HAL_UART_MspInit+0x114>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d13c      	bne.n	80020cc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_UART_MspInit+0x118>)
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_UART_MspInit+0x118>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	01c9      	lsls	r1, r1, #7
 800205c:	430a      	orrs	r2, r1
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_UART_MspInit+0x118>)
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	01db      	lsls	r3, r3, #7
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_UART_MspInit+0x118>)
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	4b35      	ldr	r3, [pc, #212]	; (8002148 <HAL_UART_MspInit+0x118>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0289      	lsls	r1, r1, #10
 8002078:	430a      	orrs	r2, r1
 800207a:	615a      	str	r2, [r3, #20]
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_UART_MspInit+0x118>)
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	4013      	ands	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800208a:	193b      	adds	r3, r7, r4
 800208c:	22c0      	movs	r2, #192	; 0xc0
 800208e:	00d2      	lsls	r2, r2, #3
 8002090:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	0021      	movs	r1, r4
 8002094:	187b      	adds	r3, r7, r1
 8002096:	2202      	movs	r2, #2
 8002098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	187b      	adds	r3, r7, r1
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	2203      	movs	r2, #3
 80020a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	2201      	movs	r2, #1
 80020aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	187a      	adds	r2, r7, r1
 80020ae:	2390      	movs	r3, #144	; 0x90
 80020b0:	05db      	lsls	r3, r3, #23
 80020b2:	0011      	movs	r1, r2
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fae7 	bl	8002688 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2101      	movs	r1, #1
 80020be:	201b      	movs	r0, #27
 80020c0:	f000 fa22 	bl	8002508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c4:	201b      	movs	r0, #27
 80020c6:	f000 fa34 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ca:	e037      	b.n	800213c <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_UART_MspInit+0x11c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d132      	bne.n	800213c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_UART_MspInit+0x118>)
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_UART_MspInit+0x118>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	0289      	lsls	r1, r1, #10
 80020e0:	430a      	orrs	r2, r1
 80020e2:	61da      	str	r2, [r3, #28]
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_UART_MspInit+0x118>)
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	029b      	lsls	r3, r3, #10
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_UART_MspInit+0x118>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_UART_MspInit+0x118>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0289      	lsls	r1, r1, #10
 80020fc:	430a      	orrs	r2, r1
 80020fe:	615a      	str	r2, [r3, #20]
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_UART_MspInit+0x118>)
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800210e:	211c      	movs	r1, #28
 8002110:	187b      	adds	r3, r7, r1
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2202      	movs	r2, #2
 800211a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	187b      	adds	r3, r7, r1
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2203      	movs	r2, #3
 8002126:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002128:	187b      	adds	r3, r7, r1
 800212a:	2201      	movs	r2, #1
 800212c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	187a      	adds	r2, r7, r1
 8002130:	2390      	movs	r3, #144	; 0x90
 8002132:	05db      	lsls	r3, r3, #23
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f000 faa6 	bl	8002688 <HAL_GPIO_Init>
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b00d      	add	sp, #52	; 0x34
 8002142:	bd90      	pop	{r4, r7, pc}
 8002144:	40013800 	.word	0x40013800
 8002148:	40021000 	.word	0x40021000
 800214c:	40004400 	.word	0x40004400

08002150 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_UART_MspDeInit+0x60>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d111      	bne.n	8002186 <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_UART_MspDeInit+0x64>)
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_UART_MspDeInit+0x64>)
 8002168:	4913      	ldr	r1, [pc, #76]	; (80021b8 <HAL_UART_MspDeInit+0x68>)
 800216a:	400a      	ands	r2, r1
 800216c:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800216e:	23c0      	movs	r3, #192	; 0xc0
 8002170:	00da      	lsls	r2, r3, #3
 8002172:	2390      	movs	r3, #144	; 0x90
 8002174:	05db      	lsls	r3, r3, #23
 8002176:	0011      	movs	r1, r2
 8002178:	0018      	movs	r0, r3
 800217a:	f000 fbf5 	bl	8002968 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800217e:	201b      	movs	r0, #27
 8002180:	f000 f9e7 	bl	8002552 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002184:	e010      	b.n	80021a8 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_UART_MspDeInit+0x6c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10b      	bne.n	80021a8 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_UART_MspDeInit+0x64>)
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_UART_MspDeInit+0x64>)
 8002196:	490a      	ldr	r1, [pc, #40]	; (80021c0 <HAL_UART_MspDeInit+0x70>)
 8002198:	400a      	ands	r2, r1
 800219a:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800219c:	2390      	movs	r3, #144	; 0x90
 800219e:	05db      	lsls	r3, r3, #23
 80021a0:	210c      	movs	r1, #12
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 fbe0 	bl	8002968 <HAL_GPIO_DeInit>
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40013800 	.word	0x40013800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	ffffbfff 	.word	0xffffbfff
 80021bc:	40004400 	.word	0x40004400
 80021c0:	fffdffff 	.word	0xfffdffff

080021c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <NMI_Handler+0x4>

080021ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <HardFault_Handler+0x4>

080021d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e8:	f000 f8a4 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 80021ec:	f7ff faa8 	bl	8001740 <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	015b      	lsls	r3, r3, #5
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fcbc 	bl	8002b7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	019b      	lsls	r3, r3, #6
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fcb7 	bl	8002b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <TIM17_IRQHandler+0x14>)
 800221a:	0018      	movs	r0, r3
 800221c:	f001 fac2 	bl	80037a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	20000184 	.word	0x20000184

0800222c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <USART1_IRQHandler+0x14>)
 8002232:	0018      	movs	r0, r3
 8002234:	f001 fd5c 	bl	8003cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	200001cc 	.word	0x200001cc

08002244 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002252:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002254:	f7ff fff6 	bl	8002244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <LoopForever+0x6>)
  ldr r1, =_edata
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <LoopForever+0xe>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <LoopForever+0x16>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800227e:	f002 fee9 	bl	8005054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002282:	f7ff fc61 	bl	8001b48 <main>

08002286 <LoopForever>:

LoopForever:
    b LoopForever
 8002286:	e7fe      	b.n	8002286 <LoopForever>
  ldr   r0, =_estack
 8002288:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002294:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8002298:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800229c:	200002e0 	.word	0x200002e0

080022a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC1_IRQHandler>
	...

080022a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_Init+0x24>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_Init+0x24>)
 80022ae:	2110      	movs	r1, #16
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 f809 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ba:	f7ff fe6d 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	40022000 	.word	0x40022000

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_InitTick+0x5c>)
 80022d6:	681c      	ldr	r4, [r3, #0]
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_InitTick+0x60>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	0019      	movs	r1, r3
 80022de:	23fa      	movs	r3, #250	; 0xfa
 80022e0:	0098      	lsls	r0, r3, #2
 80022e2:	f7fd ff11 	bl	8000108 <__udivsi3>
 80022e6:	0003      	movs	r3, r0
 80022e8:	0019      	movs	r1, r3
 80022ea:	0020      	movs	r0, r4
 80022ec:	f7fd ff0c 	bl	8000108 <__udivsi3>
 80022f0:	0003      	movs	r3, r0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f93d 	bl	8002572 <HAL_SYSTICK_Config>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d001      	beq.n	8002300 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e00f      	b.n	8002320 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d80b      	bhi.n	800231e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	2301      	movs	r3, #1
 800230a:	425b      	negs	r3, r3
 800230c:	2200      	movs	r2, #0
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f8fa 	bl	8002508 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_InitTick+0x64>)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b003      	add	sp, #12
 8002326:	bd90      	pop	{r4, r7, pc}
 8002328:	20000018 	.word	0x20000018
 800232c:	20000020 	.word	0x20000020
 8002330:	2000001c 	.word	0x2000001c

08002334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x1c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	001a      	movs	r2, r3
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_IncTick+0x20>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	18d2      	adds	r2, r2, r3
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_IncTick+0x20>)
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	20000020 	.word	0x20000020
 8002354:	200002dc 	.word	0x200002dc

08002358 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b02      	ldr	r3, [pc, #8]	; (8002368 <HAL_GetTick+0x10>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	200002dc 	.word	0x200002dc

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	0002      	movs	r2, r0
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002378:	1dfb      	adds	r3, r7, #7
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b7f      	cmp	r3, #127	; 0x7f
 800237e:	d809      	bhi.n	8002394 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	001a      	movs	r2, r3
 8002386:	231f      	movs	r3, #31
 8002388:	401a      	ands	r2, r3
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_EnableIRQ+0x30>)
 800238c:	2101      	movs	r1, #1
 800238e:	4091      	lsls	r1, r2
 8002390:	000a      	movs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
  }
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	0002      	movs	r2, r0
 80023a8:	1dfb      	adds	r3, r7, #7
 80023aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b7f      	cmp	r3, #127	; 0x7f
 80023b2:	d810      	bhi.n	80023d6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	001a      	movs	r2, r3
 80023ba:	231f      	movs	r3, #31
 80023bc:	4013      	ands	r3, r2
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <__NVIC_DisableIRQ+0x40>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	409a      	lsls	r2, r3
 80023c4:	0013      	movs	r3, r2
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023ca:	f3bf 8f4f 	dsb	sy
}
 80023ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80023d0:	f3bf 8f6f 	isb	sy
}
 80023d4:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	0002      	movs	r2, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b7f      	cmp	r3, #127	; 0x7f
 80023f8:	d828      	bhi.n	800244c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <__NVIC_SetPriority+0xd4>)
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b25b      	sxtb	r3, r3
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	33c0      	adds	r3, #192	; 0xc0
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	589b      	ldr	r3, [r3, r2]
 800240a:	1dfa      	adds	r2, r7, #7
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	0011      	movs	r1, r2
 8002410:	2203      	movs	r2, #3
 8002412:	400a      	ands	r2, r1
 8002414:	00d2      	lsls	r2, r2, #3
 8002416:	21ff      	movs	r1, #255	; 0xff
 8002418:	4091      	lsls	r1, r2
 800241a:	000a      	movs	r2, r1
 800241c:	43d2      	mvns	r2, r2
 800241e:	401a      	ands	r2, r3
 8002420:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	22ff      	movs	r2, #255	; 0xff
 8002428:	401a      	ands	r2, r3
 800242a:	1dfb      	adds	r3, r7, #7
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	0018      	movs	r0, r3
 8002430:	2303      	movs	r3, #3
 8002432:	4003      	ands	r3, r0
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002438:	481f      	ldr	r0, [pc, #124]	; (80024b8 <__NVIC_SetPriority+0xd4>)
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b25b      	sxtb	r3, r3
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	430a      	orrs	r2, r1
 8002444:	33c0      	adds	r3, #192	; 0xc0
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800244a:	e031      	b.n	80024b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800244c:	4a1b      	ldr	r2, [pc, #108]	; (80024bc <__NVIC_SetPriority+0xd8>)
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	0019      	movs	r1, r3
 8002454:	230f      	movs	r3, #15
 8002456:	400b      	ands	r3, r1
 8002458:	3b08      	subs	r3, #8
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3306      	adds	r3, #6
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	18d3      	adds	r3, r2, r3
 8002462:	3304      	adds	r3, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	1dfa      	adds	r2, r7, #7
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	0011      	movs	r1, r2
 800246c:	2203      	movs	r2, #3
 800246e:	400a      	ands	r2, r1
 8002470:	00d2      	lsls	r2, r2, #3
 8002472:	21ff      	movs	r1, #255	; 0xff
 8002474:	4091      	lsls	r1, r2
 8002476:	000a      	movs	r2, r1
 8002478:	43d2      	mvns	r2, r2
 800247a:	401a      	ands	r2, r3
 800247c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	019b      	lsls	r3, r3, #6
 8002482:	22ff      	movs	r2, #255	; 0xff
 8002484:	401a      	ands	r2, r3
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	0018      	movs	r0, r3
 800248c:	2303      	movs	r3, #3
 800248e:	4003      	ands	r3, r0
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002494:	4809      	ldr	r0, [pc, #36]	; (80024bc <__NVIC_SetPriority+0xd8>)
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	001c      	movs	r4, r3
 800249c:	230f      	movs	r3, #15
 800249e:	4023      	ands	r3, r4
 80024a0:	3b08      	subs	r3, #8
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	430a      	orrs	r2, r1
 80024a6:	3306      	adds	r3, #6
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	18c3      	adds	r3, r0, r3
 80024ac:	3304      	adds	r3, #4
 80024ae:	601a      	str	r2, [r3, #0]
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b003      	add	sp, #12
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	045b      	lsls	r3, r3, #17
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d301      	bcc.n	80024d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d4:	2301      	movs	r3, #1
 80024d6:	e010      	b.n	80024fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <SysTick_Config+0x44>)
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	3a01      	subs	r2, #1
 80024de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e0:	2301      	movs	r3, #1
 80024e2:	425b      	negs	r3, r3
 80024e4:	2103      	movs	r1, #3
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff ff7c 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x44>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x44>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	210f      	movs	r1, #15
 8002514:	187b      	adds	r3, r7, r1
 8002516:	1c02      	adds	r2, r0, #0
 8002518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	187b      	adds	r3, r7, r1
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	b25b      	sxtb	r3, r3
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b004      	add	sp, #16
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	0002      	movs	r2, r0
 800253a:	1dfb      	adds	r3, r7, #7
 800253c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b25b      	sxtb	r3, r3
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ff11 	bl	800236c <__NVIC_EnableIRQ>
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	0002      	movs	r2, r0
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b25b      	sxtb	r3, r3
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff ff1b 	bl	80023a0 <__NVIC_DisableIRQ>
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff ff9f 	bl	80024c0 <SysTick_Config>
 8002582:	0003      	movs	r3, r0
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2221      	movs	r2, #33	; 0x21
 8002598:	5c9b      	ldrb	r3, [r3, r2]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2204      	movs	r2, #4
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	2100      	movs	r1, #0
 80025ac:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e020      	b.n	80025f4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	210e      	movs	r1, #14
 80025be:	438a      	bics	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	438a      	bics	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2101      	movs	r1, #1
 80025dc:	4091      	lsls	r1, r2
 80025de:	000a      	movs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2221      	movs	r2, #33	; 0x21
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	210f      	movs	r1, #15
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2221      	movs	r2, #33	; 0x21
 8002610:	5c9b      	ldrb	r3, [r3, r2]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d006      	beq.n	8002626 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2204      	movs	r2, #4
 800261c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800261e:	187b      	adds	r3, r7, r1
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e028      	b.n	8002678 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	210e      	movs	r1, #14
 8002632:	438a      	bics	r2, r1
 8002634:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2101      	movs	r1, #1
 8002642:	438a      	bics	r2, r1
 8002644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	2101      	movs	r1, #1
 8002650:	4091      	lsls	r1, r2
 8002652:	000a      	movs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2221      	movs	r2, #33	; 0x21
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	2100      	movs	r1, #0
 8002664:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	0010      	movs	r0, r2
 8002676:	4798      	blx	r3
    }
  }
  return status;
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002696:	e14f      	b.n	8002938 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4091      	lsls	r1, r2
 80026a2:	000a      	movs	r2, r1
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d100      	bne.n	80026b0 <HAL_GPIO_Init+0x28>
 80026ae:	e140      	b.n	8002932 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2203      	movs	r2, #3
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d005      	beq.n	80026c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2203      	movs	r2, #3
 80026c2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d130      	bne.n	800272a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	409a      	lsls	r2, r3
 80026d6:	0013      	movs	r3, r2
 80026d8:	43da      	mvns	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	409a      	lsls	r2, r3
 80026ea:	0013      	movs	r3, r2
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026fe:	2201      	movs	r2, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
 8002704:	0013      	movs	r3, r2
 8002706:	43da      	mvns	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	2201      	movs	r2, #1
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
 800271c:	0013      	movs	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2203      	movs	r2, #3
 8002730:	4013      	ands	r3, r2
 8002732:	2b03      	cmp	r3, #3
 8002734:	d017      	beq.n	8002766 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	409a      	lsls	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	43da      	mvns	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	409a      	lsls	r2, r3
 8002758:	0013      	movs	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2203      	movs	r2, #3
 800276c:	4013      	ands	r3, r2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d123      	bne.n	80027ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	58d3      	ldr	r3, [r2, r3]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2207      	movs	r2, #7
 8002784:	4013      	ands	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	220f      	movs	r2, #15
 800278a:	409a      	lsls	r2, r3
 800278c:	0013      	movs	r3, r2
 800278e:	43da      	mvns	r2, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2107      	movs	r1, #7
 800279e:	400b      	ands	r3, r1
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	409a      	lsls	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	6939      	ldr	r1, [r7, #16]
 80027b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	409a      	lsls	r2, r3
 80027c8:	0013      	movs	r3, r2
 80027ca:	43da      	mvns	r2, r3
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2203      	movs	r2, #3
 80027d8:	401a      	ands	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	409a      	lsls	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	029b      	lsls	r3, r3, #10
 80027f6:	4013      	ands	r3, r2
 80027f8:	d100      	bne.n	80027fc <HAL_GPIO_Init+0x174>
 80027fa:	e09a      	b.n	8002932 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fc:	4b54      	ldr	r3, [pc, #336]	; (8002950 <HAL_GPIO_Init+0x2c8>)
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_GPIO_Init+0x2c8>)
 8002802:	2101      	movs	r1, #1
 8002804:	430a      	orrs	r2, r1
 8002806:	619a      	str	r2, [r3, #24]
 8002808:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_GPIO_Init+0x2c8>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2201      	movs	r2, #1
 800280e:	4013      	ands	r3, r2
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002814:	4a4f      	ldr	r2, [pc, #316]	; (8002954 <HAL_GPIO_Init+0x2cc>)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	589b      	ldr	r3, [r3, r2]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2203      	movs	r2, #3
 8002826:	4013      	ands	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	220f      	movs	r2, #15
 800282c:	409a      	lsls	r2, r3
 800282e:	0013      	movs	r3, r2
 8002830:	43da      	mvns	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	2390      	movs	r3, #144	; 0x90
 800283c:	05db      	lsls	r3, r3, #23
 800283e:	429a      	cmp	r2, r3
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0x1e2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a44      	ldr	r2, [pc, #272]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_Init+0x1de>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a43      	ldr	r2, [pc, #268]	; (800295c <HAL_GPIO_Init+0x2d4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_Init+0x1da>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a42      	ldr	r2, [pc, #264]	; (8002960 <HAL_GPIO_Init+0x2d8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_Init+0x1d6>
 800285a:	2303      	movs	r3, #3
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x1e4>
 800285e:	2305      	movs	r3, #5
 8002860:	e004      	b.n	800286c <HAL_GPIO_Init+0x1e4>
 8002862:	2302      	movs	r3, #2
 8002864:	e002      	b.n	800286c <HAL_GPIO_Init+0x1e4>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_GPIO_Init+0x1e4>
 800286a:	2300      	movs	r3, #0
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	2103      	movs	r1, #3
 8002870:	400a      	ands	r2, r1
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	4093      	lsls	r3, r2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800287c:	4935      	ldr	r1, [pc, #212]	; (8002954 <HAL_GPIO_Init+0x2cc>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43da      	mvns	r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	035b      	lsls	r3, r3, #13
 80028a2:	4013      	ands	r3, r2
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43da      	mvns	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	039b      	lsls	r3, r3, #14
 80028cc:	4013      	ands	r3, r2
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	43da      	mvns	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	029b      	lsls	r3, r3, #10
 80028f6:	4013      	ands	r3, r2
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	43da      	mvns	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	4013      	ands	r3, r2
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800292c:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_GPIO_Init+0x2dc>)
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3301      	adds	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	40da      	lsrs	r2, r3
 8002940:	1e13      	subs	r3, r2, #0
 8002942:	d000      	beq.n	8002946 <HAL_GPIO_Init+0x2be>
 8002944:	e6a8      	b.n	8002698 <HAL_GPIO_Init+0x10>
  } 
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b006      	add	sp, #24
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	40010000 	.word	0x40010000
 8002958:	48000400 	.word	0x48000400
 800295c:	48000800 	.word	0x48000800
 8002960:	48000c00 	.word	0x48000c00
 8002964:	40010400 	.word	0x40010400

08002968 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002976:	e0b1      	b.n	8002adc <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002978:	2201      	movs	r2, #1
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	409a      	lsls	r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d100      	bne.n	800298c <HAL_GPIO_DeInit+0x24>
 800298a:	e0a4      	b.n	8002ad6 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800298c:	4a59      	ldr	r2, [pc, #356]	; (8002af4 <HAL_GPIO_DeInit+0x18c>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	589b      	ldr	r3, [r3, r2]
 8002998:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2203      	movs	r2, #3
 800299e:	4013      	ands	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	220f      	movs	r2, #15
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	2390      	movs	r3, #144	; 0x90
 80029b0:	05db      	lsls	r3, r3, #23
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_DeInit+0x76>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_GPIO_DeInit+0x190>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00d      	beq.n	80029da <HAL_GPIO_DeInit+0x72>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <HAL_GPIO_DeInit+0x194>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_DeInit+0x6e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4d      	ldr	r2, [pc, #308]	; (8002b00 <HAL_GPIO_DeInit+0x198>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_GPIO_DeInit+0x6a>
 80029ce:	2303      	movs	r3, #3
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_DeInit+0x78>
 80029d2:	2305      	movs	r3, #5
 80029d4:	e004      	b.n	80029e0 <HAL_GPIO_DeInit+0x78>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_DeInit+0x78>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_DeInit+0x78>
 80029de:	2300      	movs	r3, #0
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	2103      	movs	r1, #3
 80029e4:	400a      	ands	r2, r1
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	4093      	lsls	r3, r2
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d132      	bne.n	8002a56 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80029f0:	4b44      	ldr	r3, [pc, #272]	; (8002b04 <HAL_GPIO_DeInit+0x19c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <HAL_GPIO_DeInit+0x19c>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80029fe:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_GPIO_DeInit+0x19c>)
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43d9      	mvns	r1, r3
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <HAL_GPIO_DeInit+0x19c>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a0c:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_GPIO_DeInit+0x19c>)
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <HAL_GPIO_DeInit+0x19c>)
 8002a16:	400a      	ands	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <HAL_GPIO_DeInit+0x19c>)
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43d9      	mvns	r1, r3
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <HAL_GPIO_DeInit+0x19c>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	409a      	lsls	r2, r3
 8002a34:	0013      	movs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002a38:	4a2e      	ldr	r2, [pc, #184]	; (8002af4 <HAL_GPIO_DeInit+0x18c>)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	589a      	ldr	r2, [r3, r2]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	482a      	ldr	r0, [pc, #168]	; (8002af4 <HAL_GPIO_DeInit+0x18c>)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	400a      	ands	r2, r1
 8002a50:	3302      	adds	r3, #2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	0052      	lsls	r2, r2, #1
 8002a5e:	2103      	movs	r1, #3
 8002a60:	4091      	lsls	r1, r2
 8002a62:	000a      	movs	r2, r1
 8002a64:	43d2      	mvns	r2, r2
 8002a66:	401a      	ands	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	58d3      	ldr	r3, [r2, r3]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	2107      	movs	r1, #7
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	210f      	movs	r1, #15
 8002a82:	4091      	lsls	r1, r2
 8002a84:	000a      	movs	r2, r1
 8002a86:	43d1      	mvns	r1, r2
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	08d2      	lsrs	r2, r2, #3
 8002a8c:	4019      	ands	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3208      	adds	r2, #8
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	0052      	lsls	r2, r2, #1
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	4091      	lsls	r1, r2
 8002aa2:	000a      	movs	r2, r1
 8002aa4:	43d2      	mvns	r2, r2
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4091      	lsls	r1, r2
 8002ab6:	000a      	movs	r2, r1
 8002ab8:	43d2      	mvns	r2, r2
 8002aba:	401a      	ands	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	0052      	lsls	r2, r2, #1
 8002ac8:	2103      	movs	r1, #3
 8002aca:	4091      	lsls	r1, r2
 8002acc:	000a      	movs	r2, r1
 8002ace:	43d2      	mvns	r2, r2
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]

    }

    position++;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	40da      	lsrs	r2, r3
 8002ae2:	1e13      	subs	r3, r2, #0
 8002ae4:	d000      	beq.n	8002ae8 <HAL_GPIO_DeInit+0x180>
 8002ae6:	e747      	b.n	8002978 <HAL_GPIO_DeInit+0x10>
  }
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b006      	add	sp, #24
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	000a      	movs	r2, r1
 8002b12:	1cbb      	adds	r3, r7, #2
 8002b14:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	1cba      	adds	r2, r7, #2
 8002b1c:	8812      	ldrh	r2, [r2, #0]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b22:	230f      	movs	r3, #15
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	e003      	b.n	8002b34 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b34:	230f      	movs	r3, #15
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
  }
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	0008      	movs	r0, r1
 8002b4c:	0011      	movs	r1, r2
 8002b4e:	1cbb      	adds	r3, r7, #2
 8002b50:	1c02      	adds	r2, r0, #0
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	1c7b      	adds	r3, r7, #1
 8002b56:	1c0a      	adds	r2, r1, #0
 8002b58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b5a:	1c7b      	adds	r3, r7, #1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d004      	beq.n	8002b6c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b62:	1cbb      	adds	r3, r7, #2
 8002b64:	881a      	ldrh	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b6a:	e003      	b.n	8002b74 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b6c:	1cbb      	adds	r3, r7, #2
 8002b6e:	881a      	ldrh	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	0002      	movs	r2, r0
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	1dba      	adds	r2, r7, #6
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	4013      	ands	r3, r2
 8002b92:	d008      	beq.n	8002ba6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b96:	1dba      	adds	r2, r7, #6
 8002b98:	8812      	ldrh	r2, [r2, #0]
 8002b9a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b9c:	1dbb      	adds	r3, r7, #6
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7fe fda3 	bl	80016ec <HAL_GPIO_EXTI_Callback>
  }
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e301      	b.n	80031ca <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d100      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1e>
 8002bd0:	e08d      	b.n	8002cee <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bd2:	4bc3      	ldr	r3, [pc, #780]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d00e      	beq.n	8002bfc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bde:	4bc0      	ldr	r3, [pc, #768]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	220c      	movs	r2, #12
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x64>
 8002bea:	4bbd      	ldr	r3, [pc, #756]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	025b      	lsls	r3, r3, #9
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	025b      	lsls	r3, r3, #9
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d10d      	bne.n	8002c18 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	4bb8      	ldr	r3, [pc, #736]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	d100      	bne.n	8002c0a <HAL_RCC_OscConfig+0x56>
 8002c08:	e070      	b.n	8002cec <HAL_RCC_OscConfig+0x138>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d000      	beq.n	8002c14 <HAL_RCC_OscConfig+0x60>
 8002c12:	e06b      	b.n	8002cec <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e2d8      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x7c>
 8002c20:	4baf      	ldr	r3, [pc, #700]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4bae      	ldr	r3, [pc, #696]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	0249      	lsls	r1, r1, #9
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e02f      	b.n	8002c90 <HAL_RCC_OscConfig+0xdc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x9e>
 8002c38:	4ba9      	ldr	r3, [pc, #676]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4ba8      	ldr	r3, [pc, #672]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c3e:	49a9      	ldr	r1, [pc, #676]	; (8002ee4 <HAL_RCC_OscConfig+0x330>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	4ba6      	ldr	r3, [pc, #664]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4ba5      	ldr	r3, [pc, #660]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c4a:	49a7      	ldr	r1, [pc, #668]	; (8002ee8 <HAL_RCC_OscConfig+0x334>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e01e      	b.n	8002c90 <HAL_RCC_OscConfig+0xdc>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d10e      	bne.n	8002c78 <HAL_RCC_OscConfig+0xc4>
 8002c5a:	4ba1      	ldr	r3, [pc, #644]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4ba0      	ldr	r3, [pc, #640]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	02c9      	lsls	r1, r1, #11
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	4b9d      	ldr	r3, [pc, #628]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b9c      	ldr	r3, [pc, #624]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	0249      	lsls	r1, r1, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xdc>
 8002c78:	4b99      	ldr	r3, [pc, #612]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b98      	ldr	r3, [pc, #608]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c7e:	4999      	ldr	r1, [pc, #612]	; (8002ee4 <HAL_RCC_OscConfig+0x330>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	4b96      	ldr	r3, [pc, #600]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b95      	ldr	r3, [pc, #596]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c8a:	4997      	ldr	r1, [pc, #604]	; (8002ee8 <HAL_RCC_OscConfig+0x334>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d014      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fb5e 	bl	8002358 <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca2:	f7ff fb59 	bl	8002358 <HAL_GetTick>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b64      	cmp	r3, #100	; 0x64
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e28a      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb4:	4b8a      	ldr	r3, [pc, #552]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	029b      	lsls	r3, r3, #10
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0xee>
 8002cc0:	e015      	b.n	8002cee <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7ff fb49 	bl	8002358 <HAL_GetTick>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff fb44 	bl	8002358 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e275      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	4b80      	ldr	r3, [pc, #512]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	029b      	lsls	r3, r3, #10
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x118>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <HAL_RCC_OscConfig+0x146>
 8002cf8:	e069      	b.n	8002dce <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cfa:	4b79      	ldr	r3, [pc, #484]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	220c      	movs	r2, #12
 8002d00:	4013      	ands	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d04:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	220c      	movs	r2, #12
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d11c      	bne.n	8002d4a <HAL_RCC_OscConfig+0x196>
 8002d10:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	025b      	lsls	r3, r3, #9
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d116      	bne.n	8002d4a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1c:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2202      	movs	r2, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e24b      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b6b      	ldr	r3, [pc, #428]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	22f8      	movs	r2, #248	; 0xf8
 8002d38:	4393      	bics	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	00da      	lsls	r2, r3, #3
 8002d42:	4b67      	ldr	r3, [pc, #412]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d48:	e041      	b.n	8002dce <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d024      	beq.n	8002d9c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b62      	ldr	r3, [pc, #392]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d58:	2101      	movs	r1, #1
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7ff fafb 	bl	8002358 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d68:	f7ff faf6 	bl	8002358 <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e227      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4013      	ands	r3, r2
 8002d82:	d0f1      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	22f8      	movs	r2, #248	; 0xf8
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00da      	lsls	r2, r3, #3
 8002d94:	4b52      	ldr	r3, [pc, #328]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e018      	b.n	8002dce <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9c:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002da2:	2101      	movs	r1, #1
 8002da4:	438a      	bics	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff fad6 	bl	8002358 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db2:	f7ff fad1 	bl	8002358 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e202      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc4:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d1f1      	bne.n	8002db2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d036      	beq.n	8002e46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d019      	beq.n	8002e14 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de0:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de4:	4b3e      	ldr	r3, [pc, #248]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002de6:	2101      	movs	r1, #1
 8002de8:	430a      	orrs	r2, r1
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7ff fab4 	bl	8002358 <HAL_GetTick>
 8002df0:	0003      	movs	r3, r0
 8002df2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df6:	f7ff faaf 	bl	8002358 <HAL_GetTick>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e1e0      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e08:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d0f1      	beq.n	8002df6 <HAL_RCC_OscConfig+0x242>
 8002e12:	e018      	b.n	8002e46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e14:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e18:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7ff fa9a 	bl	8002358 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7ff fa95 	bl	8002358 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1c6      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d1f1      	bne.n	8002e2a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <HAL_RCC_OscConfig+0x29e>
 8002e50:	e0b4      	b.n	8002fbc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	201f      	movs	r0, #31
 8002e54:	183b      	adds	r3, r7, r0
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	055b      	lsls	r3, r3, #21
 8002e62:	4013      	ands	r3, r2
 8002e64:	d110      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	0549      	lsls	r1, r1, #21
 8002e70:	430a      	orrs	r2, r1
 8002e72:	61da      	str	r2, [r3, #28]
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	055b      	lsls	r3, r3, #21
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e82:	183b      	adds	r3, r7, r0
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_RCC_OscConfig+0x338>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4013      	ands	r3, r2
 8002e92:	d11a      	bne.n	8002eca <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <HAL_RCC_OscConfig+0x338>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <HAL_RCC_OscConfig+0x338>)
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	0049      	lsls	r1, r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea2:	f7ff fa59 	bl	8002358 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7ff fa54 	bl	8002358 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e185      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_OscConfig+0x338>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x33c>
 8002ed2:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	4b02      	ldr	r3, [pc, #8]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	430a      	orrs	r2, r1
 8002edc:	621a      	str	r2, [r3, #32]
 8002ede:	e035      	b.n	8002f4c <HAL_RCC_OscConfig+0x398>
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	fffeffff 	.word	0xfffeffff
 8002ee8:	fffbffff 	.word	0xfffbffff
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCC_OscConfig+0x35e>
 8002ef8:	4bb6      	ldr	r3, [pc, #728]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	4bb5      	ldr	r3, [pc, #724]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	438a      	bics	r2, r1
 8002f02:	621a      	str	r2, [r3, #32]
 8002f04:	4bb3      	ldr	r3, [pc, #716]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	4bb2      	ldr	r3, [pc, #712]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	621a      	str	r2, [r3, #32]
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x398>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x380>
 8002f1a:	4bae      	ldr	r3, [pc, #696]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	4bad      	ldr	r3, [pc, #692]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f20:	2104      	movs	r1, #4
 8002f22:	430a      	orrs	r2, r1
 8002f24:	621a      	str	r2, [r3, #32]
 8002f26:	4bab      	ldr	r3, [pc, #684]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	4baa      	ldr	r3, [pc, #680]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	621a      	str	r2, [r3, #32]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0x398>
 8002f34:	4ba7      	ldr	r3, [pc, #668]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	4ba6      	ldr	r3, [pc, #664]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	621a      	str	r2, [r3, #32]
 8002f40:	4ba4      	ldr	r3, [pc, #656]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	4ba3      	ldr	r3, [pc, #652]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f46:	2104      	movs	r1, #4
 8002f48:	438a      	bics	r2, r1
 8002f4a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d014      	beq.n	8002f7e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7ff fa00 	bl	8002358 <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e009      	b.n	8002f72 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7ff f9fb 	bl	8002358 <HAL_GetTick>
 8002f62:	0002      	movs	r2, r0
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	4a9b      	ldr	r2, [pc, #620]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e12b      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	4b98      	ldr	r3, [pc, #608]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x3aa>
 8002f7c:	e013      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7ff f9eb 	bl	8002358 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	e009      	b.n	8002f9c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7ff f9e6 	bl	8002358 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	4a91      	ldr	r2, [pc, #580]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e116      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	4b8d      	ldr	r3, [pc, #564]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fa6:	231f      	movs	r3, #31
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b88      	ldr	r3, [pc, #544]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	4b87      	ldr	r3, [pc, #540]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002fb6:	4989      	ldr	r1, [pc, #548]	; (80031dc <HAL_RCC_OscConfig+0x628>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d063      	beq.n	800308e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d12a      	bne.n	8003024 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fce:	4b81      	ldr	r3, [pc, #516]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd2:	4b80      	ldr	r3, [pc, #512]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002fda:	4b7e      	ldr	r3, [pc, #504]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fde:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7ff f9b7 	bl	8002358 <HAL_GetTick>
 8002fea:	0003      	movs	r3, r0
 8002fec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ff0:	f7ff f9b2 	bl	8002358 <HAL_GetTick>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0e3      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003002:	4b74      	ldr	r3, [pc, #464]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003006:	2202      	movs	r2, #2
 8003008:	4013      	ands	r3, r2
 800300a:	d0f1      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800300c:	4b71      	ldr	r3, [pc, #452]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800300e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003010:	22f8      	movs	r2, #248	; 0xf8
 8003012:	4393      	bics	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	00da      	lsls	r2, r3, #3
 800301c:	4b6d      	ldr	r3, [pc, #436]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800301e:	430a      	orrs	r2, r1
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
 8003022:	e034      	b.n	800308e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	3305      	adds	r3, #5
 800302a:	d111      	bne.n	8003050 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800302c:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800302e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003030:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003032:	2104      	movs	r1, #4
 8003034:	438a      	bics	r2, r1
 8003036:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	22f8      	movs	r2, #248	; 0xf8
 800303e:	4393      	bics	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	00da      	lsls	r2, r3, #3
 8003048:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800304a:	430a      	orrs	r2, r1
 800304c:	635a      	str	r2, [r3, #52]	; 0x34
 800304e:	e01e      	b.n	800308e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003050:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003054:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003056:	2104      	movs	r1, #4
 8003058:	430a      	orrs	r2, r1
 800305a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800305c:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800305e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003060:	4b5c      	ldr	r3, [pc, #368]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003062:	2101      	movs	r1, #1
 8003064:	438a      	bics	r2, r1
 8003066:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003068:	f7ff f976 	bl	8002358 <HAL_GetTick>
 800306c:	0003      	movs	r3, r0
 800306e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003072:	f7ff f971 	bl	8002358 <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0a2      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	2202      	movs	r2, #2
 800308a:	4013      	ands	r3, r2
 800308c:	d1f1      	bne.n	8003072 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d100      	bne.n	8003098 <HAL_RCC_OscConfig+0x4e4>
 8003096:	e097      	b.n	80031c8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003098:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	220c      	movs	r2, #12
 800309e:	4013      	ands	r3, r2
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d100      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4f2>
 80030a4:	e06b      	b.n	800317e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d14c      	bne.n	8003148 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 80030b4:	494a      	ldr	r1, [pc, #296]	; (80031e0 <HAL_RCC_OscConfig+0x62c>)
 80030b6:	400a      	ands	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7ff f94d 	bl	8002358 <HAL_GetTick>
 80030be:	0003      	movs	r3, r0
 80030c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7ff f948 	bl	8002358 <HAL_GetTick>
 80030c8:	0002      	movs	r2, r0
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e079      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d6:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	049b      	lsls	r3, r3, #18
 80030de:	4013      	ands	r3, r2
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e2:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	220f      	movs	r2, #15
 80030e8:	4393      	bics	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 80030f2:	430a      	orrs	r2, r1
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a3a      	ldr	r2, [pc, #232]	; (80031e4 <HAL_RCC_OscConfig+0x630>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	431a      	orrs	r2, r3
 800310a:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	0449      	lsls	r1, r1, #17
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7ff f91b 	bl	8002358 <HAL_GetTick>
 8003122:	0003      	movs	r3, r0
 8003124:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7ff f916 	bl	8002358 <HAL_GetTick>
 800312c:	0002      	movs	r2, r0
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e047      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	049b      	lsls	r3, r3, #18
 8003142:	4013      	ands	r3, r2
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x574>
 8003146:	e03f      	b.n	80031c8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800314e:	4924      	ldr	r1, [pc, #144]	; (80031e0 <HAL_RCC_OscConfig+0x62c>)
 8003150:	400a      	ands	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff f900 	bl	8002358 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315e:	f7ff f8fb 	bl	8002358 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e02c      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	049b      	lsls	r3, r3, #18
 8003178:	4013      	ands	r3, r2
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x5aa>
 800317c:	e024      	b.n	80031c8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e01f      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_OscConfig+0x620>)
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	025b      	lsls	r3, r3, #9
 800319c:	401a      	ands	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d10e      	bne.n	80031c4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	220f      	movs	r2, #15
 80031aa:	401a      	ands	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	23f0      	movs	r3, #240	; 0xf0
 80031b8:	039b      	lsls	r3, r3, #14
 80031ba:	401a      	ands	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b008      	add	sp, #32
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000
 80031d8:	00001388 	.word	0x00001388
 80031dc:	efffffff 	.word	0xefffffff
 80031e0:	feffffff 	.word	0xfeffffff
 80031e4:	ffc2ffff 	.word	0xffc2ffff

080031e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0b3      	b.n	8003364 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031fc:	4b5b      	ldr	r3, [pc, #364]	; (800336c <HAL_RCC_ClockConfig+0x184>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d911      	bls.n	800322e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b58      	ldr	r3, [pc, #352]	; (800336c <HAL_RCC_ClockConfig+0x184>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	4393      	bics	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	4b55      	ldr	r3, [pc, #340]	; (800336c <HAL_RCC_ClockConfig+0x184>)
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321c:	4b53      	ldr	r3, [pc, #332]	; (800336c <HAL_RCC_ClockConfig+0x184>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2201      	movs	r2, #1
 8003222:	4013      	ands	r3, r2
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e09a      	b.n	8003364 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2202      	movs	r2, #2
 8003234:	4013      	ands	r3, r2
 8003236:	d015      	beq.n	8003264 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	4013      	ands	r3, r2
 8003240:	d006      	beq.n	8003250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003242:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 8003248:	21e0      	movs	r1, #224	; 0xe0
 800324a:	00c9      	lsls	r1, r1, #3
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	22f0      	movs	r2, #240	; 0xf0
 8003256:	4393      	bics	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	4b44      	ldr	r3, [pc, #272]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	4013      	ands	r3, r2
 800326c:	d040      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	029b      	lsls	r3, r3, #10
 800327e:	4013      	ands	r3, r2
 8003280:	d114      	bne.n	80032ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06e      	b.n	8003364 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b38      	ldr	r3, [pc, #224]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	049b      	lsls	r3, r3, #18
 8003296:	4013      	ands	r3, r2
 8003298:	d108      	bne.n	80032ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e062      	b.n	8003364 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e05b      	b.n	8003364 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4393      	bics	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c0:	f7ff f84a 	bl	8002358 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c8:	e009      	b.n	80032de <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	f7ff f845 	bl	8002358 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_RCC_ClockConfig+0x18c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e042      	b.n	8003364 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	220c      	movs	r2, #12
 80032e4:	401a      	ands	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1ec      	bne.n	80032ca <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b1e      	ldr	r3, [pc, #120]	; (800336c <HAL_RCC_ClockConfig+0x184>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d211      	bcs.n	8003322 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_RCC_ClockConfig+0x184>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2201      	movs	r2, #1
 8003304:	4393      	bics	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <HAL_RCC_ClockConfig+0x184>)
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <HAL_RCC_ClockConfig+0x184>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2201      	movs	r2, #1
 8003316:	4013      	ands	r3, r2
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d001      	beq.n	8003322 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e020      	b.n	8003364 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	4013      	ands	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a11      	ldr	r2, [pc, #68]	; (8003378 <HAL_RCC_ClockConfig+0x190>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003340:	f000 f820 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8003344:	0001      	movs	r1, r0
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCC_ClockConfig+0x188>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	220f      	movs	r2, #15
 800334e:	4013      	ands	r3, r2
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <HAL_RCC_ClockConfig+0x194>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	000a      	movs	r2, r1
 8003356:	40da      	lsrs	r2, r3
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_ClockConfig+0x198>)
 800335a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fe ffb5 	bl	80022cc <HAL_InitTick>
  
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b004      	add	sp, #16
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40022000 	.word	0x40022000
 8003370:	40021000 	.word	0x40021000
 8003374:	00001388 	.word	0x00001388
 8003378:	fffff8ff 	.word	0xfffff8ff
 800337c:	080052a4 	.word	0x080052a4
 8003380:	20000018 	.word	0x20000018

08003384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	220c      	movs	r2, #12
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d002      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x30>
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x36>
 80033b2:	e02c      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033b6:	613b      	str	r3, [r7, #16]
      break;
 80033b8:	e02c      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	0c9b      	lsrs	r3, r3, #18
 80033be:	220f      	movs	r2, #15
 80033c0:	4013      	ands	r3, r2
 80033c2:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	220f      	movs	r2, #15
 80033ce:	4013      	ands	r3, r2
 80033d0:	4a16      	ldr	r2, [pc, #88]	; (800342c <HAL_RCC_GetSysClockFreq+0xa8>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	025b      	lsls	r3, r3, #9
 80033dc:	4013      	ands	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	4810      	ldr	r0, [pc, #64]	; (8003424 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033e4:	f7fc fe90 	bl	8000108 <__udivsi3>
 80033e8:	0003      	movs	r3, r0
 80033ea:	001a      	movs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4353      	muls	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	e009      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	000a      	movs	r2, r1
 80033f8:	0152      	lsls	r2, r2, #5
 80033fa:	1a52      	subs	r2, r2, r1
 80033fc:	0193      	lsls	r3, r2, #6
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	185b      	adds	r3, r3, r1
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
      break;
 800340c:	e002      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_RCC_GetSysClockFreq+0xac>)
 8003410:	613b      	str	r3, [r7, #16]
      break;
 8003412:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003414:	693b      	ldr	r3, [r7, #16]
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b006      	add	sp, #24
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	40021000 	.word	0x40021000
 8003424:	00f42400 	.word	0x00f42400
 8003428:	080052bc 	.word	0x080052bc
 800342c:	080052cc 	.word	0x080052cc
 8003430:	007a1200 	.word	0x007a1200

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b02      	ldr	r3, [pc, #8]	; (8003444 <HAL_RCC_GetHCLKFreq+0x10>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	20000018 	.word	0x20000018

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800344c:	f7ff fff2 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003450:	0001      	movs	r1, r0
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	2207      	movs	r2, #7
 800345a:	4013      	ands	r3, r2
 800345c:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800345e:	5cd3      	ldrb	r3, [r2, r3]
 8003460:	40d9      	lsrs	r1, r3
 8003462:	000b      	movs	r3, r1
}    
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	40021000 	.word	0x40021000
 8003470:	080052b4 	.word	0x080052b4

08003474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	025b      	lsls	r3, r3, #9
 800348c:	4013      	ands	r3, r2
 800348e:	d100      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003490:	e08e      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003492:	2017      	movs	r0, #23
 8003494:	183b      	adds	r3, r7, r0
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	055b      	lsls	r3, r3, #21
 80034a2:	4013      	ands	r3, r2
 80034a4:	d110      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	0549      	lsls	r1, r1, #21
 80034b0:	430a      	orrs	r2, r1
 80034b2:	61da      	str	r2, [r3, #28]
 80034b4:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	055b      	lsls	r3, r3, #21
 80034bc:	4013      	ands	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	d11a      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b48      	ldr	r3, [pc, #288]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	0049      	lsls	r1, r1, #1
 80034de:	430a      	orrs	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e2:	f7fe ff39 	bl	8002358 <HAL_GetTick>
 80034e6:	0003      	movs	r3, r0
 80034e8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	e008      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ec:	f7fe ff34 	bl	8002358 <HAL_GetTick>
 80034f0:	0002      	movs	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e077      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4013      	ands	r3, r2
 8003508:	d0f0      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	23c0      	movs	r3, #192	; 0xc0
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4013      	ands	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d034      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	23c0      	movs	r3, #192	; 0xc0
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4013      	ands	r3, r2
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	429a      	cmp	r2, r3
 800352a:	d02c      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4a33      	ldr	r2, [pc, #204]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003532:	4013      	ands	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003536:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0249      	lsls	r1, r1, #9
 8003540:	430a      	orrs	r2, r1
 8003542:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003544:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800354a:	492e      	ldr	r1, [pc, #184]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800354c:	400a      	ands	r2, r1
 800354e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003550:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355e:	f7fe fefb 	bl	8002358 <HAL_GetTick>
 8003562:	0003      	movs	r3, r0
 8003564:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	e009      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fe fef6 	bl	8002358 <HAL_GetTick>
 800356c:	0002      	movs	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e038      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d0f0      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003596:	430a      	orrs	r2, r1
 8003598:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800359a:	2317      	movs	r3, #23
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d105      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035aa:	4918      	ldr	r1, [pc, #96]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2201      	movs	r2, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	2203      	movs	r2, #3
 80035c0:	4393      	bics	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035ca:	430a      	orrs	r2, r1
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2220      	movs	r2, #32
 80035d4:	4013      	ands	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d8:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	2210      	movs	r2, #16
 80035de:	4393      	bics	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035e8:	430a      	orrs	r2, r1
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b006      	add	sp, #24
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
 8003600:	fffffcff 	.word	0xfffffcff
 8003604:	fffeffff 	.word	0xfffeffff
 8003608:	00001388 	.word	0x00001388
 800360c:	efffffff 	.word	0xefffffff

08003610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e042      	b.n	80036a8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	223d      	movs	r2, #61	; 0x3d
 8003626:	5c9b      	ldrb	r3, [r3, r2]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d107      	bne.n	800363e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	223c      	movs	r2, #60	; 0x3c
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	0018      	movs	r0, r3
 800363a:	f7fe fcd1 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	223d      	movs	r2, #61	; 0x3d
 8003642:	2102      	movs	r1, #2
 8003644:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	0019      	movs	r1, r3
 8003650:	0010      	movs	r0, r2
 8003652:	f000 f9dd 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2246      	movs	r2, #70	; 0x46
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	223e      	movs	r2, #62	; 0x3e
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	223f      	movs	r2, #63	; 0x3f
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	2101      	movs	r1, #1
 8003674:	5499      	strb	r1, [r3, r2]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2241      	movs	r2, #65	; 0x41
 800367a:	2101      	movs	r1, #1
 800367c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2242      	movs	r2, #66	; 0x42
 8003682:	2101      	movs	r1, #1
 8003684:	5499      	strb	r1, [r3, r2]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2243      	movs	r2, #67	; 0x43
 800368a:	2101      	movs	r1, #1
 800368c:	5499      	strb	r1, [r3, r2]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2244      	movs	r2, #68	; 0x44
 8003692:	2101      	movs	r1, #1
 8003694:	5499      	strb	r1, [r3, r2]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2245      	movs	r2, #69	; 0x45
 800369a:	2101      	movs	r1, #1
 800369c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	223d      	movs	r2, #61	; 0x3d
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	223d      	movs	r2, #61	; 0x3d
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d001      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e035      	b.n	8003734 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	223d      	movs	r2, #61	; 0x3d
 80036cc:	2102      	movs	r1, #2
 80036ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2101      	movs	r1, #1
 80036dc:	430a      	orrs	r2, r1
 80036de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_TIM_Base_Start_IT+0x8c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x4e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_TIM_Base_Start_IT+0x90>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x4e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a12      	ldr	r2, [pc, #72]	; (8003744 <HAL_TIM_Base_Start_IT+0x94>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d111      	bne.n	8003722 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2207      	movs	r2, #7
 8003706:	4013      	ands	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d010      	beq.n	8003732 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2101      	movs	r1, #1
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003720:	e007      	b.n	8003732 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2101      	movs	r1, #1
 800372e:	430a      	orrs	r2, r1
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b004      	add	sp, #16
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40000400 	.word	0x40000400
 8003744:	40014000 	.word	0x40014000

08003748 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2101      	movs	r1, #1
 800375c:	438a      	bics	r2, r1
 800375e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a0d      	ldr	r2, [pc, #52]	; (800379c <HAL_TIM_Base_Stop_IT+0x54>)
 8003768:	4013      	ands	r3, r2
 800376a:	d10d      	bne.n	8003788 <HAL_TIM_Base_Stop_IT+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <HAL_TIM_Base_Stop_IT+0x58>)
 8003774:	4013      	ands	r3, r2
 8003776:	d107      	bne.n	8003788 <HAL_TIM_Base_Stop_IT+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2101      	movs	r1, #1
 8003784:	438a      	bics	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	223d      	movs	r2, #61	; 0x3d
 800378c:	2101      	movs	r1, #1
 800378e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	0018      	movs	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	b002      	add	sp, #8
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	00001111 	.word	0x00001111
 80037a0:	00000444 	.word	0x00000444

080037a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2202      	movs	r2, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d124      	bne.n	8003804 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2202      	movs	r2, #2
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d11d      	bne.n	8003804 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2203      	movs	r2, #3
 80037ce:	4252      	negs	r2, r2
 80037d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2203      	movs	r2, #3
 80037e0:	4013      	ands	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f8fa 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e007      	b.n	80037fe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 f8ed 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f8f9 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2204      	movs	r2, #4
 800380c:	4013      	ands	r3, r2
 800380e:	2b04      	cmp	r3, #4
 8003810:	d125      	bne.n	800385e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2204      	movs	r2, #4
 800381a:	4013      	ands	r3, r2
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11e      	bne.n	800385e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2205      	movs	r2, #5
 8003826:	4252      	negs	r2, r2
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	23c0      	movs	r3, #192	; 0xc0
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4013      	ands	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f8cd 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 8003846:	e007      	b.n	8003858 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f8c0 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f8cc 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2208      	movs	r2, #8
 8003866:	4013      	ands	r3, r2
 8003868:	2b08      	cmp	r3, #8
 800386a:	d124      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2208      	movs	r2, #8
 8003874:	4013      	ands	r3, r2
 8003876:	2b08      	cmp	r3, #8
 8003878:	d11d      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2209      	movs	r2, #9
 8003880:	4252      	negs	r2, r2
 8003882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2204      	movs	r2, #4
 8003888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	2203      	movs	r2, #3
 8003892:	4013      	ands	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f8a1 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 800389e:	e007      	b.n	80038b0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f894 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 f8a0 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2210      	movs	r2, #16
 80038be:	4013      	ands	r3, r2
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d125      	bne.n	8003910 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2210      	movs	r2, #16
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d11e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2211      	movs	r2, #17
 80038d8:	4252      	negs	r2, r2
 80038da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2208      	movs	r2, #8
 80038e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	23c0      	movs	r3, #192	; 0xc0
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4013      	ands	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 f874 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 80038f8:	e007      	b.n	800390a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 f867 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f000 f873 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2201      	movs	r2, #1
 8003918:	4013      	ands	r3, r2
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10f      	bne.n	800393e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	2b01      	cmp	r3, #1
 800392a:	d108      	bne.n	800393e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2202      	movs	r2, #2
 8003932:	4252      	negs	r2, r2
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f7fd feed 	bl	8001718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	4013      	ands	r3, r2
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d10f      	bne.n	800396c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	4013      	ands	r3, r2
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d108      	bne.n	800396c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2281      	movs	r2, #129	; 0x81
 8003960:	4252      	negs	r2, r2
 8003962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f8d0 	bl	8003b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	4013      	ands	r3, r2
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d10f      	bne.n	800399a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2240      	movs	r2, #64	; 0x40
 8003982:	4013      	ands	r3, r2
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d108      	bne.n	800399a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2241      	movs	r2, #65	; 0x41
 800398e:	4252      	negs	r2, r2
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 f833 	bl	8003a00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2220      	movs	r2, #32
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d10f      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d108      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2221      	movs	r2, #33	; 0x21
 80039bc:	4252      	negs	r2, r2
 80039be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 f89a 	bl	8003afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a2f      	ldr	r2, [pc, #188]	; (8003ae0 <TIM_Base_SetConfig+0xd0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0x20>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a2e      	ldr	r2, [pc, #184]	; (8003ae4 <TIM_Base_SetConfig+0xd4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d108      	bne.n	8003a42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2270      	movs	r2, #112	; 0x70
 8003a34:	4393      	bics	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a26      	ldr	r2, [pc, #152]	; (8003ae0 <TIM_Base_SetConfig+0xd0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <TIM_Base_SetConfig+0xd4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00f      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <TIM_Base_SetConfig+0xd8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a23      	ldr	r2, [pc, #140]	; (8003aec <TIM_Base_SetConfig+0xdc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <TIM_Base_SetConfig+0xe0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_Base_SetConfig+0x62>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a21      	ldr	r2, [pc, #132]	; (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <TIM_Base_SetConfig+0xe8>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2280      	movs	r2, #128	; 0x80
 8003a88:	4393      	bics	r3, r2
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a0c      	ldr	r2, [pc, #48]	; (8003ae0 <TIM_Base_SetConfig+0xd0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_Base_SetConfig+0xba>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <TIM_Base_SetConfig+0xdc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_Base_SetConfig+0xba>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <TIM_Base_SetConfig+0xe0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_Base_SetConfig+0xba>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d103      	bne.n	8003ad2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	615a      	str	r2, [r3, #20]
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b004      	add	sp, #16
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40002000 	.word	0x40002000
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800
 8003af8:	fffffcff 	.word	0xfffffcff

08003afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e044      	b.n	8003bb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2278      	movs	r2, #120	; 0x78
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fe fa75 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2224      	movs	r2, #36	; 0x24
 8003b4a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2101      	movs	r1, #1
 8003b58:	438a      	bics	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 fb9a 	bl	8004298 <UART_SetConfig>
 8003b64:	0003      	movs	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e024      	b.n	8003bb8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 fccd 	bl	8004518 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	490d      	ldr	r1, [pc, #52]	; (8003bc0 <HAL_UART_Init+0xa4>)
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2108      	movs	r1, #8
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 fd65 	bl	8004680 <UART_CheckIdleState>
 8003bb6:	0003      	movs	r3, r0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	fffff7ff 	.word	0xfffff7ff

08003bc4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e030      	b.n	8003c38 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2224      	movs	r2, #36	; 0x24
 8003bda:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2101      	movs	r1, #1
 8003be8:	438a      	bics	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f7fe faa2 	bl	8002150 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	2100      	movs	r1, #0
 8003c12:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2278      	movs	r2, #120	; 0x78
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	1dbb      	adds	r3, r7, #6
 8003c4c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	589b      	ldr	r3, [r3, r2]
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d145      	bne.n	8003ce4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_UART_Receive_IT+0x26>
 8003c5e:	1dbb      	adds	r3, r7, #6
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e03d      	b.n	8003ce6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	015b      	lsls	r3, r3, #5
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d109      	bne.n	8003c8a <HAL_UART_Receive_IT+0x4a>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d105      	bne.n	8003c8a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2201      	movs	r2, #1
 8003c82:	4013      	ands	r3, r2
 8003c84:	d001      	beq.n	8003c8a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e02d      	b.n	8003ce6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d019      	beq.n	8003cd2 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca2:	613b      	str	r3, [r7, #16]
  return(result);
 8003ca4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	2301      	movs	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2180      	movs	r1, #128	; 0x80
 8003cc0:	04c9      	lsls	r1, r1, #19
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f383 8810 	msr	PRIMASK, r3
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cd2:	1dbb      	adds	r3, r7, #6
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 fde2 	bl	80048a4 <UART_Start_Receive_IT>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
  }
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b008      	add	sp, #32
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b0ab      	sub	sp, #172	; 0xac
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	22a4      	movs	r2, #164	; 0xa4
 8003d00:	18b9      	adds	r1, r7, r2
 8003d02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	20a0      	movs	r0, #160	; 0xa0
 8003d0c:	1839      	adds	r1, r7, r0
 8003d0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	219c      	movs	r1, #156	; 0x9c
 8003d18:	1879      	adds	r1, r7, r1
 8003d1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	18bb      	adds	r3, r7, r2
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a99      	ldr	r2, [pc, #612]	; (8003f88 <HAL_UART_IRQHandler+0x298>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	2298      	movs	r2, #152	; 0x98
 8003d28:	18bc      	adds	r4, r7, r2
 8003d2a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003d2c:	18bb      	adds	r3, r7, r2
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d114      	bne.n	8003d5e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d00f      	beq.n	8003d5e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d3e:	183b      	adds	r3, r7, r0
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2220      	movs	r2, #32
 8003d44:	4013      	ands	r3, r2
 8003d46:	d00a      	beq.n	8003d5e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d100      	bne.n	8003d52 <HAL_UART_IRQHandler+0x62>
 8003d50:	e286      	b.n	8004260 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	0010      	movs	r0, r2
 8003d5a:	4798      	blx	r3
      }
      return;
 8003d5c:	e280      	b.n	8004260 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d5e:	2398      	movs	r3, #152	; 0x98
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d100      	bne.n	8003d6a <HAL_UART_IRQHandler+0x7a>
 8003d68:	e114      	b.n	8003f94 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d6a:	239c      	movs	r3, #156	; 0x9c
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2201      	movs	r2, #1
 8003d72:	4013      	ands	r3, r2
 8003d74:	d106      	bne.n	8003d84 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d76:	23a0      	movs	r3, #160	; 0xa0
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a83      	ldr	r2, [pc, #524]	; (8003f8c <HAL_UART_IRQHandler+0x29c>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d100      	bne.n	8003d84 <HAL_UART_IRQHandler+0x94>
 8003d82:	e107      	b.n	8003f94 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d84:	23a4      	movs	r3, #164	; 0xa4
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d012      	beq.n	8003db6 <HAL_UART_IRQHandler+0xc6>
 8003d90:	23a0      	movs	r3, #160	; 0xa0
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2284      	movs	r2, #132	; 0x84
 8003daa:	589b      	ldr	r3, [r3, r2]
 8003dac:	2201      	movs	r2, #1
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2184      	movs	r1, #132	; 0x84
 8003db4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003db6:	23a4      	movs	r3, #164	; 0xa4
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d011      	beq.n	8003de6 <HAL_UART_IRQHandler+0xf6>
 8003dc2:	239c      	movs	r3, #156	; 0x9c
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2284      	movs	r2, #132	; 0x84
 8003dda:	589b      	ldr	r3, [r3, r2]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2184      	movs	r1, #132	; 0x84
 8003de4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003de6:	23a4      	movs	r3, #164	; 0xa4
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2204      	movs	r2, #4
 8003dee:	4013      	ands	r3, r2
 8003df0:	d011      	beq.n	8003e16 <HAL_UART_IRQHandler+0x126>
 8003df2:	239c      	movs	r3, #156	; 0x9c
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d00b      	beq.n	8003e16 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2204      	movs	r2, #4
 8003e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2284      	movs	r2, #132	; 0x84
 8003e0a:	589b      	ldr	r3, [r3, r2]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2184      	movs	r1, #132	; 0x84
 8003e14:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e16:	23a4      	movs	r3, #164	; 0xa4
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d017      	beq.n	8003e52 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e22:	23a0      	movs	r3, #160	; 0xa0
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d105      	bne.n	8003e3a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e2e:	239c      	movs	r3, #156	; 0x9c
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2201      	movs	r2, #1
 8003e36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e38:	d00b      	beq.n	8003e52 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2208      	movs	r2, #8
 8003e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2284      	movs	r2, #132	; 0x84
 8003e46:	589b      	ldr	r3, [r3, r2]
 8003e48:	2208      	movs	r2, #8
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2184      	movs	r1, #132	; 0x84
 8003e50:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e52:	23a4      	movs	r3, #164	; 0xa4
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_UART_IRQHandler+0x198>
 8003e60:	23a0      	movs	r3, #160	; 0xa0
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	04db      	lsls	r3, r3, #19
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d00c      	beq.n	8003e88 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2284      	movs	r2, #132	; 0x84
 8003e7c:	589b      	ldr	r3, [r3, r2]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2184      	movs	r1, #132	; 0x84
 8003e86:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2284      	movs	r2, #132	; 0x84
 8003e8c:	589b      	ldr	r3, [r3, r2]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d100      	bne.n	8003e94 <HAL_UART_IRQHandler+0x1a4>
 8003e92:	e1e7      	b.n	8004264 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e94:	23a4      	movs	r3, #164	; 0xa4
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ea0:	23a0      	movs	r3, #160	; 0xa0
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d008      	beq.n	8003ebe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	0010      	movs	r0, r2
 8003ebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2284      	movs	r2, #132	; 0x84
 8003ec2:	589b      	ldr	r3, [r3, r2]
 8003ec4:	2194      	movs	r1, #148	; 0x94
 8003ec6:	187a      	adds	r2, r7, r1
 8003ec8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2240      	movs	r2, #64	; 0x40
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d004      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2228      	movs	r2, #40	; 0x28
 8003ede:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ee0:	d047      	beq.n	8003f72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 fd93 	bl	8004a10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2240      	movs	r2, #64	; 0x40
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d137      	bne.n	8003f68 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8003efc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f00:	2090      	movs	r0, #144	; 0x90
 8003f02:	183a      	adds	r2, r7, r0
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	2301      	movs	r3, #1
 8003f08:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	438a      	bics	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
 8003f22:	183b      	adds	r3, r7, r0
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f2a:	f383 8810 	msr	PRIMASK, r3
}
 8003f2e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <HAL_UART_IRQHandler+0x2a0>)
 8003f3e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7fe fb59 	bl	80025fc <HAL_DMA_Abort_IT>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d01a      	beq.n	8003f84 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f58:	0018      	movs	r0, r3
 8003f5a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e012      	b.n	8003f84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7fd fdc7 	bl	8001af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f66:	e00d      	b.n	8003f84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fd fdc2 	bl	8001af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e008      	b.n	8003f84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7fd fdbd 	bl	8001af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2284      	movs	r2, #132	; 0x84
 8003f7e:	2100      	movs	r1, #0
 8003f80:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003f82:	e16f      	b.n	8004264 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	46c0      	nop			; (mov r8, r8)
    return;
 8003f86:	e16d      	b.n	8004264 <HAL_UART_IRQHandler+0x574>
 8003f88:	0000080f 	.word	0x0000080f
 8003f8c:	04000120 	.word	0x04000120
 8003f90:	08004ad9 	.word	0x08004ad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d000      	beq.n	8003f9e <HAL_UART_IRQHandler+0x2ae>
 8003f9c:	e139      	b.n	8004212 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f9e:	23a4      	movs	r3, #164	; 0xa4
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d100      	bne.n	8003fac <HAL_UART_IRQHandler+0x2bc>
 8003faa:	e132      	b.n	8004212 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fac:	23a0      	movs	r3, #160	; 0xa0
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d100      	bne.n	8003fba <HAL_UART_IRQHandler+0x2ca>
 8003fb8:	e12b      	b.n	8004212 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2240      	movs	r2, #64	; 0x40
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d000      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x2e2>
 8003fd0:	e09f      	b.n	8004112 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	217e      	movs	r1, #126	; 0x7e
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d100      	bne.n	8003fea <HAL_UART_IRQHandler+0x2fa>
 8003fe8:	e13e      	b.n	8004268 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2258      	movs	r2, #88	; 0x58
 8003fee:	5a9b      	ldrh	r3, [r3, r2]
 8003ff0:	187a      	adds	r2, r7, r1
 8003ff2:	8812      	ldrh	r2, [r2, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d300      	bcc.n	8003ffa <HAL_UART_IRQHandler+0x30a>
 8003ff8:	e136      	b.n	8004268 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	187a      	adds	r2, r7, r1
 8003ffe:	215a      	movs	r1, #90	; 0x5a
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b20      	cmp	r3, #32
 800400c:	d06f      	beq.n	80040ee <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400e:	f3ef 8310 	mrs	r3, PRIMASK
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004016:	67bb      	str	r3, [r7, #120]	; 0x78
 8004018:	2301      	movs	r3, #1
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	f383 8810 	msr	PRIMASK, r3
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4992      	ldr	r1, [pc, #584]	; (8004278 <HAL_UART_IRQHandler+0x588>)
 8004030:	400a      	ands	r2, r1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004040:	f3ef 8310 	mrs	r3, PRIMASK
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	677b      	str	r3, [r7, #116]	; 0x74
 800404a:	2301      	movs	r3, #1
 800404c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2101      	movs	r1, #1
 8004062:	438a      	bics	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004068:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004072:	f3ef 8310 	mrs	r3, PRIMASK
 8004076:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004078:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	673b      	str	r3, [r7, #112]	; 0x70
 800407c:	2301      	movs	r3, #1
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004082:	f383 8810 	msr	PRIMASK, r3
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	438a      	bics	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800409a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409e:	f383 8810 	msr	PRIMASK, r3
}
 80040a2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	2120      	movs	r1, #32
 80040aa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b2:	f3ef 8310 	mrs	r3, PRIMASK
 80040b6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80040b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040bc:	2301      	movs	r3, #1
 80040be:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2110      	movs	r1, #16
 80040d4:	438a      	bics	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040da:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040de:	f383 8810 	msr	PRIMASK, r3
}
 80040e2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7fe fa4f 	bl	800258c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2258      	movs	r2, #88	; 0x58
 80040f8:	5a9a      	ldrh	r2, [r3, r2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	215a      	movs	r1, #90	; 0x5a
 80040fe:	5a5b      	ldrh	r3, [r3, r1]
 8004100:	b29b      	uxth	r3, r3
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0011      	movs	r1, r2
 800410a:	0018      	movs	r0, r3
 800410c:	f000 f8b8 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004110:	e0aa      	b.n	8004268 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2258      	movs	r2, #88	; 0x58
 8004116:	5a99      	ldrh	r1, [r3, r2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	225a      	movs	r2, #90	; 0x5a
 800411c:	5a9b      	ldrh	r3, [r3, r2]
 800411e:	b29a      	uxth	r2, r3
 8004120:	208e      	movs	r0, #142	; 0x8e
 8004122:	183b      	adds	r3, r7, r0
 8004124:	1a8a      	subs	r2, r1, r2
 8004126:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	225a      	movs	r2, #90	; 0x5a
 800412c:	5a9b      	ldrh	r3, [r3, r2]
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d100      	bne.n	8004136 <HAL_UART_IRQHandler+0x446>
 8004134:	e09a      	b.n	800426c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004136:	183b      	adds	r3, r7, r0
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d100      	bne.n	8004140 <HAL_UART_IRQHandler+0x450>
 800413e:	e095      	b.n	800426c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004140:	f3ef 8310 	mrs	r3, PRIMASK
 8004144:	60fb      	str	r3, [r7, #12]
  return(result);
 8004146:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004148:	2488      	movs	r4, #136	; 0x88
 800414a:	193a      	adds	r2, r7, r4
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	2301      	movs	r3, #1
 8004150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4945      	ldr	r1, [pc, #276]	; (800427c <HAL_UART_IRQHandler+0x58c>)
 8004166:	400a      	ands	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	193b      	adds	r3, r7, r4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004178:	f3ef 8310 	mrs	r3, PRIMASK
 800417c:	61bb      	str	r3, [r7, #24]
  return(result);
 800417e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	2484      	movs	r4, #132	; 0x84
 8004182:	193a      	adds	r2, r7, r4
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	2301      	movs	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2101      	movs	r1, #1
 800419e:	438a      	bics	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	193b      	adds	r3, r7, r4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f383 8810 	msr	PRIMASK, r3
}
 80041ae:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	2120      	movs	r1, #32
 80041b6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c4:	f3ef 8310 	mrs	r3, PRIMASK
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	2480      	movs	r4, #128	; 0x80
 80041ce:	193a      	adds	r2, r7, r4
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	2301      	movs	r3, #1
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2110      	movs	r1, #16
 80041ea:	438a      	bics	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	193b      	adds	r3, r7, r4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	f383 8810 	msr	PRIMASK, r3
}
 80041fa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004202:	183b      	adds	r3, r7, r0
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f000 f838 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004210:	e02c      	b.n	800426c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004212:	23a4      	movs	r3, #164	; 0xa4
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	4013      	ands	r3, r2
 800421c:	d00f      	beq.n	800423e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800421e:	23a0      	movs	r3, #160	; 0xa0
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	4013      	ands	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01e      	beq.n	8004270 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	0010      	movs	r0, r2
 800423a:	4798      	blx	r3
    }
    return;
 800423c:	e018      	b.n	8004270 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800423e:	23a4      	movs	r3, #164	; 0xa4
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2240      	movs	r2, #64	; 0x40
 8004246:	4013      	ands	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_UART_IRQHandler+0x582>
 800424a:	23a0      	movs	r3, #160	; 0xa0
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2240      	movs	r2, #64	; 0x40
 8004252:	4013      	ands	r3, r2
 8004254:	d00d      	beq.n	8004272 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 fc54 	bl	8004b06 <UART_EndTransmit_IT>
    return;
 800425e:	e008      	b.n	8004272 <HAL_UART_IRQHandler+0x582>
      return;
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	e006      	b.n	8004272 <HAL_UART_IRQHandler+0x582>
    return;
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	e004      	b.n	8004272 <HAL_UART_IRQHandler+0x582>
      return;
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	e002      	b.n	8004272 <HAL_UART_IRQHandler+0x582>
      return;
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	e000      	b.n	8004272 <HAL_UART_IRQHandler+0x582>
    return;
 8004270:	46c0      	nop			; (mov r8, r8)
  }

}
 8004272:	46bd      	mov	sp, r7
 8004274:	b02b      	add	sp, #172	; 0xac
 8004276:	bd90      	pop	{r4, r7, pc}
 8004278:	fffffeff 	.word	0xfffffeff
 800427c:	fffffedf 	.word	0xfffffedf

08004280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	000a      	movs	r2, r1
 800428a:	1cbb      	adds	r3, r7, #2
 800428c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b002      	add	sp, #8
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a0:	231e      	movs	r3, #30
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a8d      	ldr	r2, [pc, #564]	; (80044fc <UART_SetConfig+0x264>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	0019      	movs	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a88      	ldr	r2, [pc, #544]	; (8004500 <UART_SetConfig+0x268>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a7f      	ldr	r2, [pc, #508]	; (8004504 <UART_SetConfig+0x26c>)
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	430a      	orrs	r2, r1
 8004312:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7b      	ldr	r2, [pc, #492]	; (8004508 <UART_SetConfig+0x270>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d127      	bne.n	800436e <UART_SetConfig+0xd6>
 800431e:	4b7b      	ldr	r3, [pc, #492]	; (800450c <UART_SetConfig+0x274>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	2203      	movs	r2, #3
 8004324:	4013      	ands	r3, r2
 8004326:	2b03      	cmp	r3, #3
 8004328:	d00d      	beq.n	8004346 <UART_SetConfig+0xae>
 800432a:	d81b      	bhi.n	8004364 <UART_SetConfig+0xcc>
 800432c:	2b02      	cmp	r3, #2
 800432e:	d014      	beq.n	800435a <UART_SetConfig+0xc2>
 8004330:	d818      	bhi.n	8004364 <UART_SetConfig+0xcc>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <UART_SetConfig+0xa4>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d00a      	beq.n	8004350 <UART_SetConfig+0xb8>
 800433a:	e013      	b.n	8004364 <UART_SetConfig+0xcc>
 800433c:	231f      	movs	r3, #31
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e021      	b.n	800438a <UART_SetConfig+0xf2>
 8004346:	231f      	movs	r3, #31
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e01c      	b.n	800438a <UART_SetConfig+0xf2>
 8004350:	231f      	movs	r3, #31
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2204      	movs	r2, #4
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e017      	b.n	800438a <UART_SetConfig+0xf2>
 800435a:	231f      	movs	r3, #31
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2208      	movs	r2, #8
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e012      	b.n	800438a <UART_SetConfig+0xf2>
 8004364:	231f      	movs	r3, #31
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2210      	movs	r2, #16
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e00d      	b.n	800438a <UART_SetConfig+0xf2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a67      	ldr	r2, [pc, #412]	; (8004510 <UART_SetConfig+0x278>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d104      	bne.n	8004382 <UART_SetConfig+0xea>
 8004378:	231f      	movs	r3, #31
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e003      	b.n	800438a <UART_SetConfig+0xf2>
 8004382:	231f      	movs	r3, #31
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2210      	movs	r2, #16
 8004388:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	429a      	cmp	r2, r3
 8004394:	d15c      	bne.n	8004450 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004396:	231f      	movs	r3, #31
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d015      	beq.n	80043cc <UART_SetConfig+0x134>
 80043a0:	dc18      	bgt.n	80043d4 <UART_SetConfig+0x13c>
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00d      	beq.n	80043c2 <UART_SetConfig+0x12a>
 80043a6:	dc15      	bgt.n	80043d4 <UART_SetConfig+0x13c>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <UART_SetConfig+0x11a>
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d005      	beq.n	80043bc <UART_SetConfig+0x124>
 80043b0:	e010      	b.n	80043d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b2:	f7ff f849 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 80043b6:	0003      	movs	r3, r0
 80043b8:	61bb      	str	r3, [r7, #24]
        break;
 80043ba:	e012      	b.n	80043e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043bc:	4b55      	ldr	r3, [pc, #340]	; (8004514 <UART_SetConfig+0x27c>)
 80043be:	61bb      	str	r3, [r7, #24]
        break;
 80043c0:	e00f      	b.n	80043e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c2:	f7fe ffdf 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 80043c6:	0003      	movs	r3, r0
 80043c8:	61bb      	str	r3, [r7, #24]
        break;
 80043ca:	e00a      	b.n	80043e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	61bb      	str	r3, [r7, #24]
        break;
 80043d2:	e006      	b.n	80043e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043d8:	231e      	movs	r3, #30
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
        break;
 80043e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d100      	bne.n	80043ea <UART_SetConfig+0x152>
 80043e8:	e07a      	b.n	80044e0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	005a      	lsls	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	0019      	movs	r1, r3
 80043fc:	0010      	movs	r0, r2
 80043fe:	f7fb fe83 	bl	8000108 <__udivsi3>
 8004402:	0003      	movs	r3, r0
 8004404:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b0f      	cmp	r3, #15
 800440a:	d91c      	bls.n	8004446 <UART_SetConfig+0x1ae>
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	429a      	cmp	r2, r3
 8004414:	d217      	bcs.n	8004446 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	b29a      	uxth	r2, r3
 800441a:	200e      	movs	r0, #14
 800441c:	183b      	adds	r3, r7, r0
 800441e:	210f      	movs	r1, #15
 8004420:	438a      	bics	r2, r1
 8004422:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	b29b      	uxth	r3, r3
 800442a:	2207      	movs	r2, #7
 800442c:	4013      	ands	r3, r2
 800442e:	b299      	uxth	r1, r3
 8004430:	183b      	adds	r3, r7, r0
 8004432:	183a      	adds	r2, r7, r0
 8004434:	8812      	ldrh	r2, [r2, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	183a      	adds	r2, r7, r0
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	60da      	str	r2, [r3, #12]
 8004444:	e04c      	b.n	80044e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004446:	231e      	movs	r3, #30
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e047      	b.n	80044e0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004450:	231f      	movs	r3, #31
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b08      	cmp	r3, #8
 8004458:	d015      	beq.n	8004486 <UART_SetConfig+0x1ee>
 800445a:	dc18      	bgt.n	800448e <UART_SetConfig+0x1f6>
 800445c:	2b04      	cmp	r3, #4
 800445e:	d00d      	beq.n	800447c <UART_SetConfig+0x1e4>
 8004460:	dc15      	bgt.n	800448e <UART_SetConfig+0x1f6>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <UART_SetConfig+0x1d4>
 8004466:	2b02      	cmp	r3, #2
 8004468:	d005      	beq.n	8004476 <UART_SetConfig+0x1de>
 800446a:	e010      	b.n	800448e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7fe ffec 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8004470:	0003      	movs	r3, r0
 8004472:	61bb      	str	r3, [r7, #24]
        break;
 8004474:	e012      	b.n	800449c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004476:	4b27      	ldr	r3, [pc, #156]	; (8004514 <UART_SetConfig+0x27c>)
 8004478:	61bb      	str	r3, [r7, #24]
        break;
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447c:	f7fe ff82 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8004480:	0003      	movs	r3, r0
 8004482:	61bb      	str	r3, [r7, #24]
        break;
 8004484:	e00a      	b.n	800449c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	61bb      	str	r3, [r7, #24]
        break;
 800448c:	e006      	b.n	800449c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004492:	231e      	movs	r3, #30
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
        break;
 800449a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01e      	beq.n	80044e0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	085a      	lsrs	r2, r3, #1
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	18d2      	adds	r2, r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0019      	movs	r1, r3
 80044b2:	0010      	movs	r0, r2
 80044b4:	f7fb fe28 	bl	8000108 <__udivsi3>
 80044b8:	0003      	movs	r3, r0
 80044ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	d90a      	bls.n	80044d8 <UART_SetConfig+0x240>
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d205      	bcs.n	80044d8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	e003      	b.n	80044e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80044d8:	231e      	movs	r3, #30
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044ec:	231e      	movs	r3, #30
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	781b      	ldrb	r3, [r3, #0]
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b008      	add	sp, #32
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	ffff69f3 	.word	0xffff69f3
 8004500:	ffffcfff 	.word	0xffffcfff
 8004504:	fffff4ff 	.word	0xfffff4ff
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	007a1200 	.word	0x007a1200

08004518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2201      	movs	r2, #1
 8004526:	4013      	ands	r3, r2
 8004528:	d00b      	beq.n	8004542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a4a      	ldr	r2, [pc, #296]	; (800465c <UART_AdvFeatureConfig+0x144>)
 8004532:	4013      	ands	r3, r2
 8004534:	0019      	movs	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2202      	movs	r2, #2
 8004548:	4013      	ands	r3, r2
 800454a:	d00b      	beq.n	8004564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4a43      	ldr	r2, [pc, #268]	; (8004660 <UART_AdvFeatureConfig+0x148>)
 8004554:	4013      	ands	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	2204      	movs	r2, #4
 800456a:	4013      	ands	r3, r2
 800456c:	d00b      	beq.n	8004586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a3b      	ldr	r2, [pc, #236]	; (8004664 <UART_AdvFeatureConfig+0x14c>)
 8004576:	4013      	ands	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2208      	movs	r2, #8
 800458c:	4013      	ands	r3, r2
 800458e:	d00b      	beq.n	80045a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a34      	ldr	r2, [pc, #208]	; (8004668 <UART_AdvFeatureConfig+0x150>)
 8004598:	4013      	ands	r3, r2
 800459a:	0019      	movs	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2210      	movs	r2, #16
 80045ae:	4013      	ands	r3, r2
 80045b0:	d00b      	beq.n	80045ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a2c      	ldr	r2, [pc, #176]	; (800466c <UART_AdvFeatureConfig+0x154>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2220      	movs	r2, #32
 80045d0:	4013      	ands	r3, r2
 80045d2:	d00b      	beq.n	80045ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4a25      	ldr	r2, [pc, #148]	; (8004670 <UART_AdvFeatureConfig+0x158>)
 80045dc:	4013      	ands	r3, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	2240      	movs	r2, #64	; 0x40
 80045f2:	4013      	ands	r3, r2
 80045f4:	d01d      	beq.n	8004632 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <UART_AdvFeatureConfig+0x15c>)
 80045fe:	4013      	ands	r3, r2
 8004600:	0019      	movs	r1, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	035b      	lsls	r3, r3, #13
 8004616:	429a      	cmp	r2, r3
 8004618:	d10b      	bne.n	8004632 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a15      	ldr	r2, [pc, #84]	; (8004678 <UART_AdvFeatureConfig+0x160>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2280      	movs	r2, #128	; 0x80
 8004638:	4013      	ands	r3, r2
 800463a:	d00b      	beq.n	8004654 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4a0e      	ldr	r2, [pc, #56]	; (800467c <UART_AdvFeatureConfig+0x164>)
 8004644:	4013      	ands	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}
 800465c:	fffdffff 	.word	0xfffdffff
 8004660:	fffeffff 	.word	0xfffeffff
 8004664:	fffbffff 	.word	0xfffbffff
 8004668:	ffff7fff 	.word	0xffff7fff
 800466c:	ffffefff 	.word	0xffffefff
 8004670:	ffffdfff 	.word	0xffffdfff
 8004674:	ffefffff 	.word	0xffefffff
 8004678:	ff9fffff 	.word	0xff9fffff
 800467c:	fff7ffff 	.word	0xfff7ffff

08004680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b092      	sub	sp, #72	; 0x48
 8004684:	af02      	add	r7, sp, #8
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2284      	movs	r2, #132	; 0x84
 800468c:	2100      	movs	r1, #0
 800468e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004690:	f7fd fe62 	bl	8002358 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2208      	movs	r2, #8
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d12c      	bne.n	8004700 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a8:	2280      	movs	r2, #128	; 0x80
 80046aa:	0391      	lsls	r1, r2, #14
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4a46      	ldr	r2, [pc, #280]	; (80047c8 <UART_CheckIdleState+0x148>)
 80046b0:	9200      	str	r2, [sp, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f000 f88c 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d021      	beq.n	8004700 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046bc:	f3ef 8310 	mrs	r3, PRIMASK
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c6:	2301      	movs	r3, #1
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	438a      	bics	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	f383 8810 	msr	PRIMASK, r3
}
 80046ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2278      	movs	r2, #120	; 0x78
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e05f      	b.n	80047c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2204      	movs	r2, #4
 8004708:	4013      	ands	r3, r2
 800470a:	2b04      	cmp	r3, #4
 800470c:	d146      	bne.n	800479c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	03d1      	lsls	r1, r2, #15
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <UART_CheckIdleState+0x148>)
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	f000 f858 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 8004720:	1e03      	subs	r3, r0, #0
 8004722:	d03b      	beq.n	800479c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	60fb      	str	r3, [r7, #12]
  return(result);
 800472a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
 800472e:	2301      	movs	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4921      	ldr	r1, [pc, #132]	; (80047cc <UART_CheckIdleState+0x14c>)
 8004746:	400a      	ands	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004756:	f3ef 8310 	mrs	r3, PRIMASK
 800475a:	61bb      	str	r3, [r7, #24]
  return(result);
 800475c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
 8004760:	2301      	movs	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f383 8810 	msr	PRIMASK, r3
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2101      	movs	r1, #1
 8004778:	438a      	bics	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	2120      	movs	r1, #32
 800478e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2278      	movs	r2, #120	; 0x78
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e011      	b.n	80047c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	2120      	movs	r1, #32
 80047a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2278      	movs	r2, #120	; 0x78
 80047ba:	2100      	movs	r1, #0
 80047bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b010      	add	sp, #64	; 0x40
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	01ffffff 	.word	0x01ffffff
 80047cc:	fffffedf 	.word	0xfffffedf

080047d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	1dfb      	adds	r3, r7, #7
 80047de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e0:	e04b      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3301      	adds	r3, #1
 80047e6:	d048      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e8:	f7fd fdb6 	bl	8002358 <HAL_GetTick>
 80047ec:	0002      	movs	r2, r0
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d302      	bcc.n	80047fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e04b      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2204      	movs	r2, #4
 800480a:	4013      	ands	r3, r2
 800480c:	d035      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	2208      	movs	r2, #8
 8004816:	4013      	ands	r3, r2
 8004818:	2b08      	cmp	r3, #8
 800481a:	d111      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2208      	movs	r2, #8
 8004822:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	0018      	movs	r0, r3
 8004828:	f000 f8f2 	bl	8004a10 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2284      	movs	r2, #132	; 0x84
 8004830:	2108      	movs	r1, #8
 8004832:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2278      	movs	r2, #120	; 0x78
 8004838:	2100      	movs	r1, #0
 800483a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e02c      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	401a      	ands	r2, r3
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	429a      	cmp	r2, r3
 8004852:	d112      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2280      	movs	r2, #128	; 0x80
 800485a:	0112      	lsls	r2, r2, #4
 800485c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 f8d5 	bl	8004a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2284      	movs	r2, #132	; 0x84
 800486a:	2120      	movs	r1, #32
 800486c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2278      	movs	r2, #120	; 0x78
 8004872:	2100      	movs	r1, #0
 8004874:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e00f      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4013      	ands	r3, r2
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	425a      	negs	r2, r3
 800488a:	4153      	adcs	r3, r2
 800488c:	b2db      	uxtb	r3, r3
 800488e:	001a      	movs	r2, r3
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d0a4      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b004      	add	sp, #16
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b090      	sub	sp, #64	; 0x40
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	1dbb      	adds	r3, r7, #6
 80048b0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1dba      	adds	r2, r7, #6
 80048bc:	2158      	movs	r1, #88	; 0x58
 80048be:	8812      	ldrh	r2, [r2, #0]
 80048c0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1dba      	adds	r2, r7, #6
 80048c6:	215a      	movs	r1, #90	; 0x5a
 80048c8:	8812      	ldrh	r2, [r2, #0]
 80048ca:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	015b      	lsls	r3, r3, #5
 80048da:	429a      	cmp	r2, r3
 80048dc:	d10d      	bne.n	80048fa <UART_Start_Receive_IT+0x56>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <UART_Start_Receive_IT+0x4c>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	225c      	movs	r2, #92	; 0x5c
 80048ea:	4946      	ldr	r1, [pc, #280]	; (8004a04 <UART_Start_Receive_IT+0x160>)
 80048ec:	5299      	strh	r1, [r3, r2]
 80048ee:	e01a      	b.n	8004926 <UART_Start_Receive_IT+0x82>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	225c      	movs	r2, #92	; 0x5c
 80048f4:	21ff      	movs	r1, #255	; 0xff
 80048f6:	5299      	strh	r1, [r3, r2]
 80048f8:	e015      	b.n	8004926 <UART_Start_Receive_IT+0x82>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <UART_Start_Receive_IT+0x7a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <UART_Start_Receive_IT+0x70>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	225c      	movs	r2, #92	; 0x5c
 800490e:	21ff      	movs	r1, #255	; 0xff
 8004910:	5299      	strh	r1, [r3, r2]
 8004912:	e008      	b.n	8004926 <UART_Start_Receive_IT+0x82>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	225c      	movs	r2, #92	; 0x5c
 8004918:	217f      	movs	r1, #127	; 0x7f
 800491a:	5299      	strh	r1, [r3, r2]
 800491c:	e003      	b.n	8004926 <UART_Start_Receive_IT+0x82>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	225c      	movs	r2, #92	; 0x5c
 8004922:	2100      	movs	r1, #0
 8004924:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2284      	movs	r2, #132	; 0x84
 800492a:	2100      	movs	r1, #0
 800492c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2280      	movs	r2, #128	; 0x80
 8004932:	2122      	movs	r1, #34	; 0x22
 8004934:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004936:	f3ef 8310 	mrs	r3, PRIMASK
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004940:	2301      	movs	r3, #1
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	f383 8810 	msr	PRIMASK, r3
}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	f383 8810 	msr	PRIMASK, r3
}
 8004966:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	015b      	lsls	r3, r3, #5
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <UART_Start_Receive_IT+0xe0>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <UART_Start_Receive_IT+0x164>)
 8004980:	669a      	str	r2, [r3, #104]	; 0x68
 8004982:	e002      	b.n	800498a <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <UART_Start_Receive_IT+0x168>)
 8004988:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d019      	beq.n	80049c6 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004992:	f3ef 8310 	mrs	r3, PRIMASK
 8004996:	61fb      	str	r3, [r7, #28]
  return(result);
 8004998:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800499a:	637b      	str	r3, [r7, #52]	; 0x34
 800499c:	2301      	movs	r3, #1
 800499e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f383 8810 	msr	PRIMASK, r3
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2190      	movs	r1, #144	; 0x90
 80049b4:	0049      	lsls	r1, r1, #1
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	f383 8810 	msr	PRIMASK, r3
}
 80049c4:	e018      	b.n	80049f8 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ca:	613b      	str	r3, [r7, #16]
  return(result);
 80049cc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80049ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d0:	2301      	movs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f383 8810 	msr	PRIMASK, r3
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2120      	movs	r1, #32
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f383 8810 	msr	PRIMASK, r3
}
 80049f6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b010      	add	sp, #64	; 0x40
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	000001ff 	.word	0x000001ff
 8004a08:	08004d15 	.word	0x08004d15
 8004a0c:	08004b5d 	.word	0x08004b5d

08004a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a18:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
 8004a22:	2301      	movs	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4926      	ldr	r1, [pc, #152]	; (8004ad4 <UART_EndRxTransfer+0xc4>)
 8004a3a:	400a      	ands	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4e:	623b      	str	r3, [r7, #32]
  return(result);
 8004a50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
 8004a54:	2301      	movs	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	f383 8810 	msr	PRIMASK, r3
}
 8004a7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d118      	bne.n	8004ab6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a84:	f3ef 8310 	mrs	r3, PRIMASK
 8004a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8e:	2301      	movs	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f383 8810 	msr	PRIMASK, r3
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2110      	movs	r1, #16
 8004aa6:	438a      	bics	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f383 8810 	msr	PRIMASK, r3
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2280      	movs	r2, #128	; 0x80
 8004aba:	2120      	movs	r1, #32
 8004abc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b00e      	add	sp, #56	; 0x38
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	fffffedf 	.word	0xfffffedf

08004ad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	225a      	movs	r2, #90	; 0x5a
 8004aea:	2100      	movs	r1, #0
 8004aec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2252      	movs	r2, #82	; 0x52
 8004af2:	2100      	movs	r1, #0
 8004af4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7fc fffb 	bl	8001af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b004      	add	sp, #16
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b12:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b14:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f383 8810 	msr	PRIMASK, r3
}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2140      	movs	r1, #64	; 0x40
 8004b30:	438a      	bics	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f383 8810 	msr	PRIMASK, r3
}
 8004b3e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fc feb0 	bl	80018b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b54:	46c0      	nop			; (mov r8, r8)
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b006      	add	sp, #24
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b094      	sub	sp, #80	; 0x50
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b64:	204e      	movs	r0, #78	; 0x4e
 8004b66:	183b      	adds	r3, r7, r0
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	215c      	movs	r1, #92	; 0x5c
 8004b6c:	5a52      	ldrh	r2, [r2, r1]
 8004b6e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2280      	movs	r2, #128	; 0x80
 8004b74:	589b      	ldr	r3, [r3, r2]
 8004b76:	2b22      	cmp	r3, #34	; 0x22
 8004b78:	d000      	beq.n	8004b7c <UART_RxISR_8BIT+0x20>
 8004b7a:	e0ba      	b.n	8004cf2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	214c      	movs	r1, #76	; 0x4c
 8004b82:	187b      	adds	r3, r7, r1
 8004b84:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004b86:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b88:	187b      	adds	r3, r7, r1
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	183b      	adds	r3, r7, r0
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b2d9      	uxtb	r1, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	400a      	ands	r2, r1
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	225a      	movs	r2, #90	; 0x5a
 8004bac:	5a9b      	ldrh	r3, [r3, r2]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b299      	uxth	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	225a      	movs	r2, #90	; 0x5a
 8004bb8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	225a      	movs	r2, #90	; 0x5a
 8004bbe:	5a9b      	ldrh	r3, [r3, r2]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d000      	beq.n	8004bc8 <UART_RxISR_8BIT+0x6c>
 8004bc6:	e09c      	b.n	8004d02 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	f383 8810 	msr	PRIMASK, r3
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4948      	ldr	r1, [pc, #288]	; (8004d0c <UART_RxISR_8BIT+0x1b0>)
 8004bea:	400a      	ands	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	647b      	str	r3, [r7, #68]	; 0x44
 8004c04:	2301      	movs	r3, #1
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	438a      	bics	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2280      	movs	r2, #128	; 0x80
 8004c30:	2120      	movs	r1, #32
 8004c32:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c52:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c54:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
 8004c58:	2301      	movs	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f383 8810 	msr	PRIMASK, r3
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4928      	ldr	r1, [pc, #160]	; (8004d10 <UART_RxISR_8BIT+0x1b4>)
 8004c70:	400a      	ands	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d12f      	bne.n	8004ce8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c94:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c98:	2301      	movs	r3, #1
 8004c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2110      	movs	r1, #16
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f383 8810 	msr	PRIMASK, r3
}
 8004cbe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b10      	cmp	r3, #16
 8004ccc:	d103      	bne.n	8004cd6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2258      	movs	r2, #88	; 0x58
 8004cda:	5a9a      	ldrh	r2, [r3, r2]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	0011      	movs	r1, r2
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7ff facd 	bl	8004280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ce6:	e00c      	b.n	8004d02 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	0018      	movs	r0, r3
 8004cec:	f7fc fe10 	bl	8001910 <HAL_UART_RxCpltCallback>
}
 8004cf0:	e007      	b.n	8004d02 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2108      	movs	r1, #8
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	619a      	str	r2, [r3, #24]
}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b014      	add	sp, #80	; 0x50
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	fffffedf 	.word	0xfffffedf
 8004d10:	fbffffff 	.word	0xfbffffff

08004d14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b094      	sub	sp, #80	; 0x50
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d1c:	204e      	movs	r0, #78	; 0x4e
 8004d1e:	183b      	adds	r3, r7, r0
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	215c      	movs	r1, #92	; 0x5c
 8004d24:	5a52      	ldrh	r2, [r2, r1]
 8004d26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2280      	movs	r2, #128	; 0x80
 8004d2c:	589b      	ldr	r3, [r3, r2]
 8004d2e:	2b22      	cmp	r3, #34	; 0x22
 8004d30:	d000      	beq.n	8004d34 <UART_RxISR_16BIT+0x20>
 8004d32:	e0ba      	b.n	8004eaa <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	214c      	movs	r1, #76	; 0x4c
 8004d3a:	187b      	adds	r3, r7, r1
 8004d3c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004d3e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d46:	187b      	adds	r3, r7, r1
 8004d48:	183a      	adds	r2, r7, r0
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	8812      	ldrh	r2, [r2, #0]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	1c9a      	adds	r2, r3, #2
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	225a      	movs	r2, #90	; 0x5a
 8004d64:	5a9b      	ldrh	r3, [r3, r2]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b299      	uxth	r1, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	225a      	movs	r2, #90	; 0x5a
 8004d70:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	225a      	movs	r2, #90	; 0x5a
 8004d76:	5a9b      	ldrh	r3, [r3, r2]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d000      	beq.n	8004d80 <UART_RxISR_16BIT+0x6c>
 8004d7e:	e09c      	b.n	8004eba <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d80:	f3ef 8310 	mrs	r3, PRIMASK
 8004d84:	623b      	str	r3, [r7, #32]
  return(result);
 8004d86:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	f383 8810 	msr	PRIMASK, r3
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4948      	ldr	r1, [pc, #288]	; (8004ec4 <UART_RxISR_16BIT+0x1b0>)
 8004da2:	400a      	ands	r2, r1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	f383 8810 	msr	PRIMASK, r3
}
 8004db0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db2:	f3ef 8310 	mrs	r3, PRIMASK
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dba:	643b      	str	r3, [r7, #64]	; 0x40
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	f383 8810 	msr	PRIMASK, r3
}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	438a      	bics	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	f383 8810 	msr	PRIMASK, r3
}
 8004de2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2280      	movs	r2, #128	; 0x80
 8004de8:	2120      	movs	r1, #32
 8004dea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	041b      	lsls	r3, r3, #16
 8004e02:	4013      	ands	r3, r2
 8004e04:	d018      	beq.n	8004e38 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e06:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0a:	617b      	str	r3, [r7, #20]
  return(result);
 8004e0c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e10:	2301      	movs	r3, #1
 8004e12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f383 8810 	msr	PRIMASK, r3
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4928      	ldr	r1, [pc, #160]	; (8004ec8 <UART_RxISR_16BIT+0x1b4>)
 8004e28:	400a      	ands	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f383 8810 	msr	PRIMASK, r3
}
 8004e36:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d12f      	bne.n	8004ea0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e46:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e4c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e50:	2301      	movs	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f383 8810 	msr	PRIMASK, r3
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2110      	movs	r1, #16
 8004e68:	438a      	bics	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f383 8810 	msr	PRIMASK, r3
}
 8004e76:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d103      	bne.n	8004e8e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2210      	movs	r2, #16
 8004e8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2258      	movs	r2, #88	; 0x58
 8004e92:	5a9a      	ldrh	r2, [r3, r2]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	0011      	movs	r1, r2
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7ff f9f1 	bl	8004280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e9e:	e00c      	b.n	8004eba <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7fc fd34 	bl	8001910 <HAL_UART_RxCpltCallback>
}
 8004ea8:	e007      	b.n	8004eba <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2108      	movs	r1, #8
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	619a      	str	r2, [r3, #24]
}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b014      	add	sp, #80	; 0x50
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	fffffedf 	.word	0xfffffedf
 8004ec8:	fbffffff 	.word	0xfbffffff

08004ecc <kfifo_reset>:
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b002      	add	sp, #8
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
	return fifo->size;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
}
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}

08004efe <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 8004efe:	b590      	push	{r4, r7, lr}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	1b1b      	subs	r3, r3, r4
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b003      	add	sp, #12
 8004f16:	bd90      	pop	{r4, r7, pc}

08004f18 <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f7ff ffe1 	bl	8004eea <kfifo_size>
 8004f28:	0004      	movs	r4, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7ff ffe6 	bl	8004efe <kfifo_len>
 8004f32:	0003      	movs	r3, r0
 8004f34:	1ae3      	subs	r3, r4, r3
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b003      	add	sp, #12
 8004f3c:	bd90      	pop	{r4, r7, pc}

08004f3e <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	18d2      	adds	r2, r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	4013      	ands	r3, r2
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f7ff ff9a 	bl	8004ecc <kfifo_reset>
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b004      	add	sp, #16
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	18d2      	adds	r2, r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	0011      	movs	r1, r2
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7ff ffce 	bl	8004f5c <__kfifo_off>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d900      	bls.n	8004fd4 <__kfifo_in_data+0x34>
 8004fd2:	0013      	movs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	18d3      	adds	r3, r2, r3
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f000 f85a 	bl	800509c <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	18d1      	adds	r1, r2, r3
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	001a      	movs	r2, r3
 8004ffa:	f000 f84f 	bl	800509c <memcpy>
}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	46bd      	mov	sp, r7
 8005002:	b006      	add	sp, #24
 8005004:	bd80      	pop	{r7, pc}

08005006 <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	0018      	movs	r0, r3
 8005016:	f7ff ff7f 	bl	8004f18 <kfifo_avail>
 800501a:	0002      	movs	r2, r0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4293      	cmp	r3, r2
 8005020:	d905      	bls.n	800502e <kfifo_in+0x28>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	0018      	movs	r0, r3
 8005026:	f7ff ff77 	bl	8004f18 <kfifo_avail>
 800502a:	0003      	movs	r3, r0
 800502c:	e000      	b.n	8005030 <kfifo_in+0x2a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	2300      	movs	r3, #0
 800503a:	f7ff ffb1 	bl	8004fa0 <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	0011      	movs	r1, r2
 8005044:	0018      	movs	r0, r3
 8005046:	f7ff ff7a 	bl	8004f3e <__kfifo_add_in>
	return len;
 800504a:	687b      	ldr	r3, [r7, #4]
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b004      	add	sp, #16
 8005052:	bd80      	pop	{r7, pc}

08005054 <__libc_init_array>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	2600      	movs	r6, #0
 8005058:	4d0c      	ldr	r5, [pc, #48]	; (800508c <__libc_init_array+0x38>)
 800505a:	4c0d      	ldr	r4, [pc, #52]	; (8005090 <__libc_init_array+0x3c>)
 800505c:	1b64      	subs	r4, r4, r5
 800505e:	10a4      	asrs	r4, r4, #2
 8005060:	42a6      	cmp	r6, r4
 8005062:	d109      	bne.n	8005078 <__libc_init_array+0x24>
 8005064:	2600      	movs	r6, #0
 8005066:	f000 f82b 	bl	80050c0 <_init>
 800506a:	4d0a      	ldr	r5, [pc, #40]	; (8005094 <__libc_init_array+0x40>)
 800506c:	4c0a      	ldr	r4, [pc, #40]	; (8005098 <__libc_init_array+0x44>)
 800506e:	1b64      	subs	r4, r4, r5
 8005070:	10a4      	asrs	r4, r4, #2
 8005072:	42a6      	cmp	r6, r4
 8005074:	d105      	bne.n	8005082 <__libc_init_array+0x2e>
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	00b3      	lsls	r3, r6, #2
 800507a:	58eb      	ldr	r3, [r5, r3]
 800507c:	4798      	blx	r3
 800507e:	3601      	adds	r6, #1
 8005080:	e7ee      	b.n	8005060 <__libc_init_array+0xc>
 8005082:	00b3      	lsls	r3, r6, #2
 8005084:	58eb      	ldr	r3, [r5, r3]
 8005086:	4798      	blx	r3
 8005088:	3601      	adds	r6, #1
 800508a:	e7f2      	b.n	8005072 <__libc_init_array+0x1e>
 800508c:	080052dc 	.word	0x080052dc
 8005090:	080052dc 	.word	0x080052dc
 8005094:	080052dc 	.word	0x080052dc
 8005098:	080052e0 	.word	0x080052e0

0800509c <memcpy>:
 800509c:	2300      	movs	r3, #0
 800509e:	b510      	push	{r4, lr}
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d100      	bne.n	80050a6 <memcpy+0xa>
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	5ccc      	ldrb	r4, [r1, r3]
 80050a8:	54c4      	strb	r4, [r0, r3]
 80050aa:	3301      	adds	r3, #1
 80050ac:	e7f8      	b.n	80050a0 <memcpy+0x4>

080050ae <memset>:
 80050ae:	0003      	movs	r3, r0
 80050b0:	1882      	adds	r2, r0, r2
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d100      	bne.n	80050b8 <memset+0xa>
 80050b6:	4770      	bx	lr
 80050b8:	7019      	strb	r1, [r3, #0]
 80050ba:	3301      	adds	r3, #1
 80050bc:	e7f9      	b.n	80050b2 <memset+0x4>
	...

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
