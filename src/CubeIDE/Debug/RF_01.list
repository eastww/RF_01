
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800634c  0800634c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  0800634c  0800634c  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800634c  0800634c  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08006354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000013c  08006490  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08006490  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a8b  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003783  00000000  00000000  00032bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00036378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00037600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001514a  00000000  00000000  000386c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1ab  00000000  00000000  0004d80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b7df  00000000  00000000  000679b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3194  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c8  00000000  00000000  000d31e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000013c 	.word	0x2000013c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006064 	.word	0x08006064

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000140 	.word	0x20000140
 8000104:	08006064 	.word	0x08006064

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <errorStateHandler>:
 * 
 * @param stateData 
 * @param event 
 */
void errorStateHandler(void *stateData, struct event *event )
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
   puts( "ENTERED ERROR STATE!" );
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <errorStateHandler+0x1c>)
 8000240:	0018      	movs	r0, r3
 8000242:	f005 f829 	bl	8005298 <puts>
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	b002      	add	sp, #8
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	08006088 	.word	0x08006088

08000254 <rfRecvStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
   puts( "Resetting" );
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <rfRecvStateAction+0x1c>)
 8000262:	0018      	movs	r0, r3
 8000264:	f005 f818 	bl	8005298 <puts>
   //todo: use uart send interface to send data
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	b004      	add	sp, #16
 800026e:	bd80      	pop	{r7, pc}
 8000270:	080060a8 	.word	0x080060a8

08000274 <rfRecvStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateEnter( void *stateData, struct event *event )
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 800027e:	2301      	movs	r3, #1
 8000280:	425a      	negs	r2, r3
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <rfRecvStateEnter+0x20>)
 8000284:	2180      	movs	r1, #128	; 0x80
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fede 	bl	8001048 <RF_StartRx>
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000158 	.word	0x20000158

08000298 <rfRecvStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateExit( void *stateData, struct event *event )
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
   printf( "Entering %s state\n", (char *)stateData );
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <rfRecvStateExit+0x20>)
 80002a6:	0011      	movs	r1, r2
 80002a8:	0018      	movs	r0, r3
 80002aa:	f004 ff69 	bl	8005180 <iprintf>
}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b002      	add	sp, #8
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	080060b4 	.word	0x080060b4

080002bc <rfSendStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
   puts( "Resetting" );
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <rfSendStateAction+0x1c>)
 80002ca:	0018      	movs	r0, r3
 80002cc:	f004 ffe4 	bl	8005298 <puts>
   //todo: use uart send interface to send data
}
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b004      	add	sp, #16
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	080060d0 	.word	0x080060d0

080002dc <rfSendStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateEnter( void *stateData, struct event *event )
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
   printf( "Entering %s state\n", (char *)stateData );
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <rfSendStateEnter+0x20>)
 80002ea:	0011      	movs	r1, r2
 80002ec:	0018      	movs	r0, r3
 80002ee:	f004 ff47 	bl	8005180 <iprintf>
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	080060dc 	.word	0x080060dc

08000300 <rfSendStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateExit( void *stateData, struct event *event )
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
   printf( "Entering %s state\n", (char *)stateData );
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <rfSendStateExit+0x20>)
 800030e:	0011      	movs	r1, r2
 8000310:	0018      	movs	r0, r3
 8000312:	f004 ff35 	bl	8005180 <iprintf>
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	080060dc 	.word	0x080060dc

08000324 <stateActuator>:
 * 
 * @param None
 * @retval None
 */
void stateActuator(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
    struct stateMachine m;
    stateM_init(&m, &rfRecvState, &errorState);
 800032a:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <stateActuator+0x3c>)
 800032c:	490d      	ldr	r1, [pc, #52]	; (8000364 <stateActuator+0x40>)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	0018      	movs	r0, r3
 8000332:	f004 fce6 	bl	8004d02 <stateM_init>

    struct msgQueue *mq = mq_init();
 8000336:	f004 fc7f 	bl	8004c38 <mq_init>
 800033a:	0003      	movs	r3, r0
 800033c:	617b      	str	r3, [r7, #20]
    struct msg *msg;
    while ( 1 )
    {
        if ((msg = mq_pop( mq )) != NULL)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	0018      	movs	r0, r3
 8000342:	f004 fcaf 	bl	8004ca4 <mq_pop>
 8000346:	0003      	movs	r3, r0
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0f6      	beq.n	800033e <stateActuator+0x1a>
        {
            stateM_handleEvent(&m, (struct event *)msg);
 8000350:	693a      	ldr	r2, [r7, #16]
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	0011      	movs	r1, r2
 8000356:	0018      	movs	r0, r3
 8000358:	f004 fcea 	bl	8004d30 <stateM_handleEvent>
        if ((msg = mq_pop( mq )) != NULL)
 800035c:	e7ef      	b.n	800033e <stateActuator+0x1a>
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	20000000 	.word	0x20000000
 8000364:	2000006c 	.word	0x2000006c

08000368 <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 800036c:	21ff      	movs	r1, #255	; 0xff
 800036e:	207f      	movs	r0, #127	; 0x7f
 8000370:	f000 fc69 	bl	8000c46 <Cmt2300_WriteReg>
}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 800037e:	2061      	movs	r0, #97	; 0x61
 8000380:	f000 fc4a 	bl	8000c18 <Cmt2300_ReadReg>
 8000384:	0003      	movs	r3, r0
 8000386:	001a      	movs	r2, r3
 8000388:	230f      	movs	r3, #15
 800038a:	4013      	ands	r3, r2
 800038c:	b2db      	uxtb	r3, r3
}
 800038e:	0018      	movs	r0, r3
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 8000394:	b5b0      	push	{r4, r5, r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	0002      	movs	r2, r0
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 80003a0:	230f      	movs	r3, #15
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
 80003a8:	e013      	b.n	80003d2 <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 80003aa:	250e      	movs	r5, #14
 80003ac:	197c      	adds	r4, r7, r5
 80003ae:	f7ff ffe4 	bl	800037a <Cmt2300_GetChipStatus>
 80003b2:	0003      	movs	r3, r0
 80003b4:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 80003b6:	1dfa      	adds	r2, r7, #7
 80003b8:	197b      	adds	r3, r7, r5
 80003ba:	7812      	ldrb	r2, [r2, #0]
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d101      	bne.n	80003c6 <Cmt2300_WaitChipStatus+0x32>
            return true;
 80003c2:	2301      	movs	r3, #1
 80003c4:	e00b      	b.n	80003de <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 80003c6:	210f      	movs	r1, #15
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	781a      	ldrb	r2, [r3, #0]
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	3201      	adds	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]
 80003d2:	230f      	movs	r3, #15
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b31      	cmp	r3, #49	; 0x31
 80003da:	d9e6      	bls.n	80003aa <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 80003dc:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 80003de:	0018      	movs	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b004      	add	sp, #16
 80003e4:	bdb0      	pop	{r4, r5, r7, pc}

080003e6 <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	0002      	movs	r2, r0
 80003ee:	1dfb      	adds	r3, r7, #7
 80003f0:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 80003f2:	2045      	movs	r0, #69	; 0x45
 80003f4:	f000 fc10 	bl	8000c18 <Cmt2300_ReadReg>
 80003f8:	0003      	movs	r3, r0
 80003fa:	0019      	movs	r1, r3
 80003fc:	200f      	movs	r0, #15
 80003fe:	183b      	adds	r3, r7, r0
 8000400:	2201      	movs	r2, #1
 8000402:	4391      	bics	r1, r2
 8000404:	000a      	movs	r2, r1
 8000406:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 8000408:	183a      	adds	r2, r7, r0
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	7812      	ldrb	r2, [r2, #0]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4313      	orrs	r3, r2
 8000412:	b2db      	uxtb	r3, r3
 8000414:	0019      	movs	r1, r3
 8000416:	2045      	movs	r0, #69	; 0x45
 8000418:	f000 fc15 	bl	8000c46 <Cmt2300_WriteReg>
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b004      	add	sp, #16
 8000422:	bd80      	pop	{r7, pc}

08000424 <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 8000428:	2110      	movs	r1, #16
 800042a:	2060      	movs	r0, #96	; 0x60
 800042c:	f000 fc0b 	bl	8000c46 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 8000430:	2001      	movs	r0, #1
 8000432:	f7ff ffaf 	bl	8000394 <Cmt2300_WaitChipStatus>
 8000436:	0003      	movs	r3, r0
}
 8000438:	0018      	movs	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 8000442:	2102      	movs	r1, #2
 8000444:	2060      	movs	r0, #96	; 0x60
 8000446:	f000 fbfe 	bl	8000c46 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 800044a:	2002      	movs	r0, #2
 800044c:	f7ff ffa2 	bl	8000394 <Cmt2300_WaitChipStatus>
 8000450:	0003      	movs	r3, r0
}
 8000452:	0018      	movs	r0, r3
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	0002      	movs	r2, r0
 8000460:	1dfb      	adds	r3, r7, #7
 8000462:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 8000464:	1dfb      	adds	r3, r7, #7
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	0019      	movs	r1, r3
 800046a:	2065      	movs	r0, #101	; 0x65
 800046c:	f000 fbeb 	bl	8000c46 <Cmt2300_WriteReg>
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b002      	add	sp, #8
 8000476:	bd80      	pop	{r7, pc}

08000478 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	0002      	movs	r2, r0
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	701a      	strb	r2, [r3, #0]
 8000484:	1dbb      	adds	r3, r7, #6
 8000486:	1c0a      	adds	r2, r1, #0
 8000488:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	1dfa      	adds	r2, r7, #7
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	211f      	movs	r1, #31
 8000492:	400a      	ands	r2, r1
 8000494:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000496:	2066      	movs	r0, #102	; 0x66
 8000498:	f000 fbbe 	bl	8000c18 <Cmt2300_ReadReg>
 800049c:	0003      	movs	r3, r0
 800049e:	001a      	movs	r2, r3
 80004a0:	231f      	movs	r3, #31
 80004a2:	439a      	bics	r2, r3
 80004a4:	0013      	movs	r3, r2
 80004a6:	b25a      	sxtb	r2, r3
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	4313      	orrs	r3, r2
 80004b0:	b25a      	sxtb	r2, r3
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	0019      	movs	r1, r3
 80004bc:	2066      	movs	r0, #102	; 0x66
 80004be:	f000 fbc2 	bl	8000c46 <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 80004c2:	1dbb      	adds	r3, r7, #6
 80004c4:	1dba      	adds	r2, r7, #6
 80004c6:	7812      	ldrb	r2, [r2, #0]
 80004c8:	211f      	movs	r1, #31
 80004ca:	400a      	ands	r2, r1
 80004cc:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 80004ce:	2067      	movs	r0, #103	; 0x67
 80004d0:	f000 fba2 	bl	8000c18 <Cmt2300_ReadReg>
 80004d4:	0003      	movs	r3, r0
 80004d6:	001a      	movs	r2, r3
 80004d8:	231f      	movs	r3, #31
 80004da:	439a      	bics	r2, r3
 80004dc:	0013      	movs	r3, r2
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	1dbb      	adds	r3, r7, #6
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b25a      	sxtb	r2, r3
 80004ea:	1dbb      	adds	r3, r7, #6
 80004ec:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 80004ee:	1dbb      	adds	r3, r7, #6
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	0019      	movs	r1, r3
 80004f4:	2067      	movs	r0, #103	; 0x67
 80004f6:	f000 fba6 	bl	8000c46 <Cmt2300_WriteReg>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}

08000502 <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 8000502:	b5b0      	push	{r4, r5, r7, lr}
 8000504:	b084      	sub	sp, #16
 8000506:	af00      	add	r7, sp, #0
 8000508:	0002      	movs	r2, r0
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 800050e:	250f      	movs	r5, #15
 8000510:	197c      	adds	r4, r7, r5
 8000512:	2066      	movs	r0, #102	; 0x66
 8000514:	f000 fb80 	bl	8000c18 <Cmt2300_ReadReg>
 8000518:	0003      	movs	r3, r0
 800051a:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d10d      	bne.n	8000540 <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 8000524:	197b      	adds	r3, r7, r5
 8000526:	197a      	adds	r2, r7, r5
 8000528:	7812      	ldrb	r2, [r2, #0]
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	4249      	negs	r1, r1
 800052e:	430a      	orrs	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	197a      	adds	r2, r7, r5
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	2140      	movs	r1, #64	; 0x40
 800053a:	438a      	bics	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	e010      	b.n	8000562 <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10c      	bne.n	8000562 <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 8000548:	200f      	movs	r0, #15
 800054a:	183b      	adds	r3, r7, r0
 800054c:	183a      	adds	r2, r7, r0
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	217f      	movs	r1, #127	; 0x7f
 8000552:	400a      	ands	r2, r1
 8000554:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 8000556:	183b      	adds	r3, r7, r0
 8000558:	183a      	adds	r2, r7, r0
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	2140      	movs	r1, #64	; 0x40
 800055e:	430a      	orrs	r2, r1
 8000560:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 8000562:	230f      	movs	r3, #15
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	0019      	movs	r1, r3
 800056a:	2066      	movs	r0, #102	; 0x66
 800056c:	f000 fb6b 	bl	8000c46 <Cmt2300_WriteReg>
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b004      	add	sp, #16
 8000576:	bdb0      	pop	{r4, r5, r7, pc}

08000578 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	0019      	movs	r1, r3
 800058a:	2068      	movs	r0, #104	; 0x68
 800058c:	f000 fb5b 	bl	8000c46 <Cmt2300_WriteReg>
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}

08000598 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	0002      	movs	r2, r0
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 80005a4:	250f      	movs	r5, #15
 80005a6:	197c      	adds	r4, r7, r5
 80005a8:	2069      	movs	r0, #105	; 0x69
 80005aa:	f000 fb35 	bl	8000c18 <Cmt2300_ReadReg>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d006      	beq.n	80005c8 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	197a      	adds	r2, r7, r5
 80005be:	7812      	ldrb	r2, [r2, #0]
 80005c0:	2102      	movs	r1, #2
 80005c2:	430a      	orrs	r2, r1
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e006      	b.n	80005d6 <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 80005c8:	220f      	movs	r2, #15
 80005ca:	18bb      	adds	r3, r7, r2
 80005cc:	18ba      	adds	r2, r7, r2
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	2102      	movs	r1, #2
 80005d2:	438a      	bics	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80005d6:	230f      	movs	r3, #15
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	0019      	movs	r1, r3
 80005de:	2069      	movs	r0, #105	; 0x69
 80005e0:	f000 fb31 	bl	8000c46 <Cmt2300_WriteReg>
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b004      	add	sp, #16
 80005ea:	bdb0      	pop	{r4, r5, r7, pc}

080005ec <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 80005f2:	1d7b      	adds	r3, r7, #5
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 80005fe:	1cfb      	adds	r3, r7, #3
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000604:	1cbc      	adds	r4, r7, #2
 8000606:	2066      	movs	r0, #102	; 0x66
 8000608:	f000 fb06 	bl	8000c18 <Cmt2300_ReadReg>
 800060c:	0003      	movs	r3, r0
 800060e:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 8000610:	1cbb      	adds	r3, r7, #2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	115b      	asrs	r3, r3, #5
 8000616:	b2da      	uxtb	r2, r3
 8000618:	1cbb      	adds	r3, r7, #2
 800061a:	2101      	movs	r1, #1
 800061c:	400a      	ands	r2, r1
 800061e:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 8000620:	1dfc      	adds	r4, r7, #7
 8000622:	206d      	movs	r0, #109	; 0x6d
 8000624:	f000 faf8 	bl	8000c18 <Cmt2300_ReadReg>
 8000628:	0003      	movs	r3, r0
 800062a:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 800062c:	1dbc      	adds	r4, r7, #6
 800062e:	206a      	movs	r0, #106	; 0x6a
 8000630:	f000 faf2 	bl	8000c18 <Cmt2300_ReadReg>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 8000638:	1cbb      	adds	r3, r7, #2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d009      	beq.n	8000654 <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	1dfa      	adds	r2, r7, #7
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	43d2      	mvns	r2, r2
 8000648:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 800064a:	1dbb      	adds	r3, r7, #6
 800064c:	1dba      	adds	r2, r7, #6
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	43d2      	mvns	r2, r2
 8000652:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b25b      	sxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	da05      	bge.n	800066a <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	1d3a      	adds	r2, r7, #4
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	2120      	movs	r1, #32
 8000666:	430a      	orrs	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2240      	movs	r2, #64	; 0x40
 8000670:	4013      	ands	r3, r2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	7812      	ldrb	r2, [r2, #0]
 800067e:	2101      	movs	r1, #1
 8000680:	430a      	orrs	r2, r1
 8000682:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2220      	movs	r2, #32
 800068a:	4013      	ands	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d005      	beq.n	800069e <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	1d3a      	adds	r2, r7, #4
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	430a      	orrs	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2210      	movs	r2, #16
 80006a4:	4013      	ands	r3, r2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00b      	beq.n	80006c4 <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	1d3a      	adds	r2, r7, #4
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	2110      	movs	r1, #16
 80006b4:	430a      	orrs	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 80006b8:	1cfb      	adds	r3, r7, #3
 80006ba:	1cfa      	adds	r2, r7, #3
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	2110      	movs	r1, #16
 80006c0:	430a      	orrs	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2208      	movs	r2, #8
 80006ca:	4013      	ands	r3, r2
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00b      	beq.n	80006ea <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	1d3a      	adds	r2, r7, #4
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	2108      	movs	r1, #8
 80006da:	430a      	orrs	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 80006de:	1cfb      	adds	r3, r7, #3
 80006e0:	1cfa      	adds	r2, r7, #3
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	2108      	movs	r1, #8
 80006e6:	430a      	orrs	r2, r1
 80006e8:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2204      	movs	r2, #4
 80006f0:	4013      	ands	r3, r2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00b      	beq.n	8000710 <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	1d3a      	adds	r2, r7, #4
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	2104      	movs	r1, #4
 8000700:	430a      	orrs	r2, r1
 8000702:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 8000704:	1cfb      	adds	r3, r7, #3
 8000706:	1cfa      	adds	r2, r7, #3
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	2104      	movs	r1, #4
 800070c:	430a      	orrs	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2202      	movs	r2, #2
 8000716:	4013      	ands	r3, r2
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00b      	beq.n	8000736 <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	1d3a      	adds	r2, r7, #4
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	2102      	movs	r1, #2
 8000726:	430a      	orrs	r2, r1
 8000728:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 800072a:	1cfb      	adds	r3, r7, #3
 800072c:	1cfa      	adds	r2, r7, #3
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	2102      	movs	r1, #2
 8000732:	430a      	orrs	r2, r1
 8000734:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00b      	beq.n	800075c <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	1d3a      	adds	r2, r7, #4
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	2101      	movs	r1, #1
 800074c:	430a      	orrs	r2, r1
 800074e:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 8000750:	1cfb      	adds	r3, r7, #3
 8000752:	1cfa      	adds	r2, r7, #3
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	2101      	movs	r1, #1
 8000758:	430a      	orrs	r2, r1
 800075a:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 800075c:	1dbb      	adds	r3, r7, #6
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2220      	movs	r2, #32
 8000762:	4013      	ands	r3, r2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00c      	beq.n	8000784 <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 800076a:	1d7b      	adds	r3, r7, #5
 800076c:	1d7a      	adds	r2, r7, #5
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	2102      	movs	r1, #2
 8000772:	430a      	orrs	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 8000776:	1cfb      	adds	r3, r7, #3
 8000778:	1cfa      	adds	r2, r7, #3
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	4249      	negs	r1, r1
 8000780:	430a      	orrs	r2, r1
 8000782:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2210      	movs	r2, #16
 800078a:	4013      	ands	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00b      	beq.n	80007aa <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 8000792:	1d7b      	adds	r3, r7, #5
 8000794:	1d7a      	adds	r2, r7, #5
 8000796:	7812      	ldrb	r2, [r2, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 800079e:	1cfb      	adds	r3, r7, #3
 80007a0:	1cfa      	adds	r2, r7, #3
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	430a      	orrs	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 80007aa:	1dbb      	adds	r3, r7, #6
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2208      	movs	r2, #8
 80007b0:	4013      	ands	r3, r2
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00b      	beq.n	80007d0 <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 80007b8:	1d7b      	adds	r3, r7, #5
 80007ba:	1d7a      	adds	r2, r7, #5
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	2104      	movs	r1, #4
 80007c0:	430a      	orrs	r2, r1
 80007c2:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 80007c4:	1cfb      	adds	r3, r7, #3
 80007c6:	1cfa      	adds	r2, r7, #3
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	2120      	movs	r1, #32
 80007cc:	430a      	orrs	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 80007d0:	1d7b      	adds	r3, r7, #5
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0019      	movs	r1, r3
 80007d6:	206a      	movs	r0, #106	; 0x6a
 80007d8:	f000 fa35 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	0019      	movs	r1, r3
 80007e2:	206b      	movs	r0, #107	; 0x6b
 80007e4:	f000 fa2f 	bl	8000c46 <Cmt2300_WriteReg>

    if (nIntPolar)
 80007e8:	1cbb      	adds	r3, r7, #2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d004      	beq.n	80007fa <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 80007f0:	1cfb      	adds	r3, r7, #3
 80007f2:	1cfa      	adds	r2, r7, #3
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	43d2      	mvns	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 80007fa:	1cfb      	adds	r3, r7, #3
 80007fc:	781b      	ldrb	r3, [r3, #0]
}
 80007fe:	0018      	movs	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	b003      	add	sp, #12
 8000804:	bd90      	pop	{r4, r7, pc}
	...

08000808 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 8000814:	2004      	movs	r0, #4
 8000816:	f000 f9ff 	bl	8000c18 <Cmt2300_ReadReg>
 800081a:	0003      	movs	r3, r0
 800081c:	0019      	movs	r1, r3
 800081e:	240f      	movs	r4, #15
 8000820:	193b      	adds	r3, r7, r4
 8000822:	220f      	movs	r2, #15
 8000824:	400a      	ands	r2, r1
 8000826:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	0013      	movs	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	189b      	adds	r3, r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <Cmt2300_ConfigDataRate+0x164>)
 8000836:	189b      	adds	r3, r3, r2
 8000838:	2218      	movs	r2, #24
 800083a:	0019      	movs	r1, r3
 800083c:	2020      	movs	r0, #32
 800083e:	f000 f9b3 	bl	8000ba8 <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	494a      	ldr	r1, [pc, #296]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 8000848:	0013      	movs	r3, r2
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	189b      	adds	r3, r3, r2
 800084e:	5c5b      	ldrb	r3, [r3, r1]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	220f      	movs	r2, #15
 8000854:	4393      	bics	r3, r2
 8000856:	b25a      	sxtb	r2, r3
 8000858:	193b      	adds	r3, r7, r4
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b25b      	sxtb	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b25b      	sxtb	r3, r3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	0019      	movs	r1, r3
 8000866:	2004      	movs	r0, #4
 8000868:	f000 f9ed 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	493f      	ldr	r1, [pc, #252]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 8000872:	0013      	movs	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	189b      	adds	r3, r3, r2
 8000878:	18cb      	adds	r3, r1, r3
 800087a:	3301      	adds	r3, #1
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0019      	movs	r1, r3
 8000880:	2055      	movs	r0, #85	; 0x55
 8000882:	f000 f9e0 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4939      	ldr	r1, [pc, #228]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 800088c:	0013      	movs	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	189b      	adds	r3, r3, r2
 8000892:	18cb      	adds	r3, r1, r3
 8000894:	3302      	adds	r3, #2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0019      	movs	r1, r3
 800089a:	2056      	movs	r0, #86	; 0x56
 800089c:	f000 f9d3 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	4932      	ldr	r1, [pc, #200]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 80008a6:	0013      	movs	r3, r2
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	189b      	adds	r3, r3, r2
 80008ac:	18cb      	adds	r3, r1, r3
 80008ae:	3303      	adds	r3, #3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0019      	movs	r1, r3
 80008b4:	2057      	movs	r0, #87	; 0x57
 80008b6:	f000 f9c6 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	492c      	ldr	r1, [pc, #176]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 80008c0:	0013      	movs	r3, r2
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	189b      	adds	r3, r3, r2
 80008c6:	18cb      	adds	r3, r1, r3
 80008c8:	3304      	adds	r3, #4
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	0019      	movs	r1, r3
 80008ce:	2058      	movs	r0, #88	; 0x58
 80008d0:	f000 f9b9 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4925      	ldr	r1, [pc, #148]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 80008da:	0013      	movs	r3, r2
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	189b      	adds	r3, r3, r2
 80008e0:	18cb      	adds	r3, r1, r3
 80008e2:	3305      	adds	r3, #5
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0019      	movs	r1, r3
 80008e8:	2059      	movs	r0, #89	; 0x59
 80008ea:	f000 f9ac 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	491f      	ldr	r1, [pc, #124]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 80008f4:	0013      	movs	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	189b      	adds	r3, r3, r2
 80008fa:	18cb      	adds	r3, r1, r3
 80008fc:	3306      	adds	r3, #6
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	0019      	movs	r1, r3
 8000902:	205a      	movs	r0, #90	; 0x5a
 8000904:	f000 f99f 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	4918      	ldr	r1, [pc, #96]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 800090e:	0013      	movs	r3, r2
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	189b      	adds	r3, r3, r2
 8000914:	18cb      	adds	r3, r1, r3
 8000916:	3307      	adds	r3, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	0019      	movs	r1, r3
 800091c:	205b      	movs	r0, #91	; 0x5b
 800091e:	f000 f992 	bl	8000c46 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 8000922:	205e      	movs	r0, #94	; 0x5e
 8000924:	f000 f978 	bl	8000c18 <Cmt2300_ReadReg>
 8000928:	0003      	movs	r3, r0
 800092a:	0019      	movs	r1, r3
 800092c:	193b      	adds	r3, r7, r4
 800092e:	223f      	movs	r2, #63	; 0x3f
 8000930:	400a      	ands	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	490d      	ldr	r1, [pc, #52]	; (8000970 <Cmt2300_ConfigDataRate+0x168>)
 800093a:	0013      	movs	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	189b      	adds	r3, r3, r2
 8000940:	18cb      	adds	r3, r1, r3
 8000942:	3308      	adds	r3, #8
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	223f      	movs	r2, #63	; 0x3f
 800094a:	4393      	bics	r3, r2
 800094c:	b25a      	sxtb	r2, r3
 800094e:	193b      	adds	r3, r7, r4
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b25b      	sxtb	r3, r3
 8000954:	4313      	orrs	r3, r2
 8000956:	b25b      	sxtb	r3, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	0019      	movs	r1, r3
 800095c:	205e      	movs	r0, #94	; 0x5e
 800095e:	f000 f972 	bl	8000c46 <Cmt2300_WriteReg>
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b005      	add	sp, #20
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	080060f0 	.word	0x080060f0
 8000970:	080061b0 	.word	0x080061b0

08000974 <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 8000980:	2038      	movs	r0, #56	; 0x38
 8000982:	f000 f949 	bl	8000c18 <Cmt2300_ReadReg>
 8000986:	0003      	movs	r3, r0
 8000988:	0019      	movs	r1, r3
 800098a:	200f      	movs	r0, #15
 800098c:	183b      	adds	r3, r7, r0
 800098e:	2203      	movs	r2, #3
 8000990:	4391      	bics	r1, r2
 8000992:	000a      	movs	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 8000996:	183a      	adds	r2, r7, r0
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4313      	orrs	r3, r2
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	0019      	movs	r1, r3
 80009a4:	2038      	movs	r0, #56	; 0x38
 80009a6:	f000 f94e 	bl	8000c46 <Cmt2300_WriteReg>
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b004      	add	sp, #16
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	0002      	movs	r2, r0
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f929 	bl	8000c18 <Cmt2300_ReadReg>
 80009c6:	0003      	movs	r3, r0
 80009c8:	0019      	movs	r1, r3
 80009ca:	230f      	movs	r3, #15
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2201      	movs	r2, #1
 80009d0:	4391      	bics	r1, r2
 80009d2:	000a      	movs	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b07      	cmp	r3, #7
 80009dc:	d902      	bls.n	80009e4 <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	2207      	movs	r2, #7
 80009e2:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <Cmt2300_ConfigTxPower+0xcc>)
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	2201      	movs	r2, #1
 80009f2:	4013      	ands	r3, r2
 80009f4:	b25a      	sxtb	r2, r3
 80009f6:	240f      	movs	r4, #15
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	0019      	movs	r1, r3
 8000a06:	2003      	movs	r0, #3
 8000a08:	f000 f91d 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <Cmt2300_ConfigTxPower+0xcc>)
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	18d3      	adds	r3, r2, r3
 8000a16:	3301      	adds	r3, #1
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	205c      	movs	r0, #92	; 0x5c
 8000a1e:	f000 f912 	bl	8000c46 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <Cmt2300_ConfigTxPower+0xcc>)
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	18d3      	adds	r3, r2, r3
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	0019      	movs	r1, r3
 8000a32:	205d      	movs	r0, #93	; 0x5d
 8000a34:	f000 f907 	bl	8000c46 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 8000a38:	205e      	movs	r0, #94	; 0x5e
 8000a3a:	f000 f8ed 	bl	8000c18 <Cmt2300_ReadReg>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	0019      	movs	r1, r3
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	223f      	movs	r2, #63	; 0x3f
 8000a46:	4391      	bics	r1, r2
 8000a48:	000a      	movs	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <Cmt2300_ConfigTxPower+0xcc>)
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	18d3      	adds	r3, r2, r3
 8000a56:	3303      	adds	r3, #3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	223f      	movs	r2, #63	; 0x3f
 8000a5e:	4013      	ands	r3, r2
 8000a60:	b25a      	sxtb	r2, r3
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	0019      	movs	r1, r3
 8000a70:	205e      	movs	r0, #94	; 0x5e
 8000a72:	f000 f8e8 	bl	8000c46 <Cmt2300_WriteReg>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b005      	add	sp, #20
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	080061f8 	.word	0x080061f8

08000a84 <Cmt2300_IsExist>:
* @name    Cmt2300_IsExist
* @desc    Chip indentify.
* @return  true: chip is exist, false: chip not found
* *********************************************************/
bool Cmt2300_IsExist(void)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
    uint8_t back, dat;

    back = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000a8a:	1dfc      	adds	r4, r7, #7
 8000a8c:	2048      	movs	r0, #72	; 0x48
 8000a8e:	f000 f8c3 	bl	8000c18 <Cmt2300_ReadReg>
 8000a92:	0003      	movs	r3, r0
 8000a94:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, 0xAA);
 8000a96:	21aa      	movs	r1, #170	; 0xaa
 8000a98:	2048      	movs	r0, #72	; 0x48
 8000a9a:	f000 f8d4 	bl	8000c46 <Cmt2300_WriteReg>

    // system_delay_us(5*20);

    dat = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000a9e:	1dbc      	adds	r4, r7, #6
 8000aa0:	2048      	movs	r0, #72	; 0x48
 8000aa2:	f000 f8b9 	bl	8000c18 <Cmt2300_ReadReg>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, back);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0019      	movs	r1, r3
 8000ab0:	2048      	movs	r0, #72	; 0x48
 8000ab2:	f000 f8c8 	bl	8000c46 <Cmt2300_WriteReg>

    if (0xAA == dat)
 8000ab6:	1dbb      	adds	r3, r7, #6
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2baa      	cmp	r3, #170	; 0xaa
 8000abc:	d101      	bne.n	8000ac2 <Cmt2300_IsExist+0x3e>
        return true;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <Cmt2300_IsExist+0x40>

    return false;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b003      	add	sp, #12
 8000aca:	bd90      	pop	{r4, r7, pc}

08000acc <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000ad8:	250f      	movs	r5, #15
 8000ada:	197c      	adds	r4, r7, r5
 8000adc:	200d      	movs	r0, #13
 8000ade:	f000 f89b 	bl	8000c18 <Cmt2300_ReadReg>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d013      	beq.n	8000b16 <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 8000aee:	197b      	adds	r3, r7, r5
 8000af0:	197a      	adds	r2, r7, r5
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	4249      	negs	r1, r1
 8000af8:	430a      	orrs	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	197a      	adds	r2, r7, r5
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	430a      	orrs	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 8000b08:	197b      	adds	r3, r7, r5
 8000b0a:	197a      	adds	r2, r7, r5
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	2120      	movs	r1, #32
 8000b10:	430a      	orrs	r2, r1
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e012      	b.n	8000b3c <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 8000b16:	200f      	movs	r0, #15
 8000b18:	183b      	adds	r3, r7, r0
 8000b1a:	183a      	adds	r2, r7, r0
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	217f      	movs	r1, #127	; 0x7f
 8000b20:	400a      	ands	r2, r1
 8000b22:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 8000b24:	183b      	adds	r3, r7, r0
 8000b26:	183a      	adds	r2, r7, r0
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	438a      	bics	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 8000b30:	183b      	adds	r3, r7, r0
 8000b32:	183a      	adds	r2, r7, r0
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	2120      	movs	r1, #32
 8000b38:	438a      	bics	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0019      	movs	r1, r3
 8000b44:	200d      	movs	r0, #13
 8000b46:	f000 f87e 	bl	8000c46 <Cmt2300_WriteReg>
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bdb0      	pop	{r4, r5, r7, pc}

08000b52 <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000b52:	b590      	push	{r4, r7, lr}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000b58:	f7ff fc06 	bl	8000368 <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	f000 fac9 	bl	80010f4 <Delay_Ms>
   
    Cmt2300_GoStby();
 8000b62:	f7ff fc6c 	bl	800043e <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000b66:	1dfc      	adds	r4, r7, #7
 8000b68:	2061      	movs	r0, #97	; 0x61
 8000b6a:	f000 f855 	bl	8000c18 <Cmt2300_ReadReg>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	1dfa      	adds	r2, r7, #7
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	2110      	movs	r1, #16
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	1dfa      	adds	r2, r7, #7
 8000b82:	7812      	ldrb	r2, [r2, #0]
 8000b84:	2120      	movs	r1, #32
 8000b86:	438a      	bics	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	2061      	movs	r0, #97	; 0x61
 8000b92:	f000 f858 	bl	8000c46 <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff ff98 	bl	8000acc <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000b9c:	f7ff fd26 	bl	80005ec <Cmt2300_ClearInterruptFlags>
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b003      	add	sp, #12
 8000ba6:	bd90      	pop	{r4, r7, pc}

08000ba8 <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6039      	str	r1, [r7, #0]
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	1c02      	adds	r2, r0, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	1dbb      	adds	r3, r7, #6
 8000bba:	1c0a      	adds	r2, r1, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	e014      	b.n	8000bf2 <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000bc8:	210f      	movs	r1, #15
 8000bca:	187a      	adds	r2, r7, r1
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	18d3      	adds	r3, r2, r3
 8000bd4:	b2d8      	uxtb	r0, r3
 8000bd6:	000c      	movs	r4, r1
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	18d3      	adds	r3, r2, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0019      	movs	r1, r3
 8000be4:	f000 f82f 	bl	8000c46 <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	3201      	adds	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	18fa      	adds	r2, r7, r3
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d3e3      	bcc.n	8000bc8 <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b005      	add	sp, #20
 8000c08:	bd90      	pop	{r4, r7, pc}

08000c0a <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000c0e:	f000 f83f 	bl	8000c90 <cmt_spi3_init>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	0002      	movs	r2, r0
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000c24:	240f      	movs	r4, #15
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	22ff      	movs	r2, #255	; 0xff
 8000c2a:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000c2c:	193a      	adds	r2, r7, r4
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f93d 	bl	8000eb4 <cmt_spi3_read>

    return dat;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b005      	add	sp, #20
 8000c44:	bd90      	pop	{r4, r7, pc}

08000c46 <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	1dbb      	adds	r3, r7, #6
 8000c54:	1c0a      	adds	r2, r1, #0
 8000c56:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000c58:	1dbb      	adds	r3, r7, #6
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	0011      	movs	r1, r2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 f8b2 	bl	8000dcc <cmt_spi3_write>
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000c76:	2308      	movs	r3, #8
 8000c78:	607b      	str	r3, [r7, #4]
    while (n--)
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1fa      	bne.n	8000c7c <cmt_spi3_delay+0xc>
        ;
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <cmt_spi3_init>:
    while (n--)
        ;
}

void cmt_spi3_init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000c94:	f000 fa52 	bl	800113c <spi_gpio_init>
    cmt_spi3_sda_in();
 8000c98:	f000 fa88 	bl	80011ac <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000c9c:	f7ff ffe8 	bl	8000c70 <cmt_spi3_delay>
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	0002      	movs	r2, r0
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e034      	b.n	8000d26 <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	0119      	lsls	r1, r3, #4
 8000cc0:	2390      	movs	r3, #144	; 0x90
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f001 fd2d 	bl	8002726 <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da08      	bge.n	8000ce8 <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	0059      	lsls	r1, r3, #1
 8000cda:	2390      	movs	r3, #144	; 0x90
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	2201      	movs	r2, #1
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 fd20 	bl	8002726 <HAL_GPIO_WritePin>
 8000ce6:	e007      	b.n	8000cf8 <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	0059      	lsls	r1, r3, #1
 8000cec:	2390      	movs	r3, #144	; 0x90
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f001 fd17 	bl	8002726 <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8000cf8:	f7ff ffba 	bl	8000c70 <cmt_spi3_delay>

        data8 <<= 1;
 8000cfc:	1dfa      	adds	r2, r7, #7
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	18db      	adds	r3, r3, r3
 8000d04:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	0119      	lsls	r1, r3, #4
 8000d0a:	2390      	movs	r3, #144	; 0x90
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	2201      	movs	r2, #1
 8000d10:	0018      	movs	r0, r3
 8000d12:	f001 fd08 	bl	8002726 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000d16:	f7ff ffab 	bl	8000c70 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	3201      	adds	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b07      	cmp	r3, #7
 8000d2e:	d9c5      	bls.n	8000cbc <cmt_spi3_send+0x16>
    }
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 8000d40:	1dbb      	adds	r3, r7, #6
 8000d42:	22ff      	movs	r2, #255	; 0xff
 8000d44:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e034      	b.n	8000db8 <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	0119      	lsls	r1, r3, #4
 8000d52:	2390      	movs	r3, #144	; 0x90
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	2200      	movs	r2, #0
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 fce4 	bl	8002726 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000d5e:	f7ff ff87 	bl	8000c70 <cmt_spi3_delay>
        data8 <<= 1;
 8000d62:	1dba      	adds	r2, r7, #6
 8000d64:	1dbb      	adds	r3, r7, #6
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	18db      	adds	r3, r3, r3
 8000d6a:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	0119      	lsls	r1, r3, #4
 8000d70:	2390      	movs	r3, #144	; 0x90
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	2201      	movs	r2, #1
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 fcd5 	bl	8002726 <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	005a      	lsls	r2, r3, #1
 8000d80:	2390      	movs	r3, #144	; 0x90
 8000d82:	05db      	lsls	r3, r3, #23
 8000d84:	0011      	movs	r1, r2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f001 fcb0 	bl	80026ec <HAL_GPIO_ReadPin>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d006      	beq.n	8000d9e <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 8000d90:	1dbb      	adds	r3, r7, #6
 8000d92:	1dba      	adds	r2, r7, #6
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	2101      	movs	r1, #1
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e005      	b.n	8000daa <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 8000d9e:	1dbb      	adds	r3, r7, #6
 8000da0:	1dba      	adds	r2, r7, #6
 8000da2:	7812      	ldrb	r2, [r2, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	438a      	bics	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 8000daa:	f7ff ff61 	bl	8000c70 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	3201      	adds	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b07      	cmp	r3, #7
 8000dbe:	d9c6      	bls.n	8000d4e <cmt_spi3_recv+0x14>
    }

    return data8;
 8000dc0:	1dbb      	adds	r3, r7, #6
 8000dc2:	781b      	ldrb	r3, [r3, #0]
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	1c0a      	adds	r2, r1, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8000dde:	f000 f9b3 	bl	8001148 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	0059      	lsls	r1, r3, #1
 8000de6:	2390      	movs	r3, #144	; 0x90
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	2201      	movs	r2, #1
 8000dec:	0018      	movs	r0, r3
 8000dee:	f001 fc9a 	bl	8002726 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	0119      	lsls	r1, r3, #4
 8000df6:	2390      	movs	r3, #144	; 0x90
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f001 fc92 	bl	8002726 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	0119      	lsls	r1, r3, #4
 8000e06:	2390      	movs	r3, #144	; 0x90
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 fc8a 	bl	8002726 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	01db      	lsls	r3, r3, #7
 8000e16:	4826      	ldr	r0, [pc, #152]	; (8000eb0 <cmt_spi3_write+0xe4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	f001 fc83 	bl	8002726 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	01db      	lsls	r3, r3, #7
 8000e24:	4822      	ldr	r0, [pc, #136]	; (8000eb0 <cmt_spi3_write+0xe4>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	0019      	movs	r1, r3
 8000e2a:	f001 fc7c 	bl	8002726 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <cmt_spi3_write+0xe4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	0019      	movs	r1, r3
 8000e38:	f001 fc75 	bl	8002726 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000e3c:	f7ff ff18 	bl	8000c70 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000e40:	f7ff ff16 	bl	8000c70 <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	227f      	movs	r2, #127	; 0x7f
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff ff29 	bl	8000ca6 <cmt_spi3_send>

    cmt_spi3_send(dat);
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff24 	bl	8000ca6 <cmt_spi3_send>

    cmt_spi3_scl_0();
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	0119      	lsls	r1, r3, #4
 8000e62:	2390      	movs	r3, #144	; 0x90
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2200      	movs	r2, #0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fc5c 	bl	8002726 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000e6e:	f7ff feff 	bl	8000c70 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000e72:	f7ff fefd 	bl	8000c70 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <cmt_spi3_write+0xe4>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	0019      	movs	r1, r3
 8000e80:	f001 fc51 	bl	8002726 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	0059      	lsls	r1, r3, #1
 8000e88:	2390      	movs	r3, #144	; 0x90
 8000e8a:	05db      	lsls	r3, r3, #23
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 fc49 	bl	8002726 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8000e94:	f000 f98a 	bl	80011ac <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	01db      	lsls	r3, r3, #7
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <cmt_spi3_write+0xe4>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	f001 fc40 	bl	8002726 <HAL_GPIO_WritePin>
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8000ec2:	f000 f941 	bl	8001148 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	0059      	lsls	r1, r3, #1
 8000eca:	2390      	movs	r3, #144	; 0x90
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	2201      	movs	r2, #1
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 fc28 	bl	8002726 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	0119      	lsls	r1, r3, #4
 8000eda:	2390      	movs	r3, #144	; 0x90
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	2200      	movs	r2, #0
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 fc20 	bl	8002726 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	0119      	lsls	r1, r3, #4
 8000eea:	2390      	movs	r3, #144	; 0x90
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	2200      	movs	r2, #0
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f001 fc18 	bl	8002726 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	01db      	lsls	r3, r3, #7
 8000efa:	4828      	ldr	r0, [pc, #160]	; (8000f9c <cmt_spi3_read+0xe8>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	0019      	movs	r1, r3
 8000f00:	f001 fc11 	bl	8002726 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	01db      	lsls	r3, r3, #7
 8000f08:	4824      	ldr	r0, [pc, #144]	; (8000f9c <cmt_spi3_read+0xe8>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	f001 fc0a 	bl	8002726 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	4821      	ldr	r0, [pc, #132]	; (8000f9c <cmt_spi3_read+0xe8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	f001 fc03 	bl	8002726 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000f20:	f7ff fea6 	bl	8000c70 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000f24:	f7ff fea4 	bl	8000c70 <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	4252      	negs	r2, r2
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff feb6 	bl	8000ca6 <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 8000f3a:	f000 f937 	bl	80011ac <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 8000f3e:	f7ff fefc 	bl	8000d3a <cmt_spi3_recv>
 8000f42:	0003      	movs	r3, r0
 8000f44:	001a      	movs	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	0119      	lsls	r1, r3, #4
 8000f4e:	2390      	movs	r3, #144	; 0x90
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	2200      	movs	r2, #0
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 fbe6 	bl	8002726 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000f5a:	f7ff fe89 	bl	8000c70 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000f5e:	f7ff fe87 	bl	8000c70 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <cmt_spi3_read+0xe8>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	f001 fbdb 	bl	8002726 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	0059      	lsls	r1, r3, #1
 8000f74:	2390      	movs	r3, #144	; 0x90
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	2201      	movs	r2, #1
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f001 fbd3 	bl	8002726 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8000f80:	f000 f914 	bl	80011ac <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	01db      	lsls	r3, r3, #7
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <cmt_spi3_read+0xe8>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	f001 fbca 	bl	8002726 <HAL_GPIO_WritePin>
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	48000400 	.word	0x48000400

08000fa0 <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 8000fa4:	f7ff fe31 	bl	8000c0a <Cmt2300_InitGpio>
    Cmt2300_Init();
 8000fa8:	f7ff fdd3 	bl	8000b52 <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <RF_Init+0x60>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fdf8 	bl	8000ba8 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <RF_Init+0x64>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	200c      	movs	r0, #12
 8000fc0:	f7ff fdf2 	bl	8000ba8 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <RF_Init+0x68>)
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	0019      	movs	r1, r3
 8000fca:	2018      	movs	r0, #24
 8000fcc:	f7ff fdec 	bl	8000ba8 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <RF_Init+0x6c>)
 8000fd2:	2218      	movs	r2, #24
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	2020      	movs	r0, #32
 8000fd8:	f7ff fde6 	bl	8000ba8 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <RF_Init+0x70>)
 8000fde:	221d      	movs	r2, #29
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	2038      	movs	r0, #56	; 0x38
 8000fe4:	f7ff fde0 	bl	8000ba8 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <RF_Init+0x74>)
 8000fea:	220b      	movs	r2, #11
 8000fec:	0019      	movs	r1, r3
 8000fee:	2055      	movs	r0, #85	; 0x55
 8000ff0:	f7ff fdda 	bl	8000ba8 <Cmt2300_ConfigRegBank>

    RF_Config();
 8000ff4:	f000 f810 	bl	8001018 <RF_Config>
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	08006218 	.word	0x08006218
 8001004:	08006224 	.word	0x08006224
 8001008:	08006230 	.word	0x08006230
 800100c:	08006238 	.word	0x08006238
 8001010:	08006250 	.word	0x08006250
 8001014:	08006270 	.word	0x08006270

08001018 <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff fa70 	bl	8000502 <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 8001022:	2020      	movs	r0, #32
 8001024:	f7ff fa18 	bl	8000458 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 8001028:	2107      	movs	r1, #7
 800102a:	200a      	movs	r0, #10
 800102c:	f7ff fa24 	bl	8000478 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 8001030:	203f      	movs	r0, #63	; 0x3f
 8001032:	f7ff faa1 	bl	8000578 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fd48 	bl	8000acc <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 800103c:	f7ff f9f2 	bl	8000424 <Cmt2300_GoSleep>
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <RF_StartRx>:
{
    return g_nInterrutFlags;
}

void RF_StartRx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	200a      	movs	r0, #10
 8001054:	183b      	adds	r3, r7, r0
 8001056:	1c0a      	adds	r2, r1, #0
 8001058:	801a      	strh	r2, [r3, #0]
    g_pRxBuffer = buf;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <RF_StartRx+0x44>)
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	601a      	str	r2, [r3, #0]
    g_nRxLength = len;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <RF_StartRx+0x48>)
 8001062:	183a      	adds	r2, r7, r0
 8001064:	8812      	ldrh	r2, [r2, #0]
 8001066:	801a      	strh	r2, [r3, #0]
    g_nRxTimeout = timeout;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <RF_StartRx+0x4c>)
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]

    memset(g_pRxBuffer, 0, g_nRxLength);
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <RF_StartRx+0x44>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <RF_StartRx+0x48>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	001a      	movs	r2, r3
 8001078:	2100      	movs	r1, #0
 800107a:	f003 ff96 	bl	8004faa <memset>

    g_nNextRFState = RF_STATE_RX_START;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <RF_StartRx+0x50>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b004      	add	sp, #16
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001dc 	.word	0x200001dc
 8001090:	200001e0 	.word	0x200001e0
 8001094:	200000b8 	.word	0x200000b8
 8001098:	200001d8 	.word	0x200001d8

0800109c <bspInit>:

/*----------------------------------------------------------------
 *  FUNCTION DEFINITION
 *--------------------------------------------------------------*/
void bspInit(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    uartInit(BSP_TTL_CHANNEL1);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 f93f 	bl	8001324 <uartInit>
    
    RF_Init();
 80010a6:	f7ff ff7b 	bl	8000fa0 <RF_Init>
    /* check rf is inited ok */
    if (Cmt2300_IsExist())
 80010aa:	f7ff fceb 	bl	8000a84 <Cmt2300_IsExist>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d006      	beq.n	80010c0 <bspInit+0x24>
    {
        led1On();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <bspInit+0x54>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	2110      	movs	r1, #16
 80010b8:	0018      	movs	r0, r3
 80010ba:	f001 fb34 	bl	8002726 <HAL_GPIO_WritePin>
 80010be:	e005      	b.n	80010cc <bspInit+0x30>
    }
    else
    {
        led2On();
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <bspInit+0x54>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	2120      	movs	r1, #32
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 fb2d 	bl	8002726 <HAL_GPIO_WritePin>
    }

    /* level7: 20dbm */
    Cmt2300_ConfigTxPower(7);
 80010cc:	2007      	movs	r0, #7
 80010ce:	f7ff fc71 	bl	80009b4 <Cmt2300_ConfigTxPower>
    /* rate:1.2kbps */
    Cmt2300_ConfigDataRate(rf_rate_1K2);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff fb98 	bl	8000808 <Cmt2300_ConfigDataRate>
    /* packet type */
    Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff f984 	bl	80003e6 <Cmt2300_ConfigPktLenthType>
    /* packet mode */
    Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 80010de:	2002      	movs	r0, #2
 80010e0:	f7ff fc48 	bl	8000974 <Cmt2300_ConfigDataMode>
    /* enable fifo */
    Cmt2300_EnableFifoMerge(true);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fa57 	bl	8000598 <Cmt2300_EnableFifoMerge>
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	48000400 	.word	0x48000400

080010f4 <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e00c      	b.n	8001124 <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	e002      	b.n	8001116 <Delay_Ms+0x22>
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3301      	adds	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <Delay_Ms+0x44>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d9f8      	bls.n	8001110 <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3ee      	bcc.n	800110a <Delay_Ms+0x16>
  }
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	000011bb 	.word	0x000011bb

0800113c <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	0018      	movs	r0, r3
 8001152:	2314      	movs	r3, #20
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f003 ff27 	bl	8004faa <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <cmt_spi3_sda_out+0x60>)
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <cmt_spi3_sda_out+0x60>)
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	0289      	lsls	r1, r1, #10
 8001166:	430a      	orrs	r2, r1
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <cmt_spi3_sda_out+0x60>)
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2201      	movs	r2, #1
 8001184:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2203      	movs	r2, #3
 8001190:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001192:	1d3a      	adds	r2, r7, #4
 8001194:	2390      	movs	r3, #144	; 0x90
 8001196:	05db      	lsls	r3, r3, #23
 8001198:	0011      	movs	r1, r2
 800119a:	0018      	movs	r0, r3
 800119c:	f001 f866 	bl	800226c <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b006      	add	sp, #24
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000

080011ac <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	0018      	movs	r0, r3
 80011b6:	2314      	movs	r3, #20
 80011b8:	001a      	movs	r2, r3
 80011ba:	2100      	movs	r1, #0
 80011bc:	f003 fef5 	bl	8004faa <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <cmt_spi3_sda_in+0x5c>)
 80011c2:	695a      	ldr	r2, [r3, #20]
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <cmt_spi3_sda_in+0x5c>)
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	0289      	lsls	r1, r1, #10
 80011ca:	430a      	orrs	r2, r1
 80011cc:	615a      	str	r2, [r3, #20]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <cmt_spi3_sda_in+0x5c>)
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	029b      	lsls	r3, r3, #10
 80011d6:	4013      	ands	r3, r2
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2280      	movs	r2, #128	; 0x80
 80011e0:	0052      	lsls	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 80011f0:	1d3a      	adds	r2, r7, #4
 80011f2:	2390      	movs	r3, #144	; 0x90
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 f837 	bl	800226c <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b006      	add	sp, #24
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_GPIO_EXTI_Callback>:
#endif
}

#ifdef USE_CUBEIDE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	0002      	movs	r2, r0
 8001214:	1dbb      	adds	r3, r7, #6
 8001216:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 8001218:	1dbb      	adds	r3, r7, #6
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	015b      	lsls	r3, r3, #5
 8001220:	429a      	cmp	r2, r3
 8001222:	d102      	bne.n	800122a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		cmt2300_irq_request = 1;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GPIO_EXTI_Callback+0x28>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
	}
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	200001e2 	.word	0x200001e2

08001238 <HAL_TIM_PeriodElapsedCallback>:
 * 
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim16.Instance)
    //	{
    //		time100ms_flag = 1;
    //		timer100InterruptHandler();
    //	}
    if (htim->Instance == htim17.Instance) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d103      	bne.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x1c>
        uartTimerIrqHandler(htim);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f964 	bl	800151c <uartTimerIrqHandler>
    }
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b002      	add	sp, #8
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000030c 	.word	0x2000030c

08001260 <HAL_SysTick_Handler>:
 * 
 * @param None
 * @retval None
 */
void HAL_SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_SysTick_Handler+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	4b02      	ldr	r3, [pc, #8]	; (8001274 <HAL_SysTick_Handler+0x14>)
 800126c:	601a      	str	r2, [r3, #0]
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200001e4 	.word	0x200001e4

08001278 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <uartInitRxFifo>:
 * 
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	0002      	movs	r2, r0
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	011a      	lsls	r2, r3, #4
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <uartInitRxFifo+0x34>)
 80012ac:	18d0      	adds	r0, r2, r3
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	021a      	lsls	r2, r3, #8
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <uartInitRxFifo+0x38>)
 80012b6:	18d3      	adds	r3, r2, r3
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0052      	lsls	r2, r2, #1
 80012bc:	0019      	movs	r1, r3
 80012be:	f003 fc4d 	bl	8004b5c <kfifo_init>
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	200002ec 	.word	0x200002ec
 80012d0:	200001ec 	.word	0x200001ec

080012d4 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	1dbb      	adds	r3, r7, #6
 80012e0:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80012e2:	2517      	movs	r5, #23
 80012e4:	197b      	adds	r3, r7, r5
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 80012ea:	197c      	adds	r4, r7, r5
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f002 fa95 	bl	8003824 <HAL_UART_Receive_IT>
 80012fa:	0003      	movs	r3, r0
 80012fc:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80012fe:	197b      	adds	r3, r7, r5
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	2120      	movs	r1, #32
 800130c:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2278      	movs	r2, #120	; 0x78
 8001312:	2100      	movs	r1, #0
 8001314:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8001316:	2317      	movs	r3, #23
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	781b      	ldrb	r3, [r3, #0]
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b006      	add	sp, #24
 8001322:	bdb0      	pop	{r4, r5, r7, pc}

08001324 <uartInit>:
 * 
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	0002      	movs	r2, r0
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff ffaf 	bl	8001298 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <uartInit+0x60>)
 8001340:	0052      	lsls	r2, r2, #1
 8001342:	2100      	movs	r1, #0
 8001344:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <uartInit+0x64>)
 800134c:	0052      	lsls	r2, r2, #1
 800134e:	2100      	movs	r1, #0
 8001350:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <uartInit+0x68>)
 8001354:	2200      	movs	r2, #0
 8001356:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <uartInit+0x6c>)
 800135a:	2200      	movs	r2, #0
 800135c:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <uartInit+0x70>)
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	3304      	adds	r3, #4
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <uartInit+0x74>)
 8001372:	18d3      	adds	r3, r2, r3
 8001374:	2201      	movs	r2, #1
 8001376:	0019      	movs	r1, r3
 8001378:	f7ff ffac 	bl	80012d4 <UART_Receive_IT>
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200002fc 	.word	0x200002fc
 8001388:	20000300 	.word	0x20000300
 800138c:	20000304 	.word	0x20000304
 8001390:	20000308 	.word	0x20000308
 8001394:	200000bc 	.word	0x200000bc
 8001398:	200001e8 	.word	0x200001e8

0800139c <uartRecovery>:
 * 
 * @param channel 
 * @retval None
 */
static void uartRecovery(uartChannel_t channel)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	0002      	movs	r2, r0
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <uartRecovery+0x34>)
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	18d3      	adds	r3, r2, r3
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f002 f9f6 	bl	80037a8 <HAL_UART_DeInit>
    uartInit(channel);
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff ffaf 	bl	8001324 <uartInit>
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	200000bc 	.word	0x200000bc

080013d4 <HAL_UART_TxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80013dc:	230f      	movs	r3, #15
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	e015      	b.n	8001412 <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 80013e6:	210f      	movs	r1, #15
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_UART_TxCpltCallback+0x54>)
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	58d2      	ldr	r2, [r2, r3]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d105      	bne.n	8001406 <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_UART_TxCpltCallback+0x58>)
 8001400:	2102      	movs	r1, #2
 8001402:	54d1      	strb	r1, [r2, r3]
            break;
 8001404:	e00b      	b.n	800141e <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001406:	210f      	movs	r1, #15
 8001408:	187b      	adds	r3, r7, r1
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	187b      	adds	r3, r7, r1
 800140e:	3201      	adds	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	230f      	movs	r3, #15
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0e4      	beq.n	80013e6 <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b004      	add	sp, #16
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	200000bc 	.word	0x200000bc
 800142c:	20000304 	.word	0x20000304

08001430 <HAL_UART_RxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001438:	230f      	movs	r3, #15
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	e059      	b.n	80014f6 <HAL_UART_RxCpltCallback+0xc6>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8001442:	240f      	movs	r4, #15
 8001444:	193b      	adds	r3, r7, r4
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <HAL_UART_RxCpltCallback+0xd8>)
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	58d2      	ldr	r2, [r2, r3]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d149      	bne.n	80014ea <HAL_UART_RxCpltCallback+0xba>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 8001456:	193b      	adds	r3, r7, r4
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4a2c      	ldr	r2, [pc, #176]	; (800150c <HAL_UART_RxCpltCallback+0xdc>)
 800145c:	2103      	movs	r1, #3
 800145e:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8001460:	193b      	adds	r3, r7, r4
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4a28      	ldr	r2, [pc, #160]	; (8001508 <HAL_UART_RxCpltCallback+0xd8>)
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	18d3      	adds	r3, r2, r3
 800146a:	3308      	adds	r3, #8
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8001472:	193b      	adds	r3, r7, r4
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_UART_RxCpltCallback+0xd8>)
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	18d3      	adds	r3, r2, r3
 800147c:	3308      	adds	r3, #8
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001484:	193b      	adds	r3, r7, r4
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <HAL_UART_RxCpltCallback+0xd8>)
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	18d3      	adds	r3, r2, r3
 800148e:	330c      	adds	r3, #12
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0018      	movs	r0, r3
 8001494:	f001 fefe 	bl	8003294 <HAL_TIM_Base_Start_IT>
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 8001498:	193b      	adds	r3, r7, r4
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	011a      	lsls	r2, r3, #4
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_UART_RxCpltCallback+0xe0>)
 80014a0:	18d0      	adds	r0, r2, r3
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_UART_RxCpltCallback+0xe4>)
 80014a8:	18d3      	adds	r3, r2, r3
 80014aa:	2201      	movs	r2, #1
 80014ac:	0019      	movs	r1, r3
 80014ae:	f003 fb9c 	bl	8004bea <kfifo_in>
            uart_rx_counter[i]++;
 80014b2:	0020      	movs	r0, r4
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_UART_RxCpltCallback+0xe8>)
 80014ba:	0059      	lsls	r1, r3, #1
 80014bc:	5a8a      	ldrh	r2, [r1, r2]
 80014be:	3201      	adds	r2, #1
 80014c0:	b291      	uxth	r1, r2
 80014c2:	4a15      	ldr	r2, [pc, #84]	; (8001518 <HAL_UART_RxCpltCallback+0xe8>)
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 80014c8:	0001      	movs	r1, r0
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_UART_RxCpltCallback+0xd8>)
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	18d3      	adds	r3, r2, r3
 80014d4:	3304      	adds	r3, #4
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_UART_RxCpltCallback+0xe4>)
 80014de:	18d3      	adds	r3, r2, r3
 80014e0:	2201      	movs	r2, #1
 80014e2:	0019      	movs	r1, r3
 80014e4:	f7ff fef6 	bl	80012d4 <UART_Receive_IT>
            return;
 80014e8:	e00a      	b.n	8001500 <HAL_UART_RxCpltCallback+0xd0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80014ea:	210f      	movs	r1, #15
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	3201      	adds	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	230f      	movs	r3, #15
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0a0      	beq.n	8001442 <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 8001500:	46bd      	mov	sp, r7
 8001502:	b005      	add	sp, #20
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	200000bc 	.word	0x200000bc
 800150c:	20000308 	.word	0x20000308
 8001510:	200002ec 	.word	0x200002ec
 8001514:	200001e8 	.word	0x200001e8
 8001518:	200002fc 	.word	0x200002fc

0800151c <uartTimerIrqHandler>:
 * 
 * @param htim 
 * @retval None
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	e05d      	b.n	80015ea <uartTimerIrqHandler+0xce>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 800152e:	210f      	movs	r1, #15
 8001530:	187b      	adds	r3, r7, r1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4a32      	ldr	r2, [pc, #200]	; (8001600 <uartTimerIrqHandler+0xe4>)
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	3308      	adds	r3, #8
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d14b      	bne.n	80015de <uartTimerIrqHandler+0xc2>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 8001546:	000c      	movs	r4, r1
 8001548:	187b      	adds	r3, r7, r1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4a2c      	ldr	r2, [pc, #176]	; (8001600 <uartTimerIrqHandler+0xe4>)
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	18d3      	adds	r3, r2, r3
 8001552:	330c      	adds	r3, #12
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0018      	movs	r0, r3
 8001558:	f001 fee8 	bl	800332c <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 800155c:	0020      	movs	r0, r4
 800155e:	183b      	adds	r3, r7, r0
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <uartTimerIrqHandler+0xe8>)
 8001564:	2104      	movs	r1, #4
 8001566:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8001568:	183b      	adds	r3, r7, r0
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <uartTimerIrqHandler+0xec>)
 800156e:	0052      	lsls	r2, r2, #1
 8001570:	5ad1      	ldrh	r1, [r2, r3]
 8001572:	183b      	adds	r3, r7, r0
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <uartTimerIrqHandler+0xf0>)
 8001578:	0052      	lsls	r2, r2, #1
 800157a:	5ad3      	ldrh	r3, [r2, r3]
 800157c:	183a      	adds	r2, r7, r0
 800157e:	7812      	ldrb	r2, [r2, #0]
 8001580:	18cb      	adds	r3, r1, r3
 8001582:	b299      	uxth	r1, r3
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <uartTimerIrqHandler+0xec>)
 8001586:	0052      	lsls	r2, r2, #1
 8001588:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 800158a:	183b      	adds	r3, r7, r0
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <uartTimerIrqHandler+0xec>)
 8001590:	0052      	lsls	r2, r2, #1
 8001592:	5ad2      	ldrh	r2, [r2, r3]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	429a      	cmp	r2, r3
 800159a:	d918      	bls.n	80015ce <uartTimerIrqHandler+0xb2>
            {
            	uart_rx_size[i] = uart_rx_counter[i];
 800159c:	183b      	adds	r3, r7, r0
 800159e:	7819      	ldrb	r1, [r3, #0]
 80015a0:	183b      	adds	r3, r7, r0
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <uartTimerIrqHandler+0xf0>)
 80015a6:	0049      	lsls	r1, r1, #1
 80015a8:	5ac9      	ldrh	r1, [r1, r3]
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <uartTimerIrqHandler+0xec>)
 80015ac:	0052      	lsls	r2, r2, #1
 80015ae:	52d1      	strh	r1, [r2, r3]
            	kfifo_reset(&uart_rx_fifo[i]);
 80015b0:	0004      	movs	r4, r0
 80015b2:	183b      	adds	r3, r7, r0
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	011a      	lsls	r2, r3, #4
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <uartTimerIrqHandler+0xf4>)
 80015ba:	18d3      	adds	r3, r2, r3
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff fe5b 	bl	8001278 <kfifo_reset>
            	uart_rx_size[i] = 0;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <uartTimerIrqHandler+0xec>)
 80015c8:	0052      	lsls	r2, r2, #1
 80015ca:	2100      	movs	r1, #0
 80015cc:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 80015ce:	230f      	movs	r3, #15
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <uartTimerIrqHandler+0xf0>)
 80015d6:	0052      	lsls	r2, r2, #1
 80015d8:	2100      	movs	r1, #0
 80015da:	52d1      	strh	r1, [r2, r3]
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 80015dc:	e00b      	b.n	80015f6 <uartTimerIrqHandler+0xda>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 80015de:	210f      	movs	r1, #15
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	3201      	adds	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	230f      	movs	r3, #15
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d09c      	beq.n	800152e <uartTimerIrqHandler+0x12>
        }
    }
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b005      	add	sp, #20
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	200000bc 	.word	0x200000bc
 8001604:	20000308 	.word	0x20000308
 8001608:	20000300 	.word	0x20000300
 800160c:	200002fc 	.word	0x200002fc
 8001610:	200002ec 	.word	0x200002ec

08001614 <HAL_UART_ErrorCallback>:
 * 
 * @param huart
 * @retval None 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 800161c:	230f      	movs	r3, #15
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e014      	b.n	8001650 <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 8001626:	210f      	movs	r1, #15
 8001628:	187b      	adds	r3, r7, r1
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_UART_ErrorCallback+0x50>)
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	58d2      	ldr	r2, [r2, r3]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d104      	bne.n	8001644 <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 800163a:	187b      	adds	r3, r7, r1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff feac 	bl	800139c <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001644:	210f      	movs	r1, #15
 8001646:	187b      	adds	r3, r7, r1
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	187b      	adds	r3, r7, r1
 800164c:	3201      	adds	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	230f      	movs	r3, #15
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0e5      	beq.n	8001626 <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b004      	add	sp, #16
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000bc 	.word	0x200000bc

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166c:	f000 fc0c 	bl	8001e88 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001670:	f000 f80d 	bl	800168e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001674:	f000 f8f2 	bl	800185c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001678:	f000 f890 	bl	800179c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800167c:	f000 f8be 	bl	80017fc <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001680:	f000 f864 	bl	800174c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  bspInit();
 8001684:	f7ff fd0a 	bl	800109c <bspInit>
  stateActuator();
 8001688:	f7fe fe4c 	bl	8000324 <stateActuator>
//  messageQueueTest();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800168c:	e7fe      	b.n	800168c <main+0x24>

0800168e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168e:	b590      	push	{r4, r7, lr}
 8001690:	b095      	sub	sp, #84	; 0x54
 8001692:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001694:	2420      	movs	r4, #32
 8001696:	193b      	adds	r3, r7, r4
 8001698:	0018      	movs	r0, r3
 800169a:	2330      	movs	r3, #48	; 0x30
 800169c:	001a      	movs	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	f003 fc83 	bl	8004faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	2310      	movs	r3, #16
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	0018      	movs	r0, r3
 80016aa:	2310      	movs	r3, #16
 80016ac:	001a      	movs	r2, r3
 80016ae:	2100      	movs	r1, #0
 80016b0:	f003 fc7b 	bl	8004faa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b4:	003b      	movs	r3, r7
 80016b6:	0018      	movs	r0, r3
 80016b8:	2310      	movs	r3, #16
 80016ba:	001a      	movs	r2, r3
 80016bc:	2100      	movs	r1, #0
 80016be:	f003 fc74 	bl	8004faa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c2:	0021      	movs	r1, r4
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2201      	movs	r2, #1
 80016ce:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2202      	movs	r2, #2
 80016d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	0252      	lsls	r2, r2, #9
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	02d2      	lsls	r2, r2, #11
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	0018      	movs	r0, r3
 80016f0:	f001 f852 	bl	8002798 <HAL_RCC_OscConfig>
 80016f4:	1e03      	subs	r3, r0, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016f8:	f000 f99e 	bl	8001a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fc:	2110      	movs	r1, #16
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2202      	movs	r2, #2
 8001708:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2101      	movs	r1, #1
 800171a:	0018      	movs	r0, r3
 800171c:	f001 fb56 	bl	8002dcc <HAL_RCC_ClockConfig>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001724:	f000 f988 	bl	8001a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001728:	003b      	movs	r3, r7
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800172e:	003b      	movs	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001734:	003b      	movs	r3, r7
 8001736:	0018      	movs	r0, r3
 8001738:	f001 fc8e 	bl	8003058 <HAL_RCCEx_PeriphCLKConfig>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001740:	f000 f97a 	bl	8001a38 <Error_Handler>
  }
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b015      	add	sp, #84	; 0x54
 800174a:	bd90      	pop	{r4, r7, pc}

0800174c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_TIM17_Init+0x44>)
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <MX_TIM17_Init+0x48>)
 8001754:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_TIM17_Init+0x44>)
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <MX_TIM17_Init+0x4c>)
 800175a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_TIM17_Init+0x44>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_TIM17_Init+0x44>)
 8001764:	2223      	movs	r2, #35	; 0x23
 8001766:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_TIM17_Init+0x44>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_TIM17_Init+0x44>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_TIM17_Init+0x44>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <MX_TIM17_Init+0x44>)
 800177c:	0018      	movs	r0, r3
 800177e:	f001 fd39 	bl	80031f4 <HAL_TIM_Base_Init>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001786:	f000 f957 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000030c 	.word	0x2000030c
 8001794:	40014800 	.word	0x40014800
 8001798:	000012bf 	.word	0x000012bf

0800179c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <MX_USART1_UART_Init+0x5c>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017a8:	22e1      	movs	r2, #225	; 0xe1
 80017aa:	0252      	lsls	r2, r2, #9
 80017ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <MX_USART1_UART_Init+0x58>)
 80017e0:	0018      	movs	r0, r3
 80017e2:	f001 ff8d 	bl	8003700 <HAL_UART_Init>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017ea:	f000 f925 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000354 	.word	0x20000354
 80017f8:	40013800 	.word	0x40013800

080017fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_USART2_UART_Init+0x58>)
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <MX_USART2_UART_Init+0x5c>)
 8001804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <MX_USART2_UART_Init+0x58>)
 8001808:	22e1      	movs	r2, #225	; 0xe1
 800180a:	0252      	lsls	r2, r2, #9
 800180c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_USART2_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_USART2_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_USART2_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_USART2_UART_Init+0x58>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_USART2_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_USART2_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <MX_USART2_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_USART2_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <MX_USART2_UART_Init+0x58>)
 8001840:	0018      	movs	r0, r3
 8001842:	f001 ff5d 	bl	8003700 <HAL_UART_Init>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d001      	beq.n	800184e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800184a:	f000 f8f5 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200003dc 	.word	0x200003dc
 8001858:	40004400 	.word	0x40004400

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	240c      	movs	r4, #12
 8001864:	193b      	adds	r3, r7, r4
 8001866:	0018      	movs	r0, r3
 8001868:	2314      	movs	r3, #20
 800186a:	001a      	movs	r2, r3
 800186c:	2100      	movs	r1, #0
 800186e:	f003 fb9c 	bl	8004faa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001872:	4b6e      	ldr	r3, [pc, #440]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	03c9      	lsls	r1, r1, #15
 800187c:	430a      	orrs	r2, r1
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	03db      	lsls	r3, r3, #15
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0289      	lsls	r1, r1, #10
 8001898:	430a      	orrs	r2, r1
 800189a:	615a      	str	r2, [r3, #20]
 800189c:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	4013      	ands	r3, r2
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b60      	ldr	r3, [pc, #384]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	02c9      	lsls	r1, r1, #11
 80018b4:	430a      	orrs	r2, r1
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	4b5c      	ldr	r3, [pc, #368]	; (8001a2c <MX_GPIO_Init+0x1d0>)
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	02db      	lsls	r3, r3, #11
 80018c0:	4013      	ands	r3, r2
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 80018c6:	2381      	movs	r3, #129	; 0x81
 80018c8:	0119      	lsls	r1, r3, #4
 80018ca:	2390      	movs	r3, #144	; 0x90
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	2200      	movs	r2, #0
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 ff28 	bl	8002726 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 80018d6:	4956      	ldr	r1, [pc, #344]	; (8001a30 <MX_GPIO_Init+0x1d4>)
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <MX_GPIO_Init+0x1d8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 ff22 	bl	8002726 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	2210      	movs	r2, #16
 80018e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	2201      	movs	r2, #1
 80018ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018f4:	193b      	adds	r3, r7, r4
 80018f6:	2201      	movs	r2, #1
 80018f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80018fa:	193a      	adds	r2, r7, r4
 80018fc:	2390      	movs	r3, #144	; 0x90
 80018fe:	05db      	lsls	r3, r3, #23
 8001900:	0011      	movs	r1, r2
 8001902:	0018      	movs	r0, r3
 8001904:	f000 fcb2 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 8001908:	0021      	movs	r1, r4
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	0152      	lsls	r2, r2, #5
 8001910:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001912:	000c      	movs	r4, r1
 8001914:	193b      	adds	r3, r7, r4
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191a:	193b      	adds	r3, r7, r4
 800191c:	2201      	movs	r2, #1
 800191e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8001920:	193b      	adds	r3, r7, r4
 8001922:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <MX_GPIO_Init+0x1d8>)
 8001924:	0019      	movs	r1, r3
 8001926:	0010      	movs	r0, r2
 8001928:	f000 fca0 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 800192c:	0021      	movs	r1, r4
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	0192      	lsls	r2, r2, #6
 8001934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2288      	movs	r2, #136	; 0x88
 800193a:	0352      	lsls	r2, r2, #13
 800193c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2201      	movs	r2, #1
 8001942:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8001944:	000c      	movs	r4, r1
 8001946:	187b      	adds	r3, r7, r1
 8001948:	4a3a      	ldr	r2, [pc, #232]	; (8001a34 <MX_GPIO_Init+0x1d8>)
 800194a:	0019      	movs	r1, r3
 800194c:	0010      	movs	r0, r2
 800194e:	f000 fc8d 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 8001952:	0021      	movs	r1, r4
 8001954:	187b      	adds	r3, r7, r1
 8001956:	22c0      	movs	r2, #192	; 0xc0
 8001958:	0212      	lsls	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	000c      	movs	r4, r1
 800195e:	193b      	adds	r3, r7, r4
 8001960:	2201      	movs	r2, #1
 8001962:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	193b      	adds	r3, r7, r4
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2203      	movs	r2, #3
 800196e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	193b      	adds	r3, r7, r4
 8001972:	4a30      	ldr	r2, [pc, #192]	; (8001a34 <MX_GPIO_Init+0x1d8>)
 8001974:	0019      	movs	r1, r3
 8001976:	0010      	movs	r0, r2
 8001978:	f000 fc78 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 800197c:	193b      	adds	r3, r7, r4
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	0052      	lsls	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	193b      	adds	r3, r7, r4
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	193b      	adds	r3, r7, r4
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001990:	193a      	adds	r2, r7, r4
 8001992:	2390      	movs	r3, #144	; 0x90
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	0011      	movs	r1, r2
 8001998:	0018      	movs	r0, r3
 800199a:	f000 fc67 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 800199e:	0021      	movs	r1, r4
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	000c      	movs	r4, r1
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	2201      	movs	r2, #1
 80019ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	2203      	movs	r2, #3
 80019ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 80019bc:	193a      	adds	r2, r7, r4
 80019be:	2390      	movs	r3, #144	; 0x90
 80019c0:	05db      	lsls	r3, r3, #23
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 fc51 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	0152      	lsls	r2, r2, #5
 80019d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	2288      	movs	r2, #136	; 0x88
 80019d6:	0352      	lsls	r2, r2, #13
 80019d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2201      	movs	r2, #1
 80019de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 80019e0:	193a      	adds	r2, r7, r4
 80019e2:	2390      	movs	r3, #144	; 0x90
 80019e4:	05db      	lsls	r3, r3, #23
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 fc3f 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 80019ee:	0021      	movs	r1, r4
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	2230      	movs	r2, #48	; 0x30
 80019f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2201      	movs	r2, #1
 80019fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2201      	movs	r2, #1
 8001a06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <MX_GPIO_Init+0x1d8>)
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	0010      	movs	r0, r2
 8001a10:	f000 fc2c 	bl	800226c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2007      	movs	r0, #7
 8001a1a:	f000 fb67 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001a1e:	2007      	movs	r0, #7
 8001a20:	f000 fb79 	bl	8002116 <HAL_NVIC_EnableIRQ>

}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b009      	add	sp, #36	; 0x24
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	0000c030 	.word	0x0000c030
 8001a34:	48000400 	.word	0x48000400

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>
	...

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_MspInit+0x44>)
 8001a4c:	699a      	ldr	r2, [r3, #24]
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_MspInit+0x44>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	619a      	str	r2, [r3, #24]
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_MspInit+0x44>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_MspInit+0x44>)
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_MspInit+0x44>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0549      	lsls	r1, r1, #21
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	61da      	str	r2, [r3, #28]
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_MspInit+0x44>)
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	055b      	lsls	r3, r3, #21
 8001a78:	4013      	ands	r3, r2
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_TIM_Base_MspInit+0x48>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d115      	bne.n	8001aca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_TIM_Base_MspInit+0x4c>)
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_TIM_Base_MspInit+0x4c>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	02c9      	lsls	r1, r1, #11
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	619a      	str	r2, [r3, #24]
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_TIM_Base_MspInit+0x4c>)
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	02db      	lsls	r3, r3, #11
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2016      	movs	r0, #22
 8001ac0:	f000 fb14 	bl	80020ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001ac4:	2016      	movs	r0, #22
 8001ac6:	f000 fb26 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	40014800 	.word	0x40014800
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b08d      	sub	sp, #52	; 0x34
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	241c      	movs	r4, #28
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	0018      	movs	r0, r3
 8001aea:	2314      	movs	r3, #20
 8001aec:	001a      	movs	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	f003 fa5b 	bl	8004faa <memset>
  if(huart->Instance==USART1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <HAL_UART_MspInit+0x114>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d13c      	bne.n	8001b78 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	01c9      	lsls	r1, r1, #7
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	619a      	str	r2, [r3, #24]
 8001b0c:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	01db      	lsls	r3, r3, #7
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0289      	lsls	r1, r1, #10
 8001b24:	430a      	orrs	r2, r1
 8001b26:	615a      	str	r2, [r3, #20]
 8001b28:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	029b      	lsls	r3, r3, #10
 8001b30:	4013      	ands	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	22c0      	movs	r2, #192	; 0xc0
 8001b3a:	00d2      	lsls	r2, r2, #3
 8001b3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	0021      	movs	r1, r4
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2202      	movs	r2, #2
 8001b44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2201      	movs	r2, #1
 8001b56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	187a      	adds	r2, r7, r1
 8001b5a:	2390      	movs	r3, #144	; 0x90
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	0011      	movs	r1, r2
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 fb83 	bl	800226c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2101      	movs	r1, #1
 8001b6a:	201b      	movs	r0, #27
 8001b6c:	f000 fabe 	bl	80020ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b70:	201b      	movs	r0, #27
 8001b72:	f000 fad0 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b76:	e037      	b.n	8001be8 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <HAL_UART_MspInit+0x11c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d132      	bne.n	8001be8 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	0289      	lsls	r1, r1, #10
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	61da      	str	r2, [r3, #28]
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0289      	lsls	r1, r1, #10
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	615a      	str	r2, [r3, #20]
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_UART_MspInit+0x118>)
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	029b      	lsls	r3, r3, #10
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bba:	211c      	movs	r1, #28
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	187a      	adds	r2, r7, r1
 8001bdc:	2390      	movs	r3, #144	; 0x90
 8001bde:	05db      	lsls	r3, r3, #23
 8001be0:	0011      	movs	r1, r2
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 fb42 	bl	800226c <HAL_GPIO_Init>
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b00d      	add	sp, #52	; 0x34
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40004400 	.word	0x40004400

08001bfc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <HAL_UART_MspDeInit+0x60>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d111      	bne.n	8001c32 <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_UART_MspDeInit+0x64>)
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_UART_MspDeInit+0x64>)
 8001c14:	4913      	ldr	r1, [pc, #76]	; (8001c64 <HAL_UART_MspDeInit+0x68>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	00da      	lsls	r2, r3, #3
 8001c1e:	2390      	movs	r3, #144	; 0x90
 8001c20:	05db      	lsls	r3, r3, #23
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 fc91 	bl	800254c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001c2a:	201b      	movs	r0, #27
 8001c2c:	f000 fa83 	bl	8002136 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001c30:	e010      	b.n	8001c54 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_UART_MspDeInit+0x6c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d10b      	bne.n	8001c54 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_UART_MspDeInit+0x64>)
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_UART_MspDeInit+0x64>)
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <HAL_UART_MspDeInit+0x70>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001c48:	2390      	movs	r3, #144	; 0x90
 8001c4a:	05db      	lsls	r3, r3, #23
 8001c4c:	210c      	movs	r1, #12
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 fc7c 	bl	800254c <HAL_GPIO_DeInit>
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40021000 	.word	0x40021000
 8001c64:	ffffbfff 	.word	0xffffbfff
 8001c68:	40004400 	.word	0x40004400
 8001c6c:	fffdffff 	.word	0xfffdffff

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 f940 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 8001c98:	f7ff fae2 	bl	8001260 <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	015b      	lsls	r3, r3, #5
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 fd58 	bl	8002760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 fd53 	bl	8002760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <TIM17_IRQHandler+0x14>)
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f001 fb5e 	bl	8003388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	2000030c 	.word	0x2000030c

08001cd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <USART1_IRQHandler+0x14>)
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f001 fdf8 	bl	80038d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	20000354 	.word	0x20000354

08001cf0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e00a      	b.n	8001d18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d02:	e000      	b.n	8001d06 <_read+0x16>
 8001d04:	bf00      	nop
 8001d06:	0001      	movs	r1, r0
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60ba      	str	r2, [r7, #8]
 8001d0e:	b2ca      	uxtb	r2, r1
 8001d10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf0      	blt.n	8001d02 <_read+0x12>
	}

return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b006      	add	sp, #24
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e009      	b.n	8001d50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	0018      	movs	r0, r3
 8001d46:	e000      	b.n	8001d4a <_write+0x20>
 8001d48:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dbf1      	blt.n	8001d3c <_write+0x12>
	}
	return len;
 8001d58:	687b      	ldr	r3, [r7, #4]
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b006      	add	sp, #24
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_close>:

int _close(int file)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
	return -1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	425b      	negs	r3, r3
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b002      	add	sp, #8
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	0192      	lsls	r2, r2, #6
 8001d86:	605a      	str	r2, [r3, #4]
	return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_isatty>:

int _isatty(int file)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b004      	add	sp, #16
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <_sbrk+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <_sbrk+0x60>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_sbrk+0x64>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <_sbrk+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	18d3      	adds	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d207      	bcs.n	8001dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dec:	f003 f8a0 	bl	8004f30 <__errno>
 8001df0:	0003      	movs	r3, r0
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	425b      	negs	r3, r3
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	18d2      	adds	r2, r2, r3
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <_sbrk+0x64>)
 8001e0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b006      	add	sp, #24
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20002000 	.word	0x20002000
 8001e1c:	00000400 	.word	0x00000400
 8001e20:	20000464 	.word	0x20000464
 8001e24:	20000480 	.word	0x20000480

08001e28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e38:	f7ff fff6 	bl	8001e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3e:	490d      	ldr	r1, [pc, #52]	; (8001e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <LoopForever+0xe>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e54:	4c0a      	ldr	r4, [pc, #40]	; (8001e80 <LoopForever+0x16>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e62:	f003 f86b 	bl	8004f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e66:	f7ff fbff 	bl	8001668 <main>

08001e6a <LoopForever>:

LoopForever:
    b LoopForever
 8001e6a:	e7fe      	b.n	8001e6a <LoopForever>
  ldr   r0, =_estack
 8001e6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001e78:	08006354 	.word	0x08006354
  ldr r2, =_sbss
 8001e7c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001e80:	2000047c 	.word	0x2000047c

08001e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC1_IRQHandler>
	...

08001e88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_Init+0x24>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_Init+0x24>)
 8001e92:	2110      	movs	r1, #16
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f000 f809 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9e:	f7ff fdd1 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_InitTick+0x5c>)
 8001eba:	681c      	ldr	r4, [r3, #0]
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_InitTick+0x60>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	23fa      	movs	r3, #250	; 0xfa
 8001ec4:	0098      	lsls	r0, r3, #2
 8001ec6:	f7fe f929 	bl	800011c <__udivsi3>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	0019      	movs	r1, r3
 8001ece:	0020      	movs	r0, r4
 8001ed0:	f7fe f924 	bl	800011c <__udivsi3>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 f93d 	bl	8002156 <HAL_SYSTICK_Config>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e00f      	b.n	8001f04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d80b      	bhi.n	8001f02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	2301      	movs	r3, #1
 8001eee:	425b      	negs	r3, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f8fa 	bl	80020ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_InitTick+0x64>)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b003      	add	sp, #12
 8001f0a:	bd90      	pop	{r4, r7, pc}
 8001f0c:	200000cc 	.word	0x200000cc
 8001f10:	200000d4 	.word	0x200000d4
 8001f14:	200000d0 	.word	0x200000d0

08001f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_IncTick+0x1c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	001a      	movs	r2, r3
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x20>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	18d2      	adds	r2, r2, r3
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_IncTick+0x20>)
 8001f2a:	601a      	str	r2, [r3, #0]
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	200000d4 	.word	0x200000d4
 8001f38:	20000468 	.word	0x20000468

08001f3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <HAL_GetTick+0x10>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	20000468 	.word	0x20000468

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	0002      	movs	r2, r0
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	1dfb      	adds	r3, r7, #7
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b7f      	cmp	r3, #127	; 0x7f
 8001f62:	d809      	bhi.n	8001f78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	001a      	movs	r2, r3
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_EnableIRQ+0x30>)
 8001f70:	2101      	movs	r1, #1
 8001f72:	4091      	lsls	r1, r2
 8001f74:	000a      	movs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
  }
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	1dfb      	adds	r3, r7, #7
 8001f8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	1dfb      	adds	r3, r7, #7
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b7f      	cmp	r3, #127	; 0x7f
 8001f96:	d810      	bhi.n	8001fba <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	231f      	movs	r3, #31
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <__NVIC_DisableIRQ+0x40>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fae:	f3bf 8f4f 	dsb	sy
}
 8001fb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001fb4:	f3bf 8f6f 	isb	sy
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	0002      	movs	r2, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b7f      	cmp	r3, #127	; 0x7f
 8001fdc:	d828      	bhi.n	8002030 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fde:	4a2f      	ldr	r2, [pc, #188]	; (800209c <__NVIC_SetPriority+0xd4>)
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	33c0      	adds	r3, #192	; 0xc0
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	589b      	ldr	r3, [r3, r2]
 8001fee:	1dfa      	adds	r2, r7, #7
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	21ff      	movs	r1, #255	; 0xff
 8001ffc:	4091      	lsls	r1, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	43d2      	mvns	r2, r2
 8002002:	401a      	ands	r2, r3
 8002004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	401a      	ands	r2, r3
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	2303      	movs	r3, #3
 8002016:	4003      	ands	r3, r0
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201c:	481f      	ldr	r0, [pc, #124]	; (800209c <__NVIC_SetPriority+0xd4>)
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b25b      	sxtb	r3, r3
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	430a      	orrs	r2, r1
 8002028:	33c0      	adds	r3, #192	; 0xc0
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800202e:	e031      	b.n	8002094 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <__NVIC_SetPriority+0xd8>)
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0019      	movs	r1, r3
 8002038:	230f      	movs	r3, #15
 800203a:	400b      	ands	r3, r1
 800203c:	3b08      	subs	r3, #8
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3306      	adds	r3, #6
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	18d3      	adds	r3, r2, r3
 8002046:	3304      	adds	r3, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1dfa      	adds	r2, r7, #7
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	0011      	movs	r1, r2
 8002050:	2203      	movs	r2, #3
 8002052:	400a      	ands	r2, r1
 8002054:	00d2      	lsls	r2, r2, #3
 8002056:	21ff      	movs	r1, #255	; 0xff
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	43d2      	mvns	r2, r2
 800205e:	401a      	ands	r2, r3
 8002060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	22ff      	movs	r2, #255	; 0xff
 8002068:	401a      	ands	r2, r3
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	0018      	movs	r0, r3
 8002070:	2303      	movs	r3, #3
 8002072:	4003      	ands	r3, r0
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002078:	4809      	ldr	r0, [pc, #36]	; (80020a0 <__NVIC_SetPriority+0xd8>)
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	001c      	movs	r4, r3
 8002080:	230f      	movs	r3, #15
 8002082:	4023      	ands	r3, r4
 8002084:	3b08      	subs	r3, #8
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	430a      	orrs	r2, r1
 800208a:	3306      	adds	r3, #6
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	18c3      	adds	r3, r0, r3
 8002090:	3304      	adds	r3, #4
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b003      	add	sp, #12
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1e5a      	subs	r2, r3, #1
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	045b      	lsls	r3, r3, #17
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d301      	bcc.n	80020bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b8:	2301      	movs	r3, #1
 80020ba:	e010      	b.n	80020de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <SysTick_Config+0x44>)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	3a01      	subs	r2, #1
 80020c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c4:	2301      	movs	r3, #1
 80020c6:	425b      	negs	r3, r3
 80020c8:	2103      	movs	r1, #3
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff ff7c 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x44>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x44>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	210f      	movs	r1, #15
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	1c02      	adds	r2, r0, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	187b      	adds	r3, r7, r1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff ff5d 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	0002      	movs	r2, r0
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b25b      	sxtb	r3, r3
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff11 	bl	8001f50 <__NVIC_EnableIRQ>
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	0002      	movs	r2, r0
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b25b      	sxtb	r3, r3
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff ff1b 	bl	8001f84 <__NVIC_DisableIRQ>
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b002      	add	sp, #8
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff ff9f 	bl	80020a4 <SysTick_Config>
 8002166:	0003      	movs	r3, r0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2221      	movs	r2, #33	; 0x21
 800217c:	5c9b      	ldrb	r3, [r3, r2]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d008      	beq.n	8002196 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2220      	movs	r2, #32
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e020      	b.n	80021d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	210e      	movs	r1, #14
 80021a2:	438a      	bics	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	438a      	bics	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	2101      	movs	r1, #1
 80021c0:	4091      	lsls	r1, r2
 80021c2:	000a      	movs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2221      	movs	r2, #33	; 0x21
 80021ca:	2101      	movs	r1, #1
 80021cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	2100      	movs	r1, #0
 80021d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	210f      	movs	r1, #15
 80021ea:	187b      	adds	r3, r7, r1
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2221      	movs	r2, #33	; 0x21
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d006      	beq.n	800220a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2204      	movs	r2, #4
 8002200:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002202:	187b      	adds	r3, r7, r1
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e028      	b.n	800225c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	210e      	movs	r1, #14
 8002216:	438a      	bics	r2, r1
 8002218:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	438a      	bics	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	2101      	movs	r1, #1
 8002234:	4091      	lsls	r1, r2
 8002236:	000a      	movs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2221      	movs	r2, #33	; 0x21
 800223e:	2101      	movs	r1, #1
 8002240:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	2100      	movs	r1, #0
 8002248:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	0010      	movs	r0, r2
 800225a:	4798      	blx	r3
    }
  }
  return status;
 800225c:	230f      	movs	r3, #15
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b004      	add	sp, #16
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227a:	e14f      	b.n	800251c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4091      	lsls	r1, r2
 8002286:	000a      	movs	r2, r1
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d100      	bne.n	8002294 <HAL_GPIO_Init+0x28>
 8002292:	e140      	b.n	8002516 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	4013      	ands	r3, r2
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	409a      	lsls	r2, r3
 80022ba:	0013      	movs	r3, r2
 80022bc:	43da      	mvns	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	409a      	lsls	r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e2:	2201      	movs	r2, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	43da      	mvns	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	2201      	movs	r2, #1
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2203      	movs	r2, #3
 8002314:	4013      	ands	r3, r2
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	43da      	mvns	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	409a      	lsls	r2, r3
 800233c:	0013      	movs	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2203      	movs	r2, #3
 8002350:	4013      	ands	r3, r2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d123      	bne.n	800239e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	58d3      	ldr	r3, [r2, r3]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2207      	movs	r2, #7
 8002368:	4013      	ands	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	409a      	lsls	r2, r3
 8002370:	0013      	movs	r3, r2
 8002372:	43da      	mvns	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2107      	movs	r1, #7
 8002382:	400b      	ands	r3, r1
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	6939      	ldr	r1, [r7, #16]
 800239c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	409a      	lsls	r2, r3
 80023ac:	0013      	movs	r3, r2
 80023ae:	43da      	mvns	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2203      	movs	r2, #3
 80023bc:	401a      	ands	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	409a      	lsls	r2, r3
 80023c4:	0013      	movs	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	029b      	lsls	r3, r3, #10
 80023da:	4013      	ands	r3, r2
 80023dc:	d100      	bne.n	80023e0 <HAL_GPIO_Init+0x174>
 80023de:	e09a      	b.n	8002516 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e0:	4b54      	ldr	r3, [pc, #336]	; (8002534 <HAL_GPIO_Init+0x2c8>)
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_GPIO_Init+0x2c8>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	430a      	orrs	r2, r1
 80023ea:	619a      	str	r2, [r3, #24]
 80023ec:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_GPIO_Init+0x2c8>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f8:	4a4f      	ldr	r2, [pc, #316]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	589b      	ldr	r3, [r3, r2]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2203      	movs	r2, #3
 800240a:	4013      	ands	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	409a      	lsls	r2, r3
 8002412:	0013      	movs	r3, r2
 8002414:	43da      	mvns	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	2390      	movs	r3, #144	; 0x90
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	429a      	cmp	r2, r3
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x1e2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a44      	ldr	r2, [pc, #272]	; (800253c <HAL_GPIO_Init+0x2d0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x1de>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a43      	ldr	r2, [pc, #268]	; (8002540 <HAL_GPIO_Init+0x2d4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x1da>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_GPIO_Init+0x2d8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x1d6>
 800243e:	2303      	movs	r3, #3
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x1e4>
 8002442:	2305      	movs	r3, #5
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x1e4>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x1e4>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x1e4>
 800244e:	2300      	movs	r3, #0
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	2103      	movs	r1, #3
 8002454:	400a      	ands	r2, r1
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43da      	mvns	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	035b      	lsls	r3, r3, #13
 8002486:	4013      	ands	r3, r2
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	039b      	lsls	r3, r3, #14
 80024b0:	4013      	ands	r3, r2
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	4013      	ands	r3, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	025b      	lsls	r3, r3, #9
 8002504:	4013      	ands	r3, r2
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	40da      	lsrs	r2, r3
 8002524:	1e13      	subs	r3, r2, #0
 8002526:	d000      	beq.n	800252a <HAL_GPIO_Init+0x2be>
 8002528:	e6a8      	b.n	800227c <HAL_GPIO_Init+0x10>
  } 
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b006      	add	sp, #24
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000
 800253c:	48000400 	.word	0x48000400
 8002540:	48000800 	.word	0x48000800
 8002544:	48000c00 	.word	0x48000c00
 8002548:	40010400 	.word	0x40010400

0800254c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800255a:	e0b1      	b.n	80026c0 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800255c:	2201      	movs	r2, #1
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	409a      	lsls	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d100      	bne.n	8002570 <HAL_GPIO_DeInit+0x24>
 800256e:	e0a4      	b.n	80026ba <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002570:	4a59      	ldr	r2, [pc, #356]	; (80026d8 <HAL_GPIO_DeInit+0x18c>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	589b      	ldr	r3, [r3, r2]
 800257c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2203      	movs	r2, #3
 8002582:	4013      	ands	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	2390      	movs	r3, #144	; 0x90
 8002594:	05db      	lsls	r3, r3, #23
 8002596:	429a      	cmp	r2, r3
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_DeInit+0x76>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4f      	ldr	r2, [pc, #316]	; (80026dc <HAL_GPIO_DeInit+0x190>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_DeInit+0x72>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4e      	ldr	r2, [pc, #312]	; (80026e0 <HAL_GPIO_DeInit+0x194>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_DeInit+0x6e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4d      	ldr	r2, [pc, #308]	; (80026e4 <HAL_GPIO_DeInit+0x198>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_DeInit+0x6a>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_DeInit+0x78>
 80025b6:	2305      	movs	r3, #5
 80025b8:	e004      	b.n	80025c4 <HAL_GPIO_DeInit+0x78>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e002      	b.n	80025c4 <HAL_GPIO_DeInit+0x78>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_GPIO_DeInit+0x78>
 80025c2:	2300      	movs	r3, #0
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	2103      	movs	r1, #3
 80025c8:	400a      	ands	r2, r1
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	4093      	lsls	r3, r2
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d132      	bne.n	800263a <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80025d4:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <HAL_GPIO_DeInit+0x19c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43d9      	mvns	r1, r3
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <HAL_GPIO_DeInit+0x19c>)
 80025de:	400a      	ands	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_GPIO_DeInit+0x19c>)
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43d9      	mvns	r1, r3
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_GPIO_DeInit+0x19c>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80025f0:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_GPIO_DeInit+0x19c>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_GPIO_DeInit+0x19c>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_GPIO_DeInit+0x19c>)
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43d9      	mvns	r1, r3
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <HAL_GPIO_DeInit+0x19c>)
 8002608:	400a      	ands	r2, r1
 800260a:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2203      	movs	r2, #3
 8002610:	4013      	ands	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	220f      	movs	r2, #15
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800261c:	4a2e      	ldr	r2, [pc, #184]	; (80026d8 <HAL_GPIO_DeInit+0x18c>)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	589a      	ldr	r2, [r3, r2]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43d9      	mvns	r1, r3
 800262c:	482a      	ldr	r0, [pc, #168]	; (80026d8 <HAL_GPIO_DeInit+0x18c>)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	400a      	ands	r2, r1
 8002634:	3302      	adds	r3, #2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	0052      	lsls	r2, r2, #1
 8002642:	2103      	movs	r1, #3
 8002644:	4091      	lsls	r1, r2
 8002646:	000a      	movs	r2, r1
 8002648:	43d2      	mvns	r2, r2
 800264a:	401a      	ands	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	58d3      	ldr	r3, [r2, r3]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	2107      	movs	r1, #7
 8002660:	400a      	ands	r2, r1
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	210f      	movs	r1, #15
 8002666:	4091      	lsls	r1, r2
 8002668:	000a      	movs	r2, r1
 800266a:	43d1      	mvns	r1, r2
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	08d2      	lsrs	r2, r2, #3
 8002670:	4019      	ands	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	0052      	lsls	r2, r2, #1
 8002682:	2103      	movs	r1, #3
 8002684:	4091      	lsls	r1, r2
 8002686:	000a      	movs	r2, r1
 8002688:	43d2      	mvns	r2, r2
 800268a:	401a      	ands	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2101      	movs	r1, #1
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4091      	lsls	r1, r2
 800269a:	000a      	movs	r2, r1
 800269c:	43d2      	mvns	r2, r2
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	0052      	lsls	r2, r2, #1
 80026ac:	2103      	movs	r1, #3
 80026ae:	4091      	lsls	r1, r2
 80026b0:	000a      	movs	r2, r1
 80026b2:	43d2      	mvns	r2, r2
 80026b4:	401a      	ands	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]

    }

    position++;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	40da      	lsrs	r2, r3
 80026c6:	1e13      	subs	r3, r2, #0
 80026c8:	d000      	beq.n	80026cc <HAL_GPIO_DeInit+0x180>
 80026ca:	e747      	b.n	800255c <HAL_GPIO_DeInit+0x10>
  }
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b006      	add	sp, #24
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	40010000 	.word	0x40010000
 80026dc:	48000400 	.word	0x48000400
 80026e0:	48000800 	.word	0x48000800
 80026e4:	48000c00 	.word	0x48000c00
 80026e8:	40010400 	.word	0x40010400

080026ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	000a      	movs	r2, r1
 80026f6:	1cbb      	adds	r3, r7, #2
 80026f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	1cba      	adds	r2, r7, #2
 8002700:	8812      	ldrh	r2, [r2, #0]
 8002702:	4013      	ands	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e003      	b.n	8002718 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002718:	230f      	movs	r3, #15
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	781b      	ldrb	r3, [r3, #0]
  }
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b004      	add	sp, #16
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	0008      	movs	r0, r1
 8002730:	0011      	movs	r1, r2
 8002732:	1cbb      	adds	r3, r7, #2
 8002734:	1c02      	adds	r2, r0, #0
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	1c7b      	adds	r3, r7, #1
 800273a:	1c0a      	adds	r2, r1, #0
 800273c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800273e:	1c7b      	adds	r3, r7, #1
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002746:	1cbb      	adds	r3, r7, #2
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800274e:	e003      	b.n	8002758 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002750:	1cbb      	adds	r3, r7, #2
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	1dba      	adds	r2, r7, #6
 8002772:	8812      	ldrh	r2, [r2, #0]
 8002774:	4013      	ands	r3, r2
 8002776:	d008      	beq.n	800278a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800277a:	1dba      	adds	r2, r7, #6
 800277c:	8812      	ldrh	r2, [r2, #0]
 800277e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002780:	1dbb      	adds	r3, r7, #6
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	0018      	movs	r0, r3
 8002786:	f7fe fd41 	bl	800120c <HAL_GPIO_EXTI_Callback>
  }
}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e301      	b.n	8002dae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4013      	ands	r3, r2
 80027b2:	d100      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1e>
 80027b4:	e08d      	b.n	80028d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027b6:	4bc3      	ldr	r3, [pc, #780]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	220c      	movs	r2, #12
 80027bc:	4013      	ands	r3, r2
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d00e      	beq.n	80027e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027c2:	4bc0      	ldr	r3, [pc, #768]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	220c      	movs	r2, #12
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d116      	bne.n	80027fc <HAL_RCC_OscConfig+0x64>
 80027ce:	4bbd      	ldr	r3, [pc, #756]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	025b      	lsls	r3, r3, #9
 80027d6:	401a      	ands	r2, r3
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	429a      	cmp	r2, r3
 80027de:	d10d      	bne.n	80027fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	4bb8      	ldr	r3, [pc, #736]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	4013      	ands	r3, r2
 80027ea:	d100      	bne.n	80027ee <HAL_RCC_OscConfig+0x56>
 80027ec:	e070      	b.n	80028d0 <HAL_RCC_OscConfig+0x138>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d000      	beq.n	80027f8 <HAL_RCC_OscConfig+0x60>
 80027f6:	e06b      	b.n	80028d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e2d8      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_RCC_OscConfig+0x7c>
 8002804:	4baf      	ldr	r3, [pc, #700]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4bae      	ldr	r3, [pc, #696]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	0249      	lsls	r1, r1, #9
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e02f      	b.n	8002874 <HAL_RCC_OscConfig+0xdc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x9e>
 800281c:	4ba9      	ldr	r3, [pc, #676]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4ba8      	ldr	r3, [pc, #672]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002822:	49a9      	ldr	r1, [pc, #676]	; (8002ac8 <HAL_RCC_OscConfig+0x330>)
 8002824:	400a      	ands	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	4ba6      	ldr	r3, [pc, #664]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4ba5      	ldr	r3, [pc, #660]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800282e:	49a7      	ldr	r1, [pc, #668]	; (8002acc <HAL_RCC_OscConfig+0x334>)
 8002830:	400a      	ands	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e01e      	b.n	8002874 <HAL_RCC_OscConfig+0xdc>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10e      	bne.n	800285c <HAL_RCC_OscConfig+0xc4>
 800283e:	4ba1      	ldr	r3, [pc, #644]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4ba0      	ldr	r3, [pc, #640]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	02c9      	lsls	r1, r1, #11
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	4b9d      	ldr	r3, [pc, #628]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b9c      	ldr	r3, [pc, #624]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0249      	lsls	r1, r1, #9
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xdc>
 800285c:	4b99      	ldr	r3, [pc, #612]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b98      	ldr	r3, [pc, #608]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002862:	4999      	ldr	r1, [pc, #612]	; (8002ac8 <HAL_RCC_OscConfig+0x330>)
 8002864:	400a      	ands	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	4b96      	ldr	r3, [pc, #600]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b95      	ldr	r3, [pc, #596]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800286e:	4997      	ldr	r1, [pc, #604]	; (8002acc <HAL_RCC_OscConfig+0x334>)
 8002870:	400a      	ands	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d014      	beq.n	80028a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff fb5e 	bl	8001f3c <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002886:	f7ff fb59 	bl	8001f3c <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e28a      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002898:	4b8a      	ldr	r3, [pc, #552]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	4013      	ands	r3, r2
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0xee>
 80028a4:	e015      	b.n	80028d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7ff fb49 	bl	8001f3c <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff fb44 	bl	8001f3c <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e275      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	4b80      	ldr	r3, [pc, #512]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	029b      	lsls	r3, r3, #10
 80028ca:	4013      	ands	r3, r2
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x118>
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2202      	movs	r2, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d100      	bne.n	80028de <HAL_RCC_OscConfig+0x146>
 80028dc:	e069      	b.n	80029b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028de:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	220c      	movs	r2, #12
 80028e4:	4013      	ands	r3, r2
 80028e6:	d00b      	beq.n	8002900 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e8:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	220c      	movs	r2, #12
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d11c      	bne.n	800292e <HAL_RCC_OscConfig+0x196>
 80028f4:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	4013      	ands	r3, r2
 80028fe:	d116      	bne.n	800292e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002900:	4b70      	ldr	r3, [pc, #448]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x17e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e24b      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	22f8      	movs	r2, #248	; 0xf8
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	00da      	lsls	r2, r3, #3
 8002926:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292c:	e041      	b.n	80029b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d024      	beq.n	8002980 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800293c:	2101      	movs	r1, #1
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7ff fafb 	bl	8001f3c <HAL_GetTick>
 8002946:	0003      	movs	r3, r0
 8002948:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294c:	f7ff faf6 	bl	8001f3c <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e227      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d0f1      	beq.n	800294c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	22f8      	movs	r2, #248	; 0xf8
 800296e:	4393      	bics	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00da      	lsls	r2, r3, #3
 8002978:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e018      	b.n	80029b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002986:	2101      	movs	r1, #1
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff fad6 	bl	8001f3c <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002996:	f7ff fad1 	bl	8001f3c <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e202      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a8:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2202      	movs	r2, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	d1f1      	bne.n	8002996 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2208      	movs	r2, #8
 80029b8:	4013      	ands	r3, r2
 80029ba:	d036      	beq.n	8002a2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d019      	beq.n	80029f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c4:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80029c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c8:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80029ca:	2101      	movs	r1, #1
 80029cc:	430a      	orrs	r2, r1
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7ff fab4 	bl	8001f3c <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029da:	f7ff faaf 	bl	8001f3c <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1e0      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2202      	movs	r2, #2
 80029f2:	4013      	ands	r3, r2
 80029f4:	d0f1      	beq.n	80029da <HAL_RCC_OscConfig+0x242>
 80029f6:	e018      	b.n	8002a2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f8:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80029fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fc:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 80029fe:	2101      	movs	r1, #1
 8002a00:	438a      	bics	r2, r1
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a04:	f7ff fa9a 	bl	8001f3c <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0e:	f7ff fa95 	bl	8001f3c <HAL_GetTick>
 8002a12:	0002      	movs	r2, r0
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1c6      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2202      	movs	r2, #2
 8002a26:	4013      	ands	r3, r2
 8002a28:	d1f1      	bne.n	8002a0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	4013      	ands	r3, r2
 8002a32:	d100      	bne.n	8002a36 <HAL_RCC_OscConfig+0x29e>
 8002a34:	e0b4      	b.n	8002ba0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	201f      	movs	r0, #31
 8002a38:	183b      	adds	r3, r7, r0
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	055b      	lsls	r3, r3, #21
 8002a46:	4013      	ands	r3, r2
 8002a48:	d110      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002a50:	2180      	movs	r1, #128	; 0x80
 8002a52:	0549      	lsls	r1, r1, #21
 8002a54:	430a      	orrs	r2, r1
 8002a56:	61da      	str	r2, [r3, #28]
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	055b      	lsls	r3, r3, #21
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_RCC_OscConfig+0x338>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d11a      	bne.n	8002aae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_RCC_OscConfig+0x338>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	0049      	lsls	r1, r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7ff fa59 	bl	8001f3c <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7ff fa54 	bl	8001f3c <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e185      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_OscConfig+0x338>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x33c>
 8002ab6:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	2101      	movs	r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	621a      	str	r2, [r3, #32]
 8002ac2:	e035      	b.n	8002b30 <HAL_RCC_OscConfig+0x398>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	fffeffff 	.word	0xfffeffff
 8002acc:	fffbffff 	.word	0xfffbffff
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x35e>
 8002adc:	4bb6      	ldr	r3, [pc, #728]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	4bb5      	ldr	r3, [pc, #724]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	621a      	str	r2, [r3, #32]
 8002ae8:	4bb3      	ldr	r3, [pc, #716]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002aea:	6a1a      	ldr	r2, [r3, #32]
 8002aec:	4bb2      	ldr	r3, [pc, #712]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002aee:	2104      	movs	r1, #4
 8002af0:	438a      	bics	r2, r1
 8002af2:	621a      	str	r2, [r3, #32]
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x398>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x380>
 8002afe:	4bae      	ldr	r3, [pc, #696]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	4bad      	ldr	r3, [pc, #692]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b04:	2104      	movs	r1, #4
 8002b06:	430a      	orrs	r2, r1
 8002b08:	621a      	str	r2, [r3, #32]
 8002b0a:	4bab      	ldr	r3, [pc, #684]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b0c:	6a1a      	ldr	r2, [r3, #32]
 8002b0e:	4baa      	ldr	r3, [pc, #680]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	621a      	str	r2, [r3, #32]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x398>
 8002b18:	4ba7      	ldr	r3, [pc, #668]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	4ba6      	ldr	r3, [pc, #664]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	438a      	bics	r2, r1
 8002b22:	621a      	str	r2, [r3, #32]
 8002b24:	4ba4      	ldr	r3, [pc, #656]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b26:	6a1a      	ldr	r2, [r3, #32]
 8002b28:	4ba3      	ldr	r3, [pc, #652]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	438a      	bics	r2, r1
 8002b2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d014      	beq.n	8002b62 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b38:	f7ff fa00 	bl	8001f3c <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	e009      	b.n	8002b56 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7ff f9fb 	bl	8001f3c <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a9b      	ldr	r2, [pc, #620]	; (8002dbc <HAL_RCC_OscConfig+0x624>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e12b      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b98      	ldr	r3, [pc, #608]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3aa>
 8002b60:	e013      	b.n	8002b8a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7ff f9eb 	bl	8001f3c <HAL_GetTick>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	e009      	b.n	8002b80 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7ff f9e6 	bl	8001f3c <HAL_GetTick>
 8002b70:	0002      	movs	r2, r0
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	4a91      	ldr	r2, [pc, #580]	; (8002dbc <HAL_RCC_OscConfig+0x624>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e116      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	4b8d      	ldr	r3, [pc, #564]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	2202      	movs	r2, #2
 8002b86:	4013      	ands	r3, r2
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b8a:	231f      	movs	r3, #31
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b88      	ldr	r3, [pc, #544]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	4b87      	ldr	r3, [pc, #540]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002b9a:	4989      	ldr	r1, [pc, #548]	; (8002dc0 <HAL_RCC_OscConfig+0x628>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d12a      	bne.n	8002c08 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bb2:	4b81      	ldr	r3, [pc, #516]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	4b80      	ldr	r3, [pc, #512]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002bb8:	2104      	movs	r1, #4
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bbe:	4b7e      	ldr	r3, [pc, #504]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc2:	4b7d      	ldr	r3, [pc, #500]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7ff f9b7 	bl	8001f3c <HAL_GetTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bd4:	f7ff f9b2 	bl	8001f3c <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e0e3      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002be6:	4b74      	ldr	r3, [pc, #464]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	2202      	movs	r2, #2
 8002bec:	4013      	ands	r3, r2
 8002bee:	d0f1      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bf0:	4b71      	ldr	r3, [pc, #452]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	22f8      	movs	r2, #248	; 0xf8
 8002bf6:	4393      	bics	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	00da      	lsls	r2, r3, #3
 8002c00:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34
 8002c06:	e034      	b.n	8002c72 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	3305      	adds	r3, #5
 8002c0e:	d111      	bne.n	8002c34 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c10:	4b69      	ldr	r3, [pc, #420]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c14:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c16:	2104      	movs	r1, #4
 8002c18:	438a      	bics	r2, r1
 8002c1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c1c:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	22f8      	movs	r2, #248	; 0xf8
 8002c22:	4393      	bics	r3, r2
 8002c24:	0019      	movs	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	00da      	lsls	r2, r3, #3
 8002c2c:	4b62      	ldr	r3, [pc, #392]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34
 8002c32:	e01e      	b.n	8002c72 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c34:	4b60      	ldr	r3, [pc, #384]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c38:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c40:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c44:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	438a      	bics	r2, r1
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7ff f976 	bl	8001f3c <HAL_GetTick>
 8002c50:	0003      	movs	r3, r0
 8002c52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c56:	f7ff f971 	bl	8001f3c <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0a2      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c68:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d1f1      	bne.n	8002c56 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d100      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4e4>
 8002c7a:	e097      	b.n	8002dac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7c:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	220c      	movs	r2, #12
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_OscConfig+0x4f2>
 8002c88:	e06b      	b.n	8002d62 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d14c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b48      	ldr	r3, [pc, #288]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002c98:	494a      	ldr	r1, [pc, #296]	; (8002dc4 <HAL_RCC_OscConfig+0x62c>)
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7ff f94d 	bl	8001f3c <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7ff f948 	bl	8001f3c <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e079      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	049b      	lsls	r3, r3, #18
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc6:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	220f      	movs	r2, #15
 8002ccc:	4393      	bics	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cda:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a3a      	ldr	r2, [pc, #232]	; (8002dc8 <HAL_RCC_OscConfig+0x630>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	431a      	orrs	r2, r3
 8002cee:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0449      	lsls	r1, r1, #17
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7ff f91b 	bl	8001f3c <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7ff f916 	bl	8001f3c <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e047      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	049b      	lsls	r3, r3, #18
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x574>
 8002d2a:	e03f      	b.n	8002dac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002d32:	4924      	ldr	r1, [pc, #144]	; (8002dc4 <HAL_RCC_OscConfig+0x62c>)
 8002d34:	400a      	ands	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff f900 	bl	8001f3c <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d42:	f7ff f8fb 	bl	8001f3c <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e02c      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d54:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	049b      	lsls	r3, r3, #18
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x5aa>
 8002d60:	e024      	b.n	8002dac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e01f      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_RCC_OscConfig+0x620>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	025b      	lsls	r3, r3, #9
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d10e      	bne.n	8002da8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	401a      	ands	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	23f0      	movs	r3, #240	; 0xf0
 8002d9c:	039b      	lsls	r3, r3, #14
 8002d9e:	401a      	ands	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b008      	add	sp, #32
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	00001388 	.word	0x00001388
 8002dc0:	efffffff 	.word	0xefffffff
 8002dc4:	feffffff 	.word	0xfeffffff
 8002dc8:	ffc2ffff 	.word	0xffc2ffff

08002dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0b3      	b.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_ClockConfig+0x184>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d911      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <HAL_RCC_ClockConfig+0x184>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2201      	movs	r2, #1
 8002df4:	4393      	bics	r3, r2
 8002df6:	0019      	movs	r1, r3
 8002df8:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <HAL_RCC_ClockConfig+0x184>)
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e00:	4b53      	ldr	r3, [pc, #332]	; (8002f50 <HAL_RCC_ClockConfig+0x184>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e09a      	b.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d015      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2204      	movs	r2, #4
 8002e22:	4013      	ands	r3, r2
 8002e24:	d006      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e26:	4b4b      	ldr	r3, [pc, #300]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002e2c:	21e0      	movs	r1, #224	; 0xe0
 8002e2e:	00c9      	lsls	r1, r1, #3
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	22f0      	movs	r2, #240	; 0xf0
 8002e3a:	4393      	bics	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	4b44      	ldr	r3, [pc, #272]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d040      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b3e      	ldr	r3, [pc, #248]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	029b      	lsls	r3, r3, #10
 8002e62:	4013      	ands	r3, r2
 8002e64:	d114      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e06e      	b.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	049b      	lsls	r3, r3, #18
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e062      	b.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2202      	movs	r2, #2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e05b      	b.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e90:	4b30      	ldr	r3, [pc, #192]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	4393      	bics	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea4:	f7ff f84a 	bl	8001f3c <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eac:	e009      	b.n	8002ec2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eae:	f7ff f845 	bl	8001f3c <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <HAL_RCC_ClockConfig+0x18c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e042      	b.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	401a      	ands	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1ec      	bne.n	8002eae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_RCC_ClockConfig+0x184>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d211      	bcs.n	8002f06 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_ClockConfig+0x184>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4393      	bics	r3, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <HAL_RCC_ClockConfig+0x184>)
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <HAL_RCC_ClockConfig+0x184>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e020      	b.n	8002f48 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <HAL_RCC_ClockConfig+0x190>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f24:	f000 f820 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f28:	0001      	movs	r1, r0
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_RCC_ClockConfig+0x188>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	220f      	movs	r2, #15
 8002f32:	4013      	ands	r3, r2
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x194>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	000a      	movs	r2, r1
 8002f3a:	40da      	lsrs	r2, r3
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x198>)
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fe ffb5 	bl	8001eb0 <HAL_InitTick>
  
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40021000 	.word	0x40021000
 8002f58:	00001388 	.word	0x00001388
 8002f5c:	fffff8ff 	.word	0xfffff8ff
 8002f60:	0800627c 	.word	0x0800627c
 8002f64:	200000cc 	.word	0x200000cc

08002f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x30>
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x36>
 8002f96:	e02c      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f9a:	613b      	str	r3, [r7, #16]
      break;
 8002f9c:	e02c      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	0c9b      	lsrs	r3, r3, #18
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	4a19      	ldr	r2, [pc, #100]	; (800300c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
 8002faa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	4a16      	ldr	r2, [pc, #88]	; (8003010 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	4810      	ldr	r0, [pc, #64]	; (8003008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fc8:	f7fd f8a8 	bl	800011c <__udivsi3>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	001a      	movs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4353      	muls	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e009      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	000a      	movs	r2, r1
 8002fdc:	0152      	lsls	r2, r2, #5
 8002fde:	1a52      	subs	r2, r2, r1
 8002fe0:	0193      	lsls	r3, r2, #6
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	185b      	adds	r3, r3, r1
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	613b      	str	r3, [r7, #16]
      break;
 8002ff0:	e002      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ff4:	613b      	str	r3, [r7, #16]
      break;
 8002ff6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ff8:	693b      	ldr	r3, [r7, #16]
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b006      	add	sp, #24
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	40021000 	.word	0x40021000
 8003008:	00f42400 	.word	0x00f42400
 800300c:	08006294 	.word	0x08006294
 8003010:	080062a4 	.word	0x080062a4
 8003014:	007a1200 	.word	0x007a1200

08003018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <HAL_RCC_GetHCLKFreq+0x10>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	200000cc 	.word	0x200000cc

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003030:	f7ff fff2 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003034:	0001      	movs	r1, r0
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	2207      	movs	r2, #7
 800303e:	4013      	ands	r3, r2
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	40d9      	lsrs	r1, r3
 8003046:	000b      	movs	r3, r1
}    
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	40021000 	.word	0x40021000
 8003054:	0800628c 	.word	0x0800628c

08003058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	025b      	lsls	r3, r3, #9
 8003070:	4013      	ands	r3, r2
 8003072:	d100      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003074:	e08e      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2017      	movs	r0, #23
 8003078:	183b      	adds	r3, r7, r0
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b57      	ldr	r3, [pc, #348]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	055b      	lsls	r3, r3, #21
 8003086:	4013      	ands	r3, r2
 8003088:	d110      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b54      	ldr	r3, [pc, #336]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003090:	2180      	movs	r1, #128	; 0x80
 8003092:	0549      	lsls	r1, r1, #21
 8003094:	430a      	orrs	r2, r1
 8003096:	61da      	str	r2, [r3, #28]
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800309a:	69da      	ldr	r2, [r3, #28]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	055b      	lsls	r3, r3, #21
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4013      	ands	r3, r2
 80030b6:	d11a      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b8:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	0049      	lsls	r1, r1, #1
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7fe ff39 	bl	8001f3c <HAL_GetTick>
 80030ca:	0003      	movs	r3, r0
 80030cc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	e008      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d0:	f7fe ff34 	bl	8001f3c <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e077      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4013      	ands	r3, r2
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ee:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	23c0      	movs	r3, #192	; 0xc0
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4013      	ands	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d034      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	23c0      	movs	r3, #192	; 0xc0
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4013      	ands	r3, r2
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	429a      	cmp	r2, r3
 800310e:	d02c      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003110:	4b32      	ldr	r3, [pc, #200]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a33      	ldr	r2, [pc, #204]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800311a:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800311c:	6a1a      	ldr	r2, [r3, #32]
 800311e:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	0249      	lsls	r1, r1, #9
 8003124:	430a      	orrs	r2, r1
 8003126:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800312a:	6a1a      	ldr	r2, [r3, #32]
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800312e:	492e      	ldr	r1, [pc, #184]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003130:	400a      	ands	r2, r1
 8003132:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003134:	4b29      	ldr	r3, [pc, #164]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fe fefb 	bl	8001f3c <HAL_GetTick>
 8003146:	0003      	movs	r3, r0
 8003148:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314a:	e009      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fe fef6 	bl	8001f3c <HAL_GetTick>
 8003150:	0002      	movs	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e038      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d0f0      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003170:	4013      	ands	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800317a:	430a      	orrs	r2, r1
 800317c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800317e:	2317      	movs	r3, #23
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800318e:	4918      	ldr	r1, [pc, #96]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003190:	400a      	ands	r2, r1
 8003192:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2201      	movs	r2, #1
 800319a:	4013      	ands	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	2203      	movs	r2, #3
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031ae:	430a      	orrs	r2, r1
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2220      	movs	r2, #32
 80031b8:	4013      	ands	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2210      	movs	r2, #16
 80031c2:	4393      	bics	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031cc:	430a      	orrs	r2, r1
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b006      	add	sp, #24
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40007000 	.word	0x40007000
 80031e4:	fffffcff 	.word	0xfffffcff
 80031e8:	fffeffff 	.word	0xfffeffff
 80031ec:	00001388 	.word	0x00001388
 80031f0:	efffffff 	.word	0xefffffff

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e042      	b.n	800328c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223d      	movs	r2, #61	; 0x3d
 800320a:	5c9b      	ldrb	r3, [r3, r2]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	223c      	movs	r2, #60	; 0x3c
 8003216:	2100      	movs	r1, #0
 8003218:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f7fe fc35 	bl	8001a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223d      	movs	r2, #61	; 0x3d
 8003226:	2102      	movs	r1, #2
 8003228:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	0019      	movs	r1, r3
 8003234:	0010      	movs	r0, r2
 8003236:	f000 f9dd 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2246      	movs	r2, #70	; 0x46
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	223e      	movs	r2, #62	; 0x3e
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223f      	movs	r2, #63	; 0x3f
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2241      	movs	r2, #65	; 0x41
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2242      	movs	r2, #66	; 0x42
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2243      	movs	r2, #67	; 0x43
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2244      	movs	r2, #68	; 0x44
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2245      	movs	r2, #69	; 0x45
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	223d      	movs	r2, #61	; 0x3d
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	223d      	movs	r2, #61	; 0x3d
 80032a0:	5c9b      	ldrb	r3, [r3, r2]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d001      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e035      	b.n	8003318 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	223d      	movs	r2, #61	; 0x3d
 80032b0:	2102      	movs	r1, #2
 80032b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a15      	ldr	r2, [pc, #84]	; (8003320 <HAL_TIM_Base_Start_IT+0x8c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_TIM_Base_Start_IT+0x4e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a14      	ldr	r2, [pc, #80]	; (8003324 <HAL_TIM_Base_Start_IT+0x90>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_TIM_Base_Start_IT+0x4e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a12      	ldr	r2, [pc, #72]	; (8003328 <HAL_TIM_Base_Start_IT+0x94>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d111      	bne.n	8003306 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2207      	movs	r2, #7
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d010      	beq.n	8003316 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003304:	e007      	b.n	8003316 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40014000 	.word	0x40014000

0800332c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	438a      	bics	r2, r1
 8003342:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <HAL_TIM_Base_Stop_IT+0x54>)
 800334c:	4013      	ands	r3, r2
 800334e:	d10d      	bne.n	800336c <HAL_TIM_Base_Stop_IT+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_TIM_Base_Stop_IT+0x58>)
 8003358:	4013      	ands	r3, r2
 800335a:	d107      	bne.n	800336c <HAL_TIM_Base_Stop_IT+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2101      	movs	r1, #1
 8003368:	438a      	bics	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	223d      	movs	r2, #61	; 0x3d
 8003370:	2101      	movs	r1, #1
 8003372:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b002      	add	sp, #8
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	00001111 	.word	0x00001111
 8003384:	00000444 	.word	0x00000444

08003388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2202      	movs	r2, #2
 8003398:	4013      	ands	r3, r2
 800339a:	2b02      	cmp	r3, #2
 800339c:	d124      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2202      	movs	r2, #2
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d11d      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2203      	movs	r2, #3
 80033b2:	4252      	negs	r2, r2
 80033b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2203      	movs	r2, #3
 80033c4:	4013      	ands	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f8fa 	bl	80035c4 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e007      	b.n	80033e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 f8ed 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 f8f9 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2204      	movs	r2, #4
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d125      	bne.n	8003442 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2204      	movs	r2, #4
 80033fe:	4013      	ands	r3, r2
 8003400:	2b04      	cmp	r3, #4
 8003402:	d11e      	bne.n	8003442 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2205      	movs	r2, #5
 800340a:	4252      	negs	r2, r2
 800340c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	23c0      	movs	r3, #192	; 0xc0
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4013      	ands	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0018      	movs	r0, r3
 8003426:	f000 f8cd 	bl	80035c4 <HAL_TIM_IC_CaptureCallback>
 800342a:	e007      	b.n	800343c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	0018      	movs	r0, r3
 8003430:	f000 f8c0 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0018      	movs	r0, r3
 8003438:	f000 f8cc 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2208      	movs	r2, #8
 800344a:	4013      	ands	r3, r2
 800344c:	2b08      	cmp	r3, #8
 800344e:	d124      	bne.n	800349a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2208      	movs	r2, #8
 8003458:	4013      	ands	r3, r2
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11d      	bne.n	800349a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2209      	movs	r2, #9
 8003464:	4252      	negs	r2, r2
 8003466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2204      	movs	r2, #4
 800346c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2203      	movs	r2, #3
 8003476:	4013      	ands	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f000 f8a1 	bl	80035c4 <HAL_TIM_IC_CaptureCallback>
 8003482:	e007      	b.n	8003494 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0018      	movs	r0, r3
 8003488:	f000 f894 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f8a0 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2210      	movs	r2, #16
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d125      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2210      	movs	r2, #16
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d11e      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2211      	movs	r2, #17
 80034bc:	4252      	negs	r2, r2
 80034be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2208      	movs	r2, #8
 80034c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	23c0      	movs	r3, #192	; 0xc0
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 f874 	bl	80035c4 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e007      	b.n	80034ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f867 	bl	80035b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 f873 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2201      	movs	r2, #1
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d10f      	bne.n	8003522 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	2b01      	cmp	r3, #1
 800350e:	d108      	bne.n	8003522 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2202      	movs	r2, #2
 8003516:	4252      	negs	r2, r2
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f7fd fe8b 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	4013      	ands	r3, r2
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d10f      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	4013      	ands	r3, r2
 800353a:	2b80      	cmp	r3, #128	; 0x80
 800353c:	d108      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2281      	movs	r2, #129	; 0x81
 8003544:	4252      	negs	r2, r2
 8003546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f000 f8d0 	bl	80036f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2240      	movs	r2, #64	; 0x40
 8003558:	4013      	ands	r3, r2
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d10f      	bne.n	800357e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	4013      	ands	r3, r2
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d108      	bne.n	800357e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2241      	movs	r2, #65	; 0x41
 8003572:	4252      	negs	r2, r2
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f833 	bl	80035e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2220      	movs	r2, #32
 8003586:	4013      	ands	r3, r2
 8003588:	2b20      	cmp	r3, #32
 800358a:	d10f      	bne.n	80035ac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	4013      	ands	r3, r2
 8003596:	2b20      	cmp	r3, #32
 8003598:	d108      	bne.n	80035ac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2221      	movs	r2, #33	; 0x21
 80035a0:	4252      	negs	r2, r2
 80035a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f000 f89a 	bl	80036e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b002      	add	sp, #8
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <TIM_Base_SetConfig+0xd0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0x20>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a2e      	ldr	r2, [pc, #184]	; (80036c8 <TIM_Base_SetConfig+0xd4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d108      	bne.n	8003626 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2270      	movs	r2, #112	; 0x70
 8003618:	4393      	bics	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <TIM_Base_SetConfig+0xd0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_Base_SetConfig+0x62>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <TIM_Base_SetConfig+0xd4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_Base_SetConfig+0x62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a24      	ldr	r2, [pc, #144]	; (80036cc <TIM_Base_SetConfig+0xd8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_Base_SetConfig+0x62>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a23      	ldr	r2, [pc, #140]	; (80036d0 <TIM_Base_SetConfig+0xdc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_Base_SetConfig+0x62>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a22      	ldr	r2, [pc, #136]	; (80036d4 <TIM_Base_SetConfig+0xe0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0x62>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a21      	ldr	r2, [pc, #132]	; (80036d8 <TIM_Base_SetConfig+0xe4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a20      	ldr	r2, [pc, #128]	; (80036dc <TIM_Base_SetConfig+0xe8>)
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	4393      	bics	r3, r2
 800366e:	001a      	movs	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <TIM_Base_SetConfig+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00b      	beq.n	80036ae <TIM_Base_SetConfig+0xba>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <TIM_Base_SetConfig+0xdc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <TIM_Base_SetConfig+0xba>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <TIM_Base_SetConfig+0xe0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_Base_SetConfig+0xba>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <TIM_Base_SetConfig+0xe4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d103      	bne.n	80036b6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	615a      	str	r2, [r3, #20]
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40002000 	.word	0x40002000
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800
 80036dc:	fffffcff 	.word	0xfffffcff

080036e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e044      	b.n	800379c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2278      	movs	r2, #120	; 0x78
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0018      	movs	r0, r3
 8003726:	f7fe f9d9 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2224      	movs	r2, #36	; 0x24
 800372e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0018      	movs	r0, r3
 8003744:	f000 fb9a 	bl	8003e7c <UART_SetConfig>
 8003748:	0003      	movs	r3, r0
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e024      	b.n	800379c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fccd 	bl	80040fc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	490d      	ldr	r1, [pc, #52]	; (80037a4 <HAL_UART_Init+0xa4>)
 800376e:	400a      	ands	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2108      	movs	r1, #8
 800377e:	438a      	bics	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2101      	movs	r1, #1
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0018      	movs	r0, r3
 8003796:	f000 fd65 	bl	8004264 <UART_CheckIdleState>
 800379a:	0003      	movs	r3, r0
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	fffff7ff 	.word	0xfffff7ff

080037a8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e030      	b.n	800381c <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2224      	movs	r2, #36	; 0x24
 80037be:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	438a      	bics	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7fe fa06 	bl	8001bfc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2284      	movs	r2, #132	; 0x84
 80037f4:	2100      	movs	r1, #0
 80037f6:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	2100      	movs	r1, #0
 8003804:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2278      	movs	r2, #120	; 0x78
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	1dbb      	adds	r3, r7, #6
 8003830:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	589b      	ldr	r3, [r3, r2]
 8003838:	2b20      	cmp	r3, #32
 800383a:	d145      	bne.n	80038c8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_UART_Receive_IT+0x26>
 8003842:	1dbb      	adds	r3, r7, #6
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e03d      	b.n	80038ca <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	015b      	lsls	r3, r3, #5
 8003856:	429a      	cmp	r2, r3
 8003858:	d109      	bne.n	800386e <HAL_UART_Receive_IT+0x4a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2201      	movs	r2, #1
 8003866:	4013      	ands	r3, r2
 8003868:	d001      	beq.n	800386e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e02d      	b.n	80038ca <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	4013      	ands	r3, r2
 8003880:	d019      	beq.n	80038b6 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003882:	f3ef 8310 	mrs	r3, PRIMASK
 8003886:	613b      	str	r3, [r7, #16]
  return(result);
 8003888:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	2301      	movs	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f383 8810 	msr	PRIMASK, r3
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2180      	movs	r1, #128	; 0x80
 80038a4:	04c9      	lsls	r1, r1, #19
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038b6:	1dbb      	adds	r3, r7, #6
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 fde2 	bl	8004488 <UART_Start_Receive_IT>
 80038c4:	0003      	movs	r3, r0
 80038c6:	e000      	b.n	80038ca <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b008      	add	sp, #32
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b0ab      	sub	sp, #172	; 0xac
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	22a4      	movs	r2, #164	; 0xa4
 80038e4:	18b9      	adds	r1, r7, r2
 80038e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	20a0      	movs	r0, #160	; 0xa0
 80038f0:	1839      	adds	r1, r7, r0
 80038f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	219c      	movs	r1, #156	; 0x9c
 80038fc:	1879      	adds	r1, r7, r1
 80038fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003900:	0011      	movs	r1, r2
 8003902:	18bb      	adds	r3, r7, r2
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a99      	ldr	r2, [pc, #612]	; (8003b6c <HAL_UART_IRQHandler+0x298>)
 8003908:	4013      	ands	r3, r2
 800390a:	2298      	movs	r2, #152	; 0x98
 800390c:	18bc      	adds	r4, r7, r2
 800390e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003910:	18bb      	adds	r3, r7, r2
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d114      	bne.n	8003942 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003918:	187b      	adds	r3, r7, r1
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2220      	movs	r2, #32
 800391e:	4013      	ands	r3, r2
 8003920:	d00f      	beq.n	8003942 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003922:	183b      	adds	r3, r7, r0
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2220      	movs	r2, #32
 8003928:	4013      	ands	r3, r2
 800392a:	d00a      	beq.n	8003942 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003930:	2b00      	cmp	r3, #0
 8003932:	d100      	bne.n	8003936 <HAL_UART_IRQHandler+0x62>
 8003934:	e286      	b.n	8003e44 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	0010      	movs	r0, r2
 800393e:	4798      	blx	r3
      }
      return;
 8003940:	e280      	b.n	8003e44 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003942:	2398      	movs	r3, #152	; 0x98
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d100      	bne.n	800394e <HAL_UART_IRQHandler+0x7a>
 800394c:	e114      	b.n	8003b78 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800394e:	239c      	movs	r3, #156	; 0x9c
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	4013      	ands	r3, r2
 8003958:	d106      	bne.n	8003968 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800395a:	23a0      	movs	r3, #160	; 0xa0
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a83      	ldr	r2, [pc, #524]	; (8003b70 <HAL_UART_IRQHandler+0x29c>)
 8003962:	4013      	ands	r3, r2
 8003964:	d100      	bne.n	8003968 <HAL_UART_IRQHandler+0x94>
 8003966:	e107      	b.n	8003b78 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003968:	23a4      	movs	r3, #164	; 0xa4
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2201      	movs	r2, #1
 8003970:	4013      	ands	r3, r2
 8003972:	d012      	beq.n	800399a <HAL_UART_IRQHandler+0xc6>
 8003974:	23a0      	movs	r3, #160	; 0xa0
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4013      	ands	r3, r2
 8003980:	d00b      	beq.n	800399a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2284      	movs	r2, #132	; 0x84
 800398e:	589b      	ldr	r3, [r3, r2]
 8003990:	2201      	movs	r2, #1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2184      	movs	r1, #132	; 0x84
 8003998:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800399a:	23a4      	movs	r3, #164	; 0xa4
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2202      	movs	r2, #2
 80039a2:	4013      	ands	r3, r2
 80039a4:	d011      	beq.n	80039ca <HAL_UART_IRQHandler+0xf6>
 80039a6:	239c      	movs	r3, #156	; 0x9c
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2201      	movs	r2, #1
 80039ae:	4013      	ands	r3, r2
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2202      	movs	r2, #2
 80039b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2284      	movs	r2, #132	; 0x84
 80039be:	589b      	ldr	r3, [r3, r2]
 80039c0:	2204      	movs	r2, #4
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2184      	movs	r1, #132	; 0x84
 80039c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ca:	23a4      	movs	r3, #164	; 0xa4
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2204      	movs	r2, #4
 80039d2:	4013      	ands	r3, r2
 80039d4:	d011      	beq.n	80039fa <HAL_UART_IRQHandler+0x126>
 80039d6:	239c      	movs	r3, #156	; 0x9c
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	4013      	ands	r3, r2
 80039e0:	d00b      	beq.n	80039fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2204      	movs	r2, #4
 80039e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2284      	movs	r2, #132	; 0x84
 80039ee:	589b      	ldr	r3, [r3, r2]
 80039f0:	2202      	movs	r2, #2
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2184      	movs	r1, #132	; 0x84
 80039f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039fa:	23a4      	movs	r3, #164	; 0xa4
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2208      	movs	r2, #8
 8003a02:	4013      	ands	r3, r2
 8003a04:	d017      	beq.n	8003a36 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a06:	23a0      	movs	r3, #160	; 0xa0
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d105      	bne.n	8003a1e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a12:	239c      	movs	r3, #156	; 0x9c
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a1c:	d00b      	beq.n	8003a36 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2208      	movs	r2, #8
 8003a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2284      	movs	r2, #132	; 0x84
 8003a2a:	589b      	ldr	r3, [r3, r2]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2184      	movs	r1, #132	; 0x84
 8003a34:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a36:	23a4      	movs	r3, #164	; 0xa4
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	4013      	ands	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_UART_IRQHandler+0x198>
 8003a44:	23a0      	movs	r3, #160	; 0xa0
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	04db      	lsls	r3, r3, #19
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d00c      	beq.n	8003a6c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2280      	movs	r2, #128	; 0x80
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2284      	movs	r2, #132	; 0x84
 8003a60:	589b      	ldr	r3, [r3, r2]
 8003a62:	2220      	movs	r2, #32
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2184      	movs	r1, #132	; 0x84
 8003a6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2284      	movs	r2, #132	; 0x84
 8003a70:	589b      	ldr	r3, [r3, r2]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d100      	bne.n	8003a78 <HAL_UART_IRQHandler+0x1a4>
 8003a76:	e1e7      	b.n	8003e48 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a78:	23a4      	movs	r3, #164	; 0xa4
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	4013      	ands	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a84:	23a0      	movs	r3, #160	; 0xa0
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d008      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	0010      	movs	r0, r2
 8003aa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2284      	movs	r2, #132	; 0x84
 8003aa6:	589b      	ldr	r3, [r3, r2]
 8003aa8:	2194      	movs	r1, #148	; 0x94
 8003aaa:	187a      	adds	r2, r7, r1
 8003aac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2240      	movs	r2, #64	; 0x40
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d004      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2228      	movs	r2, #40	; 0x28
 8003ac2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ac4:	d047      	beq.n	8003b56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fd93 	bl	80045f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2240      	movs	r2, #64	; 0x40
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	d137      	bne.n	8003b4c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003adc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae4:	2090      	movs	r0, #144	; 0x90
 8003ae6:	183a      	adds	r2, r7, r0
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	2301      	movs	r3, #1
 8003aec:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2140      	movs	r1, #64	; 0x40
 8003b02:	438a      	bics	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d012      	beq.n	8003b42 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <HAL_UART_IRQHandler+0x2a0>)
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7fe fb59 	bl	80021e0 <HAL_DMA_Abort_IT>
 8003b2e:	1e03      	subs	r3, r0, #0
 8003b30:	d01a      	beq.n	8003b68 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e012      	b.n	8003b68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7fd fd65 	bl	8001614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4a:	e00d      	b.n	8003b68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7fd fd60 	bl	8001614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	e008      	b.n	8003b68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fd fd5b 	bl	8001614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2284      	movs	r2, #132	; 0x84
 8003b62:	2100      	movs	r1, #0
 8003b64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b66:	e16f      	b.n	8003e48 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	46c0      	nop			; (mov r8, r8)
    return;
 8003b6a:	e16d      	b.n	8003e48 <HAL_UART_IRQHandler+0x574>
 8003b6c:	0000080f 	.word	0x0000080f
 8003b70:	04000120 	.word	0x04000120
 8003b74:	080046bd 	.word	0x080046bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d000      	beq.n	8003b82 <HAL_UART_IRQHandler+0x2ae>
 8003b80:	e139      	b.n	8003df6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b82:	23a4      	movs	r3, #164	; 0xa4
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d100      	bne.n	8003b90 <HAL_UART_IRQHandler+0x2bc>
 8003b8e:	e132      	b.n	8003df6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b90:	23a0      	movs	r3, #160	; 0xa0
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2210      	movs	r2, #16
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <HAL_UART_IRQHandler+0x2ca>
 8003b9c:	e12b      	b.n	8003df6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2240      	movs	r2, #64	; 0x40
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d000      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x2e2>
 8003bb4:	e09f      	b.n	8003cf6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	217e      	movs	r1, #126	; 0x7e
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d100      	bne.n	8003bce <HAL_UART_IRQHandler+0x2fa>
 8003bcc:	e13e      	b.n	8003e4c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2258      	movs	r2, #88	; 0x58
 8003bd2:	5a9b      	ldrh	r3, [r3, r2]
 8003bd4:	187a      	adds	r2, r7, r1
 8003bd6:	8812      	ldrh	r2, [r2, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d300      	bcc.n	8003bde <HAL_UART_IRQHandler+0x30a>
 8003bdc:	e136      	b.n	8003e4c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	187a      	adds	r2, r7, r1
 8003be2:	215a      	movs	r1, #90	; 0x5a
 8003be4:	8812      	ldrh	r2, [r2, #0]
 8003be6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d06f      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c02:	f383 8810 	msr	PRIMASK, r3
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4992      	ldr	r1, [pc, #584]	; (8003e5c <HAL_UART_IRQHandler+0x588>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1e:	f383 8810 	msr	PRIMASK, r3
}
 8003c22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8310 	mrs	r3, PRIMASK
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8003c2e:	2301      	movs	r3, #1
 8003c30:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	438a      	bics	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c50:	f383 8810 	msr	PRIMASK, r3
}
 8003c54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c56:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c60:	2301      	movs	r3, #1
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2140      	movs	r1, #64	; 0x40
 8003c78:	438a      	bics	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c82:	f383 8810 	msr	PRIMASK, r3
}
 8003c86:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c96:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2110      	movs	r1, #16
 8003cb8:	438a      	bics	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc2:	f383 8810 	msr	PRIMASK, r3
}
 8003cc6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7fe fa4f 	bl	8002170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2258      	movs	r2, #88	; 0x58
 8003cdc:	5a9a      	ldrh	r2, [r3, r2]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	215a      	movs	r1, #90	; 0x5a
 8003ce2:	5a5b      	ldrh	r3, [r3, r1]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0011      	movs	r1, r2
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 f8b8 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cf4:	e0aa      	b.n	8003e4c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2258      	movs	r2, #88	; 0x58
 8003cfa:	5a99      	ldrh	r1, [r3, r2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	225a      	movs	r2, #90	; 0x5a
 8003d00:	5a9b      	ldrh	r3, [r3, r2]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	208e      	movs	r0, #142	; 0x8e
 8003d06:	183b      	adds	r3, r7, r0
 8003d08:	1a8a      	subs	r2, r1, r2
 8003d0a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	225a      	movs	r2, #90	; 0x5a
 8003d10:	5a9b      	ldrh	r3, [r3, r2]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d100      	bne.n	8003d1a <HAL_UART_IRQHandler+0x446>
 8003d18:	e09a      	b.n	8003e50 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8003d1a:	183b      	adds	r3, r7, r0
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d100      	bne.n	8003d24 <HAL_UART_IRQHandler+0x450>
 8003d22:	e095      	b.n	8003e50 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d24:	f3ef 8310 	mrs	r3, PRIMASK
 8003d28:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2c:	2488      	movs	r4, #136	; 0x88
 8003d2e:	193a      	adds	r2, r7, r4
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	2301      	movs	r3, #1
 8003d34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f383 8810 	msr	PRIMASK, r3
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4945      	ldr	r1, [pc, #276]	; (8003e60 <HAL_UART_IRQHandler+0x58c>)
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	193b      	adds	r3, r7, r4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d60:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d62:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	2484      	movs	r4, #132	; 0x84
 8003d66:	193a      	adds	r2, r7, r4
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f383 8810 	msr	PRIMASK, r3
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2101      	movs	r1, #1
 8003d82:	438a      	bics	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	2120      	movs	r1, #32
 8003d9a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	2480      	movs	r4, #128	; 0x80
 8003db2:	193a      	adds	r2, r7, r4
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	2301      	movs	r3, #1
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	f383 8810 	msr	PRIMASK, r3
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2110      	movs	r1, #16
 8003dce:	438a      	bics	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	193b      	adds	r3, r7, r4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0011      	movs	r1, r2
 8003dee:	0018      	movs	r0, r3
 8003df0:	f000 f838 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003df4:	e02c      	b.n	8003e50 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003df6:	23a4      	movs	r3, #164	; 0xa4
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2280      	movs	r2, #128	; 0x80
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d00f      	beq.n	8003e22 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e02:	23a0      	movs	r3, #160	; 0xa0
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2280      	movs	r2, #128	; 0x80
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01e      	beq.n	8003e54 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	0010      	movs	r0, r2
 8003e1e:	4798      	blx	r3
    }
    return;
 8003e20:	e018      	b.n	8003e54 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e22:	23a4      	movs	r3, #164	; 0xa4
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_UART_IRQHandler+0x582>
 8003e2e:	23a0      	movs	r3, #160	; 0xa0
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2240      	movs	r2, #64	; 0x40
 8003e36:	4013      	ands	r3, r2
 8003e38:	d00d      	beq.n	8003e56 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f000 fc54 	bl	80046ea <UART_EndTransmit_IT>
    return;
 8003e42:	e008      	b.n	8003e56 <HAL_UART_IRQHandler+0x582>
      return;
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	e006      	b.n	8003e56 <HAL_UART_IRQHandler+0x582>
    return;
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	e004      	b.n	8003e56 <HAL_UART_IRQHandler+0x582>
      return;
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	e002      	b.n	8003e56 <HAL_UART_IRQHandler+0x582>
      return;
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	e000      	b.n	8003e56 <HAL_UART_IRQHandler+0x582>
    return;
 8003e54:	46c0      	nop			; (mov r8, r8)
  }

}
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b02b      	add	sp, #172	; 0xac
 8003e5a:	bd90      	pop	{r4, r7, pc}
 8003e5c:	fffffeff 	.word	0xfffffeff
 8003e60:	fffffedf 	.word	0xfffffedf

08003e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	000a      	movs	r2, r1
 8003e6e:	1cbb      	adds	r3, r7, #2
 8003e70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b002      	add	sp, #8
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e84:	231e      	movs	r3, #30
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a8d      	ldr	r2, [pc, #564]	; (80040e0 <UART_SetConfig+0x264>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a88      	ldr	r2, [pc, #544]	; (80040e4 <UART_SetConfig+0x268>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a7f      	ldr	r2, [pc, #508]	; (80040e8 <UART_SetConfig+0x26c>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a7b      	ldr	r2, [pc, #492]	; (80040ec <UART_SetConfig+0x270>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d127      	bne.n	8003f52 <UART_SetConfig+0xd6>
 8003f02:	4b7b      	ldr	r3, [pc, #492]	; (80040f0 <UART_SetConfig+0x274>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	2203      	movs	r2, #3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d00d      	beq.n	8003f2a <UART_SetConfig+0xae>
 8003f0e:	d81b      	bhi.n	8003f48 <UART_SetConfig+0xcc>
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d014      	beq.n	8003f3e <UART_SetConfig+0xc2>
 8003f14:	d818      	bhi.n	8003f48 <UART_SetConfig+0xcc>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <UART_SetConfig+0xa4>
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d00a      	beq.n	8003f34 <UART_SetConfig+0xb8>
 8003f1e:	e013      	b.n	8003f48 <UART_SetConfig+0xcc>
 8003f20:	231f      	movs	r3, #31
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e021      	b.n	8003f6e <UART_SetConfig+0xf2>
 8003f2a:	231f      	movs	r3, #31
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2202      	movs	r2, #2
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	e01c      	b.n	8003f6e <UART_SetConfig+0xf2>
 8003f34:	231f      	movs	r3, #31
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2204      	movs	r2, #4
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e017      	b.n	8003f6e <UART_SetConfig+0xf2>
 8003f3e:	231f      	movs	r3, #31
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	2208      	movs	r2, #8
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e012      	b.n	8003f6e <UART_SetConfig+0xf2>
 8003f48:	231f      	movs	r3, #31
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e00d      	b.n	8003f6e <UART_SetConfig+0xf2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a67      	ldr	r2, [pc, #412]	; (80040f4 <UART_SetConfig+0x278>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d104      	bne.n	8003f66 <UART_SetConfig+0xea>
 8003f5c:	231f      	movs	r3, #31
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e003      	b.n	8003f6e <UART_SetConfig+0xf2>
 8003f66:	231f      	movs	r3, #31
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d15c      	bne.n	8004034 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003f7a:	231f      	movs	r3, #31
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d015      	beq.n	8003fb0 <UART_SetConfig+0x134>
 8003f84:	dc18      	bgt.n	8003fb8 <UART_SetConfig+0x13c>
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d00d      	beq.n	8003fa6 <UART_SetConfig+0x12a>
 8003f8a:	dc15      	bgt.n	8003fb8 <UART_SetConfig+0x13c>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <UART_SetConfig+0x11a>
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d005      	beq.n	8003fa0 <UART_SetConfig+0x124>
 8003f94:	e010      	b.n	8003fb8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f96:	f7ff f849 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	61bb      	str	r3, [r7, #24]
        break;
 8003f9e:	e012      	b.n	8003fc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa0:	4b55      	ldr	r3, [pc, #340]	; (80040f8 <UART_SetConfig+0x27c>)
 8003fa2:	61bb      	str	r3, [r7, #24]
        break;
 8003fa4:	e00f      	b.n	8003fc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa6:	f7fe ffdf 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8003faa:	0003      	movs	r3, r0
 8003fac:	61bb      	str	r3, [r7, #24]
        break;
 8003fae:	e00a      	b.n	8003fc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	61bb      	str	r3, [r7, #24]
        break;
 8003fb6:	e006      	b.n	8003fc6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fbc:	231e      	movs	r3, #30
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
        break;
 8003fc4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d100      	bne.n	8003fce <UART_SetConfig+0x152>
 8003fcc:	e07a      	b.n	80040c4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	005a      	lsls	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	18d2      	adds	r2, r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	0019      	movs	r1, r3
 8003fe0:	0010      	movs	r0, r2
 8003fe2:	f7fc f89b 	bl	800011c <__udivsi3>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d91c      	bls.n	800402a <UART_SetConfig+0x1ae>
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	025b      	lsls	r3, r3, #9
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d217      	bcs.n	800402a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	200e      	movs	r0, #14
 8004000:	183b      	adds	r3, r7, r0
 8004002:	210f      	movs	r1, #15
 8004004:	438a      	bics	r2, r1
 8004006:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	b29b      	uxth	r3, r3
 800400e:	2207      	movs	r2, #7
 8004010:	4013      	ands	r3, r2
 8004012:	b299      	uxth	r1, r3
 8004014:	183b      	adds	r3, r7, r0
 8004016:	183a      	adds	r2, r7, r0
 8004018:	8812      	ldrh	r2, [r2, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	183a      	adds	r2, r7, r0
 8004024:	8812      	ldrh	r2, [r2, #0]
 8004026:	60da      	str	r2, [r3, #12]
 8004028:	e04c      	b.n	80040c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800402a:	231e      	movs	r3, #30
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e047      	b.n	80040c4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004034:	231f      	movs	r3, #31
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b08      	cmp	r3, #8
 800403c:	d015      	beq.n	800406a <UART_SetConfig+0x1ee>
 800403e:	dc18      	bgt.n	8004072 <UART_SetConfig+0x1f6>
 8004040:	2b04      	cmp	r3, #4
 8004042:	d00d      	beq.n	8004060 <UART_SetConfig+0x1e4>
 8004044:	dc15      	bgt.n	8004072 <UART_SetConfig+0x1f6>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <UART_SetConfig+0x1d4>
 800404a:	2b02      	cmp	r3, #2
 800404c:	d005      	beq.n	800405a <UART_SetConfig+0x1de>
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe ffec 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8004054:	0003      	movs	r3, r0
 8004056:	61bb      	str	r3, [r7, #24]
        break;
 8004058:	e012      	b.n	8004080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <UART_SetConfig+0x27c>)
 800405c:	61bb      	str	r3, [r7, #24]
        break;
 800405e:	e00f      	b.n	8004080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004060:	f7fe ff82 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004064:	0003      	movs	r3, r0
 8004066:	61bb      	str	r3, [r7, #24]
        break;
 8004068:	e00a      	b.n	8004080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	61bb      	str	r3, [r7, #24]
        break;
 8004070:	e006      	b.n	8004080 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004076:	231e      	movs	r3, #30
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
        break;
 800407e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01e      	beq.n	80040c4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085a      	lsrs	r2, r3, #1
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	18d2      	adds	r2, r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	0019      	movs	r1, r3
 8004096:	0010      	movs	r0, r2
 8004098:	f7fc f840 	bl	800011c <__udivsi3>
 800409c:	0003      	movs	r3, r0
 800409e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	d90a      	bls.n	80040bc <UART_SetConfig+0x240>
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	025b      	lsls	r3, r3, #9
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d205      	bcs.n	80040bc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e003      	b.n	80040c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80040bc:	231e      	movs	r3, #30
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040d0:	231e      	movs	r3, #30
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	781b      	ldrb	r3, [r3, #0]
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	b008      	add	sp, #32
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	ffff69f3 	.word	0xffff69f3
 80040e4:	ffffcfff 	.word	0xffffcfff
 80040e8:	fffff4ff 	.word	0xfffff4ff
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40004400 	.word	0x40004400
 80040f8:	007a1200 	.word	0x007a1200

080040fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2201      	movs	r2, #1
 800410a:	4013      	ands	r3, r2
 800410c:	d00b      	beq.n	8004126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4a4a      	ldr	r2, [pc, #296]	; (8004240 <UART_AdvFeatureConfig+0x144>)
 8004116:	4013      	ands	r3, r2
 8004118:	0019      	movs	r1, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	2202      	movs	r2, #2
 800412c:	4013      	ands	r3, r2
 800412e:	d00b      	beq.n	8004148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4a43      	ldr	r2, [pc, #268]	; (8004244 <UART_AdvFeatureConfig+0x148>)
 8004138:	4013      	ands	r3, r2
 800413a:	0019      	movs	r1, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2204      	movs	r2, #4
 800414e:	4013      	ands	r3, r2
 8004150:	d00b      	beq.n	800416a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <UART_AdvFeatureConfig+0x14c>)
 800415a:	4013      	ands	r3, r2
 800415c:	0019      	movs	r1, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2208      	movs	r2, #8
 8004170:	4013      	ands	r3, r2
 8004172:	d00b      	beq.n	800418c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4a34      	ldr	r2, [pc, #208]	; (800424c <UART_AdvFeatureConfig+0x150>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2210      	movs	r2, #16
 8004192:	4013      	ands	r3, r2
 8004194:	d00b      	beq.n	80041ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <UART_AdvFeatureConfig+0x154>)
 800419e:	4013      	ands	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2220      	movs	r2, #32
 80041b4:	4013      	ands	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	4a25      	ldr	r2, [pc, #148]	; (8004254 <UART_AdvFeatureConfig+0x158>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	0019      	movs	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	2240      	movs	r2, #64	; 0x40
 80041d6:	4013      	ands	r3, r2
 80041d8:	d01d      	beq.n	8004216 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <UART_AdvFeatureConfig+0x15c>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	0019      	movs	r1, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	035b      	lsls	r3, r3, #13
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d10b      	bne.n	8004216 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a15      	ldr	r2, [pc, #84]	; (800425c <UART_AdvFeatureConfig+0x160>)
 8004206:	4013      	ands	r3, r2
 8004208:	0019      	movs	r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2280      	movs	r2, #128	; 0x80
 800421c:	4013      	ands	r3, r2
 800421e:	d00b      	beq.n	8004238 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <UART_AdvFeatureConfig+0x164>)
 8004228:	4013      	ands	r3, r2
 800422a:	0019      	movs	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  }
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b002      	add	sp, #8
 800423e:	bd80      	pop	{r7, pc}
 8004240:	fffdffff 	.word	0xfffdffff
 8004244:	fffeffff 	.word	0xfffeffff
 8004248:	fffbffff 	.word	0xfffbffff
 800424c:	ffff7fff 	.word	0xffff7fff
 8004250:	ffffefff 	.word	0xffffefff
 8004254:	ffffdfff 	.word	0xffffdfff
 8004258:	ffefffff 	.word	0xffefffff
 800425c:	ff9fffff 	.word	0xff9fffff
 8004260:	fff7ffff 	.word	0xfff7ffff

08004264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b092      	sub	sp, #72	; 0x48
 8004268:	af02      	add	r7, sp, #8
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2284      	movs	r2, #132	; 0x84
 8004270:	2100      	movs	r1, #0
 8004272:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004274:	f7fd fe62 	bl	8001f3c <HAL_GetTick>
 8004278:	0003      	movs	r3, r0
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2208      	movs	r2, #8
 8004284:	4013      	ands	r3, r2
 8004286:	2b08      	cmp	r3, #8
 8004288:	d12c      	bne.n	80042e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	0391      	lsls	r1, r2, #14
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4a46      	ldr	r2, [pc, #280]	; (80043ac <UART_CheckIdleState+0x148>)
 8004294:	9200      	str	r2, [sp, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	f000 f88c 	bl	80043b4 <UART_WaitOnFlagUntilTimeout>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d021      	beq.n	80042e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a0:	f3ef 8310 	mrs	r3, PRIMASK
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80042aa:	2301      	movs	r3, #1
 80042ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	f383 8810 	msr	PRIMASK, r3
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	438a      	bics	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	f383 8810 	msr	PRIMASK, r3
}
 80042d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2278      	movs	r2, #120	; 0x78
 80042dc:	2100      	movs	r1, #0
 80042de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e05f      	b.n	80043a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2204      	movs	r2, #4
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d146      	bne.n	8004380 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f4:	2280      	movs	r2, #128	; 0x80
 80042f6:	03d1      	lsls	r1, r2, #15
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4a2c      	ldr	r2, [pc, #176]	; (80043ac <UART_CheckIdleState+0x148>)
 80042fc:	9200      	str	r2, [sp, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	f000 f858 	bl	80043b4 <UART_WaitOnFlagUntilTimeout>
 8004304:	1e03      	subs	r3, r0, #0
 8004306:	d03b      	beq.n	8004380 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004308:	f3ef 8310 	mrs	r3, PRIMASK
 800430c:	60fb      	str	r3, [r7, #12]
  return(result);
 800430e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
 8004312:	2301      	movs	r3, #1
 8004314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f383 8810 	msr	PRIMASK, r3
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4921      	ldr	r1, [pc, #132]	; (80043b0 <UART_CheckIdleState+0x14c>)
 800432a:	400a      	ands	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004330:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433a:	f3ef 8310 	mrs	r3, PRIMASK
 800433e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004340:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	633b      	str	r3, [r7, #48]	; 0x30
 8004344:	2301      	movs	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f383 8810 	msr	PRIMASK, r3
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2101      	movs	r1, #1
 800435c:	438a      	bics	r2, r1
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	2120      	movs	r1, #32
 8004372:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2278      	movs	r2, #120	; 0x78
 8004378:	2100      	movs	r1, #0
 800437a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e011      	b.n	80043a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	2120      	movs	r1, #32
 800438c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2278      	movs	r2, #120	; 0x78
 800439e:	2100      	movs	r1, #0
 80043a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b010      	add	sp, #64	; 0x40
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	01ffffff 	.word	0x01ffffff
 80043b0:	fffffedf 	.word	0xfffffedf

080043b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	1dfb      	adds	r3, r7, #7
 80043c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c4:	e04b      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	3301      	adds	r3, #1
 80043ca:	d048      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043cc:	f7fd fdb6 	bl	8001f3c <HAL_GetTick>
 80043d0:	0002      	movs	r2, r0
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e04b      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2204      	movs	r2, #4
 80043ee:	4013      	ands	r3, r2
 80043f0:	d035      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2208      	movs	r2, #8
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d111      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2208      	movs	r2, #8
 8004406:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	0018      	movs	r0, r3
 800440c:	f000 f8f2 	bl	80045f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2284      	movs	r2, #132	; 0x84
 8004414:	2108      	movs	r1, #8
 8004416:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2278      	movs	r2, #120	; 0x78
 800441c:	2100      	movs	r1, #0
 800441e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e02c      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	401a      	ands	r2, r3
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	429a      	cmp	r2, r3
 8004436:	d112      	bne.n	800445e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	0112      	lsls	r2, r2, #4
 8004440:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	0018      	movs	r0, r3
 8004446:	f000 f8d5 	bl	80045f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2284      	movs	r2, #132	; 0x84
 800444e:	2120      	movs	r1, #32
 8004450:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2278      	movs	r2, #120	; 0x78
 8004456:	2100      	movs	r1, #0
 8004458:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e00f      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	425a      	negs	r2, r3
 800446e:	4153      	adcs	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	001a      	movs	r2, r3
 8004474:	1dfb      	adds	r3, r7, #7
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d0a4      	beq.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b004      	add	sp, #16
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b090      	sub	sp, #64	; 0x40
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	1dbb      	adds	r3, r7, #6
 8004494:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1dba      	adds	r2, r7, #6
 80044a0:	2158      	movs	r1, #88	; 0x58
 80044a2:	8812      	ldrh	r2, [r2, #0]
 80044a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1dba      	adds	r2, r7, #6
 80044aa:	215a      	movs	r1, #90	; 0x5a
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	015b      	lsls	r3, r3, #5
 80044be:	429a      	cmp	r2, r3
 80044c0:	d10d      	bne.n	80044de <UART_Start_Receive_IT+0x56>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d104      	bne.n	80044d4 <UART_Start_Receive_IT+0x4c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	225c      	movs	r2, #92	; 0x5c
 80044ce:	4946      	ldr	r1, [pc, #280]	; (80045e8 <UART_Start_Receive_IT+0x160>)
 80044d0:	5299      	strh	r1, [r3, r2]
 80044d2:	e01a      	b.n	800450a <UART_Start_Receive_IT+0x82>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	225c      	movs	r2, #92	; 0x5c
 80044d8:	21ff      	movs	r1, #255	; 0xff
 80044da:	5299      	strh	r1, [r3, r2]
 80044dc:	e015      	b.n	800450a <UART_Start_Receive_IT+0x82>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <UART_Start_Receive_IT+0x7a>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <UART_Start_Receive_IT+0x70>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	225c      	movs	r2, #92	; 0x5c
 80044f2:	21ff      	movs	r1, #255	; 0xff
 80044f4:	5299      	strh	r1, [r3, r2]
 80044f6:	e008      	b.n	800450a <UART_Start_Receive_IT+0x82>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	225c      	movs	r2, #92	; 0x5c
 80044fc:	217f      	movs	r1, #127	; 0x7f
 80044fe:	5299      	strh	r1, [r3, r2]
 8004500:	e003      	b.n	800450a <UART_Start_Receive_IT+0x82>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	225c      	movs	r2, #92	; 0x5c
 8004506:	2100      	movs	r1, #0
 8004508:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2284      	movs	r2, #132	; 0x84
 800450e:	2100      	movs	r1, #0
 8004510:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2280      	movs	r2, #128	; 0x80
 8004516:	2122      	movs	r1, #34	; 0x22
 8004518:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451a:	f3ef 8310 	mrs	r3, PRIMASK
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004524:	2301      	movs	r3, #1
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	f383 8810 	msr	PRIMASK, r3
}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2101      	movs	r1, #1
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	015b      	lsls	r3, r3, #5
 8004554:	429a      	cmp	r2, r3
 8004556:	d107      	bne.n	8004568 <UART_Start_Receive_IT+0xe0>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a22      	ldr	r2, [pc, #136]	; (80045ec <UART_Start_Receive_IT+0x164>)
 8004564:	669a      	str	r2, [r3, #104]	; 0x68
 8004566:	e002      	b.n	800456e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <UART_Start_Receive_IT+0x168>)
 800456c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d019      	beq.n	80045aa <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004576:	f3ef 8310 	mrs	r3, PRIMASK
 800457a:	61fb      	str	r3, [r7, #28]
  return(result);
 800457c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
 8004580:	2301      	movs	r3, #1
 8004582:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	f383 8810 	msr	PRIMASK, r3
}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2190      	movs	r1, #144	; 0x90
 8004598:	0049      	lsls	r1, r1, #1
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	f383 8810 	msr	PRIMASK, r3
}
 80045a8:	e018      	b.n	80045dc <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045aa:	f3ef 8310 	mrs	r3, PRIMASK
 80045ae:	613b      	str	r3, [r7, #16]
  return(result);
 80045b0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b4:	2301      	movs	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f383 8810 	msr	PRIMASK, r3
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2120      	movs	r1, #32
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f383 8810 	msr	PRIMASK, r3
}
 80045da:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	0018      	movs	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b010      	add	sp, #64	; 0x40
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	000001ff 	.word	0x000001ff
 80045ec:	080048f9 	.word	0x080048f9
 80045f0:	08004741 	.word	0x08004741

080045f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08e      	sub	sp, #56	; 0x38
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004600:	617b      	str	r3, [r7, #20]
  return(result);
 8004602:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
 8004606:	2301      	movs	r3, #1
 8004608:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f383 8810 	msr	PRIMASK, r3
}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4926      	ldr	r1, [pc, #152]	; (80046b8 <UART_EndRxTransfer+0xc4>)
 800461e:	400a      	ands	r2, r1
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462e:	f3ef 8310 	mrs	r3, PRIMASK
 8004632:	623b      	str	r3, [r7, #32]
  return(result);
 8004634:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
 8004638:	2301      	movs	r3, #1
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	f383 8810 	msr	PRIMASK, r3
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2101      	movs	r1, #1
 8004650:	438a      	bics	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	f383 8810 	msr	PRIMASK, r3
}
 800465e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004664:	2b01      	cmp	r3, #1
 8004666:	d118      	bne.n	800469a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004668:	f3ef 8310 	mrs	r3, PRIMASK
 800466c:	60bb      	str	r3, [r7, #8]
  return(result);
 800466e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004672:	2301      	movs	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f383 8810 	msr	PRIMASK, r3
}
 800467c:	46c0      	nop			; (mov r8, r8)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2110      	movs	r1, #16
 800468a:	438a      	bics	r2, r1
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f383 8810 	msr	PRIMASK, r3
}
 8004698:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2280      	movs	r2, #128	; 0x80
 800469e:	2120      	movs	r1, #32
 80046a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b00e      	add	sp, #56	; 0x38
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	fffffedf 	.word	0xfffffedf

080046bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	225a      	movs	r2, #90	; 0x5a
 80046ce:	2100      	movs	r1, #0
 80046d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2252      	movs	r2, #82	; 0x52
 80046d6:	2100      	movs	r1, #0
 80046d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7fc ff99 	bl	8001614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}

080046ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b086      	sub	sp, #24
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f2:	f3ef 8310 	mrs	r3, PRIMASK
 80046f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80046f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	2301      	movs	r3, #1
 80046fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f383 8810 	msr	PRIMASK, r3
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2140      	movs	r1, #64	; 0x40
 8004714:	438a      	bics	r2, r1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f7fc fe4e 	bl	80013d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	46bd      	mov	sp, r7
 800473c:	b006      	add	sp, #24
 800473e:	bd80      	pop	{r7, pc}

08004740 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b094      	sub	sp, #80	; 0x50
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004748:	204e      	movs	r0, #78	; 0x4e
 800474a:	183b      	adds	r3, r7, r0
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	215c      	movs	r1, #92	; 0x5c
 8004750:	5a52      	ldrh	r2, [r2, r1]
 8004752:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	589b      	ldr	r3, [r3, r2]
 800475a:	2b22      	cmp	r3, #34	; 0x22
 800475c:	d000      	beq.n	8004760 <UART_RxISR_8BIT+0x20>
 800475e:	e0ba      	b.n	80048d6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	214c      	movs	r1, #76	; 0x4c
 8004766:	187b      	adds	r3, r7, r1
 8004768:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800476a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800476c:	187b      	adds	r3, r7, r1
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	183b      	adds	r3, r7, r0
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b2d9      	uxtb	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	400a      	ands	r2, r1
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	225a      	movs	r2, #90	; 0x5a
 8004790:	5a9b      	ldrh	r3, [r3, r2]
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b299      	uxth	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	225a      	movs	r2, #90	; 0x5a
 800479c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	225a      	movs	r2, #90	; 0x5a
 80047a2:	5a9b      	ldrh	r3, [r3, r2]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d000      	beq.n	80047ac <UART_RxISR_8BIT+0x6c>
 80047aa:	e09c      	b.n	80048e6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ac:	f3ef 8310 	mrs	r3, PRIMASK
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b6:	2301      	movs	r3, #1
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	f383 8810 	msr	PRIMASK, r3
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4948      	ldr	r1, [pc, #288]	; (80048f0 <UART_RxISR_8BIT+0x1b0>)
 80047ce:	400a      	ands	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	f383 8810 	msr	PRIMASK, r3
}
 80047dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047de:	f3ef 8310 	mrs	r3, PRIMASK
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	647b      	str	r3, [r7, #68]	; 0x44
 80047e8:	2301      	movs	r3, #1
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	f383 8810 	msr	PRIMASK, r3
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2101      	movs	r1, #1
 8004800:	438a      	bics	r2, r1
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004806:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	f383 8810 	msr	PRIMASK, r3
}
 800480e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2280      	movs	r2, #128	; 0x80
 8004814:	2120      	movs	r1, #32
 8004816:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	4013      	ands	r3, r2
 8004830:	d018      	beq.n	8004864 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	61bb      	str	r3, [r7, #24]
  return(result);
 8004838:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
 800483c:	2301      	movs	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4928      	ldr	r1, [pc, #160]	; (80048f4 <UART_RxISR_8BIT+0x1b4>)
 8004854:	400a      	ands	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	2b01      	cmp	r3, #1
 800486a:	d12f      	bne.n	80048cc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004872:	f3ef 8310 	mrs	r3, PRIMASK
 8004876:	60fb      	str	r3, [r7, #12]
  return(result);
 8004878:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487c:	2301      	movs	r3, #1
 800487e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f383 8810 	msr	PRIMASK, r3
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2110      	movs	r1, #16
 8004894:	438a      	bics	r2, r1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f383 8810 	msr	PRIMASK, r3
}
 80048a2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	2210      	movs	r2, #16
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d103      	bne.n	80048ba <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2210      	movs	r2, #16
 80048b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2258      	movs	r2, #88	; 0x58
 80048be:	5a9a      	ldrh	r2, [r3, r2]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff facd 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048ca:	e00c      	b.n	80048e6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f7fc fdae 	bl	8001430 <HAL_UART_RxCpltCallback>
}
 80048d4:	e007      	b.n	80048e6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2108      	movs	r1, #8
 80048e2:	430a      	orrs	r2, r1
 80048e4:	619a      	str	r2, [r3, #24]
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b014      	add	sp, #80	; 0x50
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	fffffedf 	.word	0xfffffedf
 80048f4:	fbffffff 	.word	0xfbffffff

080048f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b094      	sub	sp, #80	; 0x50
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004900:	204e      	movs	r0, #78	; 0x4e
 8004902:	183b      	adds	r3, r7, r0
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	215c      	movs	r1, #92	; 0x5c
 8004908:	5a52      	ldrh	r2, [r2, r1]
 800490a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	589b      	ldr	r3, [r3, r2]
 8004912:	2b22      	cmp	r3, #34	; 0x22
 8004914:	d000      	beq.n	8004918 <UART_RxISR_16BIT+0x20>
 8004916:	e0ba      	b.n	8004a8e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	214c      	movs	r1, #76	; 0x4c
 800491e:	187b      	adds	r3, r7, r1
 8004920:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004922:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800492a:	187b      	adds	r3, r7, r1
 800492c:	183a      	adds	r2, r7, r0
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	8812      	ldrh	r2, [r2, #0]
 8004932:	4013      	ands	r3, r2
 8004934:	b29a      	uxth	r2, r3
 8004936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004938:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	1c9a      	adds	r2, r3, #2
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	225a      	movs	r2, #90	; 0x5a
 8004948:	5a9b      	ldrh	r3, [r3, r2]
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b299      	uxth	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	225a      	movs	r2, #90	; 0x5a
 8004954:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	225a      	movs	r2, #90	; 0x5a
 800495a:	5a9b      	ldrh	r3, [r3, r2]
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d000      	beq.n	8004964 <UART_RxISR_16BIT+0x6c>
 8004962:	e09c      	b.n	8004a9e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004964:	f3ef 8310 	mrs	r3, PRIMASK
 8004968:	623b      	str	r3, [r7, #32]
  return(result);
 800496a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
 800496e:	2301      	movs	r3, #1
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	f383 8810 	msr	PRIMASK, r3
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4948      	ldr	r1, [pc, #288]	; (8004aa8 <UART_RxISR_16BIT+0x1b0>)
 8004986:	400a      	ands	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	f383 8810 	msr	PRIMASK, r3
}
 8004994:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004996:	f3ef 8310 	mrs	r3, PRIMASK
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499e:	643b      	str	r3, [r7, #64]	; 0x40
 80049a0:	2301      	movs	r3, #1
 80049a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	f383 8810 	msr	PRIMASK, r3
}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	438a      	bics	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	f383 8810 	msr	PRIMASK, r3
}
 80049c6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2280      	movs	r2, #128	; 0x80
 80049cc:	2120      	movs	r1, #32
 80049ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	4013      	ands	r3, r2
 80049e8:	d018      	beq.n	8004a1c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ea:	f3ef 8310 	mrs	r3, PRIMASK
 80049ee:	617b      	str	r3, [r7, #20]
  return(result);
 80049f0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f4:	2301      	movs	r3, #1
 80049f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4928      	ldr	r1, [pc, #160]	; (8004aac <UART_RxISR_16BIT+0x1b4>)
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d12f      	bne.n	8004a84 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a30:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a34:	2301      	movs	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f383 8810 	msr	PRIMASK, r3
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2110      	movs	r1, #16
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f383 8810 	msr	PRIMASK, r3
}
 8004a5a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	2210      	movs	r2, #16
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d103      	bne.n	8004a72 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2210      	movs	r2, #16
 8004a70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2258      	movs	r2, #88	; 0x58
 8004a76:	5a9a      	ldrh	r2, [r3, r2]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	0011      	movs	r1, r2
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff f9f1 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a82:	e00c      	b.n	8004a9e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	0018      	movs	r0, r3
 8004a88:	f7fc fcd2 	bl	8001430 <HAL_UART_RxCpltCallback>
}
 8004a8c:	e007      	b.n	8004a9e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699a      	ldr	r2, [r3, #24]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2108      	movs	r1, #8
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	619a      	str	r2, [r3, #24]
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b014      	add	sp, #80	; 0x50
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	fffffedf 	.word	0xfffffedf
 8004aac:	fbffffff 	.word	0xfbffffff

08004ab0 <kfifo_reset>:
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b002      	add	sp, #8
 8004acc:	bd80      	pop	{r7, pc}

08004ace <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
	return fifo->size;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
}
 8004ada:	0018      	movs	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 8004ae2:	b590      	push	{r4, r7, lr}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	1b1b      	subs	r3, r3, r4
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b003      	add	sp, #12
 8004afa:	bd90      	pop	{r4, r7, pc}

08004afc <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 8004afc:	b590      	push	{r4, r7, lr}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0018      	movs	r0, r3
 8004b08:	f7ff ffe1 	bl	8004ace <kfifo_size>
 8004b0c:	0004      	movs	r4, r0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7ff ffe6 	bl	8004ae2 <kfifo_len>
 8004b16:	0003      	movs	r3, r0
 8004b18:	1ae3      	subs	r3, r4, r3
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b003      	add	sp, #12
 8004b20:	bd90      	pop	{r4, r7, pc}

08004b22 <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	18d2      	adds	r2, r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b002      	add	sp, #8
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	4013      	ands	r3, r2
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7ff ff9a 	bl	8004ab0 <kfifo_reset>
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b004      	add	sp, #16
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	18d2      	adds	r2, r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	0011      	movs	r1, r2
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7ff ffce 	bl	8004b40 <__kfifo_off>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d900      	bls.n	8004bb8 <__kfifo_in_data+0x34>
 8004bb6:	0013      	movs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	18d3      	adds	r3, r2, r3
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 f9e6 	bl	8004f98 <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	18d1      	adds	r1, r2, r3
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	001a      	movs	r2, r3
 8004bde:	f000 f9db 	bl	8004f98 <memcpy>
}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b006      	add	sp, #24
 8004be8:	bd80      	pop	{r7, pc}

08004bea <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7ff ff7f 	bl	8004afc <kfifo_avail>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d905      	bls.n	8004c12 <kfifo_in+0x28>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7ff ff77 	bl	8004afc <kfifo_avail>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	e000      	b.n	8004c14 <kfifo_in+0x2a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f7ff ffb1 	bl	8004b84 <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	0011      	movs	r1, r2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff ff7a 	bl	8004b22 <__kfifo_add_in>
	return len;
 8004c2e:	687b      	ldr	r3, [r7, #4]
}
 8004c30:	0018      	movs	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b004      	add	sp, #16
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <mq_init>:
 * 
 * @param None
 * @return struct msgQueue   
 */
struct msgQueue *mq_init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
    struct msgQueue *mq = (struct msgQueue *)malloc(sizeof(struct msgQueue));
 8004c3e:	2090      	movs	r0, #144	; 0x90
 8004c40:	f000 f9a0 	bl	8004f84 <malloc>
 8004c44:	0003      	movs	r3, r0
 8004c46:	603b      	str	r3, [r7, #0]
    if (mq == NULL)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <mq_init+0x1a>
    {
        return NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e024      	b.n	8004c9c <mq_init+0x64>
    }
    mq->lock = 0;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
    mq->size = MSGQUEUESIZE;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	605a      	str	r2, [r3, #4]
    mq->head = 0;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]
    mq->tail = 0;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 8004c6a:	1dfb      	adds	r3, r7, #7
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e00f      	b.n	8004c92 <mq_init+0x5a>
    {
        memset(&(mq->list[i]), 0, sizeof(struct msgQueue));
 8004c72:	1dfb      	adds	r3, r7, #7
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	3302      	adds	r3, #2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	18d3      	adds	r3, r2, r3
 8004c7e:	2290      	movs	r2, #144	; 0x90
 8004c80:	2100      	movs	r1, #0
 8004c82:	0018      	movs	r0, r3
 8004c84:	f000 f991 	bl	8004faa <memset>
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 8004c88:	1dfb      	adds	r3, r7, #7
 8004c8a:	781a      	ldrb	r2, [r3, #0]
 8004c8c:	1dfb      	adds	r3, r7, #7
 8004c8e:	3201      	adds	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	1dfb      	adds	r3, r7, #7
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b0f      	cmp	r3, #15
 8004c98:	d9eb      	bls.n	8004c72 <mq_init+0x3a>
    }
    return mq;
 8004c9a:	683b      	ldr	r3, [r7, #0]
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <mq_pop>:
 * 
 * @param queue 
 * @return struct msg* 
 */
struct msg *mq_pop(struct msgQueue *queue)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <mq_pop+0x12>
    {
        return NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e021      	b.n	8004cfa <mq_pop+0x56>
    }

    if (queue->head == queue->tail)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d101      	bne.n	8004cc6 <mq_pop+0x22>
    {
        return NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e019      	b.n	8004cfa <mq_pop+0x56>
    }

    if (queue->tail == MSGQUEUESIZE - 1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d102      	bne.n	8004cd4 <mq_pop+0x30>
    {
        queue->tail = 0;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	60da      	str	r2, [r3, #12]
    }
    
    uint8_t index = queue->tail & (MSGQUEUESIZE - 1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	200f      	movs	r0, #15
 8004cdc:	183b      	adds	r3, r7, r0
 8004cde:	210f      	movs	r1, #15
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	701a      	strb	r2, [r3, #0]
    queue->tail++;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60da      	str	r2, [r3, #12]
    return &(queue->list[index]);
 8004cee:	183b      	adds	r3, r7, r0
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	18d3      	adds	r3, r2, r3
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <stateM_init>:
static struct transition *getTransition( struct stateMachine *stateMachine,
      struct state *state, struct event *const event );

void stateM_init( struct stateMachine *fsm,
      struct state *initialState, struct state *errorState )
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
   if ( !fsm )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <stateM_init+0x26>
      return;

   fsm->currentState = initialState;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	601a      	str	r2, [r3, #0]
   fsm->previousState = NULL;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	605a      	str	r2, [r3, #4]
   fsm->errorState = errorState;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	e000      	b.n	8004d2a <stateM_init+0x28>
      return;
 8004d28:	46c0      	nop			; (mov r8, r8)
}
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <stateM_handleEvent>:

int stateM_handleEvent( struct stateMachine *fsm,
      struct event *event )
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
   if ( !fsm || !event )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <stateM_handleEvent+0x16>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <stateM_handleEvent+0x1c>
      return stateM_errArg;
 8004d46:	2302      	movs	r3, #2
 8004d48:	425b      	negs	r3, r3
 8004d4a:	e093      	b.n	8004e74 <stateM_handleEvent+0x144>

   if ( !fsm->currentState )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d108      	bne.n	8004d66 <stateM_handleEvent+0x36>
   {
      goToErrorState( fsm, event );
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0011      	movs	r1, r2
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f000 f88e 	bl	8004e7c <goToErrorState>
      return stateM_errorStateReached;
 8004d60:	2301      	movs	r3, #1
 8004d62:	425b      	negs	r3, r3
 8004d64:	e086      	b.n	8004e74 <stateM_handleEvent+0x144>
   }

   if ( !fsm->currentState->numTransitions )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <stateM_handleEvent+0x44>
      return stateM_noStateChange;
 8004d70:	2302      	movs	r3, #2
 8004d72:	e07f      	b.n	8004e74 <stateM_handleEvent+0x144>

   struct state *nextState = fsm->currentState;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
   do {
      struct transition *transition = getTransition( fsm, nextState, event );
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	68f9      	ldr	r1, [r7, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 f89e 	bl	8004ec2 <getTransition>
 8004d86:	0003      	movs	r3, r0
 8004d88:	60bb      	str	r3, [r7, #8]

      /* If there were no transitions for the given event for the current
       * state, check if there are any transitions for any of the parent
       * states (if any): */
      if ( !transition )
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <stateM_handleEvent+0x6e>
      {
         nextState = nextState->parentState;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
       * machine has stopped: */
      if ( !fsm->currentState->numTransitions )
         return stateM_finalStateReached;

      return stateM_stateChanged;
   } while ( nextState );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ee      	bne.n	8004d7a <stateM_handleEvent+0x4a>
 8004d9c:	e069      	b.n	8004e72 <stateM_handleEvent+0x142>
      if ( !transition->nextState )
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <stateM_handleEvent+0x88>
         goToErrorState( fsm, event );
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	0011      	movs	r1, r2
 8004dac:	0018      	movs	r0, r3
 8004dae:	f000 f865 	bl	8004e7c <goToErrorState>
         return stateM_errorStateReached;
 8004db2:	2301      	movs	r3, #1
 8004db4:	425b      	negs	r3, r3
 8004db6:	e05d      	b.n	8004e74 <stateM_handleEvent+0x144>
      nextState = transition->nextState;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8004dbe:	e002      	b.n	8004dc6 <stateM_handleEvent+0x96>
         nextState = nextState->entryState;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f8      	bne.n	8004dc0 <stateM_handleEvent+0x90>
      if ( nextState != fsm->currentState && fsm->currentState->exitAction )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d00d      	beq.n	8004df4 <stateM_handleEvent+0xc4>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <stateM_handleEvent+0xc4>
         fsm->currentState->exitAction( fsm->currentState->data, event );
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699a      	ldr	r2, [r3, #24]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	0018      	movs	r0, r3
 8004df2:	4790      	blx	r2
      if ( transition->action )
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <stateM_handleEvent+0xe0>
         transition->action( fsm->currentState->data, event, nextState->
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	68dc      	ldr	r4, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6918      	ldr	r0, [r3, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	47a0      	blx	r4
      if ( nextState != fsm->currentState && nextState->entryAction )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d00a      	beq.n	8004e30 <stateM_handleEvent+0x100>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d006      	beq.n	8004e30 <stateM_handleEvent+0x100>
         nextState->entryAction( nextState->data, event );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	4790      	blx	r2
      fsm->previousState = fsm->currentState;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	605a      	str	r2, [r3, #4]
      fsm->currentState = nextState;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	601a      	str	r2, [r3, #0]
      if ( fsm->currentState == fsm->previousState )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d101      	bne.n	8004e4e <stateM_handleEvent+0x11e>
         return stateM_stateLoopSelf;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e012      	b.n	8004e74 <stateM_handleEvent+0x144>
      if ( fsm->currentState == fsm->errorState )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d102      	bne.n	8004e60 <stateM_handleEvent+0x130>
         return stateM_errorStateReached;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	425b      	negs	r3, r3
 8004e5e:	e009      	b.n	8004e74 <stateM_handleEvent+0x144>
      if ( !fsm->currentState->numTransitions )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <stateM_handleEvent+0x13e>
         return stateM_finalStateReached;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e002      	b.n	8004e74 <stateM_handleEvent+0x144>
      return stateM_stateChanged;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e000      	b.n	8004e74 <stateM_handleEvent+0x144>

   return stateM_noStateChange;
 8004e72:	2302      	movs	r3, #2
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b005      	add	sp, #20
 8004e7a:	bd90      	pop	{r4, r7, pc}

08004e7c <goToErrorState>:
}


static void goToErrorState( struct stateMachine *fsm,
      struct event *const event )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
   fsm->previousState = fsm->currentState;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	605a      	str	r2, [r3, #4]
   fsm->currentState = fsm->errorState;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]

   if ( fsm->currentState && fsm->currentState->entryAction )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <goToErrorState+0x3e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <goToErrorState+0x3e>
      fsm->currentState->entryAction( fsm->currentState->data, event );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	4790      	blx	r2
}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <getTransition>:

static struct transition *getTransition( struct stateMachine *fsm,
      struct state *state, struct event *const event )
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
   size_t i;

   for ( i = 0; i < state->numTransitions; ++i )
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e022      	b.n	8004f1a <getTransition+0x58>
   {
      struct transition *t = &state->transitions[ i ];
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6899      	ldr	r1, [r3, #8]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	0013      	movs	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	18cb      	adds	r3, r1, r3
 8004ee4:	613b      	str	r3, [r7, #16]

      /* A transition for the given event has been found: */
      if ( t->eventType == event->type )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d110      	bne.n	8004f14 <getTransition+0x52>
      {
         if ( !t->guard )
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <getTransition+0x3c>
            return t;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	e013      	b.n	8004f26 <getTransition+0x64>
         /* If transition is guarded, ensure that the condition is held: */
         else if ( t->guard( t->condition, event ) )
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	4790      	blx	r2
 8004f0c:	1e03      	subs	r3, r0, #0
 8004f0e:	d001      	beq.n	8004f14 <getTransition+0x52>
            return t;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	e008      	b.n	8004f26 <getTransition+0x64>
   for ( i = 0; i < state->numTransitions; ++i )
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	3301      	adds	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d3d7      	bcc.n	8004ed4 <getTransition+0x12>
      }
   }

   /* No transitions found for given event for given state: */
   return NULL;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b006      	add	sp, #24
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <__errno>:
 8004f30:	4b01      	ldr	r3, [pc, #4]	; (8004f38 <__errno+0x8>)
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	4770      	bx	lr
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	200000d8 	.word	0x200000d8

08004f3c <__libc_init_array>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	2600      	movs	r6, #0
 8004f40:	4d0c      	ldr	r5, [pc, #48]	; (8004f74 <__libc_init_array+0x38>)
 8004f42:	4c0d      	ldr	r4, [pc, #52]	; (8004f78 <__libc_init_array+0x3c>)
 8004f44:	1b64      	subs	r4, r4, r5
 8004f46:	10a4      	asrs	r4, r4, #2
 8004f48:	42a6      	cmp	r6, r4
 8004f4a:	d109      	bne.n	8004f60 <__libc_init_array+0x24>
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	f001 f889 	bl	8006064 <_init>
 8004f52:	4d0a      	ldr	r5, [pc, #40]	; (8004f7c <__libc_init_array+0x40>)
 8004f54:	4c0a      	ldr	r4, [pc, #40]	; (8004f80 <__libc_init_array+0x44>)
 8004f56:	1b64      	subs	r4, r4, r5
 8004f58:	10a4      	asrs	r4, r4, #2
 8004f5a:	42a6      	cmp	r6, r4
 8004f5c:	d105      	bne.n	8004f6a <__libc_init_array+0x2e>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	00b3      	lsls	r3, r6, #2
 8004f62:	58eb      	ldr	r3, [r5, r3]
 8004f64:	4798      	blx	r3
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7ee      	b.n	8004f48 <__libc_init_array+0xc>
 8004f6a:	00b3      	lsls	r3, r6, #2
 8004f6c:	58eb      	ldr	r3, [r5, r3]
 8004f6e:	4798      	blx	r3
 8004f70:	3601      	adds	r6, #1
 8004f72:	e7f2      	b.n	8004f5a <__libc_init_array+0x1e>
 8004f74:	0800634c 	.word	0x0800634c
 8004f78:	0800634c 	.word	0x0800634c
 8004f7c:	0800634c 	.word	0x0800634c
 8004f80:	08006350 	.word	0x08006350

08004f84 <malloc>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4b03      	ldr	r3, [pc, #12]	; (8004f94 <malloc+0x10>)
 8004f88:	0001      	movs	r1, r0
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	f000 f882 	bl	8005094 <_malloc_r>
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	200000d8 	.word	0x200000d8

08004f98 <memcpy>:
 8004f98:	2300      	movs	r3, #0
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d100      	bne.n	8004fa2 <memcpy+0xa>
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	5ccc      	ldrb	r4, [r1, r3]
 8004fa4:	54c4      	strb	r4, [r0, r3]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	e7f8      	b.n	8004f9c <memcpy+0x4>

08004faa <memset>:
 8004faa:	0003      	movs	r3, r0
 8004fac:	1882      	adds	r2, r0, r2
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d100      	bne.n	8004fb4 <memset+0xa>
 8004fb2:	4770      	bx	lr
 8004fb4:	7019      	strb	r1, [r3, #0]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	e7f9      	b.n	8004fae <memset+0x4>
	...

08004fbc <_free_r>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	0005      	movs	r5, r0
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d010      	beq.n	8004fe6 <_free_r+0x2a>
 8004fc4:	1f0c      	subs	r4, r1, #4
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	da00      	bge.n	8004fce <_free_r+0x12>
 8004fcc:	18e4      	adds	r4, r4, r3
 8004fce:	0028      	movs	r0, r5
 8004fd0:	f000 fc8a 	bl	80058e8 <__malloc_lock>
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <_free_r+0x90>)
 8004fd6:	6813      	ldr	r3, [r2, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d105      	bne.n	8004fe8 <_free_r+0x2c>
 8004fdc:	6063      	str	r3, [r4, #4]
 8004fde:	6014      	str	r4, [r2, #0]
 8004fe0:	0028      	movs	r0, r5
 8004fe2:	f000 fc89 	bl	80058f8 <__malloc_unlock>
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d908      	bls.n	8004ffe <_free_r+0x42>
 8004fec:	6821      	ldr	r1, [r4, #0]
 8004fee:	1860      	adds	r0, r4, r1
 8004ff0:	4283      	cmp	r3, r0
 8004ff2:	d1f3      	bne.n	8004fdc <_free_r+0x20>
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	1841      	adds	r1, r0, r1
 8004ffa:	6021      	str	r1, [r4, #0]
 8004ffc:	e7ee      	b.n	8004fdc <_free_r+0x20>
 8004ffe:	001a      	movs	r2, r3
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <_free_r+0x4e>
 8005006:	42a3      	cmp	r3, r4
 8005008:	d9f9      	bls.n	8004ffe <_free_r+0x42>
 800500a:	6811      	ldr	r1, [r2, #0]
 800500c:	1850      	adds	r0, r2, r1
 800500e:	42a0      	cmp	r0, r4
 8005010:	d10b      	bne.n	800502a <_free_r+0x6e>
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	1809      	adds	r1, r1, r0
 8005016:	1850      	adds	r0, r2, r1
 8005018:	6011      	str	r1, [r2, #0]
 800501a:	4283      	cmp	r3, r0
 800501c:	d1e0      	bne.n	8004fe0 <_free_r+0x24>
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	1841      	adds	r1, r0, r1
 8005024:	6011      	str	r1, [r2, #0]
 8005026:	6053      	str	r3, [r2, #4]
 8005028:	e7da      	b.n	8004fe0 <_free_r+0x24>
 800502a:	42a0      	cmp	r0, r4
 800502c:	d902      	bls.n	8005034 <_free_r+0x78>
 800502e:	230c      	movs	r3, #12
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	e7d5      	b.n	8004fe0 <_free_r+0x24>
 8005034:	6821      	ldr	r1, [r4, #0]
 8005036:	1860      	adds	r0, r4, r1
 8005038:	4283      	cmp	r3, r0
 800503a:	d103      	bne.n	8005044 <_free_r+0x88>
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	1841      	adds	r1, r0, r1
 8005042:	6021      	str	r1, [r4, #0]
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	6054      	str	r4, [r2, #4]
 8005048:	e7ca      	b.n	8004fe0 <_free_r+0x24>
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	2000046c 	.word	0x2000046c

08005050 <sbrk_aligned>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4e0f      	ldr	r6, [pc, #60]	; (8005090 <sbrk_aligned+0x40>)
 8005054:	000d      	movs	r5, r1
 8005056:	6831      	ldr	r1, [r6, #0]
 8005058:	0004      	movs	r4, r0
 800505a:	2900      	cmp	r1, #0
 800505c:	d102      	bne.n	8005064 <sbrk_aligned+0x14>
 800505e:	f000 f925 	bl	80052ac <_sbrk_r>
 8005062:	6030      	str	r0, [r6, #0]
 8005064:	0029      	movs	r1, r5
 8005066:	0020      	movs	r0, r4
 8005068:	f000 f920 	bl	80052ac <_sbrk_r>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d00a      	beq.n	8005086 <sbrk_aligned+0x36>
 8005070:	2303      	movs	r3, #3
 8005072:	1cc5      	adds	r5, r0, #3
 8005074:	439d      	bics	r5, r3
 8005076:	42a8      	cmp	r0, r5
 8005078:	d007      	beq.n	800508a <sbrk_aligned+0x3a>
 800507a:	1a29      	subs	r1, r5, r0
 800507c:	0020      	movs	r0, r4
 800507e:	f000 f915 	bl	80052ac <_sbrk_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d101      	bne.n	800508a <sbrk_aligned+0x3a>
 8005086:	2501      	movs	r5, #1
 8005088:	426d      	negs	r5, r5
 800508a:	0028      	movs	r0, r5
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	20000470 	.word	0x20000470

08005094 <_malloc_r>:
 8005094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005096:	2203      	movs	r2, #3
 8005098:	1ccb      	adds	r3, r1, #3
 800509a:	4393      	bics	r3, r2
 800509c:	3308      	adds	r3, #8
 800509e:	0006      	movs	r6, r0
 80050a0:	001f      	movs	r7, r3
 80050a2:	2b0c      	cmp	r3, #12
 80050a4:	d232      	bcs.n	800510c <_malloc_r+0x78>
 80050a6:	270c      	movs	r7, #12
 80050a8:	42b9      	cmp	r1, r7
 80050aa:	d831      	bhi.n	8005110 <_malloc_r+0x7c>
 80050ac:	0030      	movs	r0, r6
 80050ae:	f000 fc1b 	bl	80058e8 <__malloc_lock>
 80050b2:	4d32      	ldr	r5, [pc, #200]	; (800517c <_malloc_r+0xe8>)
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	001c      	movs	r4, r3
 80050b8:	2c00      	cmp	r4, #0
 80050ba:	d12e      	bne.n	800511a <_malloc_r+0x86>
 80050bc:	0039      	movs	r1, r7
 80050be:	0030      	movs	r0, r6
 80050c0:	f7ff ffc6 	bl	8005050 <sbrk_aligned>
 80050c4:	0004      	movs	r4, r0
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	d11e      	bne.n	8005108 <_malloc_r+0x74>
 80050ca:	682c      	ldr	r4, [r5, #0]
 80050cc:	0025      	movs	r5, r4
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	d14a      	bne.n	8005168 <_malloc_r+0xd4>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	0029      	movs	r1, r5
 80050d6:	18e3      	adds	r3, r4, r3
 80050d8:	0030      	movs	r0, r6
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	f000 f8e6 	bl	80052ac <_sbrk_r>
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	4283      	cmp	r3, r0
 80050e4:	d143      	bne.n	800516e <_malloc_r+0xda>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	3703      	adds	r7, #3
 80050ea:	1aff      	subs	r7, r7, r3
 80050ec:	2303      	movs	r3, #3
 80050ee:	439f      	bics	r7, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	2f0c      	cmp	r7, #12
 80050f4:	d200      	bcs.n	80050f8 <_malloc_r+0x64>
 80050f6:	270c      	movs	r7, #12
 80050f8:	0039      	movs	r1, r7
 80050fa:	0030      	movs	r0, r6
 80050fc:	f7ff ffa8 	bl	8005050 <sbrk_aligned>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d034      	beq.n	800516e <_malloc_r+0xda>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	19df      	adds	r7, r3, r7
 8005108:	6027      	str	r7, [r4, #0]
 800510a:	e013      	b.n	8005134 <_malloc_r+0xa0>
 800510c:	2b00      	cmp	r3, #0
 800510e:	dacb      	bge.n	80050a8 <_malloc_r+0x14>
 8005110:	230c      	movs	r3, #12
 8005112:	2500      	movs	r5, #0
 8005114:	6033      	str	r3, [r6, #0]
 8005116:	0028      	movs	r0, r5
 8005118:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	1bd1      	subs	r1, r2, r7
 800511e:	d420      	bmi.n	8005162 <_malloc_r+0xce>
 8005120:	290b      	cmp	r1, #11
 8005122:	d917      	bls.n	8005154 <_malloc_r+0xc0>
 8005124:	19e2      	adds	r2, r4, r7
 8005126:	6027      	str	r7, [r4, #0]
 8005128:	42a3      	cmp	r3, r4
 800512a:	d111      	bne.n	8005150 <_malloc_r+0xbc>
 800512c:	602a      	str	r2, [r5, #0]
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	6011      	str	r1, [r2, #0]
 8005132:	6053      	str	r3, [r2, #4]
 8005134:	0030      	movs	r0, r6
 8005136:	0025      	movs	r5, r4
 8005138:	f000 fbde 	bl	80058f8 <__malloc_unlock>
 800513c:	2207      	movs	r2, #7
 800513e:	350b      	adds	r5, #11
 8005140:	1d23      	adds	r3, r4, #4
 8005142:	4395      	bics	r5, r2
 8005144:	1aea      	subs	r2, r5, r3
 8005146:	429d      	cmp	r5, r3
 8005148:	d0e5      	beq.n	8005116 <_malloc_r+0x82>
 800514a:	1b5b      	subs	r3, r3, r5
 800514c:	50a3      	str	r3, [r4, r2]
 800514e:	e7e2      	b.n	8005116 <_malloc_r+0x82>
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	e7ec      	b.n	800512e <_malloc_r+0x9a>
 8005154:	6862      	ldr	r2, [r4, #4]
 8005156:	42a3      	cmp	r3, r4
 8005158:	d101      	bne.n	800515e <_malloc_r+0xca>
 800515a:	602a      	str	r2, [r5, #0]
 800515c:	e7ea      	b.n	8005134 <_malloc_r+0xa0>
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	e7e8      	b.n	8005134 <_malloc_r+0xa0>
 8005162:	0023      	movs	r3, r4
 8005164:	6864      	ldr	r4, [r4, #4]
 8005166:	e7a7      	b.n	80050b8 <_malloc_r+0x24>
 8005168:	002c      	movs	r4, r5
 800516a:	686d      	ldr	r5, [r5, #4]
 800516c:	e7af      	b.n	80050ce <_malloc_r+0x3a>
 800516e:	230c      	movs	r3, #12
 8005170:	0030      	movs	r0, r6
 8005172:	6033      	str	r3, [r6, #0]
 8005174:	f000 fbc0 	bl	80058f8 <__malloc_unlock>
 8005178:	e7cd      	b.n	8005116 <_malloc_r+0x82>
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	2000046c 	.word	0x2000046c

08005180 <iprintf>:
 8005180:	b40f      	push	{r0, r1, r2, r3}
 8005182:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <iprintf+0x30>)
 8005184:	b513      	push	{r0, r1, r4, lr}
 8005186:	681c      	ldr	r4, [r3, #0]
 8005188:	2c00      	cmp	r4, #0
 800518a:	d005      	beq.n	8005198 <iprintf+0x18>
 800518c:	69a3      	ldr	r3, [r4, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <iprintf+0x18>
 8005192:	0020      	movs	r0, r4
 8005194:	f000 fa98 	bl	80056c8 <__sinit>
 8005198:	ab05      	add	r3, sp, #20
 800519a:	0020      	movs	r0, r4
 800519c:	9a04      	ldr	r2, [sp, #16]
 800519e:	68a1      	ldr	r1, [r4, #8]
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	f000 fbd9 	bl	8005958 <_vfiprintf_r>
 80051a6:	bc16      	pop	{r1, r2, r4}
 80051a8:	bc08      	pop	{r3}
 80051aa:	b004      	add	sp, #16
 80051ac:	4718      	bx	r3
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	200000d8 	.word	0x200000d8

080051b4 <_puts_r>:
 80051b4:	b570      	push	{r4, r5, r6, lr}
 80051b6:	0005      	movs	r5, r0
 80051b8:	000e      	movs	r6, r1
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d004      	beq.n	80051c8 <_puts_r+0x14>
 80051be:	6983      	ldr	r3, [r0, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <_puts_r+0x14>
 80051c4:	f000 fa80 	bl	80056c8 <__sinit>
 80051c8:	69ab      	ldr	r3, [r5, #24]
 80051ca:	68ac      	ldr	r4, [r5, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <_puts_r+0x22>
 80051d0:	0028      	movs	r0, r5
 80051d2:	f000 fa79 	bl	80056c8 <__sinit>
 80051d6:	4b2d      	ldr	r3, [pc, #180]	; (800528c <_puts_r+0xd8>)
 80051d8:	429c      	cmp	r4, r3
 80051da:	d122      	bne.n	8005222 <_puts_r+0x6e>
 80051dc:	686c      	ldr	r4, [r5, #4]
 80051de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051e0:	07db      	lsls	r3, r3, #31
 80051e2:	d405      	bmi.n	80051f0 <_puts_r+0x3c>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	059b      	lsls	r3, r3, #22
 80051e8:	d402      	bmi.n	80051f0 <_puts_r+0x3c>
 80051ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ec:	f000 fb0d 	bl	800580a <__retarget_lock_acquire_recursive>
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	071b      	lsls	r3, r3, #28
 80051f4:	d502      	bpl.n	80051fc <_puts_r+0x48>
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d129      	bne.n	8005250 <_puts_r+0x9c>
 80051fc:	0021      	movs	r1, r4
 80051fe:	0028      	movs	r0, r5
 8005200:	f000 f8bc 	bl	800537c <__swsetup_r>
 8005204:	2800      	cmp	r0, #0
 8005206:	d023      	beq.n	8005250 <_puts_r+0x9c>
 8005208:	2501      	movs	r5, #1
 800520a:	426d      	negs	r5, r5
 800520c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800520e:	07db      	lsls	r3, r3, #31
 8005210:	d405      	bmi.n	800521e <_puts_r+0x6a>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	059b      	lsls	r3, r3, #22
 8005216:	d402      	bmi.n	800521e <_puts_r+0x6a>
 8005218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800521a:	f000 faf7 	bl	800580c <__retarget_lock_release_recursive>
 800521e:	0028      	movs	r0, r5
 8005220:	bd70      	pop	{r4, r5, r6, pc}
 8005222:	4b1b      	ldr	r3, [pc, #108]	; (8005290 <_puts_r+0xdc>)
 8005224:	429c      	cmp	r4, r3
 8005226:	d101      	bne.n	800522c <_puts_r+0x78>
 8005228:	68ac      	ldr	r4, [r5, #8]
 800522a:	e7d8      	b.n	80051de <_puts_r+0x2a>
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <_puts_r+0xe0>)
 800522e:	429c      	cmp	r4, r3
 8005230:	d1d5      	bne.n	80051de <_puts_r+0x2a>
 8005232:	68ec      	ldr	r4, [r5, #12]
 8005234:	e7d3      	b.n	80051de <_puts_r+0x2a>
 8005236:	3601      	adds	r6, #1
 8005238:	60a3      	str	r3, [r4, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	da04      	bge.n	8005248 <_puts_r+0x94>
 800523e:	69a2      	ldr	r2, [r4, #24]
 8005240:	429a      	cmp	r2, r3
 8005242:	dc16      	bgt.n	8005272 <_puts_r+0xbe>
 8005244:	290a      	cmp	r1, #10
 8005246:	d014      	beq.n	8005272 <_puts_r+0xbe>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	6022      	str	r2, [r4, #0]
 800524e:	7019      	strb	r1, [r3, #0]
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	7831      	ldrb	r1, [r6, #0]
 8005254:	3b01      	subs	r3, #1
 8005256:	2900      	cmp	r1, #0
 8005258:	d1ed      	bne.n	8005236 <_puts_r+0x82>
 800525a:	60a3      	str	r3, [r4, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	da0f      	bge.n	8005280 <_puts_r+0xcc>
 8005260:	0028      	movs	r0, r5
 8005262:	0022      	movs	r2, r4
 8005264:	310a      	adds	r1, #10
 8005266:	f000 f833 	bl	80052d0 <__swbuf_r>
 800526a:	250a      	movs	r5, #10
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d1cd      	bne.n	800520c <_puts_r+0x58>
 8005270:	e7ca      	b.n	8005208 <_puts_r+0x54>
 8005272:	0022      	movs	r2, r4
 8005274:	0028      	movs	r0, r5
 8005276:	f000 f82b 	bl	80052d0 <__swbuf_r>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	d1e8      	bne.n	8005250 <_puts_r+0x9c>
 800527e:	e7c3      	b.n	8005208 <_puts_r+0x54>
 8005280:	250a      	movs	r5, #10
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	6022      	str	r2, [r4, #0]
 8005288:	701d      	strb	r5, [r3, #0]
 800528a:	e7bf      	b.n	800520c <_puts_r+0x58>
 800528c:	080062d8 	.word	0x080062d8
 8005290:	080062f8 	.word	0x080062f8
 8005294:	080062b8 	.word	0x080062b8

08005298 <puts>:
 8005298:	b510      	push	{r4, lr}
 800529a:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <puts+0x10>)
 800529c:	0001      	movs	r1, r0
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	f7ff ff88 	bl	80051b4 <_puts_r>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	200000d8 	.word	0x200000d8

080052ac <_sbrk_r>:
 80052ac:	2300      	movs	r3, #0
 80052ae:	b570      	push	{r4, r5, r6, lr}
 80052b0:	4d06      	ldr	r5, [pc, #24]	; (80052cc <_sbrk_r+0x20>)
 80052b2:	0004      	movs	r4, r0
 80052b4:	0008      	movs	r0, r1
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	f7fc fd80 	bl	8001dbc <_sbrk>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d103      	bne.n	80052c8 <_sbrk_r+0x1c>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d000      	beq.n	80052c8 <_sbrk_r+0x1c>
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	20000478 	.word	0x20000478

080052d0 <__swbuf_r>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	0005      	movs	r5, r0
 80052d4:	000e      	movs	r6, r1
 80052d6:	0014      	movs	r4, r2
 80052d8:	2800      	cmp	r0, #0
 80052da:	d004      	beq.n	80052e6 <__swbuf_r+0x16>
 80052dc:	6983      	ldr	r3, [r0, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <__swbuf_r+0x16>
 80052e2:	f000 f9f1 	bl	80056c8 <__sinit>
 80052e6:	4b22      	ldr	r3, [pc, #136]	; (8005370 <__swbuf_r+0xa0>)
 80052e8:	429c      	cmp	r4, r3
 80052ea:	d12e      	bne.n	800534a <__swbuf_r+0x7a>
 80052ec:	686c      	ldr	r4, [r5, #4]
 80052ee:	69a3      	ldr	r3, [r4, #24]
 80052f0:	60a3      	str	r3, [r4, #8]
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	071b      	lsls	r3, r3, #28
 80052f6:	d532      	bpl.n	800535e <__swbuf_r+0x8e>
 80052f8:	6923      	ldr	r3, [r4, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d02f      	beq.n	800535e <__swbuf_r+0x8e>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	6922      	ldr	r2, [r4, #16]
 8005302:	b2f7      	uxtb	r7, r6
 8005304:	1a98      	subs	r0, r3, r2
 8005306:	6963      	ldr	r3, [r4, #20]
 8005308:	b2f6      	uxtb	r6, r6
 800530a:	4283      	cmp	r3, r0
 800530c:	dc05      	bgt.n	800531a <__swbuf_r+0x4a>
 800530e:	0021      	movs	r1, r4
 8005310:	0028      	movs	r0, r5
 8005312:	f000 f937 	bl	8005584 <_fflush_r>
 8005316:	2800      	cmp	r0, #0
 8005318:	d127      	bne.n	800536a <__swbuf_r+0x9a>
 800531a:	68a3      	ldr	r3, [r4, #8]
 800531c:	3001      	adds	r0, #1
 800531e:	3b01      	subs	r3, #1
 8005320:	60a3      	str	r3, [r4, #8]
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	701f      	strb	r7, [r3, #0]
 800532a:	6963      	ldr	r3, [r4, #20]
 800532c:	4283      	cmp	r3, r0
 800532e:	d004      	beq.n	800533a <__swbuf_r+0x6a>
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	07db      	lsls	r3, r3, #31
 8005334:	d507      	bpl.n	8005346 <__swbuf_r+0x76>
 8005336:	2e0a      	cmp	r6, #10
 8005338:	d105      	bne.n	8005346 <__swbuf_r+0x76>
 800533a:	0021      	movs	r1, r4
 800533c:	0028      	movs	r0, r5
 800533e:	f000 f921 	bl	8005584 <_fflush_r>
 8005342:	2800      	cmp	r0, #0
 8005344:	d111      	bne.n	800536a <__swbuf_r+0x9a>
 8005346:	0030      	movs	r0, r6
 8005348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <__swbuf_r+0xa4>)
 800534c:	429c      	cmp	r4, r3
 800534e:	d101      	bne.n	8005354 <__swbuf_r+0x84>
 8005350:	68ac      	ldr	r4, [r5, #8]
 8005352:	e7cc      	b.n	80052ee <__swbuf_r+0x1e>
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <__swbuf_r+0xa8>)
 8005356:	429c      	cmp	r4, r3
 8005358:	d1c9      	bne.n	80052ee <__swbuf_r+0x1e>
 800535a:	68ec      	ldr	r4, [r5, #12]
 800535c:	e7c7      	b.n	80052ee <__swbuf_r+0x1e>
 800535e:	0021      	movs	r1, r4
 8005360:	0028      	movs	r0, r5
 8005362:	f000 f80b 	bl	800537c <__swsetup_r>
 8005366:	2800      	cmp	r0, #0
 8005368:	d0c9      	beq.n	80052fe <__swbuf_r+0x2e>
 800536a:	2601      	movs	r6, #1
 800536c:	4276      	negs	r6, r6
 800536e:	e7ea      	b.n	8005346 <__swbuf_r+0x76>
 8005370:	080062d8 	.word	0x080062d8
 8005374:	080062f8 	.word	0x080062f8
 8005378:	080062b8 	.word	0x080062b8

0800537c <__swsetup_r>:
 800537c:	4b37      	ldr	r3, [pc, #220]	; (800545c <__swsetup_r+0xe0>)
 800537e:	b570      	push	{r4, r5, r6, lr}
 8005380:	681d      	ldr	r5, [r3, #0]
 8005382:	0006      	movs	r6, r0
 8005384:	000c      	movs	r4, r1
 8005386:	2d00      	cmp	r5, #0
 8005388:	d005      	beq.n	8005396 <__swsetup_r+0x1a>
 800538a:	69ab      	ldr	r3, [r5, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <__swsetup_r+0x1a>
 8005390:	0028      	movs	r0, r5
 8005392:	f000 f999 	bl	80056c8 <__sinit>
 8005396:	4b32      	ldr	r3, [pc, #200]	; (8005460 <__swsetup_r+0xe4>)
 8005398:	429c      	cmp	r4, r3
 800539a:	d10f      	bne.n	80053bc <__swsetup_r+0x40>
 800539c:	686c      	ldr	r4, [r5, #4]
 800539e:	230c      	movs	r3, #12
 80053a0:	5ee2      	ldrsh	r2, [r4, r3]
 80053a2:	b293      	uxth	r3, r2
 80053a4:	0711      	lsls	r1, r2, #28
 80053a6:	d42d      	bmi.n	8005404 <__swsetup_r+0x88>
 80053a8:	06d9      	lsls	r1, r3, #27
 80053aa:	d411      	bmi.n	80053d0 <__swsetup_r+0x54>
 80053ac:	2309      	movs	r3, #9
 80053ae:	2001      	movs	r0, #1
 80053b0:	6033      	str	r3, [r6, #0]
 80053b2:	3337      	adds	r3, #55	; 0x37
 80053b4:	4313      	orrs	r3, r2
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	4240      	negs	r0, r0
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	4b29      	ldr	r3, [pc, #164]	; (8005464 <__swsetup_r+0xe8>)
 80053be:	429c      	cmp	r4, r3
 80053c0:	d101      	bne.n	80053c6 <__swsetup_r+0x4a>
 80053c2:	68ac      	ldr	r4, [r5, #8]
 80053c4:	e7eb      	b.n	800539e <__swsetup_r+0x22>
 80053c6:	4b28      	ldr	r3, [pc, #160]	; (8005468 <__swsetup_r+0xec>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	d1e8      	bne.n	800539e <__swsetup_r+0x22>
 80053cc:	68ec      	ldr	r4, [r5, #12]
 80053ce:	e7e6      	b.n	800539e <__swsetup_r+0x22>
 80053d0:	075b      	lsls	r3, r3, #29
 80053d2:	d513      	bpl.n	80053fc <__swsetup_r+0x80>
 80053d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d6:	2900      	cmp	r1, #0
 80053d8:	d008      	beq.n	80053ec <__swsetup_r+0x70>
 80053da:	0023      	movs	r3, r4
 80053dc:	3344      	adds	r3, #68	; 0x44
 80053de:	4299      	cmp	r1, r3
 80053e0:	d002      	beq.n	80053e8 <__swsetup_r+0x6c>
 80053e2:	0030      	movs	r0, r6
 80053e4:	f7ff fdea 	bl	8004fbc <_free_r>
 80053e8:	2300      	movs	r3, #0
 80053ea:	6363      	str	r3, [r4, #52]	; 0x34
 80053ec:	2224      	movs	r2, #36	; 0x24
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	4393      	bics	r3, r2
 80053f2:	81a3      	strh	r3, [r4, #12]
 80053f4:	2300      	movs	r3, #0
 80053f6:	6063      	str	r3, [r4, #4]
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	2308      	movs	r3, #8
 80053fe:	89a2      	ldrh	r2, [r4, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	6923      	ldr	r3, [r4, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <__swsetup_r+0xa6>
 800540a:	21a0      	movs	r1, #160	; 0xa0
 800540c:	2280      	movs	r2, #128	; 0x80
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	0089      	lsls	r1, r1, #2
 8005412:	0092      	lsls	r2, r2, #2
 8005414:	400b      	ands	r3, r1
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <__swsetup_r+0xa6>
 800541a:	0021      	movs	r1, r4
 800541c:	0030      	movs	r0, r6
 800541e:	f000 fa1f 	bl	8005860 <__smakebuf_r>
 8005422:	220c      	movs	r2, #12
 8005424:	5ea3      	ldrsh	r3, [r4, r2]
 8005426:	2001      	movs	r0, #1
 8005428:	001a      	movs	r2, r3
 800542a:	b299      	uxth	r1, r3
 800542c:	4002      	ands	r2, r0
 800542e:	4203      	tst	r3, r0
 8005430:	d00f      	beq.n	8005452 <__swsetup_r+0xd6>
 8005432:	2200      	movs	r2, #0
 8005434:	60a2      	str	r2, [r4, #8]
 8005436:	6962      	ldr	r2, [r4, #20]
 8005438:	4252      	negs	r2, r2
 800543a:	61a2      	str	r2, [r4, #24]
 800543c:	2000      	movs	r0, #0
 800543e:	6922      	ldr	r2, [r4, #16]
 8005440:	4282      	cmp	r2, r0
 8005442:	d1ba      	bne.n	80053ba <__swsetup_r+0x3e>
 8005444:	060a      	lsls	r2, r1, #24
 8005446:	d5b8      	bpl.n	80053ba <__swsetup_r+0x3e>
 8005448:	2240      	movs	r2, #64	; 0x40
 800544a:	4313      	orrs	r3, r2
 800544c:	81a3      	strh	r3, [r4, #12]
 800544e:	3801      	subs	r0, #1
 8005450:	e7b3      	b.n	80053ba <__swsetup_r+0x3e>
 8005452:	0788      	lsls	r0, r1, #30
 8005454:	d400      	bmi.n	8005458 <__swsetup_r+0xdc>
 8005456:	6962      	ldr	r2, [r4, #20]
 8005458:	60a2      	str	r2, [r4, #8]
 800545a:	e7ef      	b.n	800543c <__swsetup_r+0xc0>
 800545c:	200000d8 	.word	0x200000d8
 8005460:	080062d8 	.word	0x080062d8
 8005464:	080062f8 	.word	0x080062f8
 8005468:	080062b8 	.word	0x080062b8

0800546c <__sflush_r>:
 800546c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800546e:	898b      	ldrh	r3, [r1, #12]
 8005470:	0005      	movs	r5, r0
 8005472:	000c      	movs	r4, r1
 8005474:	071a      	lsls	r2, r3, #28
 8005476:	d45f      	bmi.n	8005538 <__sflush_r+0xcc>
 8005478:	684a      	ldr	r2, [r1, #4]
 800547a:	2a00      	cmp	r2, #0
 800547c:	dc04      	bgt.n	8005488 <__sflush_r+0x1c>
 800547e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005480:	2a00      	cmp	r2, #0
 8005482:	dc01      	bgt.n	8005488 <__sflush_r+0x1c>
 8005484:	2000      	movs	r0, #0
 8005486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005488:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800548a:	2f00      	cmp	r7, #0
 800548c:	d0fa      	beq.n	8005484 <__sflush_r+0x18>
 800548e:	2200      	movs	r2, #0
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	682e      	ldr	r6, [r5, #0]
 8005494:	602a      	str	r2, [r5, #0]
 8005496:	001a      	movs	r2, r3
 8005498:	0149      	lsls	r1, r1, #5
 800549a:	400a      	ands	r2, r1
 800549c:	420b      	tst	r3, r1
 800549e:	d034      	beq.n	800550a <__sflush_r+0x9e>
 80054a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	075b      	lsls	r3, r3, #29
 80054a6:	d506      	bpl.n	80054b6 <__sflush_r+0x4a>
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	1ac0      	subs	r0, r0, r3
 80054ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <__sflush_r+0x4a>
 80054b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054b4:	1ac0      	subs	r0, r0, r3
 80054b6:	0002      	movs	r2, r0
 80054b8:	6a21      	ldr	r1, [r4, #32]
 80054ba:	2300      	movs	r3, #0
 80054bc:	0028      	movs	r0, r5
 80054be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80054c0:	47b8      	blx	r7
 80054c2:	89a1      	ldrh	r1, [r4, #12]
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d106      	bne.n	80054d6 <__sflush_r+0x6a>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	2b1d      	cmp	r3, #29
 80054cc:	d831      	bhi.n	8005532 <__sflush_r+0xc6>
 80054ce:	4a2c      	ldr	r2, [pc, #176]	; (8005580 <__sflush_r+0x114>)
 80054d0:	40da      	lsrs	r2, r3
 80054d2:	07d3      	lsls	r3, r2, #31
 80054d4:	d52d      	bpl.n	8005532 <__sflush_r+0xc6>
 80054d6:	2300      	movs	r3, #0
 80054d8:	6063      	str	r3, [r4, #4]
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	04cb      	lsls	r3, r1, #19
 80054e0:	d505      	bpl.n	80054ee <__sflush_r+0x82>
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	d102      	bne.n	80054ec <__sflush_r+0x80>
 80054e6:	682b      	ldr	r3, [r5, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d100      	bne.n	80054ee <__sflush_r+0x82>
 80054ec:	6560      	str	r0, [r4, #84]	; 0x54
 80054ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054f0:	602e      	str	r6, [r5, #0]
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d0c6      	beq.n	8005484 <__sflush_r+0x18>
 80054f6:	0023      	movs	r3, r4
 80054f8:	3344      	adds	r3, #68	; 0x44
 80054fa:	4299      	cmp	r1, r3
 80054fc:	d002      	beq.n	8005504 <__sflush_r+0x98>
 80054fe:	0028      	movs	r0, r5
 8005500:	f7ff fd5c 	bl	8004fbc <_free_r>
 8005504:	2000      	movs	r0, #0
 8005506:	6360      	str	r0, [r4, #52]	; 0x34
 8005508:	e7bd      	b.n	8005486 <__sflush_r+0x1a>
 800550a:	2301      	movs	r3, #1
 800550c:	0028      	movs	r0, r5
 800550e:	6a21      	ldr	r1, [r4, #32]
 8005510:	47b8      	blx	r7
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	d1c5      	bne.n	80054a2 <__sflush_r+0x36>
 8005516:	682b      	ldr	r3, [r5, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0c2      	beq.n	80054a2 <__sflush_r+0x36>
 800551c:	2b1d      	cmp	r3, #29
 800551e:	d001      	beq.n	8005524 <__sflush_r+0xb8>
 8005520:	2b16      	cmp	r3, #22
 8005522:	d101      	bne.n	8005528 <__sflush_r+0xbc>
 8005524:	602e      	str	r6, [r5, #0]
 8005526:	e7ad      	b.n	8005484 <__sflush_r+0x18>
 8005528:	2340      	movs	r3, #64	; 0x40
 800552a:	89a2      	ldrh	r2, [r4, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	e7a9      	b.n	8005486 <__sflush_r+0x1a>
 8005532:	2340      	movs	r3, #64	; 0x40
 8005534:	430b      	orrs	r3, r1
 8005536:	e7fa      	b.n	800552e <__sflush_r+0xc2>
 8005538:	690f      	ldr	r7, [r1, #16]
 800553a:	2f00      	cmp	r7, #0
 800553c:	d0a2      	beq.n	8005484 <__sflush_r+0x18>
 800553e:	680a      	ldr	r2, [r1, #0]
 8005540:	600f      	str	r7, [r1, #0]
 8005542:	1bd2      	subs	r2, r2, r7
 8005544:	9201      	str	r2, [sp, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	079b      	lsls	r3, r3, #30
 800554a:	d100      	bne.n	800554e <__sflush_r+0xe2>
 800554c:	694a      	ldr	r2, [r1, #20]
 800554e:	60a2      	str	r2, [r4, #8]
 8005550:	9b01      	ldr	r3, [sp, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	dc00      	bgt.n	8005558 <__sflush_r+0xec>
 8005556:	e795      	b.n	8005484 <__sflush_r+0x18>
 8005558:	003a      	movs	r2, r7
 800555a:	0028      	movs	r0, r5
 800555c:	9b01      	ldr	r3, [sp, #4]
 800555e:	6a21      	ldr	r1, [r4, #32]
 8005560:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005562:	47b0      	blx	r6
 8005564:	2800      	cmp	r0, #0
 8005566:	dc06      	bgt.n	8005576 <__sflush_r+0x10a>
 8005568:	2340      	movs	r3, #64	; 0x40
 800556a:	2001      	movs	r0, #1
 800556c:	89a2      	ldrh	r2, [r4, #12]
 800556e:	4240      	negs	r0, r0
 8005570:	4313      	orrs	r3, r2
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	e787      	b.n	8005486 <__sflush_r+0x1a>
 8005576:	9b01      	ldr	r3, [sp, #4]
 8005578:	183f      	adds	r7, r7, r0
 800557a:	1a1b      	subs	r3, r3, r0
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	e7e7      	b.n	8005550 <__sflush_r+0xe4>
 8005580:	20400001 	.word	0x20400001

08005584 <_fflush_r>:
 8005584:	690b      	ldr	r3, [r1, #16]
 8005586:	b570      	push	{r4, r5, r6, lr}
 8005588:	0005      	movs	r5, r0
 800558a:	000c      	movs	r4, r1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <_fflush_r+0x12>
 8005590:	2500      	movs	r5, #0
 8005592:	0028      	movs	r0, r5
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	2800      	cmp	r0, #0
 8005598:	d004      	beq.n	80055a4 <_fflush_r+0x20>
 800559a:	6983      	ldr	r3, [r0, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <_fflush_r+0x20>
 80055a0:	f000 f892 	bl	80056c8 <__sinit>
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <_fflush_r+0x74>)
 80055a6:	429c      	cmp	r4, r3
 80055a8:	d11b      	bne.n	80055e2 <_fflush_r+0x5e>
 80055aa:	686c      	ldr	r4, [r5, #4]
 80055ac:	220c      	movs	r2, #12
 80055ae:	5ea3      	ldrsh	r3, [r4, r2]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0ed      	beq.n	8005590 <_fflush_r+0xc>
 80055b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055b6:	07d2      	lsls	r2, r2, #31
 80055b8:	d404      	bmi.n	80055c4 <_fflush_r+0x40>
 80055ba:	059b      	lsls	r3, r3, #22
 80055bc:	d402      	bmi.n	80055c4 <_fflush_r+0x40>
 80055be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055c0:	f000 f923 	bl	800580a <__retarget_lock_acquire_recursive>
 80055c4:	0028      	movs	r0, r5
 80055c6:	0021      	movs	r1, r4
 80055c8:	f7ff ff50 	bl	800546c <__sflush_r>
 80055cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055ce:	0005      	movs	r5, r0
 80055d0:	07db      	lsls	r3, r3, #31
 80055d2:	d4de      	bmi.n	8005592 <_fflush_r+0xe>
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	059b      	lsls	r3, r3, #22
 80055d8:	d4db      	bmi.n	8005592 <_fflush_r+0xe>
 80055da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055dc:	f000 f916 	bl	800580c <__retarget_lock_release_recursive>
 80055e0:	e7d7      	b.n	8005592 <_fflush_r+0xe>
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <_fflush_r+0x78>)
 80055e4:	429c      	cmp	r4, r3
 80055e6:	d101      	bne.n	80055ec <_fflush_r+0x68>
 80055e8:	68ac      	ldr	r4, [r5, #8]
 80055ea:	e7df      	b.n	80055ac <_fflush_r+0x28>
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <_fflush_r+0x7c>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d1dc      	bne.n	80055ac <_fflush_r+0x28>
 80055f2:	68ec      	ldr	r4, [r5, #12]
 80055f4:	e7da      	b.n	80055ac <_fflush_r+0x28>
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	080062d8 	.word	0x080062d8
 80055fc:	080062f8 	.word	0x080062f8
 8005600:	080062b8 	.word	0x080062b8

08005604 <std>:
 8005604:	2300      	movs	r3, #0
 8005606:	b510      	push	{r4, lr}
 8005608:	0004      	movs	r4, r0
 800560a:	6003      	str	r3, [r0, #0]
 800560c:	6043      	str	r3, [r0, #4]
 800560e:	6083      	str	r3, [r0, #8]
 8005610:	8181      	strh	r1, [r0, #12]
 8005612:	6643      	str	r3, [r0, #100]	; 0x64
 8005614:	0019      	movs	r1, r3
 8005616:	81c2      	strh	r2, [r0, #14]
 8005618:	6103      	str	r3, [r0, #16]
 800561a:	6143      	str	r3, [r0, #20]
 800561c:	6183      	str	r3, [r0, #24]
 800561e:	2208      	movs	r2, #8
 8005620:	305c      	adds	r0, #92	; 0x5c
 8005622:	f7ff fcc2 	bl	8004faa <memset>
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <std+0x38>)
 8005628:	6224      	str	r4, [r4, #32]
 800562a:	6263      	str	r3, [r4, #36]	; 0x24
 800562c:	4b04      	ldr	r3, [pc, #16]	; (8005640 <std+0x3c>)
 800562e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005630:	4b04      	ldr	r3, [pc, #16]	; (8005644 <std+0x40>)
 8005632:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005634:	4b04      	ldr	r3, [pc, #16]	; (8005648 <std+0x44>)
 8005636:	6323      	str	r3, [r4, #48]	; 0x30
 8005638:	bd10      	pop	{r4, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	08005ed1 	.word	0x08005ed1
 8005640:	08005ef9 	.word	0x08005ef9
 8005644:	08005f31 	.word	0x08005f31
 8005648:	08005f5d 	.word	0x08005f5d

0800564c <_cleanup_r>:
 800564c:	b510      	push	{r4, lr}
 800564e:	4902      	ldr	r1, [pc, #8]	; (8005658 <_cleanup_r+0xc>)
 8005650:	f000 f8ba 	bl	80057c8 <_fwalk_reent>
 8005654:	bd10      	pop	{r4, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	08005585 	.word	0x08005585

0800565c <__sfmoreglue>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	2568      	movs	r5, #104	; 0x68
 8005660:	1e4a      	subs	r2, r1, #1
 8005662:	4355      	muls	r5, r2
 8005664:	000e      	movs	r6, r1
 8005666:	0029      	movs	r1, r5
 8005668:	3174      	adds	r1, #116	; 0x74
 800566a:	f7ff fd13 	bl	8005094 <_malloc_r>
 800566e:	1e04      	subs	r4, r0, #0
 8005670:	d008      	beq.n	8005684 <__sfmoreglue+0x28>
 8005672:	2100      	movs	r1, #0
 8005674:	002a      	movs	r2, r5
 8005676:	6001      	str	r1, [r0, #0]
 8005678:	6046      	str	r6, [r0, #4]
 800567a:	300c      	adds	r0, #12
 800567c:	60a0      	str	r0, [r4, #8]
 800567e:	3268      	adds	r2, #104	; 0x68
 8005680:	f7ff fc93 	bl	8004faa <memset>
 8005684:	0020      	movs	r0, r4
 8005686:	bd70      	pop	{r4, r5, r6, pc}

08005688 <__sfp_lock_acquire>:
 8005688:	b510      	push	{r4, lr}
 800568a:	4802      	ldr	r0, [pc, #8]	; (8005694 <__sfp_lock_acquire+0xc>)
 800568c:	f000 f8bd 	bl	800580a <__retarget_lock_acquire_recursive>
 8005690:	bd10      	pop	{r4, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	20000475 	.word	0x20000475

08005698 <__sfp_lock_release>:
 8005698:	b510      	push	{r4, lr}
 800569a:	4802      	ldr	r0, [pc, #8]	; (80056a4 <__sfp_lock_release+0xc>)
 800569c:	f000 f8b6 	bl	800580c <__retarget_lock_release_recursive>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	20000475 	.word	0x20000475

080056a8 <__sinit_lock_acquire>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	4802      	ldr	r0, [pc, #8]	; (80056b4 <__sinit_lock_acquire+0xc>)
 80056ac:	f000 f8ad 	bl	800580a <__retarget_lock_acquire_recursive>
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	20000476 	.word	0x20000476

080056b8 <__sinit_lock_release>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	4802      	ldr	r0, [pc, #8]	; (80056c4 <__sinit_lock_release+0xc>)
 80056bc:	f000 f8a6 	bl	800580c <__retarget_lock_release_recursive>
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	20000476 	.word	0x20000476

080056c8 <__sinit>:
 80056c8:	b513      	push	{r0, r1, r4, lr}
 80056ca:	0004      	movs	r4, r0
 80056cc:	f7ff ffec 	bl	80056a8 <__sinit_lock_acquire>
 80056d0:	69a3      	ldr	r3, [r4, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <__sinit+0x14>
 80056d6:	f7ff ffef 	bl	80056b8 <__sinit_lock_release>
 80056da:	bd13      	pop	{r0, r1, r4, pc}
 80056dc:	64a3      	str	r3, [r4, #72]	; 0x48
 80056de:	64e3      	str	r3, [r4, #76]	; 0x4c
 80056e0:	6523      	str	r3, [r4, #80]	; 0x50
 80056e2:	4b13      	ldr	r3, [pc, #76]	; (8005730 <__sinit+0x68>)
 80056e4:	4a13      	ldr	r2, [pc, #76]	; (8005734 <__sinit+0x6c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	42a3      	cmp	r3, r4
 80056ee:	d101      	bne.n	80056f4 <__sinit+0x2c>
 80056f0:	2301      	movs	r3, #1
 80056f2:	61a3      	str	r3, [r4, #24]
 80056f4:	0020      	movs	r0, r4
 80056f6:	f000 f81f 	bl	8005738 <__sfp>
 80056fa:	6060      	str	r0, [r4, #4]
 80056fc:	0020      	movs	r0, r4
 80056fe:	f000 f81b 	bl	8005738 <__sfp>
 8005702:	60a0      	str	r0, [r4, #8]
 8005704:	0020      	movs	r0, r4
 8005706:	f000 f817 	bl	8005738 <__sfp>
 800570a:	2200      	movs	r2, #0
 800570c:	2104      	movs	r1, #4
 800570e:	60e0      	str	r0, [r4, #12]
 8005710:	6860      	ldr	r0, [r4, #4]
 8005712:	f7ff ff77 	bl	8005604 <std>
 8005716:	2201      	movs	r2, #1
 8005718:	2109      	movs	r1, #9
 800571a:	68a0      	ldr	r0, [r4, #8]
 800571c:	f7ff ff72 	bl	8005604 <std>
 8005720:	2202      	movs	r2, #2
 8005722:	2112      	movs	r1, #18
 8005724:	68e0      	ldr	r0, [r4, #12]
 8005726:	f7ff ff6d 	bl	8005604 <std>
 800572a:	2301      	movs	r3, #1
 800572c:	61a3      	str	r3, [r4, #24]
 800572e:	e7d2      	b.n	80056d6 <__sinit+0xe>
 8005730:	080062b4 	.word	0x080062b4
 8005734:	0800564d 	.word	0x0800564d

08005738 <__sfp>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	0007      	movs	r7, r0
 800573c:	f7ff ffa4 	bl	8005688 <__sfp_lock_acquire>
 8005740:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <__sfp+0x88>)
 8005742:	681e      	ldr	r6, [r3, #0]
 8005744:	69b3      	ldr	r3, [r6, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <__sfp+0x18>
 800574a:	0030      	movs	r0, r6
 800574c:	f7ff ffbc 	bl	80056c8 <__sinit>
 8005750:	3648      	adds	r6, #72	; 0x48
 8005752:	68b4      	ldr	r4, [r6, #8]
 8005754:	6873      	ldr	r3, [r6, #4]
 8005756:	3b01      	subs	r3, #1
 8005758:	d504      	bpl.n	8005764 <__sfp+0x2c>
 800575a:	6833      	ldr	r3, [r6, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d022      	beq.n	80057a6 <__sfp+0x6e>
 8005760:	6836      	ldr	r6, [r6, #0]
 8005762:	e7f6      	b.n	8005752 <__sfp+0x1a>
 8005764:	220c      	movs	r2, #12
 8005766:	5ea5      	ldrsh	r5, [r4, r2]
 8005768:	2d00      	cmp	r5, #0
 800576a:	d11a      	bne.n	80057a2 <__sfp+0x6a>
 800576c:	0020      	movs	r0, r4
 800576e:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <__sfp+0x8c>)
 8005770:	3058      	adds	r0, #88	; 0x58
 8005772:	60e3      	str	r3, [r4, #12]
 8005774:	6665      	str	r5, [r4, #100]	; 0x64
 8005776:	f000 f847 	bl	8005808 <__retarget_lock_init_recursive>
 800577a:	f7ff ff8d 	bl	8005698 <__sfp_lock_release>
 800577e:	0020      	movs	r0, r4
 8005780:	2208      	movs	r2, #8
 8005782:	0029      	movs	r1, r5
 8005784:	6025      	str	r5, [r4, #0]
 8005786:	60a5      	str	r5, [r4, #8]
 8005788:	6065      	str	r5, [r4, #4]
 800578a:	6125      	str	r5, [r4, #16]
 800578c:	6165      	str	r5, [r4, #20]
 800578e:	61a5      	str	r5, [r4, #24]
 8005790:	305c      	adds	r0, #92	; 0x5c
 8005792:	f7ff fc0a 	bl	8004faa <memset>
 8005796:	6365      	str	r5, [r4, #52]	; 0x34
 8005798:	63a5      	str	r5, [r4, #56]	; 0x38
 800579a:	64a5      	str	r5, [r4, #72]	; 0x48
 800579c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800579e:	0020      	movs	r0, r4
 80057a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a2:	3468      	adds	r4, #104	; 0x68
 80057a4:	e7d7      	b.n	8005756 <__sfp+0x1e>
 80057a6:	2104      	movs	r1, #4
 80057a8:	0038      	movs	r0, r7
 80057aa:	f7ff ff57 	bl	800565c <__sfmoreglue>
 80057ae:	1e04      	subs	r4, r0, #0
 80057b0:	6030      	str	r0, [r6, #0]
 80057b2:	d1d5      	bne.n	8005760 <__sfp+0x28>
 80057b4:	f7ff ff70 	bl	8005698 <__sfp_lock_release>
 80057b8:	230c      	movs	r3, #12
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	e7ef      	b.n	800579e <__sfp+0x66>
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	080062b4 	.word	0x080062b4
 80057c4:	ffff0001 	.word	0xffff0001

080057c8 <_fwalk_reent>:
 80057c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ca:	0004      	movs	r4, r0
 80057cc:	0006      	movs	r6, r0
 80057ce:	2700      	movs	r7, #0
 80057d0:	9101      	str	r1, [sp, #4]
 80057d2:	3448      	adds	r4, #72	; 0x48
 80057d4:	6863      	ldr	r3, [r4, #4]
 80057d6:	68a5      	ldr	r5, [r4, #8]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	9b00      	ldr	r3, [sp, #0]
 80057dc:	3b01      	subs	r3, #1
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	d504      	bpl.n	80057ec <_fwalk_reent+0x24>
 80057e2:	6824      	ldr	r4, [r4, #0]
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	d1f5      	bne.n	80057d4 <_fwalk_reent+0xc>
 80057e8:	0038      	movs	r0, r7
 80057ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057ec:	89ab      	ldrh	r3, [r5, #12]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d908      	bls.n	8005804 <_fwalk_reent+0x3c>
 80057f2:	220e      	movs	r2, #14
 80057f4:	5eab      	ldrsh	r3, [r5, r2]
 80057f6:	3301      	adds	r3, #1
 80057f8:	d004      	beq.n	8005804 <_fwalk_reent+0x3c>
 80057fa:	0029      	movs	r1, r5
 80057fc:	0030      	movs	r0, r6
 80057fe:	9b01      	ldr	r3, [sp, #4]
 8005800:	4798      	blx	r3
 8005802:	4307      	orrs	r7, r0
 8005804:	3568      	adds	r5, #104	; 0x68
 8005806:	e7e8      	b.n	80057da <_fwalk_reent+0x12>

08005808 <__retarget_lock_init_recursive>:
 8005808:	4770      	bx	lr

0800580a <__retarget_lock_acquire_recursive>:
 800580a:	4770      	bx	lr

0800580c <__retarget_lock_release_recursive>:
 800580c:	4770      	bx	lr
	...

08005810 <__swhatbuf_r>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	000e      	movs	r6, r1
 8005814:	001d      	movs	r5, r3
 8005816:	230e      	movs	r3, #14
 8005818:	5ec9      	ldrsh	r1, [r1, r3]
 800581a:	0014      	movs	r4, r2
 800581c:	b096      	sub	sp, #88	; 0x58
 800581e:	2900      	cmp	r1, #0
 8005820:	da08      	bge.n	8005834 <__swhatbuf_r+0x24>
 8005822:	220c      	movs	r2, #12
 8005824:	5eb3      	ldrsh	r3, [r6, r2]
 8005826:	2200      	movs	r2, #0
 8005828:	602a      	str	r2, [r5, #0]
 800582a:	061b      	lsls	r3, r3, #24
 800582c:	d411      	bmi.n	8005852 <__swhatbuf_r+0x42>
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	e00f      	b.n	8005854 <__swhatbuf_r+0x44>
 8005834:	466a      	mov	r2, sp
 8005836:	f000 fbbd 	bl	8005fb4 <_fstat_r>
 800583a:	2800      	cmp	r0, #0
 800583c:	dbf1      	blt.n	8005822 <__swhatbuf_r+0x12>
 800583e:	23f0      	movs	r3, #240	; 0xf0
 8005840:	9901      	ldr	r1, [sp, #4]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	4019      	ands	r1, r3
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <__swhatbuf_r+0x4c>)
 8005848:	18c9      	adds	r1, r1, r3
 800584a:	424b      	negs	r3, r1
 800584c:	4159      	adcs	r1, r3
 800584e:	6029      	str	r1, [r5, #0]
 8005850:	e7ed      	b.n	800582e <__swhatbuf_r+0x1e>
 8005852:	2340      	movs	r3, #64	; 0x40
 8005854:	2000      	movs	r0, #0
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	b016      	add	sp, #88	; 0x58
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	ffffe000 	.word	0xffffe000

08005860 <__smakebuf_r>:
 8005860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005862:	2602      	movs	r6, #2
 8005864:	898b      	ldrh	r3, [r1, #12]
 8005866:	0005      	movs	r5, r0
 8005868:	000c      	movs	r4, r1
 800586a:	4233      	tst	r3, r6
 800586c:	d006      	beq.n	800587c <__smakebuf_r+0x1c>
 800586e:	0023      	movs	r3, r4
 8005870:	3347      	adds	r3, #71	; 0x47
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	2301      	movs	r3, #1
 8005878:	6163      	str	r3, [r4, #20]
 800587a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800587c:	466a      	mov	r2, sp
 800587e:	ab01      	add	r3, sp, #4
 8005880:	f7ff ffc6 	bl	8005810 <__swhatbuf_r>
 8005884:	9900      	ldr	r1, [sp, #0]
 8005886:	0007      	movs	r7, r0
 8005888:	0028      	movs	r0, r5
 800588a:	f7ff fc03 	bl	8005094 <_malloc_r>
 800588e:	2800      	cmp	r0, #0
 8005890:	d108      	bne.n	80058a4 <__smakebuf_r+0x44>
 8005892:	220c      	movs	r2, #12
 8005894:	5ea3      	ldrsh	r3, [r4, r2]
 8005896:	059a      	lsls	r2, r3, #22
 8005898:	d4ef      	bmi.n	800587a <__smakebuf_r+0x1a>
 800589a:	2203      	movs	r2, #3
 800589c:	4393      	bics	r3, r2
 800589e:	431e      	orrs	r6, r3
 80058a0:	81a6      	strh	r6, [r4, #12]
 80058a2:	e7e4      	b.n	800586e <__smakebuf_r+0xe>
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <__smakebuf_r+0x84>)
 80058a6:	62ab      	str	r3, [r5, #40]	; 0x28
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	89a2      	ldrh	r2, [r4, #12]
 80058ac:	6020      	str	r0, [r4, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	9b00      	ldr	r3, [sp, #0]
 80058b4:	6120      	str	r0, [r4, #16]
 80058b6:	6163      	str	r3, [r4, #20]
 80058b8:	9b01      	ldr	r3, [sp, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <__smakebuf_r+0x7a>
 80058be:	0028      	movs	r0, r5
 80058c0:	230e      	movs	r3, #14
 80058c2:	5ee1      	ldrsh	r1, [r4, r3]
 80058c4:	f000 fb88 	bl	8005fd8 <_isatty_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d006      	beq.n	80058da <__smakebuf_r+0x7a>
 80058cc:	2203      	movs	r2, #3
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	4393      	bics	r3, r2
 80058d2:	001a      	movs	r2, r3
 80058d4:	2301      	movs	r3, #1
 80058d6:	4313      	orrs	r3, r2
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	89a0      	ldrh	r0, [r4, #12]
 80058dc:	4307      	orrs	r7, r0
 80058de:	81a7      	strh	r7, [r4, #12]
 80058e0:	e7cb      	b.n	800587a <__smakebuf_r+0x1a>
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	0800564d 	.word	0x0800564d

080058e8 <__malloc_lock>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	4802      	ldr	r0, [pc, #8]	; (80058f4 <__malloc_lock+0xc>)
 80058ec:	f7ff ff8d 	bl	800580a <__retarget_lock_acquire_recursive>
 80058f0:	bd10      	pop	{r4, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	20000474 	.word	0x20000474

080058f8 <__malloc_unlock>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	4802      	ldr	r0, [pc, #8]	; (8005904 <__malloc_unlock+0xc>)
 80058fc:	f7ff ff86 	bl	800580c <__retarget_lock_release_recursive>
 8005900:	bd10      	pop	{r4, pc}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	20000474 	.word	0x20000474

08005908 <__sfputc_r>:
 8005908:	6893      	ldr	r3, [r2, #8]
 800590a:	b510      	push	{r4, lr}
 800590c:	3b01      	subs	r3, #1
 800590e:	6093      	str	r3, [r2, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	da04      	bge.n	800591e <__sfputc_r+0x16>
 8005914:	6994      	ldr	r4, [r2, #24]
 8005916:	42a3      	cmp	r3, r4
 8005918:	db07      	blt.n	800592a <__sfputc_r+0x22>
 800591a:	290a      	cmp	r1, #10
 800591c:	d005      	beq.n	800592a <__sfputc_r+0x22>
 800591e:	6813      	ldr	r3, [r2, #0]
 8005920:	1c58      	adds	r0, r3, #1
 8005922:	6010      	str	r0, [r2, #0]
 8005924:	7019      	strb	r1, [r3, #0]
 8005926:	0008      	movs	r0, r1
 8005928:	bd10      	pop	{r4, pc}
 800592a:	f7ff fcd1 	bl	80052d0 <__swbuf_r>
 800592e:	0001      	movs	r1, r0
 8005930:	e7f9      	b.n	8005926 <__sfputc_r+0x1e>

08005932 <__sfputs_r>:
 8005932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005934:	0006      	movs	r6, r0
 8005936:	000f      	movs	r7, r1
 8005938:	0014      	movs	r4, r2
 800593a:	18d5      	adds	r5, r2, r3
 800593c:	42ac      	cmp	r4, r5
 800593e:	d101      	bne.n	8005944 <__sfputs_r+0x12>
 8005940:	2000      	movs	r0, #0
 8005942:	e007      	b.n	8005954 <__sfputs_r+0x22>
 8005944:	7821      	ldrb	r1, [r4, #0]
 8005946:	003a      	movs	r2, r7
 8005948:	0030      	movs	r0, r6
 800594a:	f7ff ffdd 	bl	8005908 <__sfputc_r>
 800594e:	3401      	adds	r4, #1
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d1f3      	bne.n	800593c <__sfputs_r+0xa>
 8005954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005958 <_vfiprintf_r>:
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595a:	b0a1      	sub	sp, #132	; 0x84
 800595c:	0006      	movs	r6, r0
 800595e:	000c      	movs	r4, r1
 8005960:	001f      	movs	r7, r3
 8005962:	9203      	str	r2, [sp, #12]
 8005964:	2800      	cmp	r0, #0
 8005966:	d004      	beq.n	8005972 <_vfiprintf_r+0x1a>
 8005968:	6983      	ldr	r3, [r0, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <_vfiprintf_r+0x1a>
 800596e:	f7ff feab 	bl	80056c8 <__sinit>
 8005972:	4b8e      	ldr	r3, [pc, #568]	; (8005bac <_vfiprintf_r+0x254>)
 8005974:	429c      	cmp	r4, r3
 8005976:	d11c      	bne.n	80059b2 <_vfiprintf_r+0x5a>
 8005978:	6874      	ldr	r4, [r6, #4]
 800597a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800597c:	07db      	lsls	r3, r3, #31
 800597e:	d405      	bmi.n	800598c <_vfiprintf_r+0x34>
 8005980:	89a3      	ldrh	r3, [r4, #12]
 8005982:	059b      	lsls	r3, r3, #22
 8005984:	d402      	bmi.n	800598c <_vfiprintf_r+0x34>
 8005986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005988:	f7ff ff3f 	bl	800580a <__retarget_lock_acquire_recursive>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	071b      	lsls	r3, r3, #28
 8005990:	d502      	bpl.n	8005998 <_vfiprintf_r+0x40>
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11d      	bne.n	80059d4 <_vfiprintf_r+0x7c>
 8005998:	0021      	movs	r1, r4
 800599a:	0030      	movs	r0, r6
 800599c:	f7ff fcee 	bl	800537c <__swsetup_r>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d017      	beq.n	80059d4 <_vfiprintf_r+0x7c>
 80059a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059a6:	07db      	lsls	r3, r3, #31
 80059a8:	d50d      	bpl.n	80059c6 <_vfiprintf_r+0x6e>
 80059aa:	2001      	movs	r0, #1
 80059ac:	4240      	negs	r0, r0
 80059ae:	b021      	add	sp, #132	; 0x84
 80059b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b2:	4b7f      	ldr	r3, [pc, #508]	; (8005bb0 <_vfiprintf_r+0x258>)
 80059b4:	429c      	cmp	r4, r3
 80059b6:	d101      	bne.n	80059bc <_vfiprintf_r+0x64>
 80059b8:	68b4      	ldr	r4, [r6, #8]
 80059ba:	e7de      	b.n	800597a <_vfiprintf_r+0x22>
 80059bc:	4b7d      	ldr	r3, [pc, #500]	; (8005bb4 <_vfiprintf_r+0x25c>)
 80059be:	429c      	cmp	r4, r3
 80059c0:	d1db      	bne.n	800597a <_vfiprintf_r+0x22>
 80059c2:	68f4      	ldr	r4, [r6, #12]
 80059c4:	e7d9      	b.n	800597a <_vfiprintf_r+0x22>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	059b      	lsls	r3, r3, #22
 80059ca:	d4ee      	bmi.n	80059aa <_vfiprintf_r+0x52>
 80059cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ce:	f7ff ff1d 	bl	800580c <__retarget_lock_release_recursive>
 80059d2:	e7ea      	b.n	80059aa <_vfiprintf_r+0x52>
 80059d4:	2300      	movs	r3, #0
 80059d6:	ad08      	add	r5, sp, #32
 80059d8:	616b      	str	r3, [r5, #20]
 80059da:	3320      	adds	r3, #32
 80059dc:	766b      	strb	r3, [r5, #25]
 80059de:	3310      	adds	r3, #16
 80059e0:	76ab      	strb	r3, [r5, #26]
 80059e2:	9707      	str	r7, [sp, #28]
 80059e4:	9f03      	ldr	r7, [sp, #12]
 80059e6:	783b      	ldrb	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <_vfiprintf_r+0x98>
 80059ec:	2b25      	cmp	r3, #37	; 0x25
 80059ee:	d14e      	bne.n	8005a8e <_vfiprintf_r+0x136>
 80059f0:	9b03      	ldr	r3, [sp, #12]
 80059f2:	1afb      	subs	r3, r7, r3
 80059f4:	9305      	str	r3, [sp, #20]
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	429f      	cmp	r7, r3
 80059fa:	d00d      	beq.n	8005a18 <_vfiprintf_r+0xc0>
 80059fc:	9b05      	ldr	r3, [sp, #20]
 80059fe:	0021      	movs	r1, r4
 8005a00:	0030      	movs	r0, r6
 8005a02:	9a03      	ldr	r2, [sp, #12]
 8005a04:	f7ff ff95 	bl	8005932 <__sfputs_r>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d100      	bne.n	8005a0e <_vfiprintf_r+0xb6>
 8005a0c:	e0b5      	b.n	8005b7a <_vfiprintf_r+0x222>
 8005a0e:	696a      	ldr	r2, [r5, #20]
 8005a10:	9b05      	ldr	r3, [sp, #20]
 8005a12:	4694      	mov	ip, r2
 8005a14:	4463      	add	r3, ip
 8005a16:	616b      	str	r3, [r5, #20]
 8005a18:	783b      	ldrb	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d100      	bne.n	8005a20 <_vfiprintf_r+0xc8>
 8005a1e:	e0ac      	b.n	8005b7a <_vfiprintf_r+0x222>
 8005a20:	2201      	movs	r2, #1
 8005a22:	1c7b      	adds	r3, r7, #1
 8005a24:	9303      	str	r3, [sp, #12]
 8005a26:	2300      	movs	r3, #0
 8005a28:	4252      	negs	r2, r2
 8005a2a:	606a      	str	r2, [r5, #4]
 8005a2c:	a904      	add	r1, sp, #16
 8005a2e:	3254      	adds	r2, #84	; 0x54
 8005a30:	1852      	adds	r2, r2, r1
 8005a32:	602b      	str	r3, [r5, #0]
 8005a34:	60eb      	str	r3, [r5, #12]
 8005a36:	60ab      	str	r3, [r5, #8]
 8005a38:	7013      	strb	r3, [r2, #0]
 8005a3a:	65ab      	str	r3, [r5, #88]	; 0x58
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	2205      	movs	r2, #5
 8005a40:	7819      	ldrb	r1, [r3, #0]
 8005a42:	485d      	ldr	r0, [pc, #372]	; (8005bb8 <_vfiprintf_r+0x260>)
 8005a44:	f000 faee 	bl	8006024 <memchr>
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	1c5f      	adds	r7, r3, #1
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d120      	bne.n	8005a92 <_vfiprintf_r+0x13a>
 8005a50:	682a      	ldr	r2, [r5, #0]
 8005a52:	06d3      	lsls	r3, r2, #27
 8005a54:	d504      	bpl.n	8005a60 <_vfiprintf_r+0x108>
 8005a56:	2353      	movs	r3, #83	; 0x53
 8005a58:	a904      	add	r1, sp, #16
 8005a5a:	185b      	adds	r3, r3, r1
 8005a5c:	2120      	movs	r1, #32
 8005a5e:	7019      	strb	r1, [r3, #0]
 8005a60:	0713      	lsls	r3, r2, #28
 8005a62:	d504      	bpl.n	8005a6e <_vfiprintf_r+0x116>
 8005a64:	2353      	movs	r3, #83	; 0x53
 8005a66:	a904      	add	r1, sp, #16
 8005a68:	185b      	adds	r3, r3, r1
 8005a6a:	212b      	movs	r1, #43	; 0x2b
 8005a6c:	7019      	strb	r1, [r3, #0]
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b2a      	cmp	r3, #42	; 0x2a
 8005a74:	d016      	beq.n	8005aa4 <_vfiprintf_r+0x14c>
 8005a76:	2100      	movs	r1, #0
 8005a78:	68eb      	ldr	r3, [r5, #12]
 8005a7a:	9f03      	ldr	r7, [sp, #12]
 8005a7c:	783a      	ldrb	r2, [r7, #0]
 8005a7e:	1c78      	adds	r0, r7, #1
 8005a80:	3a30      	subs	r2, #48	; 0x30
 8005a82:	4684      	mov	ip, r0
 8005a84:	2a09      	cmp	r2, #9
 8005a86:	d94f      	bls.n	8005b28 <_vfiprintf_r+0x1d0>
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	d111      	bne.n	8005ab0 <_vfiprintf_r+0x158>
 8005a8c:	e017      	b.n	8005abe <_vfiprintf_r+0x166>
 8005a8e:	3701      	adds	r7, #1
 8005a90:	e7a9      	b.n	80059e6 <_vfiprintf_r+0x8e>
 8005a92:	4b49      	ldr	r3, [pc, #292]	; (8005bb8 <_vfiprintf_r+0x260>)
 8005a94:	682a      	ldr	r2, [r5, #0]
 8005a96:	1ac0      	subs	r0, r0, r3
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4083      	lsls	r3, r0
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	9703      	str	r7, [sp, #12]
 8005aa2:	e7cb      	b.n	8005a3c <_vfiprintf_r+0xe4>
 8005aa4:	9b07      	ldr	r3, [sp, #28]
 8005aa6:	1d19      	adds	r1, r3, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	9107      	str	r1, [sp, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	db01      	blt.n	8005ab4 <_vfiprintf_r+0x15c>
 8005ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab2:	e004      	b.n	8005abe <_vfiprintf_r+0x166>
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	60eb      	str	r3, [r5, #12]
 8005ab8:	2302      	movs	r3, #2
 8005aba:	4313      	orrs	r3, r2
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	783b      	ldrb	r3, [r7, #0]
 8005ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ac2:	d10a      	bne.n	8005ada <_vfiprintf_r+0x182>
 8005ac4:	787b      	ldrb	r3, [r7, #1]
 8005ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac8:	d137      	bne.n	8005b3a <_vfiprintf_r+0x1e2>
 8005aca:	9b07      	ldr	r3, [sp, #28]
 8005acc:	3702      	adds	r7, #2
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	9207      	str	r2, [sp, #28]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	db2d      	blt.n	8005b34 <_vfiprintf_r+0x1dc>
 8005ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ada:	2203      	movs	r2, #3
 8005adc:	7839      	ldrb	r1, [r7, #0]
 8005ade:	4837      	ldr	r0, [pc, #220]	; (8005bbc <_vfiprintf_r+0x264>)
 8005ae0:	f000 faa0 	bl	8006024 <memchr>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d007      	beq.n	8005af8 <_vfiprintf_r+0x1a0>
 8005ae8:	4b34      	ldr	r3, [pc, #208]	; (8005bbc <_vfiprintf_r+0x264>)
 8005aea:	682a      	ldr	r2, [r5, #0]
 8005aec:	1ac0      	subs	r0, r0, r3
 8005aee:	2340      	movs	r3, #64	; 0x40
 8005af0:	4083      	lsls	r3, r0
 8005af2:	4313      	orrs	r3, r2
 8005af4:	3701      	adds	r7, #1
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	7839      	ldrb	r1, [r7, #0]
 8005afa:	1c7b      	adds	r3, r7, #1
 8005afc:	2206      	movs	r2, #6
 8005afe:	4830      	ldr	r0, [pc, #192]	; (8005bc0 <_vfiprintf_r+0x268>)
 8005b00:	9303      	str	r3, [sp, #12]
 8005b02:	7629      	strb	r1, [r5, #24]
 8005b04:	f000 fa8e 	bl	8006024 <memchr>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d045      	beq.n	8005b98 <_vfiprintf_r+0x240>
 8005b0c:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <_vfiprintf_r+0x26c>)
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d127      	bne.n	8005b62 <_vfiprintf_r+0x20a>
 8005b12:	2207      	movs	r2, #7
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	3307      	adds	r3, #7
 8005b18:	4393      	bics	r3, r2
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	9307      	str	r3, [sp, #28]
 8005b1e:	696b      	ldr	r3, [r5, #20]
 8005b20:	9a04      	ldr	r2, [sp, #16]
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	616b      	str	r3, [r5, #20]
 8005b26:	e75d      	b.n	80059e4 <_vfiprintf_r+0x8c>
 8005b28:	210a      	movs	r1, #10
 8005b2a:	434b      	muls	r3, r1
 8005b2c:	4667      	mov	r7, ip
 8005b2e:	189b      	adds	r3, r3, r2
 8005b30:	3909      	subs	r1, #9
 8005b32:	e7a3      	b.n	8005a7c <_vfiprintf_r+0x124>
 8005b34:	2301      	movs	r3, #1
 8005b36:	425b      	negs	r3, r3
 8005b38:	e7ce      	b.n	8005ad8 <_vfiprintf_r+0x180>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	001a      	movs	r2, r3
 8005b3e:	3701      	adds	r7, #1
 8005b40:	606b      	str	r3, [r5, #4]
 8005b42:	7839      	ldrb	r1, [r7, #0]
 8005b44:	1c78      	adds	r0, r7, #1
 8005b46:	3930      	subs	r1, #48	; 0x30
 8005b48:	4684      	mov	ip, r0
 8005b4a:	2909      	cmp	r1, #9
 8005b4c:	d903      	bls.n	8005b56 <_vfiprintf_r+0x1fe>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0c3      	beq.n	8005ada <_vfiprintf_r+0x182>
 8005b52:	9209      	str	r2, [sp, #36]	; 0x24
 8005b54:	e7c1      	b.n	8005ada <_vfiprintf_r+0x182>
 8005b56:	230a      	movs	r3, #10
 8005b58:	435a      	muls	r2, r3
 8005b5a:	4667      	mov	r7, ip
 8005b5c:	1852      	adds	r2, r2, r1
 8005b5e:	3b09      	subs	r3, #9
 8005b60:	e7ef      	b.n	8005b42 <_vfiprintf_r+0x1ea>
 8005b62:	ab07      	add	r3, sp, #28
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	0022      	movs	r2, r4
 8005b68:	0029      	movs	r1, r5
 8005b6a:	0030      	movs	r0, r6
 8005b6c:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <_vfiprintf_r+0x270>)
 8005b6e:	e000      	b.n	8005b72 <_vfiprintf_r+0x21a>
 8005b70:	bf00      	nop
 8005b72:	9004      	str	r0, [sp, #16]
 8005b74:	9b04      	ldr	r3, [sp, #16]
 8005b76:	3301      	adds	r3, #1
 8005b78:	d1d1      	bne.n	8005b1e <_vfiprintf_r+0x1c6>
 8005b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b7c:	07db      	lsls	r3, r3, #31
 8005b7e:	d405      	bmi.n	8005b8c <_vfiprintf_r+0x234>
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	059b      	lsls	r3, r3, #22
 8005b84:	d402      	bmi.n	8005b8c <_vfiprintf_r+0x234>
 8005b86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b88:	f7ff fe40 	bl	800580c <__retarget_lock_release_recursive>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	065b      	lsls	r3, r3, #25
 8005b90:	d500      	bpl.n	8005b94 <_vfiprintf_r+0x23c>
 8005b92:	e70a      	b.n	80059aa <_vfiprintf_r+0x52>
 8005b94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b96:	e70a      	b.n	80059ae <_vfiprintf_r+0x56>
 8005b98:	ab07      	add	r3, sp, #28
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	0022      	movs	r2, r4
 8005b9e:	0029      	movs	r1, r5
 8005ba0:	0030      	movs	r0, r6
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <_vfiprintf_r+0x270>)
 8005ba4:	f000 f882 	bl	8005cac <_printf_i>
 8005ba8:	e7e3      	b.n	8005b72 <_vfiprintf_r+0x21a>
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	080062d8 	.word	0x080062d8
 8005bb0:	080062f8 	.word	0x080062f8
 8005bb4:	080062b8 	.word	0x080062b8
 8005bb8:	08006318 	.word	0x08006318
 8005bbc:	0800631e 	.word	0x0800631e
 8005bc0:	08006322 	.word	0x08006322
 8005bc4:	00000000 	.word	0x00000000
 8005bc8:	08005933 	.word	0x08005933

08005bcc <_printf_common>:
 8005bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bce:	0015      	movs	r5, r2
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	688a      	ldr	r2, [r1, #8]
 8005bd4:	690b      	ldr	r3, [r1, #16]
 8005bd6:	000c      	movs	r4, r1
 8005bd8:	9000      	str	r0, [sp, #0]
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	da00      	bge.n	8005be0 <_printf_common+0x14>
 8005bde:	0013      	movs	r3, r2
 8005be0:	0022      	movs	r2, r4
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	3243      	adds	r2, #67	; 0x43
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	2a00      	cmp	r2, #0
 8005bea:	d001      	beq.n	8005bf0 <_printf_common+0x24>
 8005bec:	3301      	adds	r3, #1
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	069b      	lsls	r3, r3, #26
 8005bf4:	d502      	bpl.n	8005bfc <_printf_common+0x30>
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	2306      	movs	r3, #6
 8005c00:	0017      	movs	r7, r2
 8005c02:	401f      	ands	r7, r3
 8005c04:	421a      	tst	r2, r3
 8005c06:	d027      	beq.n	8005c58 <_printf_common+0x8c>
 8005c08:	0023      	movs	r3, r4
 8005c0a:	3343      	adds	r3, #67	; 0x43
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	1e5a      	subs	r2, r3, #1
 8005c10:	4193      	sbcs	r3, r2
 8005c12:	6822      	ldr	r2, [r4, #0]
 8005c14:	0692      	lsls	r2, r2, #26
 8005c16:	d430      	bmi.n	8005c7a <_printf_common+0xae>
 8005c18:	0022      	movs	r2, r4
 8005c1a:	9901      	ldr	r1, [sp, #4]
 8005c1c:	9800      	ldr	r0, [sp, #0]
 8005c1e:	9e08      	ldr	r6, [sp, #32]
 8005c20:	3243      	adds	r2, #67	; 0x43
 8005c22:	47b0      	blx	r6
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d025      	beq.n	8005c74 <_printf_common+0xa8>
 8005c28:	2306      	movs	r3, #6
 8005c2a:	6820      	ldr	r0, [r4, #0]
 8005c2c:	682a      	ldr	r2, [r5, #0]
 8005c2e:	68e1      	ldr	r1, [r4, #12]
 8005c30:	2500      	movs	r5, #0
 8005c32:	4003      	ands	r3, r0
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d103      	bne.n	8005c40 <_printf_common+0x74>
 8005c38:	1a8d      	subs	r5, r1, r2
 8005c3a:	43eb      	mvns	r3, r5
 8005c3c:	17db      	asrs	r3, r3, #31
 8005c3e:	401d      	ands	r5, r3
 8005c40:	68a3      	ldr	r3, [r4, #8]
 8005c42:	6922      	ldr	r2, [r4, #16]
 8005c44:	4293      	cmp	r3, r2
 8005c46:	dd01      	ble.n	8005c4c <_printf_common+0x80>
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	18ed      	adds	r5, r5, r3
 8005c4c:	2700      	movs	r7, #0
 8005c4e:	42bd      	cmp	r5, r7
 8005c50:	d120      	bne.n	8005c94 <_printf_common+0xc8>
 8005c52:	2000      	movs	r0, #0
 8005c54:	e010      	b.n	8005c78 <_printf_common+0xac>
 8005c56:	3701      	adds	r7, #1
 8005c58:	68e3      	ldr	r3, [r4, #12]
 8005c5a:	682a      	ldr	r2, [r5, #0]
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	42bb      	cmp	r3, r7
 8005c60:	ddd2      	ble.n	8005c08 <_printf_common+0x3c>
 8005c62:	0022      	movs	r2, r4
 8005c64:	2301      	movs	r3, #1
 8005c66:	9901      	ldr	r1, [sp, #4]
 8005c68:	9800      	ldr	r0, [sp, #0]
 8005c6a:	9e08      	ldr	r6, [sp, #32]
 8005c6c:	3219      	adds	r2, #25
 8005c6e:	47b0      	blx	r6
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d1f0      	bne.n	8005c56 <_printf_common+0x8a>
 8005c74:	2001      	movs	r0, #1
 8005c76:	4240      	negs	r0, r0
 8005c78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c7a:	2030      	movs	r0, #48	; 0x30
 8005c7c:	18e1      	adds	r1, r4, r3
 8005c7e:	3143      	adds	r1, #67	; 0x43
 8005c80:	7008      	strb	r0, [r1, #0]
 8005c82:	0021      	movs	r1, r4
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	3145      	adds	r1, #69	; 0x45
 8005c88:	7809      	ldrb	r1, [r1, #0]
 8005c8a:	18a2      	adds	r2, r4, r2
 8005c8c:	3243      	adds	r2, #67	; 0x43
 8005c8e:	3302      	adds	r3, #2
 8005c90:	7011      	strb	r1, [r2, #0]
 8005c92:	e7c1      	b.n	8005c18 <_printf_common+0x4c>
 8005c94:	0022      	movs	r2, r4
 8005c96:	2301      	movs	r3, #1
 8005c98:	9901      	ldr	r1, [sp, #4]
 8005c9a:	9800      	ldr	r0, [sp, #0]
 8005c9c:	9e08      	ldr	r6, [sp, #32]
 8005c9e:	321a      	adds	r2, #26
 8005ca0:	47b0      	blx	r6
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	d0e6      	beq.n	8005c74 <_printf_common+0xa8>
 8005ca6:	3701      	adds	r7, #1
 8005ca8:	e7d1      	b.n	8005c4e <_printf_common+0x82>
	...

08005cac <_printf_i>:
 8005cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cae:	b08b      	sub	sp, #44	; 0x2c
 8005cb0:	9206      	str	r2, [sp, #24]
 8005cb2:	000a      	movs	r2, r1
 8005cb4:	3243      	adds	r2, #67	; 0x43
 8005cb6:	9307      	str	r3, [sp, #28]
 8005cb8:	9005      	str	r0, [sp, #20]
 8005cba:	9204      	str	r2, [sp, #16]
 8005cbc:	7e0a      	ldrb	r2, [r1, #24]
 8005cbe:	000c      	movs	r4, r1
 8005cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cc2:	2a78      	cmp	r2, #120	; 0x78
 8005cc4:	d807      	bhi.n	8005cd6 <_printf_i+0x2a>
 8005cc6:	2a62      	cmp	r2, #98	; 0x62
 8005cc8:	d809      	bhi.n	8005cde <_printf_i+0x32>
 8005cca:	2a00      	cmp	r2, #0
 8005ccc:	d100      	bne.n	8005cd0 <_printf_i+0x24>
 8005cce:	e0c1      	b.n	8005e54 <_printf_i+0x1a8>
 8005cd0:	2a58      	cmp	r2, #88	; 0x58
 8005cd2:	d100      	bne.n	8005cd6 <_printf_i+0x2a>
 8005cd4:	e08c      	b.n	8005df0 <_printf_i+0x144>
 8005cd6:	0026      	movs	r6, r4
 8005cd8:	3642      	adds	r6, #66	; 0x42
 8005cda:	7032      	strb	r2, [r6, #0]
 8005cdc:	e022      	b.n	8005d24 <_printf_i+0x78>
 8005cde:	0010      	movs	r0, r2
 8005ce0:	3863      	subs	r0, #99	; 0x63
 8005ce2:	2815      	cmp	r0, #21
 8005ce4:	d8f7      	bhi.n	8005cd6 <_printf_i+0x2a>
 8005ce6:	f7fa fa0f 	bl	8000108 <__gnu_thumb1_case_shi>
 8005cea:	0016      	.short	0x0016
 8005cec:	fff6001f 	.word	0xfff6001f
 8005cf0:	fff6fff6 	.word	0xfff6fff6
 8005cf4:	001ffff6 	.word	0x001ffff6
 8005cf8:	fff6fff6 	.word	0xfff6fff6
 8005cfc:	fff6fff6 	.word	0xfff6fff6
 8005d00:	003600a8 	.word	0x003600a8
 8005d04:	fff6009a 	.word	0xfff6009a
 8005d08:	00b9fff6 	.word	0x00b9fff6
 8005d0c:	0036fff6 	.word	0x0036fff6
 8005d10:	fff6fff6 	.word	0xfff6fff6
 8005d14:	009e      	.short	0x009e
 8005d16:	0026      	movs	r6, r4
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	3642      	adds	r6, #66	; 0x42
 8005d1c:	1d11      	adds	r1, r2, #4
 8005d1e:	6019      	str	r1, [r3, #0]
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	7033      	strb	r3, [r6, #0]
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0a7      	b.n	8005e78 <_printf_i+0x1cc>
 8005d28:	6808      	ldr	r0, [r1, #0]
 8005d2a:	6819      	ldr	r1, [r3, #0]
 8005d2c:	1d0a      	adds	r2, r1, #4
 8005d2e:	0605      	lsls	r5, r0, #24
 8005d30:	d50b      	bpl.n	8005d4a <_printf_i+0x9e>
 8005d32:	680d      	ldr	r5, [r1, #0]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	da03      	bge.n	8005d42 <_printf_i+0x96>
 8005d3a:	232d      	movs	r3, #45	; 0x2d
 8005d3c:	9a04      	ldr	r2, [sp, #16]
 8005d3e:	426d      	negs	r5, r5
 8005d40:	7013      	strb	r3, [r2, #0]
 8005d42:	4b61      	ldr	r3, [pc, #388]	; (8005ec8 <_printf_i+0x21c>)
 8005d44:	270a      	movs	r7, #10
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	e01b      	b.n	8005d82 <_printf_i+0xd6>
 8005d4a:	680d      	ldr	r5, [r1, #0]
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	0641      	lsls	r1, r0, #25
 8005d50:	d5f1      	bpl.n	8005d36 <_printf_i+0x8a>
 8005d52:	b22d      	sxth	r5, r5
 8005d54:	e7ef      	b.n	8005d36 <_printf_i+0x8a>
 8005d56:	680d      	ldr	r5, [r1, #0]
 8005d58:	6819      	ldr	r1, [r3, #0]
 8005d5a:	1d08      	adds	r0, r1, #4
 8005d5c:	6018      	str	r0, [r3, #0]
 8005d5e:	062e      	lsls	r6, r5, #24
 8005d60:	d501      	bpl.n	8005d66 <_printf_i+0xba>
 8005d62:	680d      	ldr	r5, [r1, #0]
 8005d64:	e003      	b.n	8005d6e <_printf_i+0xc2>
 8005d66:	066d      	lsls	r5, r5, #25
 8005d68:	d5fb      	bpl.n	8005d62 <_printf_i+0xb6>
 8005d6a:	680d      	ldr	r5, [r1, #0]
 8005d6c:	b2ad      	uxth	r5, r5
 8005d6e:	4b56      	ldr	r3, [pc, #344]	; (8005ec8 <_printf_i+0x21c>)
 8005d70:	2708      	movs	r7, #8
 8005d72:	9303      	str	r3, [sp, #12]
 8005d74:	2a6f      	cmp	r2, #111	; 0x6f
 8005d76:	d000      	beq.n	8005d7a <_printf_i+0xce>
 8005d78:	3702      	adds	r7, #2
 8005d7a:	0023      	movs	r3, r4
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	3343      	adds	r3, #67	; 0x43
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	60a3      	str	r3, [r4, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	db03      	blt.n	8005d92 <_printf_i+0xe6>
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	6821      	ldr	r1, [r4, #0]
 8005d8e:	4391      	bics	r1, r2
 8005d90:	6021      	str	r1, [r4, #0]
 8005d92:	2d00      	cmp	r5, #0
 8005d94:	d102      	bne.n	8005d9c <_printf_i+0xf0>
 8005d96:	9e04      	ldr	r6, [sp, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00c      	beq.n	8005db6 <_printf_i+0x10a>
 8005d9c:	9e04      	ldr	r6, [sp, #16]
 8005d9e:	0028      	movs	r0, r5
 8005da0:	0039      	movs	r1, r7
 8005da2:	f7fa fa41 	bl	8000228 <__aeabi_uidivmod>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	3e01      	subs	r6, #1
 8005daa:	5c5b      	ldrb	r3, [r3, r1]
 8005dac:	7033      	strb	r3, [r6, #0]
 8005dae:	002b      	movs	r3, r5
 8005db0:	0005      	movs	r5, r0
 8005db2:	429f      	cmp	r7, r3
 8005db4:	d9f3      	bls.n	8005d9e <_printf_i+0xf2>
 8005db6:	2f08      	cmp	r7, #8
 8005db8:	d109      	bne.n	8005dce <_printf_i+0x122>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	07db      	lsls	r3, r3, #31
 8005dbe:	d506      	bpl.n	8005dce <_printf_i+0x122>
 8005dc0:	6863      	ldr	r3, [r4, #4]
 8005dc2:	6922      	ldr	r2, [r4, #16]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	dc02      	bgt.n	8005dce <_printf_i+0x122>
 8005dc8:	2330      	movs	r3, #48	; 0x30
 8005dca:	3e01      	subs	r6, #1
 8005dcc:	7033      	strb	r3, [r6, #0]
 8005dce:	9b04      	ldr	r3, [sp, #16]
 8005dd0:	1b9b      	subs	r3, r3, r6
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	9b07      	ldr	r3, [sp, #28]
 8005dd6:	0021      	movs	r1, r4
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	9805      	ldr	r0, [sp, #20]
 8005ddc:	9b06      	ldr	r3, [sp, #24]
 8005dde:	aa09      	add	r2, sp, #36	; 0x24
 8005de0:	f7ff fef4 	bl	8005bcc <_printf_common>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d14c      	bne.n	8005e82 <_printf_i+0x1d6>
 8005de8:	2001      	movs	r0, #1
 8005dea:	4240      	negs	r0, r0
 8005dec:	b00b      	add	sp, #44	; 0x2c
 8005dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df0:	3145      	adds	r1, #69	; 0x45
 8005df2:	700a      	strb	r2, [r1, #0]
 8005df4:	4a34      	ldr	r2, [pc, #208]	; (8005ec8 <_printf_i+0x21c>)
 8005df6:	9203      	str	r2, [sp, #12]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	6821      	ldr	r1, [r4, #0]
 8005dfc:	ca20      	ldmia	r2!, {r5}
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	0608      	lsls	r0, r1, #24
 8005e02:	d516      	bpl.n	8005e32 <_printf_i+0x186>
 8005e04:	07cb      	lsls	r3, r1, #31
 8005e06:	d502      	bpl.n	8005e0e <_printf_i+0x162>
 8005e08:	2320      	movs	r3, #32
 8005e0a:	4319      	orrs	r1, r3
 8005e0c:	6021      	str	r1, [r4, #0]
 8005e0e:	2710      	movs	r7, #16
 8005e10:	2d00      	cmp	r5, #0
 8005e12:	d1b2      	bne.n	8005d7a <_printf_i+0xce>
 8005e14:	2320      	movs	r3, #32
 8005e16:	6822      	ldr	r2, [r4, #0]
 8005e18:	439a      	bics	r2, r3
 8005e1a:	6022      	str	r2, [r4, #0]
 8005e1c:	e7ad      	b.n	8005d7a <_printf_i+0xce>
 8005e1e:	2220      	movs	r2, #32
 8005e20:	6809      	ldr	r1, [r1, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	6022      	str	r2, [r4, #0]
 8005e26:	0022      	movs	r2, r4
 8005e28:	2178      	movs	r1, #120	; 0x78
 8005e2a:	3245      	adds	r2, #69	; 0x45
 8005e2c:	7011      	strb	r1, [r2, #0]
 8005e2e:	4a27      	ldr	r2, [pc, #156]	; (8005ecc <_printf_i+0x220>)
 8005e30:	e7e1      	b.n	8005df6 <_printf_i+0x14a>
 8005e32:	0648      	lsls	r0, r1, #25
 8005e34:	d5e6      	bpl.n	8005e04 <_printf_i+0x158>
 8005e36:	b2ad      	uxth	r5, r5
 8005e38:	e7e4      	b.n	8005e04 <_printf_i+0x158>
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	680d      	ldr	r5, [r1, #0]
 8005e3e:	1d10      	adds	r0, r2, #4
 8005e40:	6949      	ldr	r1, [r1, #20]
 8005e42:	6018      	str	r0, [r3, #0]
 8005e44:	6813      	ldr	r3, [r2, #0]
 8005e46:	062e      	lsls	r6, r5, #24
 8005e48:	d501      	bpl.n	8005e4e <_printf_i+0x1a2>
 8005e4a:	6019      	str	r1, [r3, #0]
 8005e4c:	e002      	b.n	8005e54 <_printf_i+0x1a8>
 8005e4e:	066d      	lsls	r5, r5, #25
 8005e50:	d5fb      	bpl.n	8005e4a <_printf_i+0x19e>
 8005e52:	8019      	strh	r1, [r3, #0]
 8005e54:	2300      	movs	r3, #0
 8005e56:	9e04      	ldr	r6, [sp, #16]
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	e7bb      	b.n	8005dd4 <_printf_i+0x128>
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	1d11      	adds	r1, r2, #4
 8005e60:	6019      	str	r1, [r3, #0]
 8005e62:	6816      	ldr	r6, [r2, #0]
 8005e64:	2100      	movs	r1, #0
 8005e66:	0030      	movs	r0, r6
 8005e68:	6862      	ldr	r2, [r4, #4]
 8005e6a:	f000 f8db 	bl	8006024 <memchr>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d001      	beq.n	8005e76 <_printf_i+0x1ca>
 8005e72:	1b80      	subs	r0, r0, r6
 8005e74:	6060      	str	r0, [r4, #4]
 8005e76:	6863      	ldr	r3, [r4, #4]
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9a04      	ldr	r2, [sp, #16]
 8005e7e:	7013      	strb	r3, [r2, #0]
 8005e80:	e7a8      	b.n	8005dd4 <_printf_i+0x128>
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	0032      	movs	r2, r6
 8005e86:	9906      	ldr	r1, [sp, #24]
 8005e88:	9805      	ldr	r0, [sp, #20]
 8005e8a:	9d07      	ldr	r5, [sp, #28]
 8005e8c:	47a8      	blx	r5
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	d0aa      	beq.n	8005de8 <_printf_i+0x13c>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	079b      	lsls	r3, r3, #30
 8005e96:	d415      	bmi.n	8005ec4 <_printf_i+0x218>
 8005e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9a:	68e0      	ldr	r0, [r4, #12]
 8005e9c:	4298      	cmp	r0, r3
 8005e9e:	daa5      	bge.n	8005dec <_printf_i+0x140>
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	e7a3      	b.n	8005dec <_printf_i+0x140>
 8005ea4:	0022      	movs	r2, r4
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	9906      	ldr	r1, [sp, #24]
 8005eaa:	9805      	ldr	r0, [sp, #20]
 8005eac:	9e07      	ldr	r6, [sp, #28]
 8005eae:	3219      	adds	r2, #25
 8005eb0:	47b0      	blx	r6
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d098      	beq.n	8005de8 <_printf_i+0x13c>
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	68e3      	ldr	r3, [r4, #12]
 8005eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	dcf0      	bgt.n	8005ea4 <_printf_i+0x1f8>
 8005ec2:	e7e9      	b.n	8005e98 <_printf_i+0x1ec>
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	e7f7      	b.n	8005eb8 <_printf_i+0x20c>
 8005ec8:	08006329 	.word	0x08006329
 8005ecc:	0800633a 	.word	0x0800633a

08005ed0 <__sread>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	000c      	movs	r4, r1
 8005ed4:	250e      	movs	r5, #14
 8005ed6:	5f49      	ldrsh	r1, [r1, r5]
 8005ed8:	f000 f8b0 	bl	800603c <_read_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	db03      	blt.n	8005ee8 <__sread+0x18>
 8005ee0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ee2:	181b      	adds	r3, r3, r0
 8005ee4:	6563      	str	r3, [r4, #84]	; 0x54
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	4a02      	ldr	r2, [pc, #8]	; (8005ef4 <__sread+0x24>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	81a3      	strh	r3, [r4, #12]
 8005ef0:	e7f9      	b.n	8005ee6 <__sread+0x16>
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	ffffefff 	.word	0xffffefff

08005ef8 <__swrite>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	001f      	movs	r7, r3
 8005efc:	898b      	ldrh	r3, [r1, #12]
 8005efe:	0005      	movs	r5, r0
 8005f00:	000c      	movs	r4, r1
 8005f02:	0016      	movs	r6, r2
 8005f04:	05db      	lsls	r3, r3, #23
 8005f06:	d505      	bpl.n	8005f14 <__swrite+0x1c>
 8005f08:	230e      	movs	r3, #14
 8005f0a:	5ec9      	ldrsh	r1, [r1, r3]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2302      	movs	r3, #2
 8005f10:	f000 f874 	bl	8005ffc <_lseek_r>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	4a05      	ldr	r2, [pc, #20]	; (8005f2c <__swrite+0x34>)
 8005f18:	0028      	movs	r0, r5
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	0032      	movs	r2, r6
 8005f20:	230e      	movs	r3, #14
 8005f22:	5ee1      	ldrsh	r1, [r4, r3]
 8005f24:	003b      	movs	r3, r7
 8005f26:	f000 f81f 	bl	8005f68 <_write_r>
 8005f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f2c:	ffffefff 	.word	0xffffefff

08005f30 <__sseek>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	000c      	movs	r4, r1
 8005f34:	250e      	movs	r5, #14
 8005f36:	5f49      	ldrsh	r1, [r1, r5]
 8005f38:	f000 f860 	bl	8005ffc <_lseek_r>
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	1c42      	adds	r2, r0, #1
 8005f40:	d103      	bne.n	8005f4a <__sseek+0x1a>
 8005f42:	4a05      	ldr	r2, [pc, #20]	; (8005f58 <__sseek+0x28>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	81a3      	strh	r3, [r4, #12]
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	0152      	lsls	r2, r2, #5
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	6560      	str	r0, [r4, #84]	; 0x54
 8005f54:	e7f8      	b.n	8005f48 <__sseek+0x18>
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	ffffefff 	.word	0xffffefff

08005f5c <__sclose>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	230e      	movs	r3, #14
 8005f60:	5ec9      	ldrsh	r1, [r1, r3]
 8005f62:	f000 f815 	bl	8005f90 <_close_r>
 8005f66:	bd10      	pop	{r4, pc}

08005f68 <_write_r>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	0004      	movs	r4, r0
 8005f6c:	0008      	movs	r0, r1
 8005f6e:	0011      	movs	r1, r2
 8005f70:	001a      	movs	r2, r3
 8005f72:	2300      	movs	r3, #0
 8005f74:	4d05      	ldr	r5, [pc, #20]	; (8005f8c <_write_r+0x24>)
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	f7fb fed7 	bl	8001d2a <_write>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d103      	bne.n	8005f88 <_write_r+0x20>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d000      	beq.n	8005f88 <_write_r+0x20>
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	20000478 	.word	0x20000478

08005f90 <_close_r>:
 8005f90:	2300      	movs	r3, #0
 8005f92:	b570      	push	{r4, r5, r6, lr}
 8005f94:	4d06      	ldr	r5, [pc, #24]	; (8005fb0 <_close_r+0x20>)
 8005f96:	0004      	movs	r4, r0
 8005f98:	0008      	movs	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fb fee1 	bl	8001d62 <_close>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d103      	bne.n	8005fac <_close_r+0x1c>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d000      	beq.n	8005fac <_close_r+0x1c>
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	20000478 	.word	0x20000478

08005fb4 <_fstat_r>:
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	b570      	push	{r4, r5, r6, lr}
 8005fb8:	4d06      	ldr	r5, [pc, #24]	; (8005fd4 <_fstat_r+0x20>)
 8005fba:	0004      	movs	r4, r0
 8005fbc:	0008      	movs	r0, r1
 8005fbe:	0011      	movs	r1, r2
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	f7fb fed8 	bl	8001d76 <_fstat>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	d103      	bne.n	8005fd2 <_fstat_r+0x1e>
 8005fca:	682b      	ldr	r3, [r5, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d000      	beq.n	8005fd2 <_fstat_r+0x1e>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	20000478 	.word	0x20000478

08005fd8 <_isatty_r>:
 8005fd8:	2300      	movs	r3, #0
 8005fda:	b570      	push	{r4, r5, r6, lr}
 8005fdc:	4d06      	ldr	r5, [pc, #24]	; (8005ff8 <_isatty_r+0x20>)
 8005fde:	0004      	movs	r4, r0
 8005fe0:	0008      	movs	r0, r1
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	f7fb fed5 	bl	8001d92 <_isatty>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d103      	bne.n	8005ff4 <_isatty_r+0x1c>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d000      	beq.n	8005ff4 <_isatty_r+0x1c>
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	20000478 	.word	0x20000478

08005ffc <_lseek_r>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	0004      	movs	r4, r0
 8006000:	0008      	movs	r0, r1
 8006002:	0011      	movs	r1, r2
 8006004:	001a      	movs	r2, r3
 8006006:	2300      	movs	r3, #0
 8006008:	4d05      	ldr	r5, [pc, #20]	; (8006020 <_lseek_r+0x24>)
 800600a:	602b      	str	r3, [r5, #0]
 800600c:	f7fb feca 	bl	8001da4 <_lseek>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d103      	bne.n	800601c <_lseek_r+0x20>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d000      	beq.n	800601c <_lseek_r+0x20>
 800601a:	6023      	str	r3, [r4, #0]
 800601c:	bd70      	pop	{r4, r5, r6, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	20000478 	.word	0x20000478

08006024 <memchr>:
 8006024:	b2c9      	uxtb	r1, r1
 8006026:	1882      	adds	r2, r0, r2
 8006028:	4290      	cmp	r0, r2
 800602a:	d101      	bne.n	8006030 <memchr+0xc>
 800602c:	2000      	movs	r0, #0
 800602e:	4770      	bx	lr
 8006030:	7803      	ldrb	r3, [r0, #0]
 8006032:	428b      	cmp	r3, r1
 8006034:	d0fb      	beq.n	800602e <memchr+0xa>
 8006036:	3001      	adds	r0, #1
 8006038:	e7f6      	b.n	8006028 <memchr+0x4>
	...

0800603c <_read_r>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	0004      	movs	r4, r0
 8006040:	0008      	movs	r0, r1
 8006042:	0011      	movs	r1, r2
 8006044:	001a      	movs	r2, r3
 8006046:	2300      	movs	r3, #0
 8006048:	4d05      	ldr	r5, [pc, #20]	; (8006060 <_read_r+0x24>)
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fb fe50 	bl	8001cf0 <_read>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d103      	bne.n	800605c <_read_r+0x20>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d000      	beq.n	800605c <_read_r+0x20>
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	20000478 	.word	0x20000478

08006064 <_init>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr

08006070 <_fini>:
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006076:	bc08      	pop	{r3}
 8006078:	469e      	mov	lr, r3
 800607a:	4770      	bx	lr
