
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ebc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d8  080061d8  00020140  2**0
                  CONTENTS
  4 .ARM          00000000  080061d8  080061d8  00020140  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061d8  080061d8  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  080061e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000140  08006320  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08006320  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dbc  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039bf  00000000  00000000  00032f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000368e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00037bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d61  00000000  00000000  00038ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c19d  00000000  00000000  0004ea41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b8d5  00000000  00000000  0006abde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d64b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004768  00000000  00000000  000d6504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000140 	.word	0x20000140
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005f64 	.word	0x08005f64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000144 	.word	0x20000144
 8000104:	08005f64 	.word	0x08005f64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <errorStateHandler>:
 * 
 * @param stateData 
 * @param event 
 */
void errorStateHandler(void *stateData, struct event *event )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
   puts( "ENTERED ERROR STATE!" );
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <errorStateHandler+0x1c>)
 800022c:	0018      	movs	r0, r3
 800022e:	f005 faa3 	bl	8005778 <puts>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	b002      	add	sp, #8
 8000238:	bd80      	pop	{r7, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	08005f7c 	.word	0x08005f7c

08000240 <rfRecvStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b0a5      	sub	sp, #148	; 0x94
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
    uint8_t user_rxBuffer[RF_PACKET_SIZE] = { 0 };
 800024c:	2410      	movs	r4, #16
 800024e:	193b      	adds	r3, r7, r4
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	3304      	adds	r3, #4
 8000256:	227c      	movs	r2, #124	; 0x7c
 8000258:	2100      	movs	r1, #0
 800025a:	0018      	movs	r0, r3
 800025c:	f005 f92f 	bl	80054be <memset>
    memcpy(user_rxBuffer, g_rxBuffer, g_rxBuffer[0]);
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <rfRecvStateAction+0x58>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	001a      	movs	r2, r3
 8000266:	490c      	ldr	r1, [pc, #48]	; (8000298 <rfRecvStateAction+0x58>)
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	f005 f91e 	bl	80054ac <memcpy>
    uartSendData(BSP_TTL_CHANNEL1, user_rxBuffer, user_rxBuffer[0]);
 8000270:	193b      	adds	r3, r7, r4
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b29a      	uxth	r2, r3
 8000276:	193b      	adds	r3, r7, r4
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f001 f922 	bl	80014c4 <uartSendData>
    
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 8000280:	2301      	movs	r3, #1
 8000282:	425a      	negs	r2, r3
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <rfRecvStateAction+0x58>)
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	0018      	movs	r0, r3
 800028a:	f000 ff1f 	bl	80010cc <RF_StartRx>
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b025      	add	sp, #148	; 0x94
 8000294:	bd90      	pop	{r4, r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000260 	.word	0x20000260

0800029c <rfRecvEnableRecv>:
 * @param event 
 * @param newStateData 
 */
void rfRecvEnableRecv( void *oldStateData, struct event *event,
      void *newStateData )
{   
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80002a8:	2301      	movs	r3, #1
 80002aa:	425a      	negs	r2, r3
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <rfRecvEnableRecv+0x24>)
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 ff0b 	bl	80010cc <RF_StartRx>
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	20000260 	.word	0x20000260

080002c4 <rfRecvStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateEnter( void *stateData, struct event *event )
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80002ce:	2301      	movs	r3, #1
 80002d0:	425a      	negs	r2, r3
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <rfRecvStateEnter+0x20>)
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 fef8 	bl	80010cc <RF_StartRx>
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b002      	add	sp, #8
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000260 	.word	0x20000260

080002e8 <rfRecvStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateExit( void *stateData, struct event *event )
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]

}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}

080002fa <rfSendStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b084      	sub	sp, #16
 80002fe:	af00      	add	r7, sp, #0
 8000300:	60f8      	str	r0, [r7, #12]
 8000302:	60b9      	str	r1, [r7, #8]
 8000304:	607a      	str	r2, [r7, #4]
//    puts( "Resetting" );
   //todo: use uart send interface to send data
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b004      	add	sp, #16
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <rfSendStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateEnter( void *stateData, struct event *event )
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
	bufferSize = uartGetData(BSP_TTL_CHANNEL1, txBuffer + 1, 256);
 800031a:	4b12      	ldr	r3, [pc, #72]	; (8000364 <rfSendStateEnter+0x54>)
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0052      	lsls	r2, r2, #1
 8000320:	0019      	movs	r1, r3
 8000322:	2000      	movs	r0, #0
 8000324:	f001 f92c 	bl	8001580 <uartGetData>
 8000328:	0002      	movs	r2, r0
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <rfSendStateEnter+0x58>)
 800032c:	601a      	str	r2, [r3, #0]
	if (bufferSize)
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <rfSendStateEnter+0x58>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d012      	beq.n	800035c <rfSendStateEnter+0x4c>
        // uartSendData(BSP_TTL_CHANNEL1, txBuffer, bufferSize);
        // HAL_Delay_nMs(1000);

		/* reset the value */
		// bufferSize = 0;
        txBuffer[0] = bufferSize + 1;
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <rfSendStateEnter+0x58>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	3301      	adds	r3, #1
 800033e:	b2da      	uxtb	r2, r3
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <rfSendStateEnter+0x5c>)
 8000342:	701a      	strb	r2, [r3, #0]
        RF_StartTx(txBuffer,  txBuffer[0] , INFINITE);
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <rfSendStateEnter+0x5c>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	b299      	uxth	r1, r3
 800034a:	2301      	movs	r3, #1
 800034c:	425a      	negs	r2, r3
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <rfSendStateEnter+0x5c>)
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fee5 	bl	8001120 <RF_StartTx>
		uartResetData(BSP_TTL_CHANNEL1);
 8000356:	2000      	movs	r0, #0
 8000358:	f001 f940 	bl	80015dc <uartResetData>
	}
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	2000015d 	.word	0x2000015d
 8000368:	2000025c 	.word	0x2000025c
 800036c:	2000015c 	.word	0x2000015c

08000370 <rfSendStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateExit( void *stateData, struct event *event )
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
   bufferSize = 0;
 800037a:	4b03      	ldr	r3, [pc, #12]	; (8000388 <rfSendStateExit+0x18>)
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000025c 	.word	0x2000025c

0800038c <stateActuator>:
 * 
 * @param None
 * @retval None
 */
void stateActuator(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
    struct msg *msg;
    stateM_init(&m, &rfRecvState, &errorState);
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <stateActuator+0x3c>)
 8000394:	490d      	ldr	r1, [pc, #52]	; (80003cc <stateActuator+0x40>)
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <stateActuator+0x44>)
 8000398:	0018      	movs	r0, r3
 800039a:	f004 ff3c 	bl	8005216 <stateM_init>
    mq_init(&mq);
 800039e:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <stateActuator+0x48>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f004 fe90 	bl	80050c6 <mq_init>
    
    while ( 1 )
    {
        if ((msg = mq_pop( &mq )) != NULL)
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <stateActuator+0x48>)
 80003a8:	0018      	movs	r0, r3
 80003aa:	f004 ff05 	bl	80051b8 <mq_pop>
 80003ae:	0003      	movs	r3, r0
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0f6      	beq.n	80003a6 <stateActuator+0x1a>
        {
            stateM_handleEvent(&m, (struct event *)msg);
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <stateActuator+0x44>)
 80003bc:	0011      	movs	r1, r2
 80003be:	0018      	movs	r0, r3
 80003c0:	f004 ff40 	bl	8005244 <stateM_handleEvent>
        if ((msg = mq_pop( &mq )) != NULL)
 80003c4:	e7ef      	b.n	80003a6 <stateActuator+0x1a>
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	2000009c 	.word	0x2000009c
 80003cc:	20000050 	.word	0x20000050
 80003d0:	200002e0 	.word	0x200002e0
 80003d4:	200002ec 	.word	0x200002ec

080003d8 <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 80003dc:	21ff      	movs	r1, #255	; 0xff
 80003de:	207f      	movs	r0, #127	; 0x7f
 80003e0:	f000 fc69 	bl	8000cb6 <Cmt2300_WriteReg>
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 80003ee:	2061      	movs	r0, #97	; 0x61
 80003f0:	f000 fc4a 	bl	8000c88 <Cmt2300_ReadReg>
 80003f4:	0003      	movs	r3, r0
 80003f6:	001a      	movs	r2, r3
 80003f8:	230f      	movs	r3, #15
 80003fa:	4013      	ands	r3, r2
 80003fc:	b2db      	uxtb	r3, r3
}
 80003fe:	0018      	movs	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 8000404:	b5b0      	push	{r4, r5, r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 8000410:	230f      	movs	r3, #15
 8000412:	18fb      	adds	r3, r7, r3
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e013      	b.n	8000442 <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 800041a:	250e      	movs	r5, #14
 800041c:	197c      	adds	r4, r7, r5
 800041e:	f7ff ffe4 	bl	80003ea <Cmt2300_GetChipStatus>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 8000426:	1dfa      	adds	r2, r7, #7
 8000428:	197b      	adds	r3, r7, r5
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	429a      	cmp	r2, r3
 8000430:	d101      	bne.n	8000436 <Cmt2300_WaitChipStatus+0x32>
            return true;
 8000432:	2301      	movs	r3, #1
 8000434:	e00b      	b.n	800044e <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 8000436:	210f      	movs	r1, #15
 8000438:	187b      	adds	r3, r7, r1
 800043a:	781a      	ldrb	r2, [r3, #0]
 800043c:	187b      	adds	r3, r7, r1
 800043e:	3201      	adds	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
 8000442:	230f      	movs	r3, #15
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b31      	cmp	r3, #49	; 0x31
 800044a:	d9e6      	bls.n	800041a <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 800044c:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 800044e:	0018      	movs	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bdb0      	pop	{r4, r5, r7, pc}

08000456 <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b084      	sub	sp, #16
 800045a:	af00      	add	r7, sp, #0
 800045c:	0002      	movs	r2, r0
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 8000462:	2045      	movs	r0, #69	; 0x45
 8000464:	f000 fc10 	bl	8000c88 <Cmt2300_ReadReg>
 8000468:	0003      	movs	r3, r0
 800046a:	0019      	movs	r1, r3
 800046c:	200f      	movs	r0, #15
 800046e:	183b      	adds	r3, r7, r0
 8000470:	2201      	movs	r2, #1
 8000472:	4391      	bics	r1, r2
 8000474:	000a      	movs	r2, r1
 8000476:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 8000478:	183a      	adds	r2, r7, r0
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	7812      	ldrb	r2, [r2, #0]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4313      	orrs	r3, r2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	0019      	movs	r1, r3
 8000486:	2045      	movs	r0, #69	; 0x45
 8000488:	f000 fc15 	bl	8000cb6 <Cmt2300_WriteReg>
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b004      	add	sp, #16
 8000492:	bd80      	pop	{r7, pc}

08000494 <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 8000498:	2110      	movs	r1, #16
 800049a:	2060      	movs	r0, #96	; 0x60
 800049c:	f000 fc0b 	bl	8000cb6 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff ffaf 	bl	8000404 <Cmt2300_WaitChipStatus>
 80004a6:	0003      	movs	r3, r0
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 80004b2:	2102      	movs	r1, #2
 80004b4:	2060      	movs	r0, #96	; 0x60
 80004b6:	f000 fbfe 	bl	8000cb6 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 80004ba:	2002      	movs	r0, #2
 80004bc:	f7ff ffa2 	bl	8000404 <Cmt2300_WaitChipStatus>
 80004c0:	0003      	movs	r3, r0
}
 80004c2:	0018      	movs	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	0002      	movs	r2, r0
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	0019      	movs	r1, r3
 80004da:	2065      	movs	r0, #101	; 0x65
 80004dc:	f000 fbeb 	bl	8000cb6 <Cmt2300_WriteReg>
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b002      	add	sp, #8
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	1dbb      	adds	r3, r7, #6
 80004f6:	1c0a      	adds	r2, r1, #0
 80004f8:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	1dfa      	adds	r2, r7, #7
 80004fe:	7812      	ldrb	r2, [r2, #0]
 8000500:	211f      	movs	r1, #31
 8000502:	400a      	ands	r2, r1
 8000504:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000506:	2066      	movs	r0, #102	; 0x66
 8000508:	f000 fbbe 	bl	8000c88 <Cmt2300_ReadReg>
 800050c:	0003      	movs	r3, r0
 800050e:	001a      	movs	r2, r3
 8000510:	231f      	movs	r3, #31
 8000512:	439a      	bics	r2, r3
 8000514:	0013      	movs	r3, r2
 8000516:	b25a      	sxtb	r2, r3
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b25b      	sxtb	r3, r3
 800051e:	4313      	orrs	r3, r2
 8000520:	b25a      	sxtb	r2, r3
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	0019      	movs	r1, r3
 800052c:	2066      	movs	r0, #102	; 0x66
 800052e:	f000 fbc2 	bl	8000cb6 <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 8000532:	1dbb      	adds	r3, r7, #6
 8000534:	1dba      	adds	r2, r7, #6
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	211f      	movs	r1, #31
 800053a:	400a      	ands	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 800053e:	2067      	movs	r0, #103	; 0x67
 8000540:	f000 fba2 	bl	8000c88 <Cmt2300_ReadReg>
 8000544:	0003      	movs	r3, r0
 8000546:	001a      	movs	r2, r3
 8000548:	231f      	movs	r3, #31
 800054a:	439a      	bics	r2, r3
 800054c:	0013      	movs	r3, r2
 800054e:	b25a      	sxtb	r2, r3
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b25b      	sxtb	r3, r3
 8000556:	4313      	orrs	r3, r2
 8000558:	b25a      	sxtb	r2, r3
 800055a:	1dbb      	adds	r3, r7, #6
 800055c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	0019      	movs	r1, r3
 8000564:	2067      	movs	r0, #103	; 0x67
 8000566:	f000 fba6 	bl	8000cb6 <Cmt2300_WriteReg>
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}

08000572 <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 8000572:	b5b0      	push	{r4, r5, r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	0002      	movs	r2, r0
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 800057e:	250f      	movs	r5, #15
 8000580:	197c      	adds	r4, r7, r5
 8000582:	2066      	movs	r0, #102	; 0x66
 8000584:	f000 fb80 	bl	8000c88 <Cmt2300_ReadReg>
 8000588:	0003      	movs	r3, r0
 800058a:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d10d      	bne.n	80005b0 <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 8000594:	197b      	adds	r3, r7, r5
 8000596:	197a      	adds	r2, r7, r5
 8000598:	7812      	ldrb	r2, [r2, #0]
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	4249      	negs	r1, r1
 800059e:	430a      	orrs	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	197a      	adds	r2, r7, r5
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	438a      	bics	r2, r1
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e010      	b.n	80005d2 <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d10c      	bne.n	80005d2 <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 80005b8:	200f      	movs	r0, #15
 80005ba:	183b      	adds	r3, r7, r0
 80005bc:	183a      	adds	r2, r7, r0
 80005be:	7812      	ldrb	r2, [r2, #0]
 80005c0:	217f      	movs	r1, #127	; 0x7f
 80005c2:	400a      	ands	r2, r1
 80005c4:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 80005c6:	183b      	adds	r3, r7, r0
 80005c8:	183a      	adds	r2, r7, r0
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	430a      	orrs	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 80005d2:	230f      	movs	r3, #15
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	0019      	movs	r1, r3
 80005da:	2066      	movs	r0, #102	; 0x66
 80005dc:	f000 fb6b 	bl	8000cb6 <Cmt2300_WriteReg>
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b004      	add	sp, #16
 80005e6:	bdb0      	pop	{r4, r5, r7, pc}

080005e8 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	0002      	movs	r2, r0
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	0019      	movs	r1, r3
 80005fa:	2068      	movs	r0, #104	; 0x68
 80005fc:	f000 fb5b 	bl	8000cb6 <Cmt2300_WriteReg>
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}

08000608 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	0002      	movs	r2, r0
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 8000614:	250f      	movs	r5, #15
 8000616:	197c      	adds	r4, r7, r5
 8000618:	2069      	movs	r0, #105	; 0x69
 800061a:	f000 fb35 	bl	8000c88 <Cmt2300_ReadReg>
 800061e:	0003      	movs	r3, r0
 8000620:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 800062a:	197b      	adds	r3, r7, r5
 800062c:	197a      	adds	r2, r7, r5
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	2102      	movs	r1, #2
 8000632:	430a      	orrs	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e006      	b.n	8000646 <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 8000638:	220f      	movs	r2, #15
 800063a:	18bb      	adds	r3, r7, r2
 800063c:	18ba      	adds	r2, r7, r2
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	2102      	movs	r1, #2
 8000642:	438a      	bics	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 8000646:	230f      	movs	r3, #15
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	0019      	movs	r1, r3
 800064e:	2069      	movs	r0, #105	; 0x69
 8000650:	f000 fb31 	bl	8000cb6 <Cmt2300_WriteReg>
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b004      	add	sp, #16
 800065a:	bdb0      	pop	{r4, r5, r7, pc}

0800065c <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 8000662:	1d7b      	adds	r3, r7, #5
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 800066e:	1cfb      	adds	r3, r7, #3
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000674:	1cbc      	adds	r4, r7, #2
 8000676:	2066      	movs	r0, #102	; 0x66
 8000678:	f000 fb06 	bl	8000c88 <Cmt2300_ReadReg>
 800067c:	0003      	movs	r3, r0
 800067e:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 8000680:	1cbb      	adds	r3, r7, #2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	115b      	asrs	r3, r3, #5
 8000686:	b2da      	uxtb	r2, r3
 8000688:	1cbb      	adds	r3, r7, #2
 800068a:	2101      	movs	r1, #1
 800068c:	400a      	ands	r2, r1
 800068e:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 8000690:	1dfc      	adds	r4, r7, #7
 8000692:	206d      	movs	r0, #109	; 0x6d
 8000694:	f000 faf8 	bl	8000c88 <Cmt2300_ReadReg>
 8000698:	0003      	movs	r3, r0
 800069a:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 800069c:	1dbc      	adds	r4, r7, #6
 800069e:	206a      	movs	r0, #106	; 0x6a
 80006a0:	f000 faf2 	bl	8000c88 <Cmt2300_ReadReg>
 80006a4:	0003      	movs	r3, r0
 80006a6:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 80006a8:	1cbb      	adds	r3, r7, #2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d009      	beq.n	80006c4 <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	1dfa      	adds	r2, r7, #7
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	43d2      	mvns	r2, r2
 80006b8:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 80006ba:	1dbb      	adds	r3, r7, #6
 80006bc:	1dba      	adds	r2, r7, #6
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	43d2      	mvns	r2, r2
 80006c2:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	da05      	bge.n	80006da <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	1d3a      	adds	r2, r7, #4
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	2120      	movs	r1, #32
 80006d6:	430a      	orrs	r2, r1
 80006d8:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2240      	movs	r2, #64	; 0x40
 80006e0:	4013      	ands	r3, r2
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d005      	beq.n	80006f4 <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	1d3a      	adds	r2, r7, #4
 80006ec:	7812      	ldrb	r2, [r2, #0]
 80006ee:	2101      	movs	r1, #1
 80006f0:	430a      	orrs	r2, r1
 80006f2:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2220      	movs	r2, #32
 80006fa:	4013      	ands	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d005      	beq.n	800070e <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	1d3a      	adds	r2, r7, #4
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	2101      	movs	r1, #1
 800070a:	430a      	orrs	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2210      	movs	r2, #16
 8000714:	4013      	ands	r3, r2
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00b      	beq.n	8000734 <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	2110      	movs	r1, #16
 8000724:	430a      	orrs	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 8000728:	1cfb      	adds	r3, r7, #3
 800072a:	1cfa      	adds	r2, r7, #3
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	2110      	movs	r1, #16
 8000730:	430a      	orrs	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2208      	movs	r2, #8
 800073a:	4013      	ands	r3, r2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00b      	beq.n	800075a <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	1d3a      	adds	r2, r7, #4
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	2108      	movs	r1, #8
 800074a:	430a      	orrs	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 800074e:	1cfb      	adds	r3, r7, #3
 8000750:	1cfa      	adds	r2, r7, #3
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	2108      	movs	r1, #8
 8000756:	430a      	orrs	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2204      	movs	r2, #4
 8000760:	4013      	ands	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00b      	beq.n	8000780 <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	1d3a      	adds	r2, r7, #4
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	2104      	movs	r1, #4
 8000770:	430a      	orrs	r2, r1
 8000772:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 8000774:	1cfb      	adds	r3, r7, #3
 8000776:	1cfa      	adds	r2, r7, #3
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	2104      	movs	r1, #4
 800077c:	430a      	orrs	r2, r1
 800077e:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2202      	movs	r2, #2
 8000786:	4013      	ands	r3, r2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00b      	beq.n	80007a6 <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	1d3a      	adds	r2, r7, #4
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	2102      	movs	r1, #2
 8000796:	430a      	orrs	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 800079a:	1cfb      	adds	r3, r7, #3
 800079c:	1cfa      	adds	r2, r7, #3
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	2102      	movs	r1, #2
 80007a2:	430a      	orrs	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00b      	beq.n	80007cc <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	1d3a      	adds	r2, r7, #4
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	2101      	movs	r1, #1
 80007bc:	430a      	orrs	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 80007c0:	1cfb      	adds	r3, r7, #3
 80007c2:	1cfa      	adds	r2, r7, #3
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	2101      	movs	r1, #1
 80007c8:	430a      	orrs	r2, r1
 80007ca:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2220      	movs	r2, #32
 80007d2:	4013      	ands	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00c      	beq.n	80007f4 <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 80007da:	1d7b      	adds	r3, r7, #5
 80007dc:	1d7a      	adds	r2, r7, #5
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	2102      	movs	r1, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 80007e6:	1cfb      	adds	r3, r7, #3
 80007e8:	1cfa      	adds	r2, r7, #3
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	4249      	negs	r1, r1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 80007f4:	1dbb      	adds	r3, r7, #6
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2210      	movs	r2, #16
 80007fa:	4013      	ands	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00b      	beq.n	800081a <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 8000802:	1d7b      	adds	r3, r7, #5
 8000804:	1d7a      	adds	r2, r7, #5
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 800080e:	1cfb      	adds	r3, r7, #3
 8000810:	1cfa      	adds	r2, r7, #3
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	430a      	orrs	r2, r1
 8000818:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 800081a:	1dbb      	adds	r3, r7, #6
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2208      	movs	r2, #8
 8000820:	4013      	ands	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00b      	beq.n	8000840 <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 8000828:	1d7b      	adds	r3, r7, #5
 800082a:	1d7a      	adds	r2, r7, #5
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	2104      	movs	r1, #4
 8000830:	430a      	orrs	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 8000834:	1cfb      	adds	r3, r7, #3
 8000836:	1cfa      	adds	r2, r7, #3
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	2120      	movs	r1, #32
 800083c:	430a      	orrs	r2, r1
 800083e:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 8000840:	1d7b      	adds	r3, r7, #5
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	0019      	movs	r1, r3
 8000846:	206a      	movs	r0, #106	; 0x6a
 8000848:	f000 fa35 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	0019      	movs	r1, r3
 8000852:	206b      	movs	r0, #107	; 0x6b
 8000854:	f000 fa2f 	bl	8000cb6 <Cmt2300_WriteReg>

    if (nIntPolar)
 8000858:	1cbb      	adds	r3, r7, #2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d004      	beq.n	800086a <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 8000860:	1cfb      	adds	r3, r7, #3
 8000862:	1cfa      	adds	r2, r7, #3
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	43d2      	mvns	r2, r2
 8000868:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 800086a:	1cfb      	adds	r3, r7, #3
 800086c:	781b      	ldrb	r3, [r3, #0]
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b003      	add	sp, #12
 8000874:	bd90      	pop	{r4, r7, pc}
	...

08000878 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 8000884:	2004      	movs	r0, #4
 8000886:	f000 f9ff 	bl	8000c88 <Cmt2300_ReadReg>
 800088a:	0003      	movs	r3, r0
 800088c:	0019      	movs	r1, r3
 800088e:	240f      	movs	r4, #15
 8000890:	193b      	adds	r3, r7, r4
 8000892:	220f      	movs	r2, #15
 8000894:	400a      	ands	r2, r1
 8000896:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	0013      	movs	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	189b      	adds	r3, r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	4a4d      	ldr	r2, [pc, #308]	; (80009dc <Cmt2300_ConfigDataRate+0x164>)
 80008a6:	189b      	adds	r3, r3, r2
 80008a8:	2218      	movs	r2, #24
 80008aa:	0019      	movs	r1, r3
 80008ac:	2020      	movs	r0, #32
 80008ae:	f000 f9b3 	bl	8000c18 <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	494a      	ldr	r1, [pc, #296]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 80008b8:	0013      	movs	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	189b      	adds	r3, r3, r2
 80008be:	5c5b      	ldrb	r3, [r3, r1]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	220f      	movs	r2, #15
 80008c4:	4393      	bics	r3, r2
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	0019      	movs	r1, r3
 80008d6:	2004      	movs	r0, #4
 80008d8:	f000 f9ed 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	493f      	ldr	r1, [pc, #252]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 80008e2:	0013      	movs	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	189b      	adds	r3, r3, r2
 80008e8:	18cb      	adds	r3, r1, r3
 80008ea:	3301      	adds	r3, #1
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0019      	movs	r1, r3
 80008f0:	2055      	movs	r0, #85	; 0x55
 80008f2:	f000 f9e0 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4939      	ldr	r1, [pc, #228]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 80008fc:	0013      	movs	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	189b      	adds	r3, r3, r2
 8000902:	18cb      	adds	r3, r1, r3
 8000904:	3302      	adds	r3, #2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	0019      	movs	r1, r3
 800090a:	2056      	movs	r0, #86	; 0x56
 800090c:	f000 f9d3 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4932      	ldr	r1, [pc, #200]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 8000916:	0013      	movs	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	189b      	adds	r3, r3, r2
 800091c:	18cb      	adds	r3, r1, r3
 800091e:	3303      	adds	r3, #3
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	0019      	movs	r1, r3
 8000924:	2057      	movs	r0, #87	; 0x57
 8000926:	f000 f9c6 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	492c      	ldr	r1, [pc, #176]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 8000930:	0013      	movs	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	189b      	adds	r3, r3, r2
 8000936:	18cb      	adds	r3, r1, r3
 8000938:	3304      	adds	r3, #4
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	0019      	movs	r1, r3
 800093e:	2058      	movs	r0, #88	; 0x58
 8000940:	f000 f9b9 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	4925      	ldr	r1, [pc, #148]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 800094a:	0013      	movs	r3, r2
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	189b      	adds	r3, r3, r2
 8000950:	18cb      	adds	r3, r1, r3
 8000952:	3305      	adds	r3, #5
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	0019      	movs	r1, r3
 8000958:	2059      	movs	r0, #89	; 0x59
 800095a:	f000 f9ac 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	491f      	ldr	r1, [pc, #124]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 8000964:	0013      	movs	r3, r2
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	189b      	adds	r3, r3, r2
 800096a:	18cb      	adds	r3, r1, r3
 800096c:	3306      	adds	r3, #6
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	0019      	movs	r1, r3
 8000972:	205a      	movs	r0, #90	; 0x5a
 8000974:	f000 f99f 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	4918      	ldr	r1, [pc, #96]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 800097e:	0013      	movs	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	189b      	adds	r3, r3, r2
 8000984:	18cb      	adds	r3, r1, r3
 8000986:	3307      	adds	r3, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	0019      	movs	r1, r3
 800098c:	205b      	movs	r0, #91	; 0x5b
 800098e:	f000 f992 	bl	8000cb6 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 8000992:	205e      	movs	r0, #94	; 0x5e
 8000994:	f000 f978 	bl	8000c88 <Cmt2300_ReadReg>
 8000998:	0003      	movs	r3, r0
 800099a:	0019      	movs	r1, r3
 800099c:	193b      	adds	r3, r7, r4
 800099e:	223f      	movs	r2, #63	; 0x3f
 80009a0:	400a      	ands	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	490d      	ldr	r1, [pc, #52]	; (80009e0 <Cmt2300_ConfigDataRate+0x168>)
 80009aa:	0013      	movs	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	189b      	adds	r3, r3, r2
 80009b0:	18cb      	adds	r3, r1, r3
 80009b2:	3308      	adds	r3, #8
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	223f      	movs	r2, #63	; 0x3f
 80009ba:	4393      	bics	r3, r2
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	0019      	movs	r1, r3
 80009cc:	205e      	movs	r0, #94	; 0x5e
 80009ce:	f000 f972 	bl	8000cb6 <Cmt2300_WriteReg>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b005      	add	sp, #20
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	08005fb0 	.word	0x08005fb0
 80009e0:	08006070 	.word	0x08006070

080009e4 <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	0002      	movs	r2, r0
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 80009f0:	2038      	movs	r0, #56	; 0x38
 80009f2:	f000 f949 	bl	8000c88 <Cmt2300_ReadReg>
 80009f6:	0003      	movs	r3, r0
 80009f8:	0019      	movs	r1, r3
 80009fa:	200f      	movs	r0, #15
 80009fc:	183b      	adds	r3, r7, r0
 80009fe:	2203      	movs	r2, #3
 8000a00:	4391      	bics	r1, r2
 8000a02:	000a      	movs	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 8000a06:	183a      	adds	r2, r7, r0
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	7812      	ldrb	r2, [r2, #0]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	0019      	movs	r1, r3
 8000a14:	2038      	movs	r0, #56	; 0x38
 8000a16:	f000 f94e 	bl	8000cb6 <Cmt2300_WriteReg>
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f929 	bl	8000c88 <Cmt2300_ReadReg>
 8000a36:	0003      	movs	r3, r0
 8000a38:	0019      	movs	r1, r3
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4391      	bics	r1, r2
 8000a42:	000a      	movs	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	d902      	bls.n	8000a54 <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	2207      	movs	r2, #7
 8000a52:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <Cmt2300_ConfigTxPower+0xcc>)
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	2201      	movs	r2, #1
 8000a62:	4013      	ands	r3, r2
 8000a64:	b25a      	sxtb	r2, r3
 8000a66:	240f      	movs	r4, #15
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	0019      	movs	r1, r3
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f91d 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <Cmt2300_ConfigTxPower+0xcc>)
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	3301      	adds	r3, #1
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	205c      	movs	r0, #92	; 0x5c
 8000a8e:	f000 f912 	bl	8000cb6 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <Cmt2300_ConfigTxPower+0xcc>)
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	18d3      	adds	r3, r2, r3
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	205d      	movs	r0, #93	; 0x5d
 8000aa4:	f000 f907 	bl	8000cb6 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 8000aa8:	205e      	movs	r0, #94	; 0x5e
 8000aaa:	f000 f8ed 	bl	8000c88 <Cmt2300_ReadReg>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	223f      	movs	r2, #63	; 0x3f
 8000ab6:	4391      	bics	r1, r2
 8000ab8:	000a      	movs	r2, r1
 8000aba:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <Cmt2300_ConfigTxPower+0xcc>)
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	3303      	adds	r3, #3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	223f      	movs	r2, #63	; 0x3f
 8000ace:	4013      	ands	r3, r2
 8000ad0:	b25a      	sxtb	r2, r3
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	0019      	movs	r1, r3
 8000ae0:	205e      	movs	r0, #94	; 0x5e
 8000ae2:	f000 f8e8 	bl	8000cb6 <Cmt2300_WriteReg>
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b005      	add	sp, #20
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	080060b8 	.word	0x080060b8

08000af4 <Cmt2300_IsExist>:
* @name    Cmt2300_IsExist
* @desc    Chip indentify.
* @return  true: chip is exist, false: chip not found
* *********************************************************/
bool Cmt2300_IsExist(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
    uint8_t back, dat;

    back = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000afa:	1dfc      	adds	r4, r7, #7
 8000afc:	2048      	movs	r0, #72	; 0x48
 8000afe:	f000 f8c3 	bl	8000c88 <Cmt2300_ReadReg>
 8000b02:	0003      	movs	r3, r0
 8000b04:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, 0xAA);
 8000b06:	21aa      	movs	r1, #170	; 0xaa
 8000b08:	2048      	movs	r0, #72	; 0x48
 8000b0a:	f000 f8d4 	bl	8000cb6 <Cmt2300_WriteReg>

    // system_delay_us(5*20);

    dat = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000b0e:	1dbc      	adds	r4, r7, #6
 8000b10:	2048      	movs	r0, #72	; 0x48
 8000b12:	f000 f8b9 	bl	8000c88 <Cmt2300_ReadReg>
 8000b16:	0003      	movs	r3, r0
 8000b18:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, back);
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0019      	movs	r1, r3
 8000b20:	2048      	movs	r0, #72	; 0x48
 8000b22:	f000 f8c8 	bl	8000cb6 <Cmt2300_WriteReg>

    if (0xAA == dat)
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2baa      	cmp	r3, #170	; 0xaa
 8000b2c:	d101      	bne.n	8000b32 <Cmt2300_IsExist+0x3e>
        return true;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <Cmt2300_IsExist+0x40>

    return false;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b003      	add	sp, #12
 8000b3a:	bd90      	pop	{r4, r7, pc}

08000b3c <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000b48:	250f      	movs	r5, #15
 8000b4a:	197c      	adds	r4, r7, r5
 8000b4c:	200d      	movs	r0, #13
 8000b4e:	f000 f89b 	bl	8000c88 <Cmt2300_ReadReg>
 8000b52:	0003      	movs	r3, r0
 8000b54:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d013      	beq.n	8000b86 <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	197a      	adds	r2, r7, r5
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	4249      	negs	r1, r1
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 8000b6c:	197b      	adds	r3, r7, r5
 8000b6e:	197a      	adds	r2, r7, r5
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	2140      	movs	r1, #64	; 0x40
 8000b74:	430a      	orrs	r2, r1
 8000b76:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 8000b78:	197b      	adds	r3, r7, r5
 8000b7a:	197a      	adds	r2, r7, r5
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	2120      	movs	r1, #32
 8000b80:	430a      	orrs	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e012      	b.n	8000bac <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 8000b86:	200f      	movs	r0, #15
 8000b88:	183b      	adds	r3, r7, r0
 8000b8a:	183a      	adds	r2, r7, r0
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	217f      	movs	r1, #127	; 0x7f
 8000b90:	400a      	ands	r2, r1
 8000b92:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 8000b94:	183b      	adds	r3, r7, r0
 8000b96:	183a      	adds	r2, r7, r0
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	438a      	bics	r2, r1
 8000b9e:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 8000ba0:	183b      	adds	r3, r7, r0
 8000ba2:	183a      	adds	r2, r7, r0
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	438a      	bics	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 8000bac:	230f      	movs	r3, #15
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	200d      	movs	r0, #13
 8000bb6:	f000 f87e 	bl	8000cb6 <Cmt2300_WriteReg>
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b004      	add	sp, #16
 8000bc0:	bdb0      	pop	{r4, r5, r7, pc}

08000bc2 <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000bc2:	b590      	push	{r4, r7, lr}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000bc8:	f7ff fc06 	bl	80003d8 <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000bcc:	200a      	movs	r0, #10
 8000bce:	f000 faf5 	bl	80011bc <Delay_Ms>
   
    Cmt2300_GoStby();
 8000bd2:	f7ff fc6c 	bl	80004ae <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000bd6:	1dfc      	adds	r4, r7, #7
 8000bd8:	2061      	movs	r0, #97	; 0x61
 8000bda:	f000 f855 	bl	8000c88 <Cmt2300_ReadReg>
 8000bde:	0003      	movs	r3, r0
 8000be0:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	1dfa      	adds	r2, r7, #7
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	2110      	movs	r1, #16
 8000bea:	430a      	orrs	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	1dfa      	adds	r2, r7, #7
 8000bf2:	7812      	ldrb	r2, [r2, #0]
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	438a      	bics	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0019      	movs	r1, r3
 8000c00:	2061      	movs	r0, #97	; 0x61
 8000c02:	f000 f858 	bl	8000cb6 <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff ff98 	bl	8000b3c <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000c0c:	f7ff fd26 	bl	800065c <Cmt2300_ClearInterruptFlags>
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b003      	add	sp, #12
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6039      	str	r1, [r7, #0]
 8000c20:	0011      	movs	r1, r2
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	1c02      	adds	r2, r0, #0
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	1c0a      	adds	r2, r1, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e014      	b.n	8000c62 <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000c38:	210f      	movs	r1, #15
 8000c3a:	187a      	adds	r2, r7, r1
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	18d3      	adds	r3, r2, r3
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	000c      	movs	r4, r1
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	18d3      	adds	r3, r2, r3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	0019      	movs	r1, r3
 8000c54:	f000 f82f 	bl	8000cb6 <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	3201      	adds	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	230f      	movs	r3, #15
 8000c64:	18fa      	adds	r2, r7, r3
 8000c66:	1dbb      	adds	r3, r7, #6
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d3e3      	bcc.n	8000c38 <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b005      	add	sp, #20
 8000c78:	bd90      	pop	{r4, r7, pc}

08000c7a <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000c7e:	f000 f83f 	bl	8000d00 <cmt_spi3_init>
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000c94:	240f      	movs	r4, #15
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	22ff      	movs	r2, #255	; 0xff
 8000c9a:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000c9c:	193a      	adds	r2, r7, r4
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 f93d 	bl	8000f24 <cmt_spi3_read>

    return dat;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	781b      	ldrb	r3, [r3, #0]
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b005      	add	sp, #20
 8000cb4:	bd90      	pop	{r4, r7, pc}

08000cb6 <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	1dbb      	adds	r3, r7, #6
 8000cc4:	1c0a      	adds	r2, r1, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000cc8:	1dbb      	adds	r3, r7, #6
 8000cca:	781a      	ldrb	r2, [r3, #0]
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 f8b2 	bl	8000e3c <cmt_spi3_write>
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	607b      	str	r3, [r7, #4]
    while (n--)
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1fa      	bne.n	8000cec <cmt_spi3_delay+0xc>
        ;
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <cmt_spi3_init>:
    while (n--)
        ;
}

void cmt_spi3_init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000d04:	f000 fa7e 	bl	8001204 <spi_gpio_init>
    cmt_spi3_sda_in();
 8000d08:	f000 fab4 	bl	8001274 <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000d0c:	f7ff ffe8 	bl	8000ce0 <cmt_spi3_delay>
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000d22:	230f      	movs	r3, #15
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e034      	b.n	8000d96 <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	0119      	lsls	r1, r3, #4
 8000d30:	2390      	movs	r3, #144	; 0x90
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	2200      	movs	r2, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 fe33 	bl	80029a2 <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da08      	bge.n	8000d58 <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	0059      	lsls	r1, r3, #1
 8000d4a:	2390      	movs	r3, #144	; 0x90
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	2201      	movs	r2, #1
 8000d50:	0018      	movs	r0, r3
 8000d52:	f001 fe26 	bl	80029a2 <HAL_GPIO_WritePin>
 8000d56:	e007      	b.n	8000d68 <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	0059      	lsls	r1, r3, #1
 8000d5c:	2390      	movs	r3, #144	; 0x90
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	2200      	movs	r2, #0
 8000d62:	0018      	movs	r0, r3
 8000d64:	f001 fe1d 	bl	80029a2 <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8000d68:	f7ff ffba 	bl	8000ce0 <cmt_spi3_delay>

        data8 <<= 1;
 8000d6c:	1dfa      	adds	r2, r7, #7
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	18db      	adds	r3, r3, r3
 8000d74:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	0119      	lsls	r1, r3, #4
 8000d7a:	2390      	movs	r3, #144	; 0x90
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	2201      	movs	r2, #1
 8000d80:	0018      	movs	r0, r3
 8000d82:	f001 fe0e 	bl	80029a2 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000d86:	f7ff ffab 	bl	8000ce0 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	3201      	adds	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	230f      	movs	r3, #15
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d9c5      	bls.n	8000d2c <cmt_spi3_send+0x16>
    }
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}

08000daa <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 8000db0:	1dbb      	adds	r3, r7, #6
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e034      	b.n	8000e28 <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	0119      	lsls	r1, r3, #4
 8000dc2:	2390      	movs	r3, #144	; 0x90
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f001 fdea 	bl	80029a2 <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8000dce:	f7ff ff87 	bl	8000ce0 <cmt_spi3_delay>
        data8 <<= 1;
 8000dd2:	1dba      	adds	r2, r7, #6
 8000dd4:	1dbb      	adds	r3, r7, #6
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	18db      	adds	r3, r3, r3
 8000dda:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	0119      	lsls	r1, r3, #4
 8000de0:	2390      	movs	r3, #144	; 0x90
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	2201      	movs	r2, #1
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 fddb 	bl	80029a2 <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	005a      	lsls	r2, r3, #1
 8000df0:	2390      	movs	r3, #144	; 0x90
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 fdb6 	bl	8002968 <HAL_GPIO_ReadPin>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d006      	beq.n	8000e0e <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	1dba      	adds	r2, r7, #6
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	2101      	movs	r1, #1
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e005      	b.n	8000e1a <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 8000e0e:	1dbb      	adds	r3, r7, #6
 8000e10:	1dba      	adds	r2, r7, #6
 8000e12:	7812      	ldrb	r2, [r2, #0]
 8000e14:	2101      	movs	r1, #1
 8000e16:	438a      	bics	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 8000e1a:	f7ff ff61 	bl	8000ce0 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	3201      	adds	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b07      	cmp	r3, #7
 8000e2e:	d9c6      	bls.n	8000dbe <cmt_spi3_recv+0x14>
    }

    return data8;
 8000e30:	1dbb      	adds	r3, r7, #6
 8000e32:	781b      	ldrb	r3, [r3, #0]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	0002      	movs	r2, r0
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	1dbb      	adds	r3, r7, #6
 8000e4a:	1c0a      	adds	r2, r1, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8000e4e:	f000 f9df 	bl	8001210 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	0059      	lsls	r1, r3, #1
 8000e56:	2390      	movs	r3, #144	; 0x90
 8000e58:	05db      	lsls	r3, r3, #23
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f001 fda0 	bl	80029a2 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	0119      	lsls	r1, r3, #4
 8000e66:	2390      	movs	r3, #144	; 0x90
 8000e68:	05db      	lsls	r3, r3, #23
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f001 fd98 	bl	80029a2 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	0119      	lsls	r1, r3, #4
 8000e76:	2390      	movs	r3, #144	; 0x90
 8000e78:	05db      	lsls	r3, r3, #23
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f001 fd90 	bl	80029a2 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	01db      	lsls	r3, r3, #7
 8000e86:	4826      	ldr	r0, [pc, #152]	; (8000f20 <cmt_spi3_write+0xe4>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	f001 fd89 	bl	80029a2 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	01db      	lsls	r3, r3, #7
 8000e94:	4822      	ldr	r0, [pc, #136]	; (8000f20 <cmt_spi3_write+0xe4>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	0019      	movs	r1, r3
 8000e9a:	f001 fd82 	bl	80029a2 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	481f      	ldr	r0, [pc, #124]	; (8000f20 <cmt_spi3_write+0xe4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	f001 fd7b 	bl	80029a2 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000eac:	f7ff ff18 	bl	8000ce0 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000eb0:	f7ff ff16 	bl	8000ce0 <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	227f      	movs	r2, #127	; 0x7f
 8000eba:	4013      	ands	r3, r2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff ff29 	bl	8000d16 <cmt_spi3_send>

    cmt_spi3_send(dat);
 8000ec4:	1dbb      	adds	r3, r7, #6
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ff24 	bl	8000d16 <cmt_spi3_send>

    cmt_spi3_scl_0();
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	0119      	lsls	r1, r3, #4
 8000ed2:	2390      	movs	r3, #144	; 0x90
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 fd62 	bl	80029a2 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000ede:	f7ff feff 	bl	8000ce0 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000ee2:	f7ff fefd 	bl	8000ce0 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <cmt_spi3_write+0xe4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	0019      	movs	r1, r3
 8000ef0:	f001 fd57 	bl	80029a2 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	0059      	lsls	r1, r3, #1
 8000ef8:	2390      	movs	r3, #144	; 0x90
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	2201      	movs	r2, #1
 8000efe:	0018      	movs	r0, r3
 8000f00:	f001 fd4f 	bl	80029a2 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8000f04:	f000 f9b6 	bl	8001274 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <cmt_spi3_write+0xe4>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	0019      	movs	r1, r3
 8000f12:	f001 fd46 	bl	80029a2 <HAL_GPIO_WritePin>
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	48000400 	.word	0x48000400

08000f24 <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 8000f32:	f000 f96d 	bl	8001210 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	0059      	lsls	r1, r3, #1
 8000f3a:	2390      	movs	r3, #144	; 0x90
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	2201      	movs	r2, #1
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 fd2e 	bl	80029a2 <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	0119      	lsls	r1, r3, #4
 8000f4a:	2390      	movs	r3, #144	; 0x90
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	2200      	movs	r2, #0
 8000f50:	0018      	movs	r0, r3
 8000f52:	f001 fd26 	bl	80029a2 <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	0119      	lsls	r1, r3, #4
 8000f5a:	2390      	movs	r3, #144	; 0x90
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	2200      	movs	r2, #0
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fd1e 	bl	80029a2 <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	01db      	lsls	r3, r3, #7
 8000f6a:	4828      	ldr	r0, [pc, #160]	; (800100c <cmt_spi3_read+0xe8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	0019      	movs	r1, r3
 8000f70:	f001 fd17 	bl	80029a2 <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	01db      	lsls	r3, r3, #7
 8000f78:	4824      	ldr	r0, [pc, #144]	; (800100c <cmt_spi3_read+0xe8>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	f001 fd10 	bl	80029a2 <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <cmt_spi3_read+0xe8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	f001 fd09 	bl	80029a2 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000f90:	f7ff fea6 	bl	8000ce0 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000f94:	f7ff fea4 	bl	8000ce0 <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	4252      	negs	r2, r2
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff feb6 	bl	8000d16 <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 8000faa:	f000 f963 	bl	8001274 <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 8000fae:	f7ff fefc 	bl	8000daa <cmt_spi3_recv>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	0119      	lsls	r1, r3, #4
 8000fbe:	2390      	movs	r3, #144	; 0x90
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 fcec 	bl	80029a2 <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8000fca:	f7ff fe89 	bl	8000ce0 <cmt_spi3_delay>
    cmt_spi3_delay();
 8000fce:	f7ff fe87 	bl	8000ce0 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <cmt_spi3_read+0xe8>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	0019      	movs	r1, r3
 8000fdc:	f001 fce1 	bl	80029a2 <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	0059      	lsls	r1, r3, #1
 8000fe4:	2390      	movs	r3, #144	; 0x90
 8000fe6:	05db      	lsls	r3, r3, #23
 8000fe8:	2201      	movs	r2, #1
 8000fea:	0018      	movs	r0, r3
 8000fec:	f001 fcd9 	bl	80029a2 <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 8000ff0:	f000 f940 	bl	8001274 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	01db      	lsls	r3, r3, #7
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <cmt_spi3_read+0xe8>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	f001 fcd0 	bl	80029a2 <HAL_GPIO_WritePin>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	48000400 	.word	0x48000400

08001010 <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 8001014:	f7ff fe31 	bl	8000c7a <Cmt2300_InitGpio>
    Cmt2300_Init();
 8001018:	f7ff fdd3 	bl	8000bc2 <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <RF_Init+0x60>)
 800101e:	220c      	movs	r2, #12
 8001020:	0019      	movs	r1, r3
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff fdf8 	bl	8000c18 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <RF_Init+0x64>)
 800102a:	220c      	movs	r2, #12
 800102c:	0019      	movs	r1, r3
 800102e:	200c      	movs	r0, #12
 8001030:	f7ff fdf2 	bl	8000c18 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <RF_Init+0x68>)
 8001036:	2208      	movs	r2, #8
 8001038:	0019      	movs	r1, r3
 800103a:	2018      	movs	r0, #24
 800103c:	f7ff fdec 	bl	8000c18 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <RF_Init+0x6c>)
 8001042:	2218      	movs	r2, #24
 8001044:	0019      	movs	r1, r3
 8001046:	2020      	movs	r0, #32
 8001048:	f7ff fde6 	bl	8000c18 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <RF_Init+0x70>)
 800104e:	221d      	movs	r2, #29
 8001050:	0019      	movs	r1, r3
 8001052:	2038      	movs	r0, #56	; 0x38
 8001054:	f7ff fde0 	bl	8000c18 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <RF_Init+0x74>)
 800105a:	220b      	movs	r2, #11
 800105c:	0019      	movs	r1, r3
 800105e:	2055      	movs	r0, #85	; 0x55
 8001060:	f7ff fdda 	bl	8000c18 <Cmt2300_ConfigRegBank>

    RF_Config();
 8001064:	f000 f810 	bl	8001088 <RF_Config>
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	080060d8 	.word	0x080060d8
 8001074:	080060e4 	.word	0x080060e4
 8001078:	080060f0 	.word	0x080060f0
 800107c:	080060f8 	.word	0x080060f8
 8001080:	08006110 	.word	0x08006110
 8001084:	08006130 	.word	0x08006130

08001088 <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fa70 	bl	8000572 <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 8001092:	2020      	movs	r0, #32
 8001094:	f7ff fa18 	bl	80004c8 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 8001098:	2107      	movs	r1, #7
 800109a:	200a      	movs	r0, #10
 800109c:	f7ff fa24 	bl	80004e8 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 80010a0:	203f      	movs	r0, #63	; 0x3f
 80010a2:	f7ff faa1 	bl	80005e8 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fd48 	bl	8000b3c <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 80010ac:	f7ff f9f2 	bl	8000494 <Cmt2300_GoSleep>
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <RF_GetStatus>:
{
    g_nNextRFState = nStatus;
}

EnumRFStatus RF_GetStatus(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    return g_nNextRFState;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <RF_GetStatus+0x10>)
 80010be:	781b      	ldrb	r3, [r3, #0]
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	2000037c 	.word	0x2000037c

080010cc <RF_StartRx>:
{
    return g_nInterrutFlags;
}

void RF_StartRx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	200a      	movs	r0, #10
 80010d8:	183b      	adds	r3, r7, r0
 80010da:	1c0a      	adds	r2, r1, #0
 80010dc:	801a      	strh	r2, [r3, #0]
    g_pRxBuffer = buf;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <RF_StartRx+0x44>)
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	601a      	str	r2, [r3, #0]
    g_nRxLength = len;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <RF_StartRx+0x48>)
 80010e6:	183a      	adds	r2, r7, r0
 80010e8:	8812      	ldrh	r2, [r2, #0]
 80010ea:	801a      	strh	r2, [r3, #0]
    g_nRxTimeout = timeout;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <RF_StartRx+0x4c>)
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]

    memset(g_pRxBuffer, 0, g_nRxLength);
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <RF_StartRx+0x44>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <RF_StartRx+0x48>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	001a      	movs	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	f004 f9de 	bl	80054be <memset>

    g_nNextRFState = RF_STATE_RX_START;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <RF_StartRx+0x50>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000380 	.word	0x20000380
 8001114:	20000388 	.word	0x20000388
 8001118:	200000b8 	.word	0x200000b8
 800111c:	2000037c 	.word	0x2000037c

08001120 <RF_StartTx>:

void RF_StartTx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	200a      	movs	r0, #10
 800112c:	183b      	adds	r3, r7, r0
 800112e:	1c0a      	adds	r2, r1, #0
 8001130:	801a      	strh	r2, [r3, #0]
    g_pTxBuffer = buf;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <RF_StartTx+0x34>)
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	601a      	str	r2, [r3, #0]
    g_nTxLength = len;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <RF_StartTx+0x38>)
 800113a:	183a      	adds	r2, r7, r0
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	801a      	strh	r2, [r3, #0]
    g_nTxTimeout = timeout;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <RF_StartTx+0x3c>)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]

    g_nNextRFState = RF_STATE_TX_START;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <RF_StartTx+0x40>)
 8001148:	2205      	movs	r2, #5
 800114a:	701a      	strb	r2, [r3, #0]
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b004      	add	sp, #16
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000384 	.word	0x20000384
 8001158:	2000038a 	.word	0x2000038a
 800115c:	200000bc 	.word	0x200000bc
 8001160:	2000037c 	.word	0x2000037c

08001164 <bspInit>:

/*----------------------------------------------------------------
 *  FUNCTION DEFINITION
 *--------------------------------------------------------------*/
void bspInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    uartInit(BSP_TTL_CHANNEL1);
 8001168:	2000      	movs	r0, #0
 800116a:	f000 f953 	bl	8001414 <uartInit>
    
    RF_Init();
 800116e:	f7ff ff4f 	bl	8001010 <RF_Init>
    /* check rf is inited ok */
    if (Cmt2300_IsExist())
 8001172:	f7ff fcbf 	bl	8000af4 <Cmt2300_IsExist>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d006      	beq.n	8001188 <bspInit+0x24>
    {
        led1On();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <bspInit+0x54>)
 800117c:	2201      	movs	r2, #1
 800117e:	2110      	movs	r1, #16
 8001180:	0018      	movs	r0, r3
 8001182:	f001 fc0e 	bl	80029a2 <HAL_GPIO_WritePin>
 8001186:	e005      	b.n	8001194 <bspInit+0x30>
    }
    else
    {
        led2On();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <bspInit+0x54>)
 800118a:	2201      	movs	r2, #1
 800118c:	2120      	movs	r1, #32
 800118e:	0018      	movs	r0, r3
 8001190:	f001 fc07 	bl	80029a2 <HAL_GPIO_WritePin>
    }

    /* level7: 20dbm */
    Cmt2300_ConfigTxPower(7);
 8001194:	2007      	movs	r0, #7
 8001196:	f7ff fc45 	bl	8000a24 <Cmt2300_ConfigTxPower>
    /* rate:1.2kbps */
    Cmt2300_ConfigDataRate(rf_rate_1K2);
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fb6c 	bl	8000878 <Cmt2300_ConfigDataRate>
    /* packet type */
    Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff f958 	bl	8000456 <Cmt2300_ConfigPktLenthType>
    /* packet mode */
    Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff fc1c 	bl	80009e4 <Cmt2300_ConfigDataMode>
    /* enable fifo */
    Cmt2300_EnableFifoMerge(true);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fa2b 	bl	8000608 <Cmt2300_EnableFifoMerge>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	48000400 	.word	0x48000400

080011bc <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e00c      	b.n	80011ec <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	e002      	b.n	80011de <Delay_Ms+0x22>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3301      	adds	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <Delay_Ms+0x44>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d9f8      	bls.n	80011d8 <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3301      	adds	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3ee      	bcc.n	80011d2 <Delay_Ms+0x16>
  }
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	000011bb 	.word	0x000011bb

08001204 <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	0018      	movs	r0, r3
 800121a:	2314      	movs	r3, #20
 800121c:	001a      	movs	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	f004 f94d 	bl	80054be <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <cmt_spi3_sda_out+0x60>)
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <cmt_spi3_sda_out+0x60>)
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	0289      	lsls	r1, r1, #10
 800122e:	430a      	orrs	r2, r1
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <cmt_spi3_sda_out+0x60>)
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	029b      	lsls	r3, r3, #10
 800123a:	4013      	ands	r3, r2
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	0052      	lsls	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2201      	movs	r2, #1
 800124c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2203      	movs	r2, #3
 8001258:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 800125a:	1d3a      	adds	r2, r7, #4
 800125c:	2390      	movs	r3, #144	; 0x90
 800125e:	05db      	lsls	r3, r3, #23
 8001260:	0011      	movs	r1, r2
 8001262:	0018      	movs	r0, r3
 8001264:	f001 f940 	bl	80024e8 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b006      	add	sp, #24
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	0018      	movs	r0, r3
 800127e:	2314      	movs	r3, #20
 8001280:	001a      	movs	r2, r3
 8001282:	2100      	movs	r1, #0
 8001284:	f004 f91b 	bl	80054be <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <cmt_spi3_sda_in+0x5c>)
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <cmt_spi3_sda_in+0x5c>)
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	0289      	lsls	r1, r1, #10
 8001292:	430a      	orrs	r2, r1
 8001294:	615a      	str	r2, [r3, #20]
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <cmt_spi3_sda_in+0x5c>)
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	029b      	lsls	r3, r3, #10
 800129e:	4013      	ands	r3, r2
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	0052      	lsls	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 80012b8:	1d3a      	adds	r2, r7, #4
 80012ba:	2390      	movs	r3, #144	; 0x90
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	0011      	movs	r1, r2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f001 f911 	bl	80024e8 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b006      	add	sp, #24
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_GPIO_EXTI_Callback>:
#endif
}

#ifdef USE_CUBEIDE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	0002      	movs	r2, r0
 80012dc:	1dbb      	adds	r3, r7, #6
 80012de:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 80012e0:	1dbb      	adds	r3, r7, #6
 80012e2:	881a      	ldrh	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d116      	bne.n	800131a <HAL_GPIO_EXTI_Callback+0x46>
	{
        EnumRFStatus ret = RF_GetStatus();
 80012ec:	250f      	movs	r5, #15
 80012ee:	197c      	adds	r4, r7, r5
 80012f0:	f7ff fee2 	bl	80010b8 <RF_GetStatus>
 80012f4:	0003      	movs	r3, r0
 80012f6:	7023      	strb	r3, [r4, #0]
        if (ret == RF_STATE_RX_WAIT)
 80012f8:	197b      	adds	r3, r7, r5
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d102      	bne.n	8001306 <HAL_GPIO_EXTI_Callback+0x32>
        {
            rfRecvDoneCallback();
 8001300:	f000 faae 	bl	8001860 <rfRecvDoneCallback>
 8001304:	e006      	b.n	8001314 <HAL_GPIO_EXTI_Callback+0x40>
        }
        else if (ret == RF_STATE_TX_WAIT)
 8001306:	230f      	movs	r3, #15
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b06      	cmp	r3, #6
 800130e:	d101      	bne.n	8001314 <HAL_GPIO_EXTI_Callback+0x40>
        {
            rfSendDoneCallback();
 8001310:	f000 fabc 	bl	800188c <rfSendDoneCallback>
        }
        
		cmt2300_irq_request = 1;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GPIO_EXTI_Callback+0x50>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
	}
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b004      	add	sp, #16
 8001320:	bdb0      	pop	{r4, r5, r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	2000038c 	.word	0x2000038c

08001328 <HAL_TIM_PeriodElapsedCallback>:
 * 
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim16.Instance)
    //	{
    //		time100ms_flag = 1;
    //		timer100InterruptHandler();
    //	}
    if (htim->Instance == htim17.Instance) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d103      	bne.n	8001344 <HAL_TIM_PeriodElapsedCallback+0x1c>
        uartTimerIrqHandler(htim);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	0018      	movs	r0, r3
 8001340:	f000 f9e6 	bl	8001710 <uartTimerIrqHandler>
    }
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200004b8 	.word	0x200004b8

08001350 <HAL_SysTick_Handler>:
 * 
 * @param None
 * @retval None
 */
void HAL_SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_SysTick_Handler+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	4b02      	ldr	r3, [pc, #8]	; (8001364 <HAL_SysTick_Handler+0x14>)
 800135c:	601a      	str	r2, [r3, #0]
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000390 	.word	0x20000390

08001368 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <uartInitRxFifo>:
 * 
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	011a      	lsls	r2, r3, #4
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <uartInitRxFifo+0x34>)
 800139c:	18d0      	adds	r0, r2, r3
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	021a      	lsls	r2, r3, #8
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <uartInitRxFifo+0x38>)
 80013a6:	18d3      	adds	r3, r2, r3
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	0052      	lsls	r2, r2, #1
 80013ac:	0019      	movs	r1, r3
 80013ae:	f003 fdc2 	bl	8004f36 <kfifo_init>
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	20000498 	.word	0x20000498
 80013c0:	20000398 	.word	0x20000398

080013c4 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	1dbb      	adds	r3, r7, #6
 80013d0:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80013d2:	2517      	movs	r5, #23
 80013d4:	197b      	adds	r3, r7, r5
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 80013da:	197c      	adds	r4, r7, r5
 80013dc:	1dbb      	adds	r3, r7, #6
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f002 fbfb 	bl	8003be0 <HAL_UART_Receive_IT>
 80013ea:	0003      	movs	r3, r0
 80013ec:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	2120      	movs	r1, #32
 80013fc:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2278      	movs	r2, #120	; 0x78
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8001406:	2317      	movs	r3, #23
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b006      	add	sp, #24
 8001412:	bdb0      	pop	{r4, r5, r7, pc}

08001414 <uartInit>:
 * 
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	0002      	movs	r2, r0
 800141c:	1dfb      	adds	r3, r7, #7
 800141e:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff ffaf 	bl	8001388 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <uartInit+0x60>)
 8001430:	0052      	lsls	r2, r2, #1
 8001432:	2100      	movs	r1, #0
 8001434:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <uartInit+0x64>)
 800143c:	0052      	lsls	r2, r2, #1
 800143e:	2100      	movs	r1, #0
 8001440:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <uartInit+0x68>)
 8001444:	2200      	movs	r2, #0
 8001446:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <uartInit+0x6c>)
 800144a:	2200      	movs	r2, #0
 800144c:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <uartInit+0x70>)
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	18d3      	adds	r3, r2, r3
 8001458:	3304      	adds	r3, #4
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <uartInit+0x74>)
 8001462:	18d3      	adds	r3, r2, r3
 8001464:	2201      	movs	r2, #1
 8001466:	0019      	movs	r1, r3
 8001468:	f7ff ffac 	bl	80013c4 <UART_Receive_IT>
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200004a8 	.word	0x200004a8
 8001478:	200004ac 	.word	0x200004ac
 800147c:	200004b0 	.word	0x200004b0
 8001480:	200004b4 	.word	0x200004b4
 8001484:	200000c0 	.word	0x200000c0
 8001488:	20000394 	.word	0x20000394

0800148c <uartRecovery>:
 * 
 * @param channel 
 * @retval None
 */
static void uartRecovery(uartChannel_t channel)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	0002      	movs	r2, r0
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <uartRecovery+0x34>)
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	18d3      	adds	r3, r2, r3
 80014a2:	3304      	adds	r3, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	0018      	movs	r0, r3
 80014a8:	f002 fabc 	bl	8003a24 <HAL_UART_DeInit>
    uartInit(channel);
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ffaf 	bl	8001414 <uartInit>
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	200000c0 	.word	0x200000c0

080014c4 <uartSendData>:
 * @param data
 * @param length
 * @retval None
 */
void uartSendData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6039      	str	r1, [r7, #0]
 80014cc:	0011      	movs	r1, r2
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	1c02      	adds	r2, r0, #0
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	1c0a      	adds	r2, r1, #0
 80014d8:	801a      	strh	r2, [r3, #0]
    uart_tx_status[channel] = BSP_UART_TX_START;
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <uartSendData+0x54>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	54d1      	strb	r1, [r2, r3]
	// if (HAL_UART_Transmit_DMA(uartPara[channel].uart_handle_addr, data, length) != HAL_OK)
	/* use IT mode send data */
	// if (HAL_UART_Transmit_IT( uartPara[channel].uart_handle_addr, data, length ) != HAL_OK)
	/* use poll mode send data */
	if (HAL_UART_Transmit(uartPara[channel].uart_handle_addr, data, length, 0xFFFF) != HAL_OK)
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <uartSendData+0x58>)
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	3304      	adds	r3, #4
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <uartSendData+0x5c>)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	881a      	ldrh	r2, [r3, #0]
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	0023      	movs	r3, r4
 80014fc:	f002 fad0 	bl	8003aa0 <HAL_UART_Transmit>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d004      	beq.n	800150e <uartSendData+0x4a>
    {
        uartRecovery(channel);
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ffbf 	bl	800148c <uartRecovery>
    }
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b003      	add	sp, #12
 8001514:	bd90      	pop	{r4, r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	200004b0 	.word	0x200004b0
 800151c:	200000c0 	.word	0x200000c0
 8001520:	0000ffff 	.word	0x0000ffff

08001524 <HAL_UART_TxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 800152c:	230f      	movs	r3, #15
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e015      	b.n	8001562 <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 8001536:	210f      	movs	r1, #15
 8001538:	187b      	adds	r3, r7, r1
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_UART_TxCpltCallback+0x54>)
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	58d2      	ldr	r2, [r2, r3]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d105      	bne.n	8001556 <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 800154a:	187b      	adds	r3, r7, r1
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_UART_TxCpltCallback+0x58>)
 8001550:	2102      	movs	r1, #2
 8001552:	54d1      	strb	r1, [r2, r3]
            break;
 8001554:	e00b      	b.n	800156e <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001556:	210f      	movs	r1, #15
 8001558:	187b      	adds	r3, r7, r1
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	187b      	adds	r3, r7, r1
 800155e:	3201      	adds	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	230f      	movs	r3, #15
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0e4      	beq.n	8001536 <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b004      	add	sp, #16
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	200000c0 	.word	0x200000c0
 800157c:	200004b0 	.word	0x200004b0

08001580 <uartGetData>:
 * @param data 
 * @param length 
 * @retval uint32_t 
 */
uint32_t uartGetData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6039      	str	r1, [r7, #0]
 8001588:	0011      	movs	r1, r2
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	1c02      	adds	r2, r0, #0
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	1c0a      	adds	r2, r1, #0
 8001594:	801a      	strh	r2, [r3, #0]
    uint32_t ret = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]

    if (BSP_UART_RX_COMPLETED == uart_rx_status[channel]) 
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <uartGetData+0x54>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d10d      	bne.n	80015c4 <uartGetData+0x44>
	{
		ret = kfifo_out(&uart_rx_fifo[channel], data, length);
 80015a8:	1dfb      	adds	r3, r7, #7
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	011a      	lsls	r2, r3, #4
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <uartGetData+0x58>)
 80015b0:	18d0      	adds	r0, r2, r3
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	881a      	ldrh	r2, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	0019      	movs	r1, r3
 80015ba:	f003 fd5d 	bl	8005078 <kfifo_out>
 80015be:	0003      	movs	r3, r0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e001      	b.n	80015c8 <uartGetData+0x48>
	}    
	else
	{
		ret = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
	}

    return ret;
 80015c8:	68fb      	ldr	r3, [r7, #12]
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	200004b4 	.word	0x200004b4
 80015d8:	20000498 	.word	0x20000498

080015dc <uartResetData>:
 * 
 * @param channel 
 * @retval None
 */
void uartResetData(uartChannel_t channel)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	0002      	movs	r2, r0
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	701a      	strb	r2, [r3, #0]
    kfifo_reset(&uart_rx_fifo[channel]);
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	011a      	lsls	r2, r3, #4
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <uartResetData+0x3c>)
 80015f0:	18d3      	adds	r3, r2, r3
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff feb8 	bl	8001368 <kfifo_reset>
    uart_rx_size[channel] = 0;
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <uartResetData+0x40>)
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	2100      	movs	r1, #0
 8001602:	52d1      	strh	r1, [r2, r3]
    uart_rx_status[channel] = BSP_UART_IDLE;
 8001604:	1dfb      	adds	r3, r7, #7
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4a05      	ldr	r2, [pc, #20]	; (8001620 <uartResetData+0x44>)
 800160a:	2100      	movs	r1, #0
 800160c:	54d1      	strb	r1, [r2, r3]
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	20000498 	.word	0x20000498
 800161c:	200004ac 	.word	0x200004ac
 8001620:	200004b4 	.word	0x200004b4

08001624 <HAL_UART_RxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 800162c:	230f      	movs	r3, #15
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e059      	b.n	80016ea <HAL_UART_RxCpltCallback+0xc6>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8001636:	240f      	movs	r4, #15
 8001638:	193b      	adds	r3, r7, r4
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_UART_RxCpltCallback+0xd8>)
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	58d2      	ldr	r2, [r2, r3]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d149      	bne.n	80016de <HAL_UART_RxCpltCallback+0xba>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 800164a:	193b      	adds	r3, r7, r4
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4a2c      	ldr	r2, [pc, #176]	; (8001700 <HAL_UART_RxCpltCallback+0xdc>)
 8001650:	2103      	movs	r1, #3
 8001652:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8001654:	193b      	adds	r3, r7, r4
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4a28      	ldr	r2, [pc, #160]	; (80016fc <HAL_UART_RxCpltCallback+0xd8>)
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	18d3      	adds	r3, r2, r3
 800165e:	3308      	adds	r3, #8
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8001666:	193b      	adds	r3, r7, r4
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4a24      	ldr	r2, [pc, #144]	; (80016fc <HAL_UART_RxCpltCallback+0xd8>)
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	18d3      	adds	r3, r2, r3
 8001670:	3308      	adds	r3, #8
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001678:	193b      	adds	r3, r7, r4
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_UART_RxCpltCallback+0xd8>)
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	330c      	adds	r3, #12
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0018      	movs	r0, r3
 8001688:	f001 ff42 	bl	8003510 <HAL_TIM_Base_Start_IT>
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 800168c:	193b      	adds	r3, r7, r4
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	011a      	lsls	r2, r3, #4
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_UART_RxCpltCallback+0xe0>)
 8001694:	18d0      	adds	r0, r2, r3
 8001696:	193b      	adds	r3, r7, r4
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_UART_RxCpltCallback+0xe4>)
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	2201      	movs	r2, #1
 80016a0:	0019      	movs	r1, r3
 80016a2:	f003 fcc2 	bl	800502a <kfifo_in>
            uart_rx_counter[i]++;
 80016a6:	0020      	movs	r0, r4
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_UART_RxCpltCallback+0xe8>)
 80016ae:	0059      	lsls	r1, r3, #1
 80016b0:	5a8a      	ldrh	r2, [r1, r2]
 80016b2:	3201      	adds	r2, #1
 80016b4:	b291      	uxth	r1, r2
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <HAL_UART_RxCpltCallback+0xe8>)
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 80016bc:	0001      	movs	r1, r0
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_UART_RxCpltCallback+0xd8>)
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	18d3      	adds	r3, r2, r3
 80016c8:	3304      	adds	r3, #4
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_UART_RxCpltCallback+0xe4>)
 80016d2:	18d3      	adds	r3, r2, r3
 80016d4:	2201      	movs	r2, #1
 80016d6:	0019      	movs	r1, r3
 80016d8:	f7ff fe74 	bl	80013c4 <UART_Receive_IT>
            return;
 80016dc:	e00a      	b.n	80016f4 <HAL_UART_RxCpltCallback+0xd0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 80016de:	210f      	movs	r1, #15
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	3201      	adds	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0a0      	beq.n	8001636 <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b005      	add	sp, #20
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	200000c0 	.word	0x200000c0
 8001700:	200004b4 	.word	0x200004b4
 8001704:	20000498 	.word	0x20000498
 8001708:	20000394 	.word	0x20000394
 800170c:	200004a8 	.word	0x200004a8

08001710 <uartTimerIrqHandler>:
 * 
 * @param htim 
 * @retval None
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e05f      	b.n	80017e2 <uartTimerIrqHandler+0xd2>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 8001722:	210f      	movs	r1, #15
 8001724:	187b      	adds	r3, r7, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4a33      	ldr	r2, [pc, #204]	; (80017f8 <uartTimerIrqHandler+0xe8>)
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	3308      	adds	r3, #8
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d14d      	bne.n	80017d6 <uartTimerIrqHandler+0xc6>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 800173a:	000c      	movs	r4, r1
 800173c:	187b      	adds	r3, r7, r1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <uartTimerIrqHandler+0xe8>)
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	18d3      	adds	r3, r2, r3
 8001746:	330c      	adds	r3, #12
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0018      	movs	r0, r3
 800174c:	f001 ff2c 	bl	80035a8 <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8001750:	0020      	movs	r0, r4
 8001752:	183b      	adds	r3, r7, r0
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <uartTimerIrqHandler+0xec>)
 8001758:	2104      	movs	r1, #4
 800175a:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 800175c:	183b      	adds	r3, r7, r0
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <uartTimerIrqHandler+0xf0>)
 8001762:	0052      	lsls	r2, r2, #1
 8001764:	5ad1      	ldrh	r1, [r2, r3]
 8001766:	183b      	adds	r3, r7, r0
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <uartTimerIrqHandler+0xf4>)
 800176c:	0052      	lsls	r2, r2, #1
 800176e:	5ad3      	ldrh	r3, [r2, r3]
 8001770:	183a      	adds	r2, r7, r0
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	18cb      	adds	r3, r1, r3
 8001776:	b299      	uxth	r1, r3
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <uartTimerIrqHandler+0xf0>)
 800177a:	0052      	lsls	r2, r2, #1
 800177c:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 800177e:	183b      	adds	r3, r7, r0
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <uartTimerIrqHandler+0xf0>)
 8001784:	0052      	lsls	r2, r2, #1
 8001786:	5ad2      	ldrh	r2, [r2, r3]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	429a      	cmp	r2, r3
 800178e:	d918      	bls.n	80017c2 <uartTimerIrqHandler+0xb2>
            {
            	uart_rx_size[i] = uart_rx_counter[i];
 8001790:	183b      	adds	r3, r7, r0
 8001792:	7819      	ldrb	r1, [r3, #0]
 8001794:	183b      	adds	r3, r7, r0
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <uartTimerIrqHandler+0xf4>)
 800179a:	0049      	lsls	r1, r1, #1
 800179c:	5ac9      	ldrh	r1, [r1, r3]
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <uartTimerIrqHandler+0xf0>)
 80017a0:	0052      	lsls	r2, r2, #1
 80017a2:	52d1      	strh	r1, [r2, r3]
            	kfifo_reset(&uart_rx_fifo[i]);
 80017a4:	0004      	movs	r4, r0
 80017a6:	183b      	adds	r3, r7, r0
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	011a      	lsls	r2, r3, #4
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <uartTimerIrqHandler+0xf8>)
 80017ae:	18d3      	adds	r3, r2, r3
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff fdd9 	bl	8001368 <kfifo_reset>
            	uart_rx_size[i] = 0;
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <uartTimerIrqHandler+0xf0>)
 80017bc:	0052      	lsls	r2, r2, #1
 80017be:	2100      	movs	r1, #0
 80017c0:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 80017c2:	230f      	movs	r3, #15
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <uartTimerIrqHandler+0xf4>)
 80017ca:	0052      	lsls	r2, r2, #1
 80017cc:	2100      	movs	r1, #0
 80017ce:	52d1      	strh	r1, [r2, r3]

#ifdef USE_CUBEIDE
            uartRecvDoneCallback();
 80017d0:	f000 f872 	bl	80018b8 <uartRecvDoneCallback>
#endif
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 80017d4:	e00b      	b.n	80017ee <uartTimerIrqHandler+0xde>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 80017d6:	210f      	movs	r1, #15
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	3201      	adds	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	230f      	movs	r3, #15
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d09a      	beq.n	8001722 <uartTimerIrqHandler+0x12>
        }
    }
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b005      	add	sp, #20
 80017f4:	bd90      	pop	{r4, r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	200000c0 	.word	0x200000c0
 80017fc:	200004b4 	.word	0x200004b4
 8001800:	200004ac 	.word	0x200004ac
 8001804:	200004a8 	.word	0x200004a8
 8001808:	20000498 	.word	0x20000498

0800180c <HAL_UART_ErrorCallback>:
 * 
 * @param huart
 * @retval None 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001814:	230f      	movs	r3, #15
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e014      	b.n	8001848 <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 800181e:	210f      	movs	r1, #15
 8001820:	187b      	adds	r3, r7, r1
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_UART_ErrorCallback+0x50>)
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	58d2      	ldr	r2, [r2, r3]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d104      	bne.n	800183c <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 8001832:	187b      	adds	r3, r7, r1
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff fe28 	bl	800148c <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 800183c:	210f      	movs	r1, #15
 800183e:	187b      	adds	r3, r7, r1
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	187b      	adds	r3, r7, r1
 8001844:	3201      	adds	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	230f      	movs	r3, #15
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0e5      	beq.n	800181e <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000c0 	.word	0x200000c0

08001860 <rfRecvDoneCallback>:
/**
 * @brief rf recv done callback
 * 
 */
void rfRecvDoneCallback(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
    struct msg msg = { 
 8001866:	003b      	movs	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	003b      	movs	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
        .type = uartRecvEvent,
        .data = NULL,
    };

    mq_push(&mq, &msg);
 8001872:	003a      	movs	r2, r7
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <rfRecvDoneCallback+0x28>)
 8001876:	0011      	movs	r1, r2
 8001878:	0018      	movs	r0, r3
 800187a:	f003 fc5e 	bl	800513a <mq_push>
}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	200002ec 	.word	0x200002ec

0800188c <rfSendDoneCallback>:
/**
 * @brief rf send done callback
 * 
 */
void rfSendDoneCallback(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
    struct msg msg = { 
 8001892:	003b      	movs	r3, r7
 8001894:	2202      	movs	r2, #2
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	003b      	movs	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
        .type = rfSendEvent,
        .data = NULL,
    };

    mq_push(&mq, &msg);
 800189e:	003a      	movs	r2, r7
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <rfSendDoneCallback+0x28>)
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f003 fc48 	bl	800513a <mq_push>
}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b002      	add	sp, #8
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	200002ec 	.word	0x200002ec

080018b8 <uartRecvDoneCallback>:
/**
 * @brief uart recv done callback
 * 
 */
void uartRecvDoneCallback(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
    struct msg msg = { 
 80018be:	003b      	movs	r3, r7
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	003b      	movs	r3, r7
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
        .type = uartRecvEvent,
        .data = NULL,
    };

    mq_push(&mq, &msg);
 80018ca:	003a      	movs	r2, r7
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <uartRecvDoneCallback+0x28>)
 80018ce:	0011      	movs	r1, r2
 80018d0:	0018      	movs	r0, r3
 80018d2:	f003 fc32 	bl	800513a <mq_push>
}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b002      	add	sp, #8
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	200002ec 	.word	0x200002ec

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e8:	f000 fc0c 	bl	8002104 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ec:	f000 f80d 	bl	800190a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f0:	f000 f8f2 	bl	8001ad8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80018f4:	f000 f890 	bl	8001a18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018f8:	f000 f8be 	bl	8001a78 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80018fc:	f000 f864 	bl	80019c8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  bspInit();
 8001900:	f7ff fc30 	bl	8001164 <bspInit>
  stateActuator();
 8001904:	f7fe fd42 	bl	800038c <stateActuator>
//  messageQueueTest();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001908:	e7fe      	b.n	8001908 <main+0x24>

0800190a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190a:	b590      	push	{r4, r7, lr}
 800190c:	b095      	sub	sp, #84	; 0x54
 800190e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001910:	2420      	movs	r4, #32
 8001912:	193b      	adds	r3, r7, r4
 8001914:	0018      	movs	r0, r3
 8001916:	2330      	movs	r3, #48	; 0x30
 8001918:	001a      	movs	r2, r3
 800191a:	2100      	movs	r1, #0
 800191c:	f003 fdcf 	bl	80054be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	2310      	movs	r3, #16
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	0018      	movs	r0, r3
 8001926:	2310      	movs	r3, #16
 8001928:	001a      	movs	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	f003 fdc7 	bl	80054be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001930:	003b      	movs	r3, r7
 8001932:	0018      	movs	r0, r3
 8001934:	2310      	movs	r3, #16
 8001936:	001a      	movs	r2, r3
 8001938:	2100      	movs	r1, #0
 800193a:	f003 fdc0 	bl	80054be <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800193e:	0021      	movs	r1, r4
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2201      	movs	r2, #1
 800194a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2202      	movs	r2, #2
 8001950:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	0252      	lsls	r2, r2, #9
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	02d2      	lsls	r2, r2, #11
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2200      	movs	r2, #0
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001968:	187b      	adds	r3, r7, r1
 800196a:	0018      	movs	r0, r3
 800196c:	f001 f852 	bl	8002a14 <HAL_RCC_OscConfig>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001974:	f000 f99e 	bl	8001cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001978:	2110      	movs	r1, #16
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2202      	movs	r2, #2
 8001984:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2101      	movs	r1, #1
 8001996:	0018      	movs	r0, r3
 8001998:	f001 fb56 	bl	8003048 <HAL_RCC_ClockConfig>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019a0:	f000 f988 	bl	8001cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019a4:	003b      	movs	r3, r7
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80019aa:	003b      	movs	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b0:	003b      	movs	r3, r7
 80019b2:	0018      	movs	r0, r3
 80019b4:	f001 fc8e 	bl	80032d4 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	1e03      	subs	r3, r0, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80019bc:	f000 f97a 	bl	8001cb4 <Error_Handler>
  }
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b015      	add	sp, #84	; 0x54
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_TIM17_Init+0x44>)
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <MX_TIM17_Init+0x48>)
 80019d0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_TIM17_Init+0x44>)
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <MX_TIM17_Init+0x4c>)
 80019d6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_TIM17_Init+0x44>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_TIM17_Init+0x44>)
 80019e0:	2223      	movs	r2, #35	; 0x23
 80019e2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_TIM17_Init+0x44>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <MX_TIM17_Init+0x44>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_TIM17_Init+0x44>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <MX_TIM17_Init+0x44>)
 80019f8:	0018      	movs	r0, r3
 80019fa:	f001 fd39 	bl	8003470 <HAL_TIM_Base_Init>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001a02:	f000 f957 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200004b8 	.word	0x200004b8
 8001a10:	40014800 	.word	0x40014800
 8001a14:	000012bf 	.word	0x000012bf

08001a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <MX_USART1_UART_Init+0x5c>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a24:	22e1      	movs	r2, #225	; 0xe1
 8001a26:	0252      	lsls	r2, r2, #9
 8001a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <MX_USART1_UART_Init+0x58>)
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f001 ff8d 	bl	800397c <HAL_UART_Init>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a66:	f000 f925 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000500 	.word	0x20000500
 8001a74:	40013800 	.word	0x40013800

08001a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <MX_USART2_UART_Init+0x5c>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001a84:	22e1      	movs	r2, #225	; 0xe1
 8001a86:	0252      	lsls	r2, r2, #9
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <MX_USART2_UART_Init+0x58>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 ff5d 	bl	800397c <HAL_UART_Init>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ac6:	f000 f8f5 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000588 	.word	0x20000588
 8001ad4:	40004400 	.word	0x40004400

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	240c      	movs	r4, #12
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	2314      	movs	r3, #20
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f003 fce8 	bl	80054be <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aee:	4b6e      	ldr	r3, [pc, #440]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	4b6d      	ldr	r3, [pc, #436]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	03c9      	lsls	r1, r1, #15
 8001af8:	430a      	orrs	r2, r1
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	03db      	lsls	r3, r3, #15
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0289      	lsls	r1, r1, #10
 8001b14:	430a      	orrs	r2, r1
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	029b      	lsls	r3, r3, #10
 8001b20:	4013      	ands	r3, r2
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	02c9      	lsls	r1, r1, #11
 8001b30:	430a      	orrs	r2, r1
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	4b5c      	ldr	r3, [pc, #368]	; (8001ca8 <MX_GPIO_Init+0x1d0>)
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	02db      	lsls	r3, r3, #11
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 8001b42:	2381      	movs	r3, #129	; 0x81
 8001b44:	0119      	lsls	r1, r3, #4
 8001b46:	2390      	movs	r3, #144	; 0x90
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 ff28 	bl	80029a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 8001b52:	4956      	ldr	r1, [pc, #344]	; (8001cac <MX_GPIO_Init+0x1d4>)
 8001b54:	4b56      	ldr	r3, [pc, #344]	; (8001cb0 <MX_GPIO_Init+0x1d8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 ff22 	bl	80029a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	2210      	movs	r2, #16
 8001b62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	2201      	movs	r2, #1
 8001b68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	193b      	adds	r3, r7, r4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b70:	193b      	adds	r3, r7, r4
 8001b72:	2201      	movs	r2, #1
 8001b74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8001b76:	193a      	adds	r2, r7, r4
 8001b78:	2390      	movs	r3, #144	; 0x90
 8001b7a:	05db      	lsls	r3, r3, #23
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 fcb2 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 8001b84:	0021      	movs	r1, r4
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	0152      	lsls	r2, r2, #5
 8001b8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8e:	000c      	movs	r4, r1
 8001b90:	193b      	adds	r3, r7, r4
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	2201      	movs	r2, #1
 8001b9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	193b      	adds	r3, r7, r4
 8001b9e:	4a44      	ldr	r2, [pc, #272]	; (8001cb0 <MX_GPIO_Init+0x1d8>)
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	0010      	movs	r0, r2
 8001ba4:	f000 fca0 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 8001ba8:	0021      	movs	r1, r4
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	0192      	lsls	r2, r2, #6
 8001bb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2288      	movs	r2, #136	; 0x88
 8001bb6:	0352      	lsls	r2, r2, #13
 8001bb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	000c      	movs	r4, r1
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <MX_GPIO_Init+0x1d8>)
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	0010      	movs	r0, r2
 8001bca:	f000 fc8d 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 8001bce:	0021      	movs	r1, r4
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	22c0      	movs	r2, #192	; 0xc0
 8001bd4:	0212      	lsls	r2, r2, #8
 8001bd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	000c      	movs	r4, r1
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	2201      	movs	r2, #1
 8001bde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	2203      	movs	r2, #3
 8001bea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	193b      	adds	r3, r7, r4
 8001bee:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <MX_GPIO_Init+0x1d8>)
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	f000 fc78 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001bf8:	193b      	adds	r3, r7, r4
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	0052      	lsls	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	193a      	adds	r2, r7, r4
 8001c0e:	2390      	movs	r3, #144	; 0x90
 8001c10:	05db      	lsls	r3, r3, #23
 8001c12:	0011      	movs	r1, r2
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 fc67 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 8001c1a:	0021      	movs	r1, r4
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	000c      	movs	r4, r1
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	2201      	movs	r2, #1
 8001c2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	193b      	adds	r3, r7, r4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c32:	193b      	adds	r3, r7, r4
 8001c34:	2203      	movs	r2, #3
 8001c36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 8001c38:	193a      	adds	r2, r7, r4
 8001c3a:	2390      	movs	r3, #144	; 0x90
 8001c3c:	05db      	lsls	r3, r3, #23
 8001c3e:	0011      	movs	r1, r2
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 fc51 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	0152      	lsls	r2, r2, #5
 8001c4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	2288      	movs	r2, #136	; 0x88
 8001c52:	0352      	lsls	r2, r2, #13
 8001c54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	2201      	movs	r2, #1
 8001c5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	193a      	adds	r2, r7, r4
 8001c5e:	2390      	movs	r3, #144	; 0x90
 8001c60:	05db      	lsls	r3, r3, #23
 8001c62:	0011      	movs	r1, r2
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 fc3f 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 8001c6a:	0021      	movs	r1, r4
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2230      	movs	r2, #48	; 0x30
 8001c70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	2201      	movs	r2, #1
 8001c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2201      	movs	r2, #1
 8001c82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <MX_GPIO_Init+0x1d8>)
 8001c88:	0019      	movs	r1, r3
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	f000 fc2c 	bl	80024e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2007      	movs	r0, #7
 8001c96:	f000 fb67 	bl	8002368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001c9a:	2007      	movs	r0, #7
 8001c9c:	f000 fb79 	bl	8002392 <HAL_NVIC_EnableIRQ>

}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b009      	add	sp, #36	; 0x24
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	0000c030 	.word	0x0000c030
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>
	...

08001cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_MspInit+0x44>)
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_MspInit+0x44>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	619a      	str	r2, [r3, #24]
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_MspInit+0x44>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_MspInit+0x44>)
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_MspInit+0x44>)
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	0549      	lsls	r1, r1, #21
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	61da      	str	r2, [r3, #28]
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_MspInit+0x44>)
 8001cee:	69da      	ldr	r2, [r3, #28]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	055b      	lsls	r3, r3, #21
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_TIM_Base_MspInit+0x48>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d115      	bne.n	8001d46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_TIM_Base_MspInit+0x4c>)
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_TIM_Base_MspInit+0x4c>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	02c9      	lsls	r1, r1, #11
 8001d24:	430a      	orrs	r2, r1
 8001d26:	619a      	str	r2, [r3, #24]
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_TIM_Base_MspInit+0x4c>)
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	02db      	lsls	r3, r3, #11
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2016      	movs	r0, #22
 8001d3c:	f000 fb14 	bl	8002368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001d40:	2016      	movs	r0, #22
 8001d42:	f000 fb26 	bl	8002392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40014800 	.word	0x40014800
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b08d      	sub	sp, #52	; 0x34
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	241c      	movs	r4, #28
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	0018      	movs	r0, r3
 8001d66:	2314      	movs	r3, #20
 8001d68:	001a      	movs	r2, r3
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	f003 fba7 	bl	80054be <memset>
  if(huart->Instance==USART1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a3d      	ldr	r2, [pc, #244]	; (8001e6c <HAL_UART_MspInit+0x114>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d13c      	bne.n	8001df4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	01c9      	lsls	r1, r1, #7
 8001d84:	430a      	orrs	r2, r1
 8001d86:	619a      	str	r2, [r3, #24]
 8001d88:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	01db      	lsls	r3, r3, #7
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	0289      	lsls	r1, r1, #10
 8001da0:	430a      	orrs	r2, r1
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	22c0      	movs	r2, #192	; 0xc0
 8001db6:	00d2      	lsls	r2, r2, #3
 8001db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	0021      	movs	r1, r4
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	187a      	adds	r2, r7, r1
 8001dd6:	2390      	movs	r3, #144	; 0x90
 8001dd8:	05db      	lsls	r3, r3, #23
 8001dda:	0011      	movs	r1, r2
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 fb83 	bl	80024e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2101      	movs	r1, #1
 8001de6:	201b      	movs	r0, #27
 8001de8:	f000 fabe 	bl	8002368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dec:	201b      	movs	r0, #27
 8001dee:	f000 fad0 	bl	8002392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001df2:	e037      	b.n	8001e64 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <HAL_UART_MspInit+0x11c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d132      	bne.n	8001e64 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	0289      	lsls	r1, r1, #10
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	61da      	str	r2, [r3, #28]
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	0289      	lsls	r1, r1, #10
 8001e24:	430a      	orrs	r2, r1
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0x118>)
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e36:	211c      	movs	r1, #28
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2202      	movs	r2, #2
 8001e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2201      	movs	r2, #1
 8001e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	187a      	adds	r2, r7, r1
 8001e58:	2390      	movs	r3, #144	; 0x90
 8001e5a:	05db      	lsls	r3, r3, #23
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 fb42 	bl	80024e8 <HAL_GPIO_Init>
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b00d      	add	sp, #52	; 0x34
 8001e6a:	bd90      	pop	{r4, r7, pc}
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40004400 	.word	0x40004400

08001e78 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_UART_MspDeInit+0x60>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d111      	bne.n	8001eae <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_UART_MspDeInit+0x64>)
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_UART_MspDeInit+0x64>)
 8001e90:	4913      	ldr	r1, [pc, #76]	; (8001ee0 <HAL_UART_MspDeInit+0x68>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	00da      	lsls	r2, r3, #3
 8001e9a:	2390      	movs	r3, #144	; 0x90
 8001e9c:	05db      	lsls	r3, r3, #23
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 fc91 	bl	80027c8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001ea6:	201b      	movs	r0, #27
 8001ea8:	f000 fa83 	bl	80023b2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001eac:	e010      	b.n	8001ed0 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <HAL_UART_MspDeInit+0x6c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_UART_MspDeInit+0x64>)
 8001eba:	69da      	ldr	r2, [r3, #28]
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_UART_MspDeInit+0x64>)
 8001ebe:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <HAL_UART_MspDeInit+0x70>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001ec4:	2390      	movs	r3, #144	; 0x90
 8001ec6:	05db      	lsls	r3, r3, #23
 8001ec8:	210c      	movs	r1, #12
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 fc7c 	bl	80027c8 <HAL_GPIO_DeInit>
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	ffffbfff 	.word	0xffffbfff
 8001ee4:	40004400 	.word	0x40004400
 8001ee8:	fffdffff 	.word	0xfffdffff

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f10:	f000 f940 	bl	8002194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 8001f14:	f7ff fa1c 	bl	8001350 <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	015b      	lsls	r3, r3, #5
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fd58 	bl	80029dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	019b      	lsls	r3, r3, #6
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fd53 	bl	80029dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <TIM17_IRQHandler+0x14>)
 8001f42:	0018      	movs	r0, r3
 8001f44:	f001 fb5e 	bl	8003604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	200004b8 	.word	0x200004b8

08001f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <USART1_IRQHandler+0x14>)
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f001 fe98 	bl	8003c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	20000500 	.word	0x20000500

08001f6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e00a      	b.n	8001f94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f7e:	e000      	b.n	8001f82 <_read+0x16>
 8001f80:	bf00      	nop
 8001f82:	0001      	movs	r1, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf0      	blt.n	8001f7e <_read+0x12>
	}

return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b006      	add	sp, #24
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e009      	b.n	8001fcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	e000      	b.n	8001fc6 <_write+0x20>
 8001fc4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf1      	blt.n	8001fb8 <_write+0x12>
	}
	return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b006      	add	sp, #24
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_close>:

int _close(int file)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	425b      	negs	r3, r3
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	0192      	lsls	r2, r2, #6
 8002002:	605a      	str	r2, [r3, #4]
	return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}

0800200e <_isatty>:

int _isatty(int file)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	return 1;
 8002016:	2301      	movs	r3, #1
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	18d3      	adds	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f003 f9ec 	bl	8005444 <__errno>
 800206c:	0003      	movs	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	2301      	movs	r3, #1
 8002074:	425b      	negs	r3, r3
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	18d2      	adds	r2, r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <_sbrk+0x64>)
 8002088:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b006      	add	sp, #24
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20002000 	.word	0x20002000
 8002098:	00000400 	.word	0x00000400
 800209c:	20000610 	.word	0x20000610
 80020a0:	20000628 	.word	0x20000628

080020a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020b4:	f7ff fff6 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <LoopForever+0x6>)
  ldr r1, =_edata
 80020ba:	490d      	ldr	r1, [pc, #52]	; (80020f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <LoopForever+0xe>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d0:	4c0a      	ldr	r4, [pc, #40]	; (80020fc <LoopForever+0x16>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020de:	f003 f9b7 	bl	8005450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020e2:	f7ff fbff 	bl	80018e4 <main>

080020e6 <LoopForever>:

LoopForever:
    b LoopForever
 80020e6:	e7fe      	b.n	80020e6 <LoopForever>
  ldr   r0, =_estack
 80020e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f0:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 80020f4:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 80020f8:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 80020fc:	20000628 	.word	0x20000628

08002100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC1_IRQHandler>
	...

08002104 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_Init+0x24>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_Init+0x24>)
 800210e:	2110      	movs	r1, #16
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002114:	2000      	movs	r0, #0
 8002116:	f000 f809 	bl	800212c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211a:	f7ff fdd1 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	40022000 	.word	0x40022000

0800212c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_InitTick+0x5c>)
 8002136:	681c      	ldr	r4, [r3, #0]
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_InitTick+0x60>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	0019      	movs	r1, r3
 800213e:	23fa      	movs	r3, #250	; 0xfa
 8002140:	0098      	lsls	r0, r3, #2
 8002142:	f7fd ffe1 	bl	8000108 <__udivsi3>
 8002146:	0003      	movs	r3, r0
 8002148:	0019      	movs	r1, r3
 800214a:	0020      	movs	r0, r4
 800214c:	f7fd ffdc 	bl	8000108 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	0018      	movs	r0, r3
 8002154:	f000 f93d 	bl	80023d2 <HAL_SYSTICK_Config>
 8002158:	1e03      	subs	r3, r0, #0
 800215a:	d001      	beq.n	8002160 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e00f      	b.n	8002180 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d80b      	bhi.n	800217e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	2301      	movs	r3, #1
 800216a:	425b      	negs	r3, r3
 800216c:	2200      	movs	r2, #0
 800216e:	0018      	movs	r0, r3
 8002170:	f000 f8fa 	bl	8002368 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_InitTick+0x64>)
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b003      	add	sp, #12
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	200000d0 	.word	0x200000d0
 800218c:	200000d8 	.word	0x200000d8
 8002190:	200000d4 	.word	0x200000d4

08002194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_IncTick+0x1c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	001a      	movs	r2, r3
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_IncTick+0x20>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	18d2      	adds	r2, r2, r3
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_IncTick+0x20>)
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	200000d8 	.word	0x200000d8
 80021b4:	20000614 	.word	0x20000614

080021b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <HAL_GetTick+0x10>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	20000614 	.word	0x20000614

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b7f      	cmp	r3, #127	; 0x7f
 80021de:	d809      	bhi.n	80021f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	001a      	movs	r2, r3
 80021e6:	231f      	movs	r3, #31
 80021e8:	401a      	ands	r2, r3
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <__NVIC_EnableIRQ+0x30>)
 80021ec:	2101      	movs	r1, #1
 80021ee:	4091      	lsls	r1, r2
 80021f0:	000a      	movs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
  }
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	0002      	movs	r2, r0
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b7f      	cmp	r3, #127	; 0x7f
 8002212:	d810      	bhi.n	8002236 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	001a      	movs	r2, r3
 800221a:	231f      	movs	r3, #31
 800221c:	4013      	ands	r3, r2
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_DisableIRQ+0x40>)
 8002220:	2201      	movs	r2, #1
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800222a:	f3bf 8f4f 	dsb	sy
}
 800222e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002230:	f3bf 8f6f 	isb	sy
}
 8002234:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	e000e100 	.word	0xe000e100

08002244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	0002      	movs	r2, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b7f      	cmp	r3, #127	; 0x7f
 8002258:	d828      	bhi.n	80022ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800225a:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <__NVIC_SetPriority+0xd4>)
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b25b      	sxtb	r3, r3
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	33c0      	adds	r3, #192	; 0xc0
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	589b      	ldr	r3, [r3, r2]
 800226a:	1dfa      	adds	r2, r7, #7
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	0011      	movs	r1, r2
 8002270:	2203      	movs	r2, #3
 8002272:	400a      	ands	r2, r1
 8002274:	00d2      	lsls	r2, r2, #3
 8002276:	21ff      	movs	r1, #255	; 0xff
 8002278:	4091      	lsls	r1, r2
 800227a:	000a      	movs	r2, r1
 800227c:	43d2      	mvns	r2, r2
 800227e:	401a      	ands	r2, r3
 8002280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	22ff      	movs	r2, #255	; 0xff
 8002288:	401a      	ands	r2, r3
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	0018      	movs	r0, r3
 8002290:	2303      	movs	r3, #3
 8002292:	4003      	ands	r3, r0
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002298:	481f      	ldr	r0, [pc, #124]	; (8002318 <__NVIC_SetPriority+0xd4>)
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b25b      	sxtb	r3, r3
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	430a      	orrs	r2, r1
 80022a4:	33c0      	adds	r3, #192	; 0xc0
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022aa:	e031      	b.n	8002310 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <__NVIC_SetPriority+0xd8>)
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	0019      	movs	r1, r3
 80022b4:	230f      	movs	r3, #15
 80022b6:	400b      	ands	r3, r1
 80022b8:	3b08      	subs	r3, #8
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3306      	adds	r3, #6
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	18d3      	adds	r3, r2, r3
 80022c2:	3304      	adds	r3, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	1dfa      	adds	r2, r7, #7
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	0011      	movs	r1, r2
 80022cc:	2203      	movs	r2, #3
 80022ce:	400a      	ands	r2, r1
 80022d0:	00d2      	lsls	r2, r2, #3
 80022d2:	21ff      	movs	r1, #255	; 0xff
 80022d4:	4091      	lsls	r1, r2
 80022d6:	000a      	movs	r2, r1
 80022d8:	43d2      	mvns	r2, r2
 80022da:	401a      	ands	r2, r3
 80022dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	22ff      	movs	r2, #255	; 0xff
 80022e4:	401a      	ands	r2, r3
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	0018      	movs	r0, r3
 80022ec:	2303      	movs	r3, #3
 80022ee:	4003      	ands	r3, r0
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <__NVIC_SetPriority+0xd8>)
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	001c      	movs	r4, r3
 80022fc:	230f      	movs	r3, #15
 80022fe:	4023      	ands	r3, r4
 8002300:	3b08      	subs	r3, #8
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	430a      	orrs	r2, r1
 8002306:	3306      	adds	r3, #6
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	18c3      	adds	r3, r0, r3
 800230c:	3304      	adds	r3, #4
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b003      	add	sp, #12
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	045b      	lsls	r3, r3, #17
 8002330:	429a      	cmp	r2, r3
 8002332:	d301      	bcc.n	8002338 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002334:	2301      	movs	r3, #1
 8002336:	e010      	b.n	800235a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <SysTick_Config+0x44>)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	3a01      	subs	r2, #1
 800233e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002340:	2301      	movs	r3, #1
 8002342:	425b      	negs	r3, r3
 8002344:	2103      	movs	r1, #3
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff ff7c 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SysTick_Config+0x44>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SysTick_Config+0x44>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b002      	add	sp, #8
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	210f      	movs	r1, #15
 8002374:	187b      	adds	r3, r7, r1
 8002376:	1c02      	adds	r2, r0, #0
 8002378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	187b      	adds	r3, r7, r1
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b25b      	sxtb	r3, r3
 8002382:	0011      	movs	r1, r2
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff ff5d 	bl	8002244 <__NVIC_SetPriority>
}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	0002      	movs	r2, r0
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7ff ff11 	bl	80021cc <__NVIC_EnableIRQ>
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	0002      	movs	r2, r0
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023be:	1dfb      	adds	r3, r7, #7
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff ff1b 	bl	8002200 <__NVIC_DisableIRQ>
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0018      	movs	r0, r3
 80023de:	f7ff ff9f 	bl	8002320 <SysTick_Config>
 80023e2:	0003      	movs	r3, r0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2221      	movs	r2, #33	; 0x21
 80023f8:	5c9b      	ldrb	r3, [r3, r2]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d008      	beq.n	8002412 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2204      	movs	r2, #4
 8002404:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e020      	b.n	8002454 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	210e      	movs	r1, #14
 800241e:	438a      	bics	r2, r1
 8002420:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	438a      	bics	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	2101      	movs	r1, #1
 800243c:	4091      	lsls	r1, r2
 800243e:	000a      	movs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2221      	movs	r2, #33	; 0x21
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	210f      	movs	r1, #15
 8002466:	187b      	adds	r3, r7, r1
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2221      	movs	r2, #33	; 0x21
 8002470:	5c9b      	ldrb	r3, [r3, r2]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d006      	beq.n	8002486 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2204      	movs	r2, #4
 800247c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800247e:	187b      	adds	r3, r7, r1
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e028      	b.n	80024d8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	210e      	movs	r1, #14
 8002492:	438a      	bics	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	438a      	bics	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	2101      	movs	r1, #1
 80024b0:	4091      	lsls	r1, r2
 80024b2:	000a      	movs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2221      	movs	r2, #33	; 0x21
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	2100      	movs	r1, #0
 80024c4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	0010      	movs	r0, r2
 80024d6:	4798      	blx	r3
    }
  }
  return status;
 80024d8:	230f      	movs	r3, #15
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f6:	e14f      	b.n	8002798 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4091      	lsls	r1, r2
 8002502:	000a      	movs	r2, r1
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d100      	bne.n	8002510 <HAL_GPIO_Init+0x28>
 800250e:	e140      	b.n	8002792 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	4013      	ands	r3, r2
 8002518:	2b01      	cmp	r3, #1
 800251a:	d005      	beq.n	8002528 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2203      	movs	r2, #3
 8002522:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002524:	2b02      	cmp	r3, #2
 8002526:	d130      	bne.n	800258a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	409a      	lsls	r2, r3
 8002536:	0013      	movs	r3, r2
 8002538:	43da      	mvns	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	409a      	lsls	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255e:	2201      	movs	r2, #1
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	43da      	mvns	r2, r3
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	2201      	movs	r2, #1
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
 800257c:	0013      	movs	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2203      	movs	r2, #3
 8002590:	4013      	ands	r3, r2
 8002592:	2b03      	cmp	r3, #3
 8002594:	d017      	beq.n	80025c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	409a      	lsls	r2, r3
 80025a4:	0013      	movs	r3, r2
 80025a6:	43da      	mvns	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	0013      	movs	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d123      	bne.n	800261a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	58d3      	ldr	r3, [r2, r3]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2207      	movs	r2, #7
 80025e4:	4013      	ands	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	409a      	lsls	r2, r3
 80025ec:	0013      	movs	r3, r2
 80025ee:	43da      	mvns	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2107      	movs	r1, #7
 80025fe:	400b      	ands	r3, r1
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	409a      	lsls	r2, r3
 8002604:	0013      	movs	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	0092      	lsls	r2, r2, #2
 8002616:	6939      	ldr	r1, [r7, #16]
 8002618:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	409a      	lsls	r2, r3
 8002628:	0013      	movs	r3, r2
 800262a:	43da      	mvns	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2203      	movs	r2, #3
 8002638:	401a      	ands	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	409a      	lsls	r2, r3
 8002640:	0013      	movs	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	23c0      	movs	r3, #192	; 0xc0
 8002654:	029b      	lsls	r3, r3, #10
 8002656:	4013      	ands	r3, r2
 8002658:	d100      	bne.n	800265c <HAL_GPIO_Init+0x174>
 800265a:	e09a      	b.n	8002792 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265c:	4b54      	ldr	r3, [pc, #336]	; (80027b0 <HAL_GPIO_Init+0x2c8>)
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_GPIO_Init+0x2c8>)
 8002662:	2101      	movs	r1, #1
 8002664:	430a      	orrs	r2, r1
 8002666:	619a      	str	r2, [r3, #24]
 8002668:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <HAL_GPIO_Init+0x2c8>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2201      	movs	r2, #1
 800266e:	4013      	ands	r3, r2
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002674:	4a4f      	ldr	r2, [pc, #316]	; (80027b4 <HAL_GPIO_Init+0x2cc>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	589b      	ldr	r3, [r3, r2]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2203      	movs	r2, #3
 8002686:	4013      	ands	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	409a      	lsls	r2, r3
 800268e:	0013      	movs	r3, r2
 8002690:	43da      	mvns	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	2390      	movs	r3, #144	; 0x90
 800269c:	05db      	lsls	r3, r3, #23
 800269e:	429a      	cmp	r2, r3
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0x1e2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a44      	ldr	r2, [pc, #272]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00d      	beq.n	80026c6 <HAL_GPIO_Init+0x1de>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a43      	ldr	r2, [pc, #268]	; (80027bc <HAL_GPIO_Init+0x2d4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <HAL_GPIO_Init+0x1da>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a42      	ldr	r2, [pc, #264]	; (80027c0 <HAL_GPIO_Init+0x2d8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_GPIO_Init+0x1d6>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026be:	2305      	movs	r3, #5
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026ca:	2300      	movs	r3, #0
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	2103      	movs	r1, #3
 80026d0:	400a      	ands	r2, r1
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	; (80027b4 <HAL_GPIO_Init+0x2cc>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_GPIO_Init+0x2dc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43da      	mvns	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	035b      	lsls	r3, r3, #13
 8002702:	4013      	ands	r3, r2
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800270e:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_GPIO_Init+0x2dc>)
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_GPIO_Init+0x2dc>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43da      	mvns	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	039b      	lsls	r3, r3, #14
 800272c:	4013      	ands	r3, r2
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_GPIO_Init+0x2dc>)
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_GPIO_Init+0x2dc>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43da      	mvns	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	029b      	lsls	r3, r3, #10
 8002756:	4013      	ands	r3, r2
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_GPIO_Init+0x2dc>)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_GPIO_Init+0x2dc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43da      	mvns	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	025b      	lsls	r3, r3, #9
 8002780:	4013      	ands	r3, r2
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_GPIO_Init+0x2dc>)
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	40da      	lsrs	r2, r3
 80027a0:	1e13      	subs	r3, r2, #0
 80027a2:	d000      	beq.n	80027a6 <HAL_GPIO_Init+0x2be>
 80027a4:	e6a8      	b.n	80024f8 <HAL_GPIO_Init+0x10>
  } 
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b006      	add	sp, #24
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000
 80027b8:	48000400 	.word	0x48000400
 80027bc:	48000800 	.word	0x48000800
 80027c0:	48000c00 	.word	0x48000c00
 80027c4:	40010400 	.word	0x40010400

080027c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027d6:	e0b1      	b.n	800293c <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027d8:	2201      	movs	r2, #1
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	409a      	lsls	r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d100      	bne.n	80027ec <HAL_GPIO_DeInit+0x24>
 80027ea:	e0a4      	b.n	8002936 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027ec:	4a59      	ldr	r2, [pc, #356]	; (8002954 <HAL_GPIO_DeInit+0x18c>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	589b      	ldr	r3, [r3, r2]
 80027f8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2203      	movs	r2, #3
 80027fe:	4013      	ands	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	2390      	movs	r3, #144	; 0x90
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	429a      	cmp	r2, r3
 8002814:	d013      	beq.n	800283e <HAL_GPIO_DeInit+0x76>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4f      	ldr	r2, [pc, #316]	; (8002958 <HAL_GPIO_DeInit+0x190>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_DeInit+0x72>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4e      	ldr	r2, [pc, #312]	; (800295c <HAL_GPIO_DeInit+0x194>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_DeInit+0x6e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4d      	ldr	r2, [pc, #308]	; (8002960 <HAL_GPIO_DeInit+0x198>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_DeInit+0x6a>
 800282e:	2303      	movs	r3, #3
 8002830:	e006      	b.n	8002840 <HAL_GPIO_DeInit+0x78>
 8002832:	2305      	movs	r3, #5
 8002834:	e004      	b.n	8002840 <HAL_GPIO_DeInit+0x78>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_DeInit+0x78>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_DeInit+0x78>
 800283e:	2300      	movs	r3, #0
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	2103      	movs	r1, #3
 8002844:	400a      	ands	r2, r1
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d132      	bne.n	80028b6 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002850:	4b44      	ldr	r3, [pc, #272]	; (8002964 <HAL_GPIO_DeInit+0x19c>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43d9      	mvns	r1, r3
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_GPIO_DeInit+0x19c>)
 800285a:	400a      	ands	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_GPIO_DeInit+0x19c>)
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43d9      	mvns	r1, r3
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_GPIO_DeInit+0x19c>)
 8002868:	400a      	ands	r2, r1
 800286a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800286c:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <HAL_GPIO_DeInit+0x19c>)
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43d9      	mvns	r1, r3
 8002874:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_GPIO_DeInit+0x19c>)
 8002876:	400a      	ands	r2, r1
 8002878:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800287a:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <HAL_GPIO_DeInit+0x19c>)
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43d9      	mvns	r1, r3
 8002882:	4b38      	ldr	r3, [pc, #224]	; (8002964 <HAL_GPIO_DeInit+0x19c>)
 8002884:	400a      	ands	r2, r1
 8002886:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2203      	movs	r2, #3
 800288c:	4013      	ands	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	409a      	lsls	r2, r3
 8002894:	0013      	movs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002898:	4a2e      	ldr	r2, [pc, #184]	; (8002954 <HAL_GPIO_DeInit+0x18c>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	589a      	ldr	r2, [r3, r2]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	482a      	ldr	r0, [pc, #168]	; (8002954 <HAL_GPIO_DeInit+0x18c>)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	400a      	ands	r2, r1
 80028b0:	3302      	adds	r3, #2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	0052      	lsls	r2, r2, #1
 80028be:	2103      	movs	r1, #3
 80028c0:	4091      	lsls	r1, r2
 80028c2:	000a      	movs	r2, r1
 80028c4:	43d2      	mvns	r2, r2
 80028c6:	401a      	ands	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	08da      	lsrs	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3208      	adds	r2, #8
 80028d4:	0092      	lsls	r2, r2, #2
 80028d6:	58d3      	ldr	r3, [r2, r3]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	2107      	movs	r1, #7
 80028dc:	400a      	ands	r2, r1
 80028de:	0092      	lsls	r2, r2, #2
 80028e0:	210f      	movs	r1, #15
 80028e2:	4091      	lsls	r1, r2
 80028e4:	000a      	movs	r2, r1
 80028e6:	43d1      	mvns	r1, r2
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	08d2      	lsrs	r2, r2, #3
 80028ec:	4019      	ands	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	0052      	lsls	r2, r2, #1
 80028fe:	2103      	movs	r1, #3
 8002900:	4091      	lsls	r1, r2
 8002902:	000a      	movs	r2, r1
 8002904:	43d2      	mvns	r2, r2
 8002906:	401a      	ands	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2101      	movs	r1, #1
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4091      	lsls	r1, r2
 8002916:	000a      	movs	r2, r1
 8002918:	43d2      	mvns	r2, r2
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	0052      	lsls	r2, r2, #1
 8002928:	2103      	movs	r1, #3
 800292a:	4091      	lsls	r1, r2
 800292c:	000a      	movs	r2, r1
 800292e:	43d2      	mvns	r2, r2
 8002930:	401a      	ands	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	609a      	str	r2, [r3, #8]

    }

    position++;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	40da      	lsrs	r2, r3
 8002942:	1e13      	subs	r3, r2, #0
 8002944:	d000      	beq.n	8002948 <HAL_GPIO_DeInit+0x180>
 8002946:	e747      	b.n	80027d8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b006      	add	sp, #24
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40010000 	.word	0x40010000
 8002958:	48000400 	.word	0x48000400
 800295c:	48000800 	.word	0x48000800
 8002960:	48000c00 	.word	0x48000c00
 8002964:	40010400 	.word	0x40010400

08002968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	000a      	movs	r2, r1
 8002972:	1cbb      	adds	r3, r7, #2
 8002974:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	1cba      	adds	r2, r7, #2
 800297c:	8812      	ldrh	r2, [r2, #0]
 800297e:	4013      	ands	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002982:	230f      	movs	r3, #15
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e003      	b.n	8002994 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800298c:	230f      	movs	r3, #15
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002994:	230f      	movs	r3, #15
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	781b      	ldrb	r3, [r3, #0]
  }
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b004      	add	sp, #16
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	0008      	movs	r0, r1
 80029ac:	0011      	movs	r1, r2
 80029ae:	1cbb      	adds	r3, r7, #2
 80029b0:	1c02      	adds	r2, r0, #0
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	1c7b      	adds	r3, r7, #1
 80029b6:	1c0a      	adds	r2, r1, #0
 80029b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ba:	1c7b      	adds	r3, r7, #1
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029c2:	1cbb      	adds	r3, r7, #2
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029ca:	e003      	b.n	80029d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029cc:	1cbb      	adds	r3, r7, #2
 80029ce:	881a      	ldrh	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	0002      	movs	r2, r0
 80029e4:	1dbb      	adds	r3, r7, #6
 80029e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	1dba      	adds	r2, r7, #6
 80029ee:	8812      	ldrh	r2, [r2, #0]
 80029f0:	4013      	ands	r3, r2
 80029f2:	d008      	beq.n	8002a06 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80029f6:	1dba      	adds	r2, r7, #6
 80029f8:	8812      	ldrh	r2, [r2, #0]
 80029fa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029fc:	1dbb      	adds	r3, r7, #6
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7fe fc67 	bl	80012d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	40010400 	.word	0x40010400

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e301      	b.n	800302a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d100      	bne.n	8002a32 <HAL_RCC_OscConfig+0x1e>
 8002a30:	e08d      	b.n	8002b4e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a32:	4bc3      	ldr	r3, [pc, #780]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	220c      	movs	r2, #12
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d00e      	beq.n	8002a5c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a3e:	4bc0      	ldr	r3, [pc, #768]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	220c      	movs	r2, #12
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d116      	bne.n	8002a78 <HAL_RCC_OscConfig+0x64>
 8002a4a:	4bbd      	ldr	r3, [pc, #756]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	025b      	lsls	r3, r3, #9
 8002a52:	401a      	ands	r2, r3
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	4bb8      	ldr	r3, [pc, #736]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	029b      	lsls	r3, r3, #10
 8002a64:	4013      	ands	r3, r2
 8002a66:	d100      	bne.n	8002a6a <HAL_RCC_OscConfig+0x56>
 8002a68:	e070      	b.n	8002b4c <HAL_RCC_OscConfig+0x138>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d000      	beq.n	8002a74 <HAL_RCC_OscConfig+0x60>
 8002a72:	e06b      	b.n	8002b4c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e2d8      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x7c>
 8002a80:	4baf      	ldr	r3, [pc, #700]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4bae      	ldr	r3, [pc, #696]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	0249      	lsls	r1, r1, #9
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e02f      	b.n	8002af0 <HAL_RCC_OscConfig+0xdc>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x9e>
 8002a98:	4ba9      	ldr	r3, [pc, #676]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4ba8      	ldr	r3, [pc, #672]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a9e:	49a9      	ldr	r1, [pc, #676]	; (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4ba6      	ldr	r3, [pc, #664]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4ba5      	ldr	r3, [pc, #660]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	49a7      	ldr	r1, [pc, #668]	; (8002d48 <HAL_RCC_OscConfig+0x334>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e01e      	b.n	8002af0 <HAL_RCC_OscConfig+0xdc>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xc4>
 8002aba:	4ba1      	ldr	r3, [pc, #644]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4ba0      	ldr	r3, [pc, #640]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	02c9      	lsls	r1, r1, #11
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	4b9d      	ldr	r3, [pc, #628]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b9c      	ldr	r3, [pc, #624]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	0249      	lsls	r1, r1, #9
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xdc>
 8002ad8:	4b99      	ldr	r3, [pc, #612]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b98      	ldr	r3, [pc, #608]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ade:	4999      	ldr	r1, [pc, #612]	; (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	4b96      	ldr	r3, [pc, #600]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b95      	ldr	r3, [pc, #596]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aea:	4997      	ldr	r1, [pc, #604]	; (8002d48 <HAL_RCC_OscConfig+0x334>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff fb5e 	bl	80021b8 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b02:	f7ff fb59 	bl	80021b8 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e28a      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b14:	4b8a      	ldr	r3, [pc, #552]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0xee>
 8002b20:	e015      	b.n	8002b4e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7ff fb49 	bl	80021b8 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fb44 	bl	80021b8 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e275      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b80      	ldr	r3, [pc, #512]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4013      	ands	r3, r2
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x118>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d100      	bne.n	8002b5a <HAL_RCC_OscConfig+0x146>
 8002b58:	e069      	b.n	8002c2e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b5a:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	220c      	movs	r2, #12
 8002b60:	4013      	ands	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b64:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	220c      	movs	r2, #12
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d11c      	bne.n	8002baa <HAL_RCC_OscConfig+0x196>
 8002b70:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	025b      	lsls	r3, r3, #9
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d116      	bne.n	8002baa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7c:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e24b      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	22f8      	movs	r2, #248	; 0xf8
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	00da      	lsls	r2, r3, #3
 8002ba2:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba8:	e041      	b.n	8002c2e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d024      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fafb 	bl	80021b8 <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7ff faf6 	bl	80021b8 <HAL_GetTick>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e227      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	4013      	ands	r3, r2
 8002be2:	d0f1      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	22f8      	movs	r2, #248	; 0xf8
 8002bea:	4393      	bics	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00da      	lsls	r2, r3, #3
 8002bf4:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e018      	b.n	8002c2e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfc:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	438a      	bics	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7ff fad6 	bl	80021b8 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7ff fad1 	bl	80021b8 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e202      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c24:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d1f1      	bne.n	8002c12 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2208      	movs	r2, #8
 8002c34:	4013      	ands	r3, r2
 8002c36:	d036      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d019      	beq.n	8002c74 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c40:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c44:	4b3e      	ldr	r3, [pc, #248]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7ff fab4 	bl	80021b8 <HAL_GetTick>
 8002c50:	0003      	movs	r3, r0
 8002c52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c56:	f7ff faaf 	bl	80021b8 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1e0      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d0f1      	beq.n	8002c56 <HAL_RCC_OscConfig+0x242>
 8002c72:	e018      	b.n	8002ca6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	438a      	bics	r2, r1
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7ff fa9a 	bl	80021b8 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7ff fa95 	bl	80021b8 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1c6      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d1f1      	bne.n	8002c8a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x29e>
 8002cb0:	e0b4      	b.n	8002e1c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	201f      	movs	r0, #31
 8002cb4:	183b      	adds	r3, r7, r0
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	055b      	lsls	r3, r3, #21
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d110      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	0549      	lsls	r1, r1, #21
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	055b      	lsls	r3, r3, #21
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ce2:	183b      	adds	r3, r7, r0
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d11a      	bne.n	8002d2a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0049      	lsls	r1, r1, #1
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7ff fa59 	bl	80021b8 <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7ff fa54 	bl	80021b8 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e185      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10e      	bne.n	8002d50 <HAL_RCC_OscConfig+0x33c>
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	621a      	str	r2, [r3, #32]
 8002d3e:	e035      	b.n	8002dac <HAL_RCC_OscConfig+0x398>
 8002d40:	40021000 	.word	0x40021000
 8002d44:	fffeffff 	.word	0xfffeffff
 8002d48:	fffbffff 	.word	0xfffbffff
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x35e>
 8002d58:	4bb6      	ldr	r3, [pc, #728]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	4bb5      	ldr	r3, [pc, #724]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d5e:	2101      	movs	r1, #1
 8002d60:	438a      	bics	r2, r1
 8002d62:	621a      	str	r2, [r3, #32]
 8002d64:	4bb3      	ldr	r3, [pc, #716]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	4bb2      	ldr	r3, [pc, #712]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	621a      	str	r2, [r3, #32]
 8002d70:	e01c      	b.n	8002dac <HAL_RCC_OscConfig+0x398>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x380>
 8002d7a:	4bae      	ldr	r3, [pc, #696]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	4bad      	ldr	r3, [pc, #692]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d80:	2104      	movs	r1, #4
 8002d82:	430a      	orrs	r2, r1
 8002d84:	621a      	str	r2, [r3, #32]
 8002d86:	4bab      	ldr	r3, [pc, #684]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	4baa      	ldr	r3, [pc, #680]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	621a      	str	r2, [r3, #32]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0x398>
 8002d94:	4ba7      	ldr	r3, [pc, #668]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	4ba6      	ldr	r3, [pc, #664]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	621a      	str	r2, [r3, #32]
 8002da0:	4ba4      	ldr	r3, [pc, #656]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	4ba3      	ldr	r3, [pc, #652]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002da6:	2104      	movs	r1, #4
 8002da8:	438a      	bics	r2, r1
 8002daa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d014      	beq.n	8002dde <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7ff fa00 	bl	80021b8 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7ff f9fb 	bl	80021b8 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	4a9b      	ldr	r2, [pc, #620]	; (8003038 <HAL_RCC_OscConfig+0x624>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e12b      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	4b98      	ldr	r3, [pc, #608]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x3aa>
 8002ddc:	e013      	b.n	8002e06 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7ff f9eb 	bl	80021b8 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de6:	e009      	b.n	8002dfc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7ff f9e6 	bl	80021b8 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	4a91      	ldr	r2, [pc, #580]	; (8003038 <HAL_RCC_OscConfig+0x624>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e116      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	4b8d      	ldr	r3, [pc, #564]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	2202      	movs	r2, #2
 8002e02:	4013      	ands	r3, r2
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e06:	231f      	movs	r3, #31
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	4b87      	ldr	r3, [pc, #540]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e16:	4989      	ldr	r1, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002e18:	400a      	ands	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2210      	movs	r2, #16
 8002e22:	4013      	ands	r3, r2
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d12a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e2e:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e32:	4b80      	ldr	r3, [pc, #512]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e34:	2104      	movs	r1, #4
 8002e36:	430a      	orrs	r2, r1
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e3a:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3e:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e40:	2101      	movs	r1, #1
 8002e42:	430a      	orrs	r2, r1
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7ff f9b7 	bl	80021b8 <HAL_GetTick>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e50:	f7ff f9b2 	bl	80021b8 <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0e3      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e62:	4b74      	ldr	r3, [pc, #464]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	2202      	movs	r2, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d0f1      	beq.n	8002e50 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e6c:	4b71      	ldr	r3, [pc, #452]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	22f8      	movs	r2, #248	; 0xf8
 8002e72:	4393      	bics	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	00da      	lsls	r2, r3, #3
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
 8002e82:	e034      	b.n	8002eee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	3305      	adds	r3, #5
 8002e8a:	d111      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e8c:	4b69      	ldr	r3, [pc, #420]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e90:	4b68      	ldr	r3, [pc, #416]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e92:	2104      	movs	r1, #4
 8002e94:	438a      	bics	r2, r1
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e98:	4b66      	ldr	r3, [pc, #408]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	22f8      	movs	r2, #248	; 0xf8
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	00da      	lsls	r2, r3, #3
 8002ea8:	4b62      	ldr	r3, [pc, #392]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
 8002eae:	e01e      	b.n	8002eee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002eb0:	4b60      	ldr	r3, [pc, #384]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb4:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ebc:	4b5d      	ldr	r3, [pc, #372]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec0:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7ff f976 	bl	80021b8 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ed2:	f7ff f971 	bl	80021b8 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0a2      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ee4:	4b53      	ldr	r3, [pc, #332]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d1f1      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x4e4>
 8002ef6:	e097      	b.n	8003028 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	220c      	movs	r2, #12
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d100      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4f2>
 8002f04:	e06b      	b.n	8002fde <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d14c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b48      	ldr	r3, [pc, #288]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f14:	494a      	ldr	r1, [pc, #296]	; (8003040 <HAL_RCC_OscConfig+0x62c>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7ff f94d 	bl	80021b8 <HAL_GetTick>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7ff f948 	bl	80021b8 <HAL_GetTick>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e079      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f36:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	049b      	lsls	r3, r3, #18
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f42:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	220f      	movs	r2, #15
 8002f48:	4393      	bics	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f52:	430a      	orrs	r2, r1
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f56:	4b37      	ldr	r3, [pc, #220]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a3a      	ldr	r2, [pc, #232]	; (8003044 <HAL_RCC_OscConfig+0x630>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	4b32      	ldr	r3, [pc, #200]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f70:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	0449      	lsls	r1, r1, #17
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7ff f91b 	bl	80021b8 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7ff f916 	bl	80021b8 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e047      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	049b      	lsls	r3, r3, #18
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x574>
 8002fa6:	e03f      	b.n	8003028 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002fae:	4924      	ldr	r1, [pc, #144]	; (8003040 <HAL_RCC_OscConfig+0x62c>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7ff f900 	bl	80021b8 <HAL_GetTick>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7ff f8fb 	bl	80021b8 <HAL_GetTick>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e02c      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	049b      	lsls	r3, r3, #18
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x5aa>
 8002fdc:	e024      	b.n	8003028 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01f      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	025b      	lsls	r3, r3, #9
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	429a      	cmp	r2, r3
 8003004:	d10e      	bne.n	8003024 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	220f      	movs	r2, #15
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	23f0      	movs	r3, #240	; 0xf0
 8003018:	039b      	lsls	r3, r3, #14
 800301a:	401a      	ands	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b008      	add	sp, #32
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	40021000 	.word	0x40021000
 8003038:	00001388 	.word	0x00001388
 800303c:	efffffff 	.word	0xefffffff
 8003040:	feffffff 	.word	0xfeffffff
 8003044:	ffc2ffff 	.word	0xffc2ffff

08003048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b3      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	4013      	ands	r3, r2
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d911      	bls.n	800308e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	4393      	bics	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	4013      	ands	r3, r2
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e09a      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d015      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2204      	movs	r2, #4
 800309e:	4013      	ands	r3, r2
 80030a0:	d006      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030a2:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030a8:	21e0      	movs	r1, #224	; 0xe0
 80030aa:	00c9      	lsls	r1, r1, #3
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	22f0      	movs	r2, #240	; 0xf0
 80030b6:	4393      	bics	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d040      	beq.n	8003150 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	029b      	lsls	r3, r3, #10
 80030de:	4013      	ands	r3, r2
 80030e0:	d114      	bne.n	800310c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06e      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	049b      	lsls	r3, r3, #18
 80030f6:	4013      	ands	r3, r2
 80030f8:	d108      	bne.n	800310c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e062      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e05b      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	4393      	bics	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7ff f84a 	bl	80021b8 <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003128:	e009      	b.n	800313e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312a:	f7ff f845 	bl	80021b8 <HAL_GetTick>
 800312e:	0002      	movs	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_RCC_ClockConfig+0x18c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e042      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	220c      	movs	r2, #12
 8003144:	401a      	ands	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1ec      	bne.n	800312a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d211      	bcs.n	8003182 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2201      	movs	r2, #1
 8003164:	4393      	bics	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	4013      	ands	r3, r2
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d001      	beq.n	8003182 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e020      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2204      	movs	r2, #4
 8003188:	4013      	ands	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <HAL_RCC_ClockConfig+0x190>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031a0:	f000 f820 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 80031a4:	0001      	movs	r1, r0
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	220f      	movs	r2, #15
 80031ae:	4013      	ands	r3, r2
 80031b0:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_RCC_ClockConfig+0x194>)
 80031b2:	5cd3      	ldrb	r3, [r2, r3]
 80031b4:	000a      	movs	r2, r1
 80031b6:	40da      	lsrs	r2, r3
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x198>)
 80031ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fe ffb5 	bl	800212c <HAL_InitTick>
  
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	00001388 	.word	0x00001388
 80031d8:	fffff8ff 	.word	0xfffff8ff
 80031dc:	0800613c 	.word	0x0800613c
 80031e0:	200000d0 	.word	0x200000d0

080031e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	220c      	movs	r2, #12
 8003208:	4013      	ands	r3, r2
 800320a:	2b04      	cmp	r3, #4
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x30>
 800320e:	2b08      	cmp	r3, #8
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x36>
 8003212:	e02c      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003216:	613b      	str	r3, [r7, #16]
      break;
 8003218:	e02c      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	0c9b      	lsrs	r3, r3, #18
 800321e:	220f      	movs	r2, #15
 8003220:	4013      	ands	r3, r2
 8003222:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003228:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_RCC_GetSysClockFreq+0x9c>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	220f      	movs	r2, #15
 800322e:	4013      	ands	r3, r2
 8003230:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003232:	5cd3      	ldrb	r3, [r2, r3]
 8003234:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	025b      	lsls	r3, r3, #9
 800323c:	4013      	ands	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4810      	ldr	r0, [pc, #64]	; (8003284 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003244:	f7fc ff60 	bl	8000108 <__udivsi3>
 8003248:	0003      	movs	r3, r0
 800324a:	001a      	movs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4353      	muls	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e009      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	000a      	movs	r2, r1
 8003258:	0152      	lsls	r2, r2, #5
 800325a:	1a52      	subs	r2, r2, r1
 800325c:	0193      	lsls	r3, r2, #6
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	185b      	adds	r3, r3, r1
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	613b      	str	r3, [r7, #16]
      break;
 800326c:	e002      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_RCC_GetSysClockFreq+0xac>)
 8003270:	613b      	str	r3, [r7, #16]
      break;
 8003272:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003274:	693b      	ldr	r3, [r7, #16]
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b006      	add	sp, #24
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	40021000 	.word	0x40021000
 8003284:	00f42400 	.word	0x00f42400
 8003288:	08006154 	.word	0x08006154
 800328c:	08006164 	.word	0x08006164
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	200000d0 	.word	0x200000d0

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80032ac:	f7ff fff2 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b0:	0001      	movs	r1, r0
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	2207      	movs	r2, #7
 80032ba:	4013      	ands	r3, r2
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	40d9      	lsrs	r1, r3
 80032c2:	000b      	movs	r3, r1
}    
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	40021000 	.word	0x40021000
 80032d0:	0800614c 	.word	0x0800614c

080032d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	4013      	ands	r3, r2
 80032ee:	d100      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80032f0:	e08e      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80032f2:	2017      	movs	r0, #23
 80032f4:	183b      	adds	r3, r7, r0
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	055b      	lsls	r3, r3, #21
 8003302:	4013      	ands	r3, r2
 8003304:	d110      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b54      	ldr	r3, [pc, #336]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0549      	lsls	r1, r1, #21
 8003310:	430a      	orrs	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
 8003314:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	055b      	lsls	r3, r3, #21
 800331c:	4013      	ands	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003322:	183b      	adds	r3, r7, r0
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	4b4c      	ldr	r3, [pc, #304]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4013      	ands	r3, r2
 8003332:	d11a      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003334:	4b49      	ldr	r3, [pc, #292]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b48      	ldr	r3, [pc, #288]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	0049      	lsls	r1, r1, #1
 800333e:	430a      	orrs	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fe ff39 	bl	80021b8 <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	e008      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334c:	f7fe ff34 	bl	80021b8 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e077      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4013      	ands	r3, r2
 8003368:	d0f0      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800336a:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	23c0      	movs	r3, #192	; 0xc0
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d034      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	23c0      	movs	r3, #192	; 0xc0
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4013      	ands	r3, r2
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d02c      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4a33      	ldr	r2, [pc, #204]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	0249      	lsls	r1, r1, #9
 80033a0:	430a      	orrs	r2, r1
 80033a2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033aa:	492e      	ldr	r1, [pc, #184]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033b0:	4b29      	ldr	r3, [pc, #164]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe fefb 	bl	80021b8 <HAL_GetTick>
 80033c2:	0003      	movs	r3, r0
 80033c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	e009      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe fef6 	bl	80021b8 <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e038      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	2202      	movs	r2, #2
 80033e2:	4013      	ands	r3, r2
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033fa:	2317      	movs	r3, #23
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800340a:	4918      	ldr	r1, [pc, #96]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800340c:	400a      	ands	r2, r1
 800340e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2201      	movs	r2, #1
 8003416:	4013      	ands	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	2203      	movs	r2, #3
 8003420:	4393      	bics	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800342a:	430a      	orrs	r2, r1
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2220      	movs	r2, #32
 8003434:	4013      	ands	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	2210      	movs	r2, #16
 800343e:	4393      	bics	r3, r2
 8003440:	0019      	movs	r1, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003448:	430a      	orrs	r2, r1
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b006      	add	sp, #24
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
 8003460:	fffffcff 	.word	0xfffffcff
 8003464:	fffeffff 	.word	0xfffeffff
 8003468:	00001388 	.word	0x00001388
 800346c:	efffffff 	.word	0xefffffff

08003470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e042      	b.n	8003508 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	223d      	movs	r2, #61	; 0x3d
 8003486:	5c9b      	ldrb	r3, [r3, r2]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223c      	movs	r2, #60	; 0x3c
 8003492:	2100      	movs	r1, #0
 8003494:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f7fe fc35 	bl	8001d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	223d      	movs	r2, #61	; 0x3d
 80034a2:	2102      	movs	r1, #2
 80034a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	0019      	movs	r1, r3
 80034b0:	0010      	movs	r0, r2
 80034b2:	f000 f9dd 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2246      	movs	r2, #70	; 0x46
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	223e      	movs	r2, #62	; 0x3e
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223f      	movs	r2, #63	; 0x3f
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2240      	movs	r2, #64	; 0x40
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2241      	movs	r2, #65	; 0x41
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2242      	movs	r2, #66	; 0x42
 80034e2:	2101      	movs	r1, #1
 80034e4:	5499      	strb	r1, [r3, r2]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2243      	movs	r2, #67	; 0x43
 80034ea:	2101      	movs	r1, #1
 80034ec:	5499      	strb	r1, [r3, r2]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2244      	movs	r2, #68	; 0x44
 80034f2:	2101      	movs	r1, #1
 80034f4:	5499      	strb	r1, [r3, r2]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2245      	movs	r2, #69	; 0x45
 80034fa:	2101      	movs	r1, #1
 80034fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223d      	movs	r2, #61	; 0x3d
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	223d      	movs	r2, #61	; 0x3d
 800351c:	5c9b      	ldrb	r3, [r3, r2]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e035      	b.n	8003594 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	223d      	movs	r2, #61	; 0x3d
 800352c:	2102      	movs	r1, #2
 800352e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <HAL_TIM_Base_Start_IT+0x8c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x4e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <HAL_TIM_Base_Start_IT+0x90>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x4e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <HAL_TIM_Base_Start_IT+0x94>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d111      	bne.n	8003582 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2207      	movs	r2, #7
 8003566:	4013      	ands	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b06      	cmp	r3, #6
 800356e:	d010      	beq.n	8003592 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	430a      	orrs	r2, r1
 800357e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	e007      	b.n	8003592 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b004      	add	sp, #16
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40014000 	.word	0x40014000

080035a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	438a      	bics	r2, r1
 80035be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <HAL_TIM_Base_Stop_IT+0x54>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	d10d      	bne.n	80035e8 <HAL_TIM_Base_Stop_IT+0x40>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <HAL_TIM_Base_Stop_IT+0x58>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_Base_Stop_IT+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2101      	movs	r1, #1
 80035e4:	438a      	bics	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	223d      	movs	r2, #61	; 0x3d
 80035ec:	2101      	movs	r1, #1
 80035ee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b002      	add	sp, #8
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	00001111 	.word	0x00001111
 8003600:	00000444 	.word	0x00000444

08003604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2202      	movs	r2, #2
 8003614:	4013      	ands	r3, r2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d124      	bne.n	8003664 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	4013      	ands	r3, r2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d11d      	bne.n	8003664 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2203      	movs	r2, #3
 800362e:	4252      	negs	r2, r2
 8003630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2203      	movs	r2, #3
 8003640:	4013      	ands	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f000 f8fa 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 800364c:	e007      	b.n	800365e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 f8ed 	bl	8003830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 f8f9 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2204      	movs	r2, #4
 800366c:	4013      	ands	r3, r2
 800366e:	2b04      	cmp	r3, #4
 8003670:	d125      	bne.n	80036be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2204      	movs	r2, #4
 800367a:	4013      	ands	r3, r2
 800367c:	2b04      	cmp	r3, #4
 800367e:	d11e      	bne.n	80036be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2205      	movs	r2, #5
 8003686:	4252      	negs	r2, r2
 8003688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	23c0      	movs	r3, #192	; 0xc0
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4013      	ands	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 f8cd 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 80036a6:	e007      	b.n	80036b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f000 f8c0 	bl	8003830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 f8cc 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2208      	movs	r2, #8
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d124      	bne.n	8003716 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2208      	movs	r2, #8
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d11d      	bne.n	8003716 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2209      	movs	r2, #9
 80036e0:	4252      	negs	r2, r2
 80036e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2204      	movs	r2, #4
 80036e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2203      	movs	r2, #3
 80036f2:	4013      	ands	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f000 f8a1 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 80036fe:	e007      	b.n	8003710 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f894 	bl	8003830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	0018      	movs	r0, r3
 800370c:	f000 f8a0 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2210      	movs	r2, #16
 800371e:	4013      	ands	r3, r2
 8003720:	2b10      	cmp	r3, #16
 8003722:	d125      	bne.n	8003770 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2210      	movs	r2, #16
 800372c:	4013      	ands	r3, r2
 800372e:	2b10      	cmp	r3, #16
 8003730:	d11e      	bne.n	8003770 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2211      	movs	r2, #17
 8003738:	4252      	negs	r2, r2
 800373a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2208      	movs	r2, #8
 8003740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	23c0      	movs	r3, #192	; 0xc0
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4013      	ands	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	0018      	movs	r0, r3
 8003754:	f000 f874 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 8003758:	e007      	b.n	800376a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0018      	movs	r0, r3
 800375e:	f000 f867 	bl	8003830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 f873 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2201      	movs	r2, #1
 8003778:	4013      	ands	r3, r2
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10f      	bne.n	800379e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	4013      	ands	r3, r2
 8003788:	2b01      	cmp	r3, #1
 800378a:	d108      	bne.n	800379e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2202      	movs	r2, #2
 8003792:	4252      	negs	r2, r2
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f7fd fdc5 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2280      	movs	r2, #128	; 0x80
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d10f      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2280      	movs	r2, #128	; 0x80
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b80      	cmp	r3, #128	; 0x80
 80037b8:	d108      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2281      	movs	r2, #129	; 0x81
 80037c0:	4252      	negs	r2, r2
 80037c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 f8d0 	bl	800396c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d10f      	bne.n	80037fa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2240      	movs	r2, #64	; 0x40
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d108      	bne.n	80037fa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2241      	movs	r2, #65	; 0x41
 80037ee:	4252      	negs	r2, r2
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 f833 	bl	8003860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2220      	movs	r2, #32
 8003802:	4013      	ands	r3, r2
 8003804:	2b20      	cmp	r3, #32
 8003806:	d10f      	bne.n	8003828 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	4013      	ands	r3, r2
 8003812:	2b20      	cmp	r3, #32
 8003814:	d108      	bne.n	8003828 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2221      	movs	r2, #33	; 0x21
 800381c:	4252      	negs	r2, r2
 800381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f89a 	bl	800395c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b002      	add	sp, #8
 800386e:	bd80      	pop	{r7, pc}

08003870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a2f      	ldr	r2, [pc, #188]	; (8003940 <TIM_Base_SetConfig+0xd0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0x20>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <TIM_Base_SetConfig+0xd4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2270      	movs	r2, #112	; 0x70
 8003894:	4393      	bics	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <TIM_Base_SetConfig+0xd0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <TIM_Base_SetConfig+0x62>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a25      	ldr	r2, [pc, #148]	; (8003944 <TIM_Base_SetConfig+0xd4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00f      	beq.n	80038d2 <TIM_Base_SetConfig+0x62>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a24      	ldr	r2, [pc, #144]	; (8003948 <TIM_Base_SetConfig+0xd8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <TIM_Base_SetConfig+0x62>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <TIM_Base_SetConfig+0xdc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <TIM_Base_SetConfig+0x62>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <TIM_Base_SetConfig+0xe0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_Base_SetConfig+0x62>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <TIM_Base_SetConfig+0xe4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d108      	bne.n	80038e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a20      	ldr	r2, [pc, #128]	; (8003958 <TIM_Base_SetConfig+0xe8>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	4393      	bics	r3, r2
 80038ea:	001a      	movs	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <TIM_Base_SetConfig+0xd0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0xba>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <TIM_Base_SetConfig+0xdc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0xba>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <TIM_Base_SetConfig+0xe0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0xba>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a0b      	ldr	r2, [pc, #44]	; (8003954 <TIM_Base_SetConfig+0xe4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d103      	bne.n	8003932 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	615a      	str	r2, [r3, #20]
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40000400 	.word	0x40000400
 8003948:	40002000 	.word	0x40002000
 800394c:	40014000 	.word	0x40014000
 8003950:	40014400 	.word	0x40014400
 8003954:	40014800 	.word	0x40014800
 8003958:	fffffcff 	.word	0xfffffcff

0800395c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e044      	b.n	8003a18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d107      	bne.n	80039a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2278      	movs	r2, #120	; 0x78
 800399a:	2100      	movs	r1, #0
 800399c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7fe f9d9 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2224      	movs	r2, #36	; 0x24
 80039aa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2101      	movs	r1, #1
 80039b8:	438a      	bics	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 fc3a 	bl	8004238 <UART_SetConfig>
 80039c4:	0003      	movs	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e024      	b.n	8003a18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 fd6d 	bl	80044b8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	490d      	ldr	r1, [pc, #52]	; (8003a20 <HAL_UART_Init+0xa4>)
 80039ea:	400a      	ands	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2108      	movs	r1, #8
 80039fa:	438a      	bics	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 fe05 	bl	8004620 <UART_CheckIdleState>
 8003a16:	0003      	movs	r3, r0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	fffff7ff 	.word	0xfffff7ff

08003a24 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e030      	b.n	8003a98 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2224      	movs	r2, #36	; 0x24
 8003a3a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fe fa06 	bl	8001e78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2284      	movs	r2, #132	; 0x84
 8003a70:	2100      	movs	r1, #0
 8003a72:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2280      	movs	r2, #128	; 0x80
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2278      	movs	r2, #120	; 0x78
 8003a92:	2100      	movs	r1, #0
 8003a94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b002      	add	sp, #8
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	1dbb      	adds	r3, r7, #6
 8003aae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d000      	beq.n	8003aba <HAL_UART_Transmit+0x1a>
 8003ab8:	e08d      	b.n	8003bd6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_UART_Transmit+0x28>
 8003ac0:	1dbb      	adds	r3, r7, #6
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e085      	b.n	8003bd8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	015b      	lsls	r3, r3, #5
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d109      	bne.n	8003aec <HAL_UART_Transmit+0x4c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e075      	b.n	8003bd8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2284      	movs	r2, #132	; 0x84
 8003af0:	2100      	movs	r1, #0
 8003af2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2221      	movs	r2, #33	; 0x21
 8003af8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afa:	f7fe fb5d 	bl	80021b8 <HAL_GetTick>
 8003afe:	0003      	movs	r3, r0
 8003b00:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1dba      	adds	r2, r7, #6
 8003b06:	2150      	movs	r1, #80	; 0x50
 8003b08:	8812      	ldrh	r2, [r2, #0]
 8003b0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1dba      	adds	r2, r7, #6
 8003b10:	2152      	movs	r1, #82	; 0x52
 8003b12:	8812      	ldrh	r2, [r2, #0]
 8003b14:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	015b      	lsls	r3, r3, #5
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d108      	bne.n	8003b34 <HAL_UART_Transmit+0x94>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e003      	b.n	8003b3c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b3c:	e030      	b.n	8003ba0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	0013      	movs	r3, r2
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2180      	movs	r1, #128	; 0x80
 8003b4c:	f000 fe10 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8003b50:	1e03      	subs	r3, r0, #0
 8003b52:	d004      	beq.n	8003b5e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e03c      	b.n	8003bd8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	881a      	ldrh	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	05d2      	lsls	r2, r2, #23
 8003b6e:	0dd2      	lsrs	r2, r2, #23
 8003b70:	b292      	uxth	r2, r2
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3302      	adds	r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e008      	b.n	8003b8e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	b292      	uxth	r2, r2
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2252      	movs	r2, #82	; 0x52
 8003b92:	5a9b      	ldrh	r3, [r3, r2]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b299      	uxth	r1, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2252      	movs	r2, #82	; 0x52
 8003b9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2252      	movs	r2, #82	; 0x52
 8003ba4:	5a9b      	ldrh	r3, [r3, r2]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1c8      	bne.n	8003b3e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2140      	movs	r1, #64	; 0x40
 8003bba:	f000 fdd9 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e005      	b.n	8003bd8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b008      	add	sp, #32
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	1dbb      	adds	r3, r7, #6
 8003bec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2280      	movs	r2, #128	; 0x80
 8003bf2:	589b      	ldr	r3, [r3, r2]
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d145      	bne.n	8003c84 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_UART_Receive_IT+0x26>
 8003bfe:	1dbb      	adds	r3, r7, #6
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e03d      	b.n	8003c86 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	015b      	lsls	r3, r3, #5
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d109      	bne.n	8003c2a <HAL_UART_Receive_IT+0x4a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	d001      	beq.n	8003c2a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02d      	b.n	8003c86 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d019      	beq.n	8003c72 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	613b      	str	r3, [r7, #16]
  return(result);
 8003c44:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	04c9      	lsls	r1, r1, #19
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f383 8810 	msr	PRIMASK, r3
}
 8003c70:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c72:	1dbb      	adds	r3, r7, #6
 8003c74:	881a      	ldrh	r2, [r3, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 fde2 	bl	8004844 <UART_Start_Receive_IT>
 8003c80:	0003      	movs	r3, r0
 8003c82:	e000      	b.n	8003c86 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b008      	add	sp, #32
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b0ab      	sub	sp, #172	; 0xac
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	22a4      	movs	r2, #164	; 0xa4
 8003ca0:	18b9      	adds	r1, r7, r2
 8003ca2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	20a0      	movs	r0, #160	; 0xa0
 8003cac:	1839      	adds	r1, r7, r0
 8003cae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	219c      	movs	r1, #156	; 0x9c
 8003cb8:	1879      	adds	r1, r7, r1
 8003cba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cbc:	0011      	movs	r1, r2
 8003cbe:	18bb      	adds	r3, r7, r2
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a99      	ldr	r2, [pc, #612]	; (8003f28 <HAL_UART_IRQHandler+0x298>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2298      	movs	r2, #152	; 0x98
 8003cc8:	18bc      	adds	r4, r7, r2
 8003cca:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003ccc:	18bb      	adds	r3, r7, r2
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d114      	bne.n	8003cfe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cd4:	187b      	adds	r3, r7, r1
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d00f      	beq.n	8003cfe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d00a      	beq.n	8003cfe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d100      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x62>
 8003cf0:	e286      	b.n	8004200 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	0010      	movs	r0, r2
 8003cfa:	4798      	blx	r3
      }
      return;
 8003cfc:	e280      	b.n	8004200 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cfe:	2398      	movs	r3, #152	; 0x98
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d100      	bne.n	8003d0a <HAL_UART_IRQHandler+0x7a>
 8003d08:	e114      	b.n	8003f34 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d0a:	239c      	movs	r3, #156	; 0x9c
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	4013      	ands	r3, r2
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d16:	23a0      	movs	r3, #160	; 0xa0
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a83      	ldr	r2, [pc, #524]	; (8003f2c <HAL_UART_IRQHandler+0x29c>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d100      	bne.n	8003d24 <HAL_UART_IRQHandler+0x94>
 8003d22:	e107      	b.n	8003f34 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d24:	23a4      	movs	r3, #164	; 0xa4
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d012      	beq.n	8003d56 <HAL_UART_IRQHandler+0xc6>
 8003d30:	23a0      	movs	r3, #160	; 0xa0
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2201      	movs	r2, #1
 8003d44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2284      	movs	r2, #132	; 0x84
 8003d4a:	589b      	ldr	r3, [r3, r2]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2184      	movs	r1, #132	; 0x84
 8003d54:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d56:	23a4      	movs	r3, #164	; 0xa4
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d011      	beq.n	8003d86 <HAL_UART_IRQHandler+0xf6>
 8003d62:	239c      	movs	r3, #156	; 0x9c
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2202      	movs	r2, #2
 8003d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2284      	movs	r2, #132	; 0x84
 8003d7a:	589b      	ldr	r3, [r3, r2]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2184      	movs	r1, #132	; 0x84
 8003d84:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d86:	23a4      	movs	r3, #164	; 0xa4
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d011      	beq.n	8003db6 <HAL_UART_IRQHandler+0x126>
 8003d92:	239c      	movs	r3, #156	; 0x9c
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2204      	movs	r2, #4
 8003da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2284      	movs	r2, #132	; 0x84
 8003daa:	589b      	ldr	r3, [r3, r2]
 8003dac:	2202      	movs	r2, #2
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2184      	movs	r1, #132	; 0x84
 8003db4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003db6:	23a4      	movs	r3, #164	; 0xa4
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d017      	beq.n	8003df2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dc2:	23a0      	movs	r3, #160	; 0xa0
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d105      	bne.n	8003dda <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003dce:	239c      	movs	r3, #156	; 0x9c
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dd8:	d00b      	beq.n	8003df2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2208      	movs	r2, #8
 8003de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2284      	movs	r2, #132	; 0x84
 8003de6:	589b      	ldr	r3, [r3, r2]
 8003de8:	2208      	movs	r2, #8
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2184      	movs	r1, #132	; 0x84
 8003df0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003df2:	23a4      	movs	r3, #164	; 0xa4
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_UART_IRQHandler+0x198>
 8003e00:	23a0      	movs	r3, #160	; 0xa0
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	04db      	lsls	r3, r3, #19
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d00c      	beq.n	8003e28 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2284      	movs	r2, #132	; 0x84
 8003e1c:	589b      	ldr	r3, [r3, r2]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2184      	movs	r1, #132	; 0x84
 8003e26:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2284      	movs	r2, #132	; 0x84
 8003e2c:	589b      	ldr	r3, [r3, r2]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d100      	bne.n	8003e34 <HAL_UART_IRQHandler+0x1a4>
 8003e32:	e1e7      	b.n	8004204 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e34:	23a4      	movs	r3, #164	; 0xa4
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e40:	23a0      	movs	r3, #160	; 0xa0
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2220      	movs	r2, #32
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d008      	beq.n	8003e5e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	0010      	movs	r0, r2
 8003e5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2284      	movs	r2, #132	; 0x84
 8003e62:	589b      	ldr	r3, [r3, r2]
 8003e64:	2194      	movs	r1, #148	; 0x94
 8003e66:	187a      	adds	r2, r7, r1
 8003e68:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2240      	movs	r2, #64	; 0x40
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d004      	beq.n	8003e82 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2228      	movs	r2, #40	; 0x28
 8003e7e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e80:	d047      	beq.n	8003f12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f000 fd93 	bl	80049b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2240      	movs	r2, #64	; 0x40
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d137      	bne.n	8003f08 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e98:	f3ef 8310 	mrs	r3, PRIMASK
 8003e9c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea0:	2090      	movs	r0, #144	; 0x90
 8003ea2:	183a      	adds	r2, r7, r0
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2140      	movs	r1, #64	; 0x40
 8003ebe:	438a      	bics	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	183b      	adds	r3, r7, r0
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d012      	beq.n	8003efe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <HAL_UART_IRQHandler+0x2a0>)
 8003ede:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7fe fab9 	bl	800245c <HAL_DMA_Abort_IT>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d01a      	beq.n	8003f24 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef8:	0018      	movs	r0, r3
 8003efa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	e012      	b.n	8003f24 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fd fc83 	bl	800180c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f06:	e00d      	b.n	8003f24 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fd fc7e 	bl	800180c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	e008      	b.n	8003f24 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fd fc79 	bl	800180c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2284      	movs	r2, #132	; 0x84
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003f22:	e16f      	b.n	8004204 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	46c0      	nop			; (mov r8, r8)
    return;
 8003f26:	e16d      	b.n	8004204 <HAL_UART_IRQHandler+0x574>
 8003f28:	0000080f 	.word	0x0000080f
 8003f2c:	04000120 	.word	0x04000120
 8003f30:	08004a79 	.word	0x08004a79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d000      	beq.n	8003f3e <HAL_UART_IRQHandler+0x2ae>
 8003f3c:	e139      	b.n	80041b2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f3e:	23a4      	movs	r3, #164	; 0xa4
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2210      	movs	r2, #16
 8003f46:	4013      	ands	r3, r2
 8003f48:	d100      	bne.n	8003f4c <HAL_UART_IRQHandler+0x2bc>
 8003f4a:	e132      	b.n	80041b2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f4c:	23a0      	movs	r3, #160	; 0xa0
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2210      	movs	r2, #16
 8003f54:	4013      	ands	r3, r2
 8003f56:	d100      	bne.n	8003f5a <HAL_UART_IRQHandler+0x2ca>
 8003f58:	e12b      	b.n	80041b2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2210      	movs	r2, #16
 8003f60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2240      	movs	r2, #64	; 0x40
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d000      	beq.n	8003f72 <HAL_UART_IRQHandler+0x2e2>
 8003f70:	e09f      	b.n	80040b2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	217e      	movs	r1, #126	; 0x7e
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d100      	bne.n	8003f8a <HAL_UART_IRQHandler+0x2fa>
 8003f88:	e13e      	b.n	8004208 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2258      	movs	r2, #88	; 0x58
 8003f8e:	5a9b      	ldrh	r3, [r3, r2]
 8003f90:	187a      	adds	r2, r7, r1
 8003f92:	8812      	ldrh	r2, [r2, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d300      	bcc.n	8003f9a <HAL_UART_IRQHandler+0x30a>
 8003f98:	e136      	b.n	8004208 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	187a      	adds	r2, r7, r1
 8003f9e:	215a      	movs	r1, #90	; 0x5a
 8003fa0:	8812      	ldrh	r2, [r2, #0]
 8003fa2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d06f      	beq.n	800408e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fae:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fb8:	2301      	movs	r3, #1
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4992      	ldr	r1, [pc, #584]	; (8004218 <HAL_UART_IRQHandler+0x588>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	f383 8810 	msr	PRIMASK, r3
}
 8003fde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	677b      	str	r3, [r7, #116]	; 0x74
 8003fea:	2301      	movs	r3, #1
 8003fec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff0:	f383 8810 	msr	PRIMASK, r3
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	438a      	bics	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004008:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400c:	f383 8810 	msr	PRIMASK, r3
}
 8004010:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004012:	f3ef 8310 	mrs	r3, PRIMASK
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004018:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	673b      	str	r3, [r7, #112]	; 0x70
 800401c:	2301      	movs	r3, #1
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004022:	f383 8810 	msr	PRIMASK, r3
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2140      	movs	r1, #64	; 0x40
 8004034:	438a      	bics	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800403a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403e:	f383 8810 	msr	PRIMASK, r3
}
 8004042:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	2120      	movs	r1, #32
 800404a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004052:	f3ef 8310 	mrs	r3, PRIMASK
 8004056:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004058:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800405c:	2301      	movs	r3, #1
 800405e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2110      	movs	r1, #16
 8004074:	438a      	bics	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407e:	f383 8810 	msr	PRIMASK, r3
}
 8004082:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	0018      	movs	r0, r3
 800408a:	f7fe f9af 	bl	80023ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2258      	movs	r2, #88	; 0x58
 8004098:	5a9a      	ldrh	r2, [r3, r2]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	215a      	movs	r1, #90	; 0x5a
 800409e:	5a5b      	ldrh	r3, [r3, r1]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0011      	movs	r1, r2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f000 f8b8 	bl	8004220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040b0:	e0aa      	b.n	8004208 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2258      	movs	r2, #88	; 0x58
 80040b6:	5a99      	ldrh	r1, [r3, r2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	225a      	movs	r2, #90	; 0x5a
 80040bc:	5a9b      	ldrh	r3, [r3, r2]
 80040be:	b29a      	uxth	r2, r3
 80040c0:	208e      	movs	r0, #142	; 0x8e
 80040c2:	183b      	adds	r3, r7, r0
 80040c4:	1a8a      	subs	r2, r1, r2
 80040c6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	225a      	movs	r2, #90	; 0x5a
 80040cc:	5a9b      	ldrh	r3, [r3, r2]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d100      	bne.n	80040d6 <HAL_UART_IRQHandler+0x446>
 80040d4:	e09a      	b.n	800420c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80040d6:	183b      	adds	r3, r7, r0
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d100      	bne.n	80040e0 <HAL_UART_IRQHandler+0x450>
 80040de:	e095      	b.n	800420c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e0:	f3ef 8310 	mrs	r3, PRIMASK
 80040e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80040e6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e8:	2488      	movs	r4, #136	; 0x88
 80040ea:	193a      	adds	r2, r7, r4
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	2301      	movs	r3, #1
 80040f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f383 8810 	msr	PRIMASK, r3
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4945      	ldr	r1, [pc, #276]	; (800421c <HAL_UART_IRQHandler+0x58c>)
 8004106:	400a      	ands	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	193b      	adds	r3, r7, r4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f383 8810 	msr	PRIMASK, r3
}
 8004116:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004118:	f3ef 8310 	mrs	r3, PRIMASK
 800411c:	61bb      	str	r3, [r7, #24]
  return(result);
 800411e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	2484      	movs	r4, #132	; 0x84
 8004122:	193a      	adds	r2, r7, r4
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	2301      	movs	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f383 8810 	msr	PRIMASK, r3
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2101      	movs	r1, #1
 800413e:	438a      	bics	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	193b      	adds	r3, r7, r4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	f383 8810 	msr	PRIMASK, r3
}
 800414e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	2120      	movs	r1, #32
 8004156:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004164:	f3ef 8310 	mrs	r3, PRIMASK
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416c:	2480      	movs	r4, #128	; 0x80
 800416e:	193a      	adds	r2, r7, r4
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	2301      	movs	r3, #1
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2110      	movs	r1, #16
 800418a:	438a      	bics	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	193b      	adds	r3, r7, r4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041a2:	183b      	adds	r3, r7, r0
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	0011      	movs	r1, r2
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 f838 	bl	8004220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041b0:	e02c      	b.n	800420c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041b2:	23a4      	movs	r3, #164	; 0xa4
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	4013      	ands	r3, r2
 80041bc:	d00f      	beq.n	80041de <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041be:	23a0      	movs	r3, #160	; 0xa0
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	4013      	ands	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01e      	beq.n	8004210 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	0010      	movs	r0, r2
 80041da:	4798      	blx	r3
    }
    return;
 80041dc:	e018      	b.n	8004210 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041de:	23a4      	movs	r3, #164	; 0xa4
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2240      	movs	r2, #64	; 0x40
 80041e6:	4013      	ands	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_UART_IRQHandler+0x582>
 80041ea:	23a0      	movs	r3, #160	; 0xa0
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2240      	movs	r2, #64	; 0x40
 80041f2:	4013      	ands	r3, r2
 80041f4:	d00d      	beq.n	8004212 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	0018      	movs	r0, r3
 80041fa:	f000 fc54 	bl	8004aa6 <UART_EndTransmit_IT>
    return;
 80041fe:	e008      	b.n	8004212 <HAL_UART_IRQHandler+0x582>
      return;
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	e006      	b.n	8004212 <HAL_UART_IRQHandler+0x582>
    return;
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	e004      	b.n	8004212 <HAL_UART_IRQHandler+0x582>
      return;
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	e002      	b.n	8004212 <HAL_UART_IRQHandler+0x582>
      return;
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	e000      	b.n	8004212 <HAL_UART_IRQHandler+0x582>
    return;
 8004210:	46c0      	nop			; (mov r8, r8)
  }

}
 8004212:	46bd      	mov	sp, r7
 8004214:	b02b      	add	sp, #172	; 0xac
 8004216:	bd90      	pop	{r4, r7, pc}
 8004218:	fffffeff 	.word	0xfffffeff
 800421c:	fffffedf 	.word	0xfffffedf

08004220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	000a      	movs	r2, r1
 800422a:	1cbb      	adds	r3, r7, #2
 800422c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	b002      	add	sp, #8
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004240:	231e      	movs	r3, #30
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a8d      	ldr	r2, [pc, #564]	; (800449c <UART_SetConfig+0x264>)
 8004268:	4013      	ands	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a88      	ldr	r2, [pc, #544]	; (80044a0 <UART_SetConfig+0x268>)
 800427e:	4013      	ands	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a7f      	ldr	r2, [pc, #508]	; (80044a4 <UART_SetConfig+0x26c>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	0019      	movs	r1, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7b      	ldr	r2, [pc, #492]	; (80044a8 <UART_SetConfig+0x270>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d127      	bne.n	800430e <UART_SetConfig+0xd6>
 80042be:	4b7b      	ldr	r3, [pc, #492]	; (80044ac <UART_SetConfig+0x274>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	2203      	movs	r2, #3
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d00d      	beq.n	80042e6 <UART_SetConfig+0xae>
 80042ca:	d81b      	bhi.n	8004304 <UART_SetConfig+0xcc>
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d014      	beq.n	80042fa <UART_SetConfig+0xc2>
 80042d0:	d818      	bhi.n	8004304 <UART_SetConfig+0xcc>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <UART_SetConfig+0xa4>
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d00a      	beq.n	80042f0 <UART_SetConfig+0xb8>
 80042da:	e013      	b.n	8004304 <UART_SetConfig+0xcc>
 80042dc:	231f      	movs	r3, #31
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e021      	b.n	800432a <UART_SetConfig+0xf2>
 80042e6:	231f      	movs	r3, #31
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	2202      	movs	r2, #2
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e01c      	b.n	800432a <UART_SetConfig+0xf2>
 80042f0:	231f      	movs	r3, #31
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	2204      	movs	r2, #4
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e017      	b.n	800432a <UART_SetConfig+0xf2>
 80042fa:	231f      	movs	r3, #31
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2208      	movs	r2, #8
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e012      	b.n	800432a <UART_SetConfig+0xf2>
 8004304:	231f      	movs	r3, #31
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2210      	movs	r2, #16
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e00d      	b.n	800432a <UART_SetConfig+0xf2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a67      	ldr	r2, [pc, #412]	; (80044b0 <UART_SetConfig+0x278>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d104      	bne.n	8004322 <UART_SetConfig+0xea>
 8004318:	231f      	movs	r3, #31
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e003      	b.n	800432a <UART_SetConfig+0xf2>
 8004322:	231f      	movs	r3, #31
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2210      	movs	r2, #16
 8004328:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	429a      	cmp	r2, r3
 8004334:	d15c      	bne.n	80043f0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004336:	231f      	movs	r3, #31
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d015      	beq.n	800436c <UART_SetConfig+0x134>
 8004340:	dc18      	bgt.n	8004374 <UART_SetConfig+0x13c>
 8004342:	2b04      	cmp	r3, #4
 8004344:	d00d      	beq.n	8004362 <UART_SetConfig+0x12a>
 8004346:	dc15      	bgt.n	8004374 <UART_SetConfig+0x13c>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <UART_SetConfig+0x11a>
 800434c:	2b02      	cmp	r3, #2
 800434e:	d005      	beq.n	800435c <UART_SetConfig+0x124>
 8004350:	e010      	b.n	8004374 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004352:	f7fe ffa9 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004356:	0003      	movs	r3, r0
 8004358:	61bb      	str	r3, [r7, #24]
        break;
 800435a:	e012      	b.n	8004382 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800435c:	4b55      	ldr	r3, [pc, #340]	; (80044b4 <UART_SetConfig+0x27c>)
 800435e:	61bb      	str	r3, [r7, #24]
        break;
 8004360:	e00f      	b.n	8004382 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004362:	f7fe ff3f 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 8004366:	0003      	movs	r3, r0
 8004368:	61bb      	str	r3, [r7, #24]
        break;
 800436a:	e00a      	b.n	8004382 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	61bb      	str	r3, [r7, #24]
        break;
 8004372:	e006      	b.n	8004382 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004378:	231e      	movs	r3, #30
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
        break;
 8004380:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d100      	bne.n	800438a <UART_SetConfig+0x152>
 8004388:	e07a      	b.n	8004480 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	005a      	lsls	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	18d2      	adds	r2, r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	0019      	movs	r1, r3
 800439c:	0010      	movs	r0, r2
 800439e:	f7fb feb3 	bl	8000108 <__udivsi3>
 80043a2:	0003      	movs	r3, r0
 80043a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b0f      	cmp	r3, #15
 80043aa:	d91c      	bls.n	80043e6 <UART_SetConfig+0x1ae>
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	025b      	lsls	r3, r3, #9
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d217      	bcs.n	80043e6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	200e      	movs	r0, #14
 80043bc:	183b      	adds	r3, r7, r0
 80043be:	210f      	movs	r1, #15
 80043c0:	438a      	bics	r2, r1
 80043c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2207      	movs	r2, #7
 80043cc:	4013      	ands	r3, r2
 80043ce:	b299      	uxth	r1, r3
 80043d0:	183b      	adds	r3, r7, r0
 80043d2:	183a      	adds	r2, r7, r0
 80043d4:	8812      	ldrh	r2, [r2, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	183a      	adds	r2, r7, r0
 80043e0:	8812      	ldrh	r2, [r2, #0]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	e04c      	b.n	8004480 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80043e6:	231e      	movs	r3, #30
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e047      	b.n	8004480 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043f0:	231f      	movs	r3, #31
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d015      	beq.n	8004426 <UART_SetConfig+0x1ee>
 80043fa:	dc18      	bgt.n	800442e <UART_SetConfig+0x1f6>
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d00d      	beq.n	800441c <UART_SetConfig+0x1e4>
 8004400:	dc15      	bgt.n	800442e <UART_SetConfig+0x1f6>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <UART_SetConfig+0x1d4>
 8004406:	2b02      	cmp	r3, #2
 8004408:	d005      	beq.n	8004416 <UART_SetConfig+0x1de>
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7fe ff4c 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004410:	0003      	movs	r3, r0
 8004412:	61bb      	str	r3, [r7, #24]
        break;
 8004414:	e012      	b.n	800443c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <UART_SetConfig+0x27c>)
 8004418:	61bb      	str	r3, [r7, #24]
        break;
 800441a:	e00f      	b.n	800443c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441c:	f7fe fee2 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 8004420:	0003      	movs	r3, r0
 8004422:	61bb      	str	r3, [r7, #24]
        break;
 8004424:	e00a      	b.n	800443c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	61bb      	str	r3, [r7, #24]
        break;
 800442c:	e006      	b.n	800443c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004432:	231e      	movs	r3, #30
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
        break;
 800443a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01e      	beq.n	8004480 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	085a      	lsrs	r2, r3, #1
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	18d2      	adds	r2, r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0019      	movs	r1, r3
 8004452:	0010      	movs	r0, r2
 8004454:	f7fb fe58 	bl	8000108 <__udivsi3>
 8004458:	0003      	movs	r3, r0
 800445a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0f      	cmp	r3, #15
 8004460:	d90a      	bls.n	8004478 <UART_SetConfig+0x240>
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	025b      	lsls	r3, r3, #9
 8004468:	429a      	cmp	r2, r3
 800446a:	d205      	bcs.n	8004478 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	e003      	b.n	8004480 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004478:	231e      	movs	r3, #30
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800448c:	231e      	movs	r3, #30
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	781b      	ldrb	r3, [r3, #0]
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b008      	add	sp, #32
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	ffff69f3 	.word	0xffff69f3
 80044a0:	ffffcfff 	.word	0xffffcfff
 80044a4:	fffff4ff 	.word	0xfffff4ff
 80044a8:	40013800 	.word	0x40013800
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40004400 	.word	0x40004400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2201      	movs	r2, #1
 80044c6:	4013      	ands	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <UART_AdvFeatureConfig+0x144>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2202      	movs	r2, #2
 80044e8:	4013      	ands	r3, r2
 80044ea:	d00b      	beq.n	8004504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4a43      	ldr	r2, [pc, #268]	; (8004600 <UART_AdvFeatureConfig+0x148>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2204      	movs	r2, #4
 800450a:	4013      	ands	r3, r2
 800450c:	d00b      	beq.n	8004526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a3b      	ldr	r2, [pc, #236]	; (8004604 <UART_AdvFeatureConfig+0x14c>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2208      	movs	r2, #8
 800452c:	4013      	ands	r3, r2
 800452e:	d00b      	beq.n	8004548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4a34      	ldr	r2, [pc, #208]	; (8004608 <UART_AdvFeatureConfig+0x150>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	2210      	movs	r2, #16
 800454e:	4013      	ands	r3, r2
 8004550:	d00b      	beq.n	800456a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a2c      	ldr	r2, [pc, #176]	; (800460c <UART_AdvFeatureConfig+0x154>)
 800455a:	4013      	ands	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2220      	movs	r2, #32
 8004570:	4013      	ands	r3, r2
 8004572:	d00b      	beq.n	800458c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4a25      	ldr	r2, [pc, #148]	; (8004610 <UART_AdvFeatureConfig+0x158>)
 800457c:	4013      	ands	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2240      	movs	r2, #64	; 0x40
 8004592:	4013      	ands	r3, r2
 8004594:	d01d      	beq.n	80045d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <UART_AdvFeatureConfig+0x15c>)
 800459e:	4013      	ands	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	035b      	lsls	r3, r3, #13
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d10b      	bne.n	80045d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <UART_AdvFeatureConfig+0x160>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	0019      	movs	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	4013      	ands	r3, r2
 80045da:	d00b      	beq.n	80045f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4a0e      	ldr	r2, [pc, #56]	; (800461c <UART_AdvFeatureConfig+0x164>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	fffdffff 	.word	0xfffdffff
 8004600:	fffeffff 	.word	0xfffeffff
 8004604:	fffbffff 	.word	0xfffbffff
 8004608:	ffff7fff 	.word	0xffff7fff
 800460c:	ffffefff 	.word	0xffffefff
 8004610:	ffffdfff 	.word	0xffffdfff
 8004614:	ffefffff 	.word	0xffefffff
 8004618:	ff9fffff 	.word	0xff9fffff
 800461c:	fff7ffff 	.word	0xfff7ffff

08004620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b092      	sub	sp, #72	; 0x48
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2284      	movs	r2, #132	; 0x84
 800462c:	2100      	movs	r1, #0
 800462e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004630:	f7fd fdc2 	bl	80021b8 <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2208      	movs	r2, #8
 8004640:	4013      	ands	r3, r2
 8004642:	2b08      	cmp	r3, #8
 8004644:	d12c      	bne.n	80046a0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004648:	2280      	movs	r2, #128	; 0x80
 800464a:	0391      	lsls	r1, r2, #14
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4a46      	ldr	r2, [pc, #280]	; (8004768 <UART_CheckIdleState+0x148>)
 8004650:	9200      	str	r2, [sp, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	f000 f88c 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8004658:	1e03      	subs	r3, r0, #0
 800465a:	d021      	beq.n	80046a0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465c:	f3ef 8310 	mrs	r3, PRIMASK
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004664:	63bb      	str	r3, [r7, #56]	; 0x38
 8004666:	2301      	movs	r3, #1
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	438a      	bics	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	f383 8810 	msr	PRIMASK, r3
}
 800468c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2278      	movs	r2, #120	; 0x78
 8004698:	2100      	movs	r1, #0
 800469a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e05f      	b.n	8004760 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2204      	movs	r2, #4
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d146      	bne.n	800473c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	03d1      	lsls	r1, r2, #15
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <UART_CheckIdleState+0x148>)
 80046b8:	9200      	str	r2, [sp, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f000 f858 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d03b      	beq.n	800473c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
 80046ce:	2301      	movs	r3, #1
 80046d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4921      	ldr	r1, [pc, #132]	; (800476c <UART_CheckIdleState+0x14c>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f6:	f3ef 8310 	mrs	r3, PRIMASK
 80046fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80046fc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004700:	2301      	movs	r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f383 8810 	msr	PRIMASK, r3
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2101      	movs	r1, #1
 8004718:	438a      	bics	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	f383 8810 	msr	PRIMASK, r3
}
 8004726:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2280      	movs	r2, #128	; 0x80
 800472c:	2120      	movs	r1, #32
 800472e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2278      	movs	r2, #120	; 0x78
 8004734:	2100      	movs	r1, #0
 8004736:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e011      	b.n	8004760 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2280      	movs	r2, #128	; 0x80
 8004746:	2120      	movs	r1, #32
 8004748:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2278      	movs	r2, #120	; 0x78
 800475a:	2100      	movs	r1, #0
 800475c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	b010      	add	sp, #64	; 0x40
 8004766:	bd80      	pop	{r7, pc}
 8004768:	01ffffff 	.word	0x01ffffff
 800476c:	fffffedf 	.word	0xfffffedf

08004770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	1dfb      	adds	r3, r7, #7
 800477e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004780:	e04b      	b.n	800481a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	3301      	adds	r3, #1
 8004786:	d048      	beq.n	800481a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004788:	f7fd fd16 	bl	80021b8 <HAL_GetTick>
 800478c:	0002      	movs	r2, r0
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d302      	bcc.n	800479e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e04b      	b.n	800483a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2204      	movs	r2, #4
 80047aa:	4013      	ands	r3, r2
 80047ac:	d035      	beq.n	800481a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	2208      	movs	r2, #8
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d111      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2208      	movs	r2, #8
 80047c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 f8f2 	bl	80049b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2284      	movs	r2, #132	; 0x84
 80047d0:	2108      	movs	r1, #8
 80047d2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2278      	movs	r2, #120	; 0x78
 80047d8:	2100      	movs	r1, #0
 80047da:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e02c      	b.n	800483a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	401a      	ands	r2, r3
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d112      	bne.n	800481a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	0112      	lsls	r2, r2, #4
 80047fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	0018      	movs	r0, r3
 8004802:	f000 f8d5 	bl	80049b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2284      	movs	r2, #132	; 0x84
 800480a:	2120      	movs	r1, #32
 800480c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2278      	movs	r2, #120	; 0x78
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e00f      	b.n	800483a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	425a      	negs	r2, r3
 800482a:	4153      	adcs	r3, r2
 800482c:	b2db      	uxtb	r3, r3
 800482e:	001a      	movs	r2, r3
 8004830:	1dfb      	adds	r3, r7, #7
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d0a4      	beq.n	8004782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b004      	add	sp, #16
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b090      	sub	sp, #64	; 0x40
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	1dbb      	adds	r3, r7, #6
 8004850:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1dba      	adds	r2, r7, #6
 800485c:	2158      	movs	r1, #88	; 0x58
 800485e:	8812      	ldrh	r2, [r2, #0]
 8004860:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1dba      	adds	r2, r7, #6
 8004866:	215a      	movs	r1, #90	; 0x5a
 8004868:	8812      	ldrh	r2, [r2, #0]
 800486a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	015b      	lsls	r3, r3, #5
 800487a:	429a      	cmp	r2, r3
 800487c:	d10d      	bne.n	800489a <UART_Start_Receive_IT+0x56>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <UART_Start_Receive_IT+0x4c>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	225c      	movs	r2, #92	; 0x5c
 800488a:	4946      	ldr	r1, [pc, #280]	; (80049a4 <UART_Start_Receive_IT+0x160>)
 800488c:	5299      	strh	r1, [r3, r2]
 800488e:	e01a      	b.n	80048c6 <UART_Start_Receive_IT+0x82>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	225c      	movs	r2, #92	; 0x5c
 8004894:	21ff      	movs	r1, #255	; 0xff
 8004896:	5299      	strh	r1, [r3, r2]
 8004898:	e015      	b.n	80048c6 <UART_Start_Receive_IT+0x82>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10d      	bne.n	80048be <UART_Start_Receive_IT+0x7a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <UART_Start_Receive_IT+0x70>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	225c      	movs	r2, #92	; 0x5c
 80048ae:	21ff      	movs	r1, #255	; 0xff
 80048b0:	5299      	strh	r1, [r3, r2]
 80048b2:	e008      	b.n	80048c6 <UART_Start_Receive_IT+0x82>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	225c      	movs	r2, #92	; 0x5c
 80048b8:	217f      	movs	r1, #127	; 0x7f
 80048ba:	5299      	strh	r1, [r3, r2]
 80048bc:	e003      	b.n	80048c6 <UART_Start_Receive_IT+0x82>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	225c      	movs	r2, #92	; 0x5c
 80048c2:	2100      	movs	r1, #0
 80048c4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2284      	movs	r2, #132	; 0x84
 80048ca:	2100      	movs	r1, #0
 80048cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2280      	movs	r2, #128	; 0x80
 80048d2:	2122      	movs	r1, #34	; 0x22
 80048d4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d6:	f3ef 8310 	mrs	r3, PRIMASK
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e0:	2301      	movs	r3, #1
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2101      	movs	r1, #1
 80048f8:	430a      	orrs	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	f383 8810 	msr	PRIMASK, r3
}
 8004906:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	015b      	lsls	r3, r3, #5
 8004910:	429a      	cmp	r2, r3
 8004912:	d107      	bne.n	8004924 <UART_Start_Receive_IT+0xe0>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <UART_Start_Receive_IT+0x164>)
 8004920:	669a      	str	r2, [r3, #104]	; 0x68
 8004922:	e002      	b.n	800492a <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a21      	ldr	r2, [pc, #132]	; (80049ac <UART_Start_Receive_IT+0x168>)
 8004928:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d019      	beq.n	8004966 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004932:	f3ef 8310 	mrs	r3, PRIMASK
 8004936:	61fb      	str	r3, [r7, #28]
  return(result);
 8004938:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
 800493c:	2301      	movs	r3, #1
 800493e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f383 8810 	msr	PRIMASK, r3
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2190      	movs	r1, #144	; 0x90
 8004954:	0049      	lsls	r1, r1, #1
 8004956:	430a      	orrs	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	e018      	b.n	8004998 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004966:	f3ef 8310 	mrs	r3, PRIMASK
 800496a:	613b      	str	r3, [r7, #16]
  return(result);
 800496c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800496e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f383 8810 	msr	PRIMASK, r3
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2120      	movs	r1, #32
 8004988:	430a      	orrs	r2, r1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b010      	add	sp, #64	; 0x40
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	000001ff 	.word	0x000001ff
 80049a8:	08004cb5 	.word	0x08004cb5
 80049ac:	08004afd 	.word	0x08004afd

080049b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08e      	sub	sp, #56	; 0x38
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b8:	f3ef 8310 	mrs	r3, PRIMASK
 80049bc:	617b      	str	r3, [r7, #20]
  return(result);
 80049be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
 80049c2:	2301      	movs	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f383 8810 	msr	PRIMASK, r3
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4926      	ldr	r1, [pc, #152]	; (8004a74 <UART_EndRxTransfer+0xc4>)
 80049da:	400a      	ands	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f383 8810 	msr	PRIMASK, r3
}
 80049e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ea:	f3ef 8310 	mrs	r3, PRIMASK
 80049ee:	623b      	str	r3, [r7, #32]
  return(result);
 80049f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30
 80049f4:	2301      	movs	r3, #1
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d118      	bne.n	8004a56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a24:	f3ef 8310 	mrs	r3, PRIMASK
 8004a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2e:	2301      	movs	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2110      	movs	r1, #16
 8004a46:	438a      	bics	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b00e      	add	sp, #56	; 0x38
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	fffffedf 	.word	0xfffffedf

08004a78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	225a      	movs	r2, #90	; 0x5a
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2252      	movs	r2, #82	; 0x52
 8004a92:	2100      	movs	r1, #0
 8004a94:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7fc feb7 	bl	800180c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b004      	add	sp, #16
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b086      	sub	sp, #24
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aae:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2140      	movs	r1, #64	; 0x40
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	0018      	movs	r0, r3
 8004af0:	f7fc fd18 	bl	8001524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b006      	add	sp, #24
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b094      	sub	sp, #80	; 0x50
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b04:	204e      	movs	r0, #78	; 0x4e
 8004b06:	183b      	adds	r3, r7, r0
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	215c      	movs	r1, #92	; 0x5c
 8004b0c:	5a52      	ldrh	r2, [r2, r1]
 8004b0e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	589b      	ldr	r3, [r3, r2]
 8004b16:	2b22      	cmp	r3, #34	; 0x22
 8004b18:	d000      	beq.n	8004b1c <UART_RxISR_8BIT+0x20>
 8004b1a:	e0ba      	b.n	8004c92 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	214c      	movs	r1, #76	; 0x4c
 8004b22:	187b      	adds	r3, r7, r1
 8004b24:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004b26:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b28:	187b      	adds	r3, r7, r1
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	183b      	adds	r3, r7, r0
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b2d9      	uxtb	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b38:	400a      	ands	r2, r1
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	225a      	movs	r2, #90	; 0x5a
 8004b4c:	5a9b      	ldrh	r3, [r3, r2]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b299      	uxth	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	225a      	movs	r2, #90	; 0x5a
 8004b58:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	225a      	movs	r2, #90	; 0x5a
 8004b5e:	5a9b      	ldrh	r3, [r3, r2]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d000      	beq.n	8004b68 <UART_RxISR_8BIT+0x6c>
 8004b66:	e09c      	b.n	8004ca2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b68:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b72:	2301      	movs	r3, #1
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	f383 8810 	msr	PRIMASK, r3
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4948      	ldr	r1, [pc, #288]	; (8004cac <UART_RxISR_8BIT+0x1b0>)
 8004b8a:	400a      	ands	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	f383 8810 	msr	PRIMASK, r3
}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2101      	movs	r1, #1
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	f383 8810 	msr	PRIMASK, r3
}
 8004bca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	4013      	ands	r3, r2
 8004bec:	d018      	beq.n	8004c20 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bf4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4928      	ldr	r1, [pc, #160]	; (8004cb0 <UART_RxISR_8BIT+0x1b4>)
 8004c10:	400a      	ands	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	f383 8810 	msr	PRIMASK, r3
}
 8004c1e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d12f      	bne.n	8004c88 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c32:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c34:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c38:	2301      	movs	r3, #1
 8004c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f383 8810 	msr	PRIMASK, r3
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2110      	movs	r1, #16
 8004c50:	438a      	bics	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	2210      	movs	r2, #16
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d103      	bne.n	8004c76 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2210      	movs	r2, #16
 8004c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2258      	movs	r2, #88	; 0x58
 8004c7a:	5a9a      	ldrh	r2, [r3, r2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	0011      	movs	r1, r2
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7ff facd 	bl	8004220 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c86:	e00c      	b.n	8004ca2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f7fc fcca 	bl	8001624 <HAL_UART_RxCpltCallback>
}
 8004c90:	e007      	b.n	8004ca2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699a      	ldr	r2, [r3, #24]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2108      	movs	r1, #8
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b014      	add	sp, #80	; 0x50
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	fffffedf 	.word	0xfffffedf
 8004cb0:	fbffffff 	.word	0xfbffffff

08004cb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b094      	sub	sp, #80	; 0x50
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004cbc:	204e      	movs	r0, #78	; 0x4e
 8004cbe:	183b      	adds	r3, r7, r0
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	215c      	movs	r1, #92	; 0x5c
 8004cc4:	5a52      	ldrh	r2, [r2, r1]
 8004cc6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2280      	movs	r2, #128	; 0x80
 8004ccc:	589b      	ldr	r3, [r3, r2]
 8004cce:	2b22      	cmp	r3, #34	; 0x22
 8004cd0:	d000      	beq.n	8004cd4 <UART_RxISR_16BIT+0x20>
 8004cd2:	e0ba      	b.n	8004e4a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	214c      	movs	r1, #76	; 0x4c
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004cde:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ce6:	187b      	adds	r3, r7, r1
 8004ce8:	183a      	adds	r2, r7, r0
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	8812      	ldrh	r2, [r2, #0]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	1c9a      	adds	r2, r3, #2
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	225a      	movs	r2, #90	; 0x5a
 8004d04:	5a9b      	ldrh	r3, [r3, r2]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b299      	uxth	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	225a      	movs	r2, #90	; 0x5a
 8004d10:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	225a      	movs	r2, #90	; 0x5a
 8004d16:	5a9b      	ldrh	r3, [r3, r2]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d000      	beq.n	8004d20 <UART_RxISR_16BIT+0x6c>
 8004d1e:	e09c      	b.n	8004e5a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d20:	f3ef 8310 	mrs	r3, PRIMASK
 8004d24:	623b      	str	r3, [r7, #32]
  return(result);
 8004d26:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d28:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	f383 8810 	msr	PRIMASK, r3
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4948      	ldr	r1, [pc, #288]	; (8004e64 <UART_RxISR_16BIT+0x1b0>)
 8004d42:	400a      	ands	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	f383 8810 	msr	PRIMASK, r3
}
 8004d50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d52:	f3ef 8310 	mrs	r3, PRIMASK
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f383 8810 	msr	PRIMASK, r3
}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2101      	movs	r1, #1
 8004d74:	438a      	bics	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	f383 8810 	msr	PRIMASK, r3
}
 8004d82:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2280      	movs	r2, #128	; 0x80
 8004d88:	2120      	movs	r1, #32
 8004d8a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	4013      	ands	r3, r2
 8004da4:	d018      	beq.n	8004dd8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da6:	f3ef 8310 	mrs	r3, PRIMASK
 8004daa:	617b      	str	r3, [r7, #20]
  return(result);
 8004dac:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db0:	2301      	movs	r3, #1
 8004db2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4928      	ldr	r1, [pc, #160]	; (8004e68 <UART_RxISR_16BIT+0x1b4>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f383 8810 	msr	PRIMASK, r3
}
 8004dd6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d12f      	bne.n	8004e40 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dec:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df0:	2301      	movs	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f383 8810 	msr	PRIMASK, r3
}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2110      	movs	r1, #16
 8004e08:	438a      	bics	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f383 8810 	msr	PRIMASK, r3
}
 8004e16:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	2210      	movs	r2, #16
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d103      	bne.n	8004e2e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2258      	movs	r2, #88	; 0x58
 8004e32:	5a9a      	ldrh	r2, [r3, r2]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	0011      	movs	r1, r2
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7ff f9f1 	bl	8004220 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e3e:	e00c      	b.n	8004e5a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7fc fbee 	bl	8001624 <HAL_UART_RxCpltCallback>
}
 8004e48:	e007      	b.n	8004e5a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2108      	movs	r1, #8
 8004e56:	430a      	orrs	r2, r1
 8004e58:	619a      	str	r2, [r3, #24]
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b014      	add	sp, #80	; 0x50
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	fffffedf 	.word	0xfffffedf
 8004e68:	fbffffff 	.word	0xfbffffff

08004e6c <kfifo_reset>:
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	609a      	str	r2, [r3, #8]
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b002      	add	sp, #8
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
	return fifo->size;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
}
 8004e96:	0018      	movs	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b002      	add	sp, #8
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 8004e9e:	b590      	push	{r4, r7, lr}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	1b1b      	subs	r3, r3, r4
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b003      	add	sp, #12
 8004eb6:	bd90      	pop	{r4, r7, pc}

08004eb8 <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7ff ffe1 	bl	8004e8a <kfifo_size>
 8004ec8:	0004      	movs	r4, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7ff ffe6 	bl	8004e9e <kfifo_len>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	1ae3      	subs	r3, r4, r3
}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b003      	add	sp, #12
 8004edc:	bd90      	pop	{r4, r7, pc}

08004ede <__kfifo_add_out>:
/*
 * __kfifo_add_out internal helper function for updating the out offset
 */
static __inline void __kfifo_add_out(struct kfifo *fifo,
				unsigned int off)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
	fifo->out += off;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	18d2      	adds	r2, r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}

08004efc <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	18d2      	adds	r2, r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]
}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b002      	add	sp, #8
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	4013      	ands	r3, r2
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b002      	add	sp, #8
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7ff ff8b 	bl	8004e6c <kfifo_reset>
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	18d2      	adds	r2, r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	0011      	movs	r1, r2
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f7ff ffce 	bl	8004f1a <__kfifo_off>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	1ad2      	subs	r2, r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d900      	bls.n	8004f92 <__kfifo_in_data+0x34>
 8004f90:	0013      	movs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	18d3      	adds	r3, r2, r3
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f000 fa83 	bl	80054ac <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	18d1      	adds	r1, r2, r3
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	f000 fa78 	bl	80054ac <memcpy>
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b006      	add	sp, #24
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <__kfifo_out_data>:

static __inline void __kfifo_out_data(struct kfifo *fifo,
		void *to, unsigned int len, unsigned int off)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->in index -before- we
	 * start removing bytes from the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->out + off);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	18d2      	adds	r2, r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	0011      	movs	r1, r2
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff ff9b 	bl	8004f1a <__kfifo_off>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	603b      	str	r3, [r7, #0]

	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - off);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d900      	bls.n	8004ff8 <__kfifo_out_data+0x34>
 8004ff6:	0013      	movs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
	memcpy( (char*)to, fifo->buffer + off, l);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	18d1      	adds	r1, r2, r3
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	0018      	movs	r0, r3
 8005008:	f000 fa50 	bl	80054ac <memcpy>

	/* then get the rest (if any) from the beginning of the buffer */
	memcpy( (char*)to + l, fifo->buffer, len - l);
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	18d0      	adds	r0, r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6819      	ldr	r1, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	001a      	movs	r2, r3
 800501e:	f000 fa45 	bl	80054ac <memcpy>
}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	46bd      	mov	sp, r7
 8005026:	b006      	add	sp, #24
 8005028:	bd80      	pop	{r7, pc}

0800502a <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	0018      	movs	r0, r3
 800503a:	f7ff ff3d 	bl	8004eb8 <kfifo_avail>
 800503e:	0002      	movs	r2, r0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4293      	cmp	r3, r2
 8005044:	d905      	bls.n	8005052 <kfifo_in+0x28>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	0018      	movs	r0, r3
 800504a:	f7ff ff35 	bl	8004eb8 <kfifo_avail>
 800504e:	0003      	movs	r3, r0
 8005050:	e000      	b.n	8005054 <kfifo_in+0x2a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	2300      	movs	r3, #0
 800505e:	f7ff ff7e 	bl	8004f5e <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	0011      	movs	r1, r2
 8005068:	0018      	movs	r0, r3
 800506a:	f7ff ff47 	bl	8004efc <__kfifo_add_in>
	return len;
 800506e:	687b      	ldr	r3, [r7, #4]
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	b004      	add	sp, #16
 8005076:	bd80      	pop	{r7, pc}

08005078 <kfifo_out>:
 *
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
	len = min(kfifo_len(fifo), len);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	0018      	movs	r0, r3
 8005088:	f7ff ff09 	bl	8004e9e <kfifo_len>
 800508c:	0002      	movs	r2, r0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4293      	cmp	r3, r2
 8005092:	d905      	bls.n	80050a0 <kfifo_out+0x28>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	0018      	movs	r0, r3
 8005098:	f7ff ff01 	bl	8004e9e <kfifo_len>
 800509c:	0003      	movs	r3, r0
 800509e:	e000      	b.n	80050a2 <kfifo_out+0x2a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	607b      	str	r3, [r7, #4]

	__kfifo_out_data(fifo, to, len, 0);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	2300      	movs	r3, #0
 80050ac:	f7ff ff8a 	bl	8004fc4 <__kfifo_out_data>
	__kfifo_add_out(fifo, len);
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	0011      	movs	r1, r2
 80050b6:	0018      	movs	r0, r3
 80050b8:	f7ff ff11 	bl	8004ede <__kfifo_add_out>

	return len;
 80050bc:	687b      	ldr	r3, [r7, #4]
}
 80050be:	0018      	movs	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b004      	add	sp, #16
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <mq_init>:
 * 
 * @param None
 * @return struct msgQueue   
 */
void mq_init(struct msgQueue *queue)
{
 80050c6:	b590      	push	{r4, r7, lr}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
    struct msgQueue *mq = (struct msgQueue *)malloc(sizeof(struct msgQueue));
 80050ce:	2090      	movs	r0, #144	; 0x90
 80050d0:	f000 f9e2 	bl	8005498 <malloc>
 80050d4:	0003      	movs	r3, r0
 80050d6:	60bb      	str	r3, [r7, #8]
    if (mq == NULL)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <mq_init+0x1c>
    {
    	queue = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	607b      	str	r3, [r7, #4]
    }
    mq->lock = 0;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
    mq->size = MSGQUEUESIZE;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2210      	movs	r2, #16
 80050ec:	605a      	str	r2, [r3, #4]
    mq->head = 0;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	609a      	str	r2, [r3, #8]
    mq->tail = 0;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 80050fa:	230f      	movs	r3, #15
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e010      	b.n	8005126 <mq_init+0x60>
    {
        memset(&(mq->list[i]), 0, sizeof(struct msgQueue));
 8005104:	240f      	movs	r4, #15
 8005106:	193b      	adds	r3, r7, r4
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	3302      	adds	r3, #2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	18d3      	adds	r3, r2, r3
 8005112:	2290      	movs	r2, #144	; 0x90
 8005114:	2100      	movs	r1, #0
 8005116:	0018      	movs	r0, r3
 8005118:	f000 f9d1 	bl	80054be <memset>
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 800511c:	193b      	adds	r3, r7, r4
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	193b      	adds	r3, r7, r4
 8005122:	3201      	adds	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	230f      	movs	r3, #15
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b0f      	cmp	r3, #15
 800512e:	d9e9      	bls.n	8005104 <mq_init+0x3e>
    }
}
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b005      	add	sp, #20
 8005138:	bd90      	pop	{r4, r7, pc}

0800513a <mq_push>:
 * @param queue 
 * @param msg 
 * @return uint32_t 
 */
uint32_t mq_push(struct msgQueue *queue, struct msg *msg)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
    if (queue == NULL || msg == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <mq_push+0x16>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <mq_push+0x1a>
    {
        return 0;
 8005150:	2300      	movs	r3, #0
 8005152:	e02d      	b.n	80051b0 <mq_push+0x76>
    }
    if ((queue->head - queue->tail) == MSGQUEUESIZE - 1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d105      	bne.n	800516e <mq_push+0x34>
    {
        queue->head -= MSGQUEUESIZE - 1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	3b0f      	subs	r3, #15
 8005168:	001a      	movs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	609a      	str	r2, [r3, #8]
    }

    uint8_t index = queue->head & (MSGQUEUESIZE - 1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	200f      	movs	r0, #15
 8005176:	183b      	adds	r3, r7, r0
 8005178:	210f      	movs	r1, #15
 800517a:	400a      	ands	r2, r1
 800517c:	701a      	strb	r2, [r3, #0]
    queue->list[index].type = msg->type;
 800517e:	183b      	adds	r3, r7, r0
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3202      	adds	r2, #2
 800518a:	00d2      	lsls	r2, r2, #3
 800518c:	50d1      	str	r1, [r2, r3]
    queue->list[index].data = msg->data;
 800518e:	183b      	adds	r3, r7, r0
 8005190:	7818      	ldrb	r0, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	1c83      	adds	r3, r0, #2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	18cb      	adds	r3, r1, r3
 800519e:	3304      	adds	r3, #4
 80051a0:	601a      	str	r2, [r3, #0]
    queue->head++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	609a      	str	r2, [r3, #8]

    return queue->head;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b004      	add	sp, #16
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <mq_pop>:
 * 
 * @param queue 
 * @return struct msg* 
 */
struct msg *mq_pop(struct msgQueue *queue)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <mq_pop+0x12>
    {
        return NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e021      	b.n	800520e <mq_pop+0x56>
    }

    if (queue->head == queue->tail)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d101      	bne.n	80051da <mq_pop+0x22>
    {
        return NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e019      	b.n	800520e <mq_pop+0x56>
    }

    if (queue->tail == MSGQUEUESIZE - 1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d102      	bne.n	80051e8 <mq_pop+0x30>
    {
        queue->tail = 0;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	60da      	str	r2, [r3, #12]
    }
    
    uint8_t index = queue->tail & (MSGQUEUESIZE - 1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	200f      	movs	r0, #15
 80051f0:	183b      	adds	r3, r7, r0
 80051f2:	210f      	movs	r1, #15
 80051f4:	400a      	ands	r2, r1
 80051f6:	701a      	strb	r2, [r3, #0]
    queue->tail++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60da      	str	r2, [r3, #12]
    return &(queue->list[index]);
 8005202:	183b      	adds	r3, r7, r0
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	3302      	adds	r3, #2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	18d3      	adds	r3, r2, r3
}
 800520e:	0018      	movs	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	b004      	add	sp, #16
 8005214:	bd80      	pop	{r7, pc}

08005216 <stateM_init>:
static struct transition *getTransition( struct stateMachine *stateMachine,
      struct state *state, struct event *const event );

void stateM_init( struct stateMachine *fsm,
      struct state *initialState, struct state *errorState )
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
   if ( !fsm )
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <stateM_init+0x26>
      return;

   fsm->currentState = initialState;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	601a      	str	r2, [r3, #0]
   fsm->previousState = NULL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	605a      	str	r2, [r3, #4]
   fsm->errorState = errorState;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	609a      	str	r2, [r3, #8]
 800523a:	e000      	b.n	800523e <stateM_init+0x28>
      return;
 800523c:	46c0      	nop			; (mov r8, r8)
}
 800523e:	46bd      	mov	sp, r7
 8005240:	b004      	add	sp, #16
 8005242:	bd80      	pop	{r7, pc}

08005244 <stateM_handleEvent>:

int stateM_handleEvent( struct stateMachine *fsm,
      struct event *event )
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
   if ( !fsm || !event )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <stateM_handleEvent+0x16>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <stateM_handleEvent+0x1c>
      return stateM_errArg;
 800525a:	2302      	movs	r3, #2
 800525c:	425b      	negs	r3, r3
 800525e:	e093      	b.n	8005388 <stateM_handleEvent+0x144>

   if ( !fsm->currentState )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d108      	bne.n	800527a <stateM_handleEvent+0x36>
   {
      goToErrorState( fsm, event );
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	0011      	movs	r1, r2
 800526e:	0018      	movs	r0, r3
 8005270:	f000 f88e 	bl	8005390 <goToErrorState>
      return stateM_errorStateReached;
 8005274:	2301      	movs	r3, #1
 8005276:	425b      	negs	r3, r3
 8005278:	e086      	b.n	8005388 <stateM_handleEvent+0x144>
   }

   if ( !fsm->currentState->numTransitions )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <stateM_handleEvent+0x44>
      return stateM_noStateChange;
 8005284:	2302      	movs	r3, #2
 8005286:	e07f      	b.n	8005388 <stateM_handleEvent+0x144>

   struct state *nextState = fsm->currentState;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60fb      	str	r3, [r7, #12]
   do {
      struct transition *transition = getTransition( fsm, nextState, event );
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 f89e 	bl	80053d6 <getTransition>
 800529a:	0003      	movs	r3, r0
 800529c:	60bb      	str	r3, [r7, #8]

      /* If there were no transitions for the given event for the current
       * state, check if there are any transitions for any of the parent
       * states (if any): */
      if ( !transition )
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <stateM_handleEvent+0x6e>
      {
         nextState = nextState->parentState;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
       * machine has stopped: */
      if ( !fsm->currentState->numTransitions )
         return stateM_finalStateReached;

      return stateM_stateChanged;
   } while ( nextState );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ee      	bne.n	800528e <stateM_handleEvent+0x4a>
 80052b0:	e069      	b.n	8005386 <stateM_handleEvent+0x142>
      if ( !transition->nextState )
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <stateM_handleEvent+0x88>
         goToErrorState( fsm, event );
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 f865 	bl	8005390 <goToErrorState>
         return stateM_errorStateReached;
 80052c6:	2301      	movs	r3, #1
 80052c8:	425b      	negs	r3, r3
 80052ca:	e05d      	b.n	8005388 <stateM_handleEvent+0x144>
      nextState = transition->nextState;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 80052d2:	e002      	b.n	80052da <stateM_handleEvent+0x96>
         nextState = nextState->entryState;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f8      	bne.n	80052d4 <stateM_handleEvent+0x90>
      if ( nextState != fsm->currentState && fsm->currentState->exitAction )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d00d      	beq.n	8005308 <stateM_handleEvent+0xc4>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <stateM_handleEvent+0xc4>
         fsm->currentState->exitAction( fsm->currentState->data, event );
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	0018      	movs	r0, r3
 8005306:	4790      	blx	r2
      if ( transition->action )
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <stateM_handleEvent+0xe0>
         transition->action( fsm->currentState->data, event, nextState->
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68dc      	ldr	r4, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6918      	ldr	r0, [r3, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	0019      	movs	r1, r3
 8005322:	47a0      	blx	r4
      if ( nextState != fsm->currentState && nextState->entryAction )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	429a      	cmp	r2, r3
 800532c:	d00a      	beq.n	8005344 <stateM_handleEvent+0x100>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d006      	beq.n	8005344 <stateM_handleEvent+0x100>
         nextState->entryAction( nextState->data, event );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	0018      	movs	r0, r3
 8005342:	4790      	blx	r2
      fsm->previousState = fsm->currentState;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	605a      	str	r2, [r3, #4]
      fsm->currentState = nextState;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]
      if ( fsm->currentState == fsm->previousState )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d101      	bne.n	8005362 <stateM_handleEvent+0x11e>
         return stateM_stateLoopSelf;
 800535e:	2301      	movs	r3, #1
 8005360:	e012      	b.n	8005388 <stateM_handleEvent+0x144>
      if ( fsm->currentState == fsm->errorState )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d102      	bne.n	8005374 <stateM_handleEvent+0x130>
         return stateM_errorStateReached;
 800536e:	2301      	movs	r3, #1
 8005370:	425b      	negs	r3, r3
 8005372:	e009      	b.n	8005388 <stateM_handleEvent+0x144>
      if ( !fsm->currentState->numTransitions )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <stateM_handleEvent+0x13e>
         return stateM_finalStateReached;
 800537e:	2303      	movs	r3, #3
 8005380:	e002      	b.n	8005388 <stateM_handleEvent+0x144>
      return stateM_stateChanged;
 8005382:	2300      	movs	r3, #0
 8005384:	e000      	b.n	8005388 <stateM_handleEvent+0x144>

   return stateM_noStateChange;
 8005386:	2302      	movs	r3, #2
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b005      	add	sp, #20
 800538e:	bd90      	pop	{r4, r7, pc}

08005390 <goToErrorState>:
}


static void goToErrorState( struct stateMachine *fsm,
      struct event *const event )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
   fsm->previousState = fsm->currentState;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	605a      	str	r2, [r3, #4]
   fsm->currentState = fsm->errorState;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]

   if ( fsm->currentState && fsm->currentState->entryAction )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <goToErrorState+0x3e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <goToErrorState+0x3e>
      fsm->currentState->entryAction( fsm->currentState->data, event );
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	0018      	movs	r0, r3
 80053cc:	4790      	blx	r2
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b002      	add	sp, #8
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <getTransition>:

static struct transition *getTransition( struct stateMachine *fsm,
      struct state *state, struct event *const event )
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b086      	sub	sp, #24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
   size_t i;

   for ( i = 0; i < state->numTransitions; ++i )
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e022      	b.n	800542e <getTransition+0x58>
   {
      struct transition *t = &state->transitions[ i ];
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6899      	ldr	r1, [r3, #8]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	0013      	movs	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	18cb      	adds	r3, r1, r3
 80053f8:	613b      	str	r3, [r7, #16]

      /* A transition for the given event has been found: */
      if ( t->eventType == event->type )
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d110      	bne.n	8005428 <getTransition+0x52>
      {
         if ( !t->guard )
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <getTransition+0x3c>
            return t;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	e013      	b.n	800543a <getTransition+0x64>
         /* If transition is guarded, ensure that the condition is held: */
         else if ( t->guard( t->condition, event ) )
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	0018      	movs	r0, r3
 800541e:	4790      	blx	r2
 8005420:	1e03      	subs	r3, r0, #0
 8005422:	d001      	beq.n	8005428 <getTransition+0x52>
            return t;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	e008      	b.n	800543a <getTransition+0x64>
   for ( i = 0; i < state->numTransitions; ++i )
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3301      	adds	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	429a      	cmp	r2, r3
 8005436:	d3d7      	bcc.n	80053e8 <getTransition+0x12>
      }
   }

   /* No transitions found for given event for given state: */
   return NULL;
 8005438:	2300      	movs	r3, #0
}
 800543a:	0018      	movs	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	b006      	add	sp, #24
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <__errno>:
 8005444:	4b01      	ldr	r3, [pc, #4]	; (800544c <__errno+0x8>)
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	4770      	bx	lr
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	200000dc 	.word	0x200000dc

08005450 <__libc_init_array>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	2600      	movs	r6, #0
 8005454:	4d0c      	ldr	r5, [pc, #48]	; (8005488 <__libc_init_array+0x38>)
 8005456:	4c0d      	ldr	r4, [pc, #52]	; (800548c <__libc_init_array+0x3c>)
 8005458:	1b64      	subs	r4, r4, r5
 800545a:	10a4      	asrs	r4, r4, #2
 800545c:	42a6      	cmp	r6, r4
 800545e:	d109      	bne.n	8005474 <__libc_init_array+0x24>
 8005460:	2600      	movs	r6, #0
 8005462:	f000 fd7f 	bl	8005f64 <_init>
 8005466:	4d0a      	ldr	r5, [pc, #40]	; (8005490 <__libc_init_array+0x40>)
 8005468:	4c0a      	ldr	r4, [pc, #40]	; (8005494 <__libc_init_array+0x44>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	42a6      	cmp	r6, r4
 8005470:	d105      	bne.n	800547e <__libc_init_array+0x2e>
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	00b3      	lsls	r3, r6, #2
 8005476:	58eb      	ldr	r3, [r5, r3]
 8005478:	4798      	blx	r3
 800547a:	3601      	adds	r6, #1
 800547c:	e7ee      	b.n	800545c <__libc_init_array+0xc>
 800547e:	00b3      	lsls	r3, r6, #2
 8005480:	58eb      	ldr	r3, [r5, r3]
 8005482:	4798      	blx	r3
 8005484:	3601      	adds	r6, #1
 8005486:	e7f2      	b.n	800546e <__libc_init_array+0x1e>
 8005488:	080061d8 	.word	0x080061d8
 800548c:	080061d8 	.word	0x080061d8
 8005490:	080061d8 	.word	0x080061d8
 8005494:	080061dc 	.word	0x080061dc

08005498 <malloc>:
 8005498:	b510      	push	{r4, lr}
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <malloc+0x10>)
 800549c:	0001      	movs	r1, r0
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	f000 f882 	bl	80055a8 <_malloc_r>
 80054a4:	bd10      	pop	{r4, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	200000dc 	.word	0x200000dc

080054ac <memcpy>:
 80054ac:	2300      	movs	r3, #0
 80054ae:	b510      	push	{r4, lr}
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d100      	bne.n	80054b6 <memcpy+0xa>
 80054b4:	bd10      	pop	{r4, pc}
 80054b6:	5ccc      	ldrb	r4, [r1, r3]
 80054b8:	54c4      	strb	r4, [r0, r3]
 80054ba:	3301      	adds	r3, #1
 80054bc:	e7f8      	b.n	80054b0 <memcpy+0x4>

080054be <memset>:
 80054be:	0003      	movs	r3, r0
 80054c0:	1882      	adds	r2, r0, r2
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d100      	bne.n	80054c8 <memset+0xa>
 80054c6:	4770      	bx	lr
 80054c8:	7019      	strb	r1, [r3, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	e7f9      	b.n	80054c2 <memset+0x4>
	...

080054d0 <_free_r>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	0005      	movs	r5, r0
 80054d4:	2900      	cmp	r1, #0
 80054d6:	d010      	beq.n	80054fa <_free_r+0x2a>
 80054d8:	1f0c      	subs	r4, r1, #4
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	da00      	bge.n	80054e2 <_free_r+0x12>
 80054e0:	18e4      	adds	r4, r4, r3
 80054e2:	0028      	movs	r0, r5
 80054e4:	f000 fc70 	bl	8005dc8 <__malloc_lock>
 80054e8:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <_free_r+0x90>)
 80054ea:	6813      	ldr	r3, [r2, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <_free_r+0x2c>
 80054f0:	6063      	str	r3, [r4, #4]
 80054f2:	6014      	str	r4, [r2, #0]
 80054f4:	0028      	movs	r0, r5
 80054f6:	f000 fc6f 	bl	8005dd8 <__malloc_unlock>
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	d908      	bls.n	8005512 <_free_r+0x42>
 8005500:	6821      	ldr	r1, [r4, #0]
 8005502:	1860      	adds	r0, r4, r1
 8005504:	4283      	cmp	r3, r0
 8005506:	d1f3      	bne.n	80054f0 <_free_r+0x20>
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	1841      	adds	r1, r0, r1
 800550e:	6021      	str	r1, [r4, #0]
 8005510:	e7ee      	b.n	80054f0 <_free_r+0x20>
 8005512:	001a      	movs	r2, r3
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <_free_r+0x4e>
 800551a:	42a3      	cmp	r3, r4
 800551c:	d9f9      	bls.n	8005512 <_free_r+0x42>
 800551e:	6811      	ldr	r1, [r2, #0]
 8005520:	1850      	adds	r0, r2, r1
 8005522:	42a0      	cmp	r0, r4
 8005524:	d10b      	bne.n	800553e <_free_r+0x6e>
 8005526:	6820      	ldr	r0, [r4, #0]
 8005528:	1809      	adds	r1, r1, r0
 800552a:	1850      	adds	r0, r2, r1
 800552c:	6011      	str	r1, [r2, #0]
 800552e:	4283      	cmp	r3, r0
 8005530:	d1e0      	bne.n	80054f4 <_free_r+0x24>
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	1841      	adds	r1, r0, r1
 8005538:	6011      	str	r1, [r2, #0]
 800553a:	6053      	str	r3, [r2, #4]
 800553c:	e7da      	b.n	80054f4 <_free_r+0x24>
 800553e:	42a0      	cmp	r0, r4
 8005540:	d902      	bls.n	8005548 <_free_r+0x78>
 8005542:	230c      	movs	r3, #12
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	e7d5      	b.n	80054f4 <_free_r+0x24>
 8005548:	6821      	ldr	r1, [r4, #0]
 800554a:	1860      	adds	r0, r4, r1
 800554c:	4283      	cmp	r3, r0
 800554e:	d103      	bne.n	8005558 <_free_r+0x88>
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	1841      	adds	r1, r0, r1
 8005556:	6021      	str	r1, [r4, #0]
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	6054      	str	r4, [r2, #4]
 800555c:	e7ca      	b.n	80054f4 <_free_r+0x24>
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	20000618 	.word	0x20000618

08005564 <sbrk_aligned>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	4e0f      	ldr	r6, [pc, #60]	; (80055a4 <sbrk_aligned+0x40>)
 8005568:	000d      	movs	r5, r1
 800556a:	6831      	ldr	r1, [r6, #0]
 800556c:	0004      	movs	r4, r0
 800556e:	2900      	cmp	r1, #0
 8005570:	d102      	bne.n	8005578 <sbrk_aligned+0x14>
 8005572:	f000 f90b 	bl	800578c <_sbrk_r>
 8005576:	6030      	str	r0, [r6, #0]
 8005578:	0029      	movs	r1, r5
 800557a:	0020      	movs	r0, r4
 800557c:	f000 f906 	bl	800578c <_sbrk_r>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d00a      	beq.n	800559a <sbrk_aligned+0x36>
 8005584:	2303      	movs	r3, #3
 8005586:	1cc5      	adds	r5, r0, #3
 8005588:	439d      	bics	r5, r3
 800558a:	42a8      	cmp	r0, r5
 800558c:	d007      	beq.n	800559e <sbrk_aligned+0x3a>
 800558e:	1a29      	subs	r1, r5, r0
 8005590:	0020      	movs	r0, r4
 8005592:	f000 f8fb 	bl	800578c <_sbrk_r>
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	d101      	bne.n	800559e <sbrk_aligned+0x3a>
 800559a:	2501      	movs	r5, #1
 800559c:	426d      	negs	r5, r5
 800559e:	0028      	movs	r0, r5
 80055a0:	bd70      	pop	{r4, r5, r6, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	2000061c 	.word	0x2000061c

080055a8 <_malloc_r>:
 80055a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055aa:	2203      	movs	r2, #3
 80055ac:	1ccb      	adds	r3, r1, #3
 80055ae:	4393      	bics	r3, r2
 80055b0:	3308      	adds	r3, #8
 80055b2:	0006      	movs	r6, r0
 80055b4:	001f      	movs	r7, r3
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d232      	bcs.n	8005620 <_malloc_r+0x78>
 80055ba:	270c      	movs	r7, #12
 80055bc:	42b9      	cmp	r1, r7
 80055be:	d831      	bhi.n	8005624 <_malloc_r+0x7c>
 80055c0:	0030      	movs	r0, r6
 80055c2:	f000 fc01 	bl	8005dc8 <__malloc_lock>
 80055c6:	4d32      	ldr	r5, [pc, #200]	; (8005690 <_malloc_r+0xe8>)
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	001c      	movs	r4, r3
 80055cc:	2c00      	cmp	r4, #0
 80055ce:	d12e      	bne.n	800562e <_malloc_r+0x86>
 80055d0:	0039      	movs	r1, r7
 80055d2:	0030      	movs	r0, r6
 80055d4:	f7ff ffc6 	bl	8005564 <sbrk_aligned>
 80055d8:	0004      	movs	r4, r0
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	d11e      	bne.n	800561c <_malloc_r+0x74>
 80055de:	682c      	ldr	r4, [r5, #0]
 80055e0:	0025      	movs	r5, r4
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	d14a      	bne.n	800567c <_malloc_r+0xd4>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	0029      	movs	r1, r5
 80055ea:	18e3      	adds	r3, r4, r3
 80055ec:	0030      	movs	r0, r6
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f000 f8cc 	bl	800578c <_sbrk_r>
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	4283      	cmp	r3, r0
 80055f8:	d143      	bne.n	8005682 <_malloc_r+0xda>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	3703      	adds	r7, #3
 80055fe:	1aff      	subs	r7, r7, r3
 8005600:	2303      	movs	r3, #3
 8005602:	439f      	bics	r7, r3
 8005604:	3708      	adds	r7, #8
 8005606:	2f0c      	cmp	r7, #12
 8005608:	d200      	bcs.n	800560c <_malloc_r+0x64>
 800560a:	270c      	movs	r7, #12
 800560c:	0039      	movs	r1, r7
 800560e:	0030      	movs	r0, r6
 8005610:	f7ff ffa8 	bl	8005564 <sbrk_aligned>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d034      	beq.n	8005682 <_malloc_r+0xda>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	19df      	adds	r7, r3, r7
 800561c:	6027      	str	r7, [r4, #0]
 800561e:	e013      	b.n	8005648 <_malloc_r+0xa0>
 8005620:	2b00      	cmp	r3, #0
 8005622:	dacb      	bge.n	80055bc <_malloc_r+0x14>
 8005624:	230c      	movs	r3, #12
 8005626:	2500      	movs	r5, #0
 8005628:	6033      	str	r3, [r6, #0]
 800562a:	0028      	movs	r0, r5
 800562c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	1bd1      	subs	r1, r2, r7
 8005632:	d420      	bmi.n	8005676 <_malloc_r+0xce>
 8005634:	290b      	cmp	r1, #11
 8005636:	d917      	bls.n	8005668 <_malloc_r+0xc0>
 8005638:	19e2      	adds	r2, r4, r7
 800563a:	6027      	str	r7, [r4, #0]
 800563c:	42a3      	cmp	r3, r4
 800563e:	d111      	bne.n	8005664 <_malloc_r+0xbc>
 8005640:	602a      	str	r2, [r5, #0]
 8005642:	6863      	ldr	r3, [r4, #4]
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	6053      	str	r3, [r2, #4]
 8005648:	0030      	movs	r0, r6
 800564a:	0025      	movs	r5, r4
 800564c:	f000 fbc4 	bl	8005dd8 <__malloc_unlock>
 8005650:	2207      	movs	r2, #7
 8005652:	350b      	adds	r5, #11
 8005654:	1d23      	adds	r3, r4, #4
 8005656:	4395      	bics	r5, r2
 8005658:	1aea      	subs	r2, r5, r3
 800565a:	429d      	cmp	r5, r3
 800565c:	d0e5      	beq.n	800562a <_malloc_r+0x82>
 800565e:	1b5b      	subs	r3, r3, r5
 8005660:	50a3      	str	r3, [r4, r2]
 8005662:	e7e2      	b.n	800562a <_malloc_r+0x82>
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	e7ec      	b.n	8005642 <_malloc_r+0x9a>
 8005668:	6862      	ldr	r2, [r4, #4]
 800566a:	42a3      	cmp	r3, r4
 800566c:	d101      	bne.n	8005672 <_malloc_r+0xca>
 800566e:	602a      	str	r2, [r5, #0]
 8005670:	e7ea      	b.n	8005648 <_malloc_r+0xa0>
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	e7e8      	b.n	8005648 <_malloc_r+0xa0>
 8005676:	0023      	movs	r3, r4
 8005678:	6864      	ldr	r4, [r4, #4]
 800567a:	e7a7      	b.n	80055cc <_malloc_r+0x24>
 800567c:	002c      	movs	r4, r5
 800567e:	686d      	ldr	r5, [r5, #4]
 8005680:	e7af      	b.n	80055e2 <_malloc_r+0x3a>
 8005682:	230c      	movs	r3, #12
 8005684:	0030      	movs	r0, r6
 8005686:	6033      	str	r3, [r6, #0]
 8005688:	f000 fba6 	bl	8005dd8 <__malloc_unlock>
 800568c:	e7cd      	b.n	800562a <_malloc_r+0x82>
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	20000618 	.word	0x20000618

08005694 <_puts_r>:
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	0005      	movs	r5, r0
 8005698:	000e      	movs	r6, r1
 800569a:	2800      	cmp	r0, #0
 800569c:	d004      	beq.n	80056a8 <_puts_r+0x14>
 800569e:	6983      	ldr	r3, [r0, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <_puts_r+0x14>
 80056a4:	f000 fa80 	bl	8005ba8 <__sinit>
 80056a8:	69ab      	ldr	r3, [r5, #24]
 80056aa:	68ac      	ldr	r4, [r5, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <_puts_r+0x22>
 80056b0:	0028      	movs	r0, r5
 80056b2:	f000 fa79 	bl	8005ba8 <__sinit>
 80056b6:	4b2d      	ldr	r3, [pc, #180]	; (800576c <_puts_r+0xd8>)
 80056b8:	429c      	cmp	r4, r3
 80056ba:	d122      	bne.n	8005702 <_puts_r+0x6e>
 80056bc:	686c      	ldr	r4, [r5, #4]
 80056be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c0:	07db      	lsls	r3, r3, #31
 80056c2:	d405      	bmi.n	80056d0 <_puts_r+0x3c>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	059b      	lsls	r3, r3, #22
 80056c8:	d402      	bmi.n	80056d0 <_puts_r+0x3c>
 80056ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056cc:	f000 fb0d 	bl	8005cea <__retarget_lock_acquire_recursive>
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	071b      	lsls	r3, r3, #28
 80056d4:	d502      	bpl.n	80056dc <_puts_r+0x48>
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d129      	bne.n	8005730 <_puts_r+0x9c>
 80056dc:	0021      	movs	r1, r4
 80056de:	0028      	movs	r0, r5
 80056e0:	f000 f8bc 	bl	800585c <__swsetup_r>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d023      	beq.n	8005730 <_puts_r+0x9c>
 80056e8:	2501      	movs	r5, #1
 80056ea:	426d      	negs	r5, r5
 80056ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056ee:	07db      	lsls	r3, r3, #31
 80056f0:	d405      	bmi.n	80056fe <_puts_r+0x6a>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	059b      	lsls	r3, r3, #22
 80056f6:	d402      	bmi.n	80056fe <_puts_r+0x6a>
 80056f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056fa:	f000 faf7 	bl	8005cec <__retarget_lock_release_recursive>
 80056fe:	0028      	movs	r0, r5
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <_puts_r+0xdc>)
 8005704:	429c      	cmp	r4, r3
 8005706:	d101      	bne.n	800570c <_puts_r+0x78>
 8005708:	68ac      	ldr	r4, [r5, #8]
 800570a:	e7d8      	b.n	80056be <_puts_r+0x2a>
 800570c:	4b19      	ldr	r3, [pc, #100]	; (8005774 <_puts_r+0xe0>)
 800570e:	429c      	cmp	r4, r3
 8005710:	d1d5      	bne.n	80056be <_puts_r+0x2a>
 8005712:	68ec      	ldr	r4, [r5, #12]
 8005714:	e7d3      	b.n	80056be <_puts_r+0x2a>
 8005716:	3601      	adds	r6, #1
 8005718:	60a3      	str	r3, [r4, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	da04      	bge.n	8005728 <_puts_r+0x94>
 800571e:	69a2      	ldr	r2, [r4, #24]
 8005720:	429a      	cmp	r2, r3
 8005722:	dc16      	bgt.n	8005752 <_puts_r+0xbe>
 8005724:	290a      	cmp	r1, #10
 8005726:	d014      	beq.n	8005752 <_puts_r+0xbe>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	6022      	str	r2, [r4, #0]
 800572e:	7019      	strb	r1, [r3, #0]
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	7831      	ldrb	r1, [r6, #0]
 8005734:	3b01      	subs	r3, #1
 8005736:	2900      	cmp	r1, #0
 8005738:	d1ed      	bne.n	8005716 <_puts_r+0x82>
 800573a:	60a3      	str	r3, [r4, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	da0f      	bge.n	8005760 <_puts_r+0xcc>
 8005740:	0028      	movs	r0, r5
 8005742:	0022      	movs	r2, r4
 8005744:	310a      	adds	r1, #10
 8005746:	f000 f833 	bl	80057b0 <__swbuf_r>
 800574a:	250a      	movs	r5, #10
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d1cd      	bne.n	80056ec <_puts_r+0x58>
 8005750:	e7ca      	b.n	80056e8 <_puts_r+0x54>
 8005752:	0022      	movs	r2, r4
 8005754:	0028      	movs	r0, r5
 8005756:	f000 f82b 	bl	80057b0 <__swbuf_r>
 800575a:	1c43      	adds	r3, r0, #1
 800575c:	d1e8      	bne.n	8005730 <_puts_r+0x9c>
 800575e:	e7c3      	b.n	80056e8 <_puts_r+0x54>
 8005760:	250a      	movs	r5, #10
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	6022      	str	r2, [r4, #0]
 8005768:	701d      	strb	r5, [r3, #0]
 800576a:	e7bf      	b.n	80056ec <_puts_r+0x58>
 800576c:	08006198 	.word	0x08006198
 8005770:	080061b8 	.word	0x080061b8
 8005774:	08006178 	.word	0x08006178

08005778 <puts>:
 8005778:	b510      	push	{r4, lr}
 800577a:	4b03      	ldr	r3, [pc, #12]	; (8005788 <puts+0x10>)
 800577c:	0001      	movs	r1, r0
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	f7ff ff88 	bl	8005694 <_puts_r>
 8005784:	bd10      	pop	{r4, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	200000dc 	.word	0x200000dc

0800578c <_sbrk_r>:
 800578c:	2300      	movs	r3, #0
 800578e:	b570      	push	{r4, r5, r6, lr}
 8005790:	4d06      	ldr	r5, [pc, #24]	; (80057ac <_sbrk_r+0x20>)
 8005792:	0004      	movs	r4, r0
 8005794:	0008      	movs	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fc fc4e 	bl	8002038 <_sbrk>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d103      	bne.n	80057a8 <_sbrk_r+0x1c>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d000      	beq.n	80057a8 <_sbrk_r+0x1c>
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	bd70      	pop	{r4, r5, r6, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	20000624 	.word	0x20000624

080057b0 <__swbuf_r>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	0005      	movs	r5, r0
 80057b4:	000e      	movs	r6, r1
 80057b6:	0014      	movs	r4, r2
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d004      	beq.n	80057c6 <__swbuf_r+0x16>
 80057bc:	6983      	ldr	r3, [r0, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <__swbuf_r+0x16>
 80057c2:	f000 f9f1 	bl	8005ba8 <__sinit>
 80057c6:	4b22      	ldr	r3, [pc, #136]	; (8005850 <__swbuf_r+0xa0>)
 80057c8:	429c      	cmp	r4, r3
 80057ca:	d12e      	bne.n	800582a <__swbuf_r+0x7a>
 80057cc:	686c      	ldr	r4, [r5, #4]
 80057ce:	69a3      	ldr	r3, [r4, #24]
 80057d0:	60a3      	str	r3, [r4, #8]
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	071b      	lsls	r3, r3, #28
 80057d6:	d532      	bpl.n	800583e <__swbuf_r+0x8e>
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d02f      	beq.n	800583e <__swbuf_r+0x8e>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	6922      	ldr	r2, [r4, #16]
 80057e2:	b2f7      	uxtb	r7, r6
 80057e4:	1a98      	subs	r0, r3, r2
 80057e6:	6963      	ldr	r3, [r4, #20]
 80057e8:	b2f6      	uxtb	r6, r6
 80057ea:	4283      	cmp	r3, r0
 80057ec:	dc05      	bgt.n	80057fa <__swbuf_r+0x4a>
 80057ee:	0021      	movs	r1, r4
 80057f0:	0028      	movs	r0, r5
 80057f2:	f000 f937 	bl	8005a64 <_fflush_r>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d127      	bne.n	800584a <__swbuf_r+0x9a>
 80057fa:	68a3      	ldr	r3, [r4, #8]
 80057fc:	3001      	adds	r0, #1
 80057fe:	3b01      	subs	r3, #1
 8005800:	60a3      	str	r3, [r4, #8]
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	6022      	str	r2, [r4, #0]
 8005808:	701f      	strb	r7, [r3, #0]
 800580a:	6963      	ldr	r3, [r4, #20]
 800580c:	4283      	cmp	r3, r0
 800580e:	d004      	beq.n	800581a <__swbuf_r+0x6a>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	07db      	lsls	r3, r3, #31
 8005814:	d507      	bpl.n	8005826 <__swbuf_r+0x76>
 8005816:	2e0a      	cmp	r6, #10
 8005818:	d105      	bne.n	8005826 <__swbuf_r+0x76>
 800581a:	0021      	movs	r1, r4
 800581c:	0028      	movs	r0, r5
 800581e:	f000 f921 	bl	8005a64 <_fflush_r>
 8005822:	2800      	cmp	r0, #0
 8005824:	d111      	bne.n	800584a <__swbuf_r+0x9a>
 8005826:	0030      	movs	r0, r6
 8005828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <__swbuf_r+0xa4>)
 800582c:	429c      	cmp	r4, r3
 800582e:	d101      	bne.n	8005834 <__swbuf_r+0x84>
 8005830:	68ac      	ldr	r4, [r5, #8]
 8005832:	e7cc      	b.n	80057ce <__swbuf_r+0x1e>
 8005834:	4b08      	ldr	r3, [pc, #32]	; (8005858 <__swbuf_r+0xa8>)
 8005836:	429c      	cmp	r4, r3
 8005838:	d1c9      	bne.n	80057ce <__swbuf_r+0x1e>
 800583a:	68ec      	ldr	r4, [r5, #12]
 800583c:	e7c7      	b.n	80057ce <__swbuf_r+0x1e>
 800583e:	0021      	movs	r1, r4
 8005840:	0028      	movs	r0, r5
 8005842:	f000 f80b 	bl	800585c <__swsetup_r>
 8005846:	2800      	cmp	r0, #0
 8005848:	d0c9      	beq.n	80057de <__swbuf_r+0x2e>
 800584a:	2601      	movs	r6, #1
 800584c:	4276      	negs	r6, r6
 800584e:	e7ea      	b.n	8005826 <__swbuf_r+0x76>
 8005850:	08006198 	.word	0x08006198
 8005854:	080061b8 	.word	0x080061b8
 8005858:	08006178 	.word	0x08006178

0800585c <__swsetup_r>:
 800585c:	4b37      	ldr	r3, [pc, #220]	; (800593c <__swsetup_r+0xe0>)
 800585e:	b570      	push	{r4, r5, r6, lr}
 8005860:	681d      	ldr	r5, [r3, #0]
 8005862:	0006      	movs	r6, r0
 8005864:	000c      	movs	r4, r1
 8005866:	2d00      	cmp	r5, #0
 8005868:	d005      	beq.n	8005876 <__swsetup_r+0x1a>
 800586a:	69ab      	ldr	r3, [r5, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <__swsetup_r+0x1a>
 8005870:	0028      	movs	r0, r5
 8005872:	f000 f999 	bl	8005ba8 <__sinit>
 8005876:	4b32      	ldr	r3, [pc, #200]	; (8005940 <__swsetup_r+0xe4>)
 8005878:	429c      	cmp	r4, r3
 800587a:	d10f      	bne.n	800589c <__swsetup_r+0x40>
 800587c:	686c      	ldr	r4, [r5, #4]
 800587e:	230c      	movs	r3, #12
 8005880:	5ee2      	ldrsh	r2, [r4, r3]
 8005882:	b293      	uxth	r3, r2
 8005884:	0711      	lsls	r1, r2, #28
 8005886:	d42d      	bmi.n	80058e4 <__swsetup_r+0x88>
 8005888:	06d9      	lsls	r1, r3, #27
 800588a:	d411      	bmi.n	80058b0 <__swsetup_r+0x54>
 800588c:	2309      	movs	r3, #9
 800588e:	2001      	movs	r0, #1
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	3337      	adds	r3, #55	; 0x37
 8005894:	4313      	orrs	r3, r2
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	4240      	negs	r0, r0
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	4b29      	ldr	r3, [pc, #164]	; (8005944 <__swsetup_r+0xe8>)
 800589e:	429c      	cmp	r4, r3
 80058a0:	d101      	bne.n	80058a6 <__swsetup_r+0x4a>
 80058a2:	68ac      	ldr	r4, [r5, #8]
 80058a4:	e7eb      	b.n	800587e <__swsetup_r+0x22>
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <__swsetup_r+0xec>)
 80058a8:	429c      	cmp	r4, r3
 80058aa:	d1e8      	bne.n	800587e <__swsetup_r+0x22>
 80058ac:	68ec      	ldr	r4, [r5, #12]
 80058ae:	e7e6      	b.n	800587e <__swsetup_r+0x22>
 80058b0:	075b      	lsls	r3, r3, #29
 80058b2:	d513      	bpl.n	80058dc <__swsetup_r+0x80>
 80058b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058b6:	2900      	cmp	r1, #0
 80058b8:	d008      	beq.n	80058cc <__swsetup_r+0x70>
 80058ba:	0023      	movs	r3, r4
 80058bc:	3344      	adds	r3, #68	; 0x44
 80058be:	4299      	cmp	r1, r3
 80058c0:	d002      	beq.n	80058c8 <__swsetup_r+0x6c>
 80058c2:	0030      	movs	r0, r6
 80058c4:	f7ff fe04 	bl	80054d0 <_free_r>
 80058c8:	2300      	movs	r3, #0
 80058ca:	6363      	str	r3, [r4, #52]	; 0x34
 80058cc:	2224      	movs	r2, #36	; 0x24
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	4393      	bics	r3, r2
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	2300      	movs	r3, #0
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	2308      	movs	r3, #8
 80058de:	89a2      	ldrh	r2, [r4, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <__swsetup_r+0xa6>
 80058ea:	21a0      	movs	r1, #160	; 0xa0
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	0089      	lsls	r1, r1, #2
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	400b      	ands	r3, r1
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <__swsetup_r+0xa6>
 80058fa:	0021      	movs	r1, r4
 80058fc:	0030      	movs	r0, r6
 80058fe:	f000 fa1f 	bl	8005d40 <__smakebuf_r>
 8005902:	220c      	movs	r2, #12
 8005904:	5ea3      	ldrsh	r3, [r4, r2]
 8005906:	2001      	movs	r0, #1
 8005908:	001a      	movs	r2, r3
 800590a:	b299      	uxth	r1, r3
 800590c:	4002      	ands	r2, r0
 800590e:	4203      	tst	r3, r0
 8005910:	d00f      	beq.n	8005932 <__swsetup_r+0xd6>
 8005912:	2200      	movs	r2, #0
 8005914:	60a2      	str	r2, [r4, #8]
 8005916:	6962      	ldr	r2, [r4, #20]
 8005918:	4252      	negs	r2, r2
 800591a:	61a2      	str	r2, [r4, #24]
 800591c:	2000      	movs	r0, #0
 800591e:	6922      	ldr	r2, [r4, #16]
 8005920:	4282      	cmp	r2, r0
 8005922:	d1ba      	bne.n	800589a <__swsetup_r+0x3e>
 8005924:	060a      	lsls	r2, r1, #24
 8005926:	d5b8      	bpl.n	800589a <__swsetup_r+0x3e>
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	4313      	orrs	r3, r2
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	3801      	subs	r0, #1
 8005930:	e7b3      	b.n	800589a <__swsetup_r+0x3e>
 8005932:	0788      	lsls	r0, r1, #30
 8005934:	d400      	bmi.n	8005938 <__swsetup_r+0xdc>
 8005936:	6962      	ldr	r2, [r4, #20]
 8005938:	60a2      	str	r2, [r4, #8]
 800593a:	e7ef      	b.n	800591c <__swsetup_r+0xc0>
 800593c:	200000dc 	.word	0x200000dc
 8005940:	08006198 	.word	0x08006198
 8005944:	080061b8 	.word	0x080061b8
 8005948:	08006178 	.word	0x08006178

0800594c <__sflush_r>:
 800594c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800594e:	898b      	ldrh	r3, [r1, #12]
 8005950:	0005      	movs	r5, r0
 8005952:	000c      	movs	r4, r1
 8005954:	071a      	lsls	r2, r3, #28
 8005956:	d45f      	bmi.n	8005a18 <__sflush_r+0xcc>
 8005958:	684a      	ldr	r2, [r1, #4]
 800595a:	2a00      	cmp	r2, #0
 800595c:	dc04      	bgt.n	8005968 <__sflush_r+0x1c>
 800595e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005960:	2a00      	cmp	r2, #0
 8005962:	dc01      	bgt.n	8005968 <__sflush_r+0x1c>
 8005964:	2000      	movs	r0, #0
 8005966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005968:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800596a:	2f00      	cmp	r7, #0
 800596c:	d0fa      	beq.n	8005964 <__sflush_r+0x18>
 800596e:	2200      	movs	r2, #0
 8005970:	2180      	movs	r1, #128	; 0x80
 8005972:	682e      	ldr	r6, [r5, #0]
 8005974:	602a      	str	r2, [r5, #0]
 8005976:	001a      	movs	r2, r3
 8005978:	0149      	lsls	r1, r1, #5
 800597a:	400a      	ands	r2, r1
 800597c:	420b      	tst	r3, r1
 800597e:	d034      	beq.n	80059ea <__sflush_r+0x9e>
 8005980:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	075b      	lsls	r3, r3, #29
 8005986:	d506      	bpl.n	8005996 <__sflush_r+0x4a>
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	1ac0      	subs	r0, r0, r3
 800598c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <__sflush_r+0x4a>
 8005992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005994:	1ac0      	subs	r0, r0, r3
 8005996:	0002      	movs	r2, r0
 8005998:	6a21      	ldr	r1, [r4, #32]
 800599a:	2300      	movs	r3, #0
 800599c:	0028      	movs	r0, r5
 800599e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80059a0:	47b8      	blx	r7
 80059a2:	89a1      	ldrh	r1, [r4, #12]
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d106      	bne.n	80059b6 <__sflush_r+0x6a>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	2b1d      	cmp	r3, #29
 80059ac:	d831      	bhi.n	8005a12 <__sflush_r+0xc6>
 80059ae:	4a2c      	ldr	r2, [pc, #176]	; (8005a60 <__sflush_r+0x114>)
 80059b0:	40da      	lsrs	r2, r3
 80059b2:	07d3      	lsls	r3, r2, #31
 80059b4:	d52d      	bpl.n	8005a12 <__sflush_r+0xc6>
 80059b6:	2300      	movs	r3, #0
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	04cb      	lsls	r3, r1, #19
 80059c0:	d505      	bpl.n	80059ce <__sflush_r+0x82>
 80059c2:	1c43      	adds	r3, r0, #1
 80059c4:	d102      	bne.n	80059cc <__sflush_r+0x80>
 80059c6:	682b      	ldr	r3, [r5, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d100      	bne.n	80059ce <__sflush_r+0x82>
 80059cc:	6560      	str	r0, [r4, #84]	; 0x54
 80059ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d0:	602e      	str	r6, [r5, #0]
 80059d2:	2900      	cmp	r1, #0
 80059d4:	d0c6      	beq.n	8005964 <__sflush_r+0x18>
 80059d6:	0023      	movs	r3, r4
 80059d8:	3344      	adds	r3, #68	; 0x44
 80059da:	4299      	cmp	r1, r3
 80059dc:	d002      	beq.n	80059e4 <__sflush_r+0x98>
 80059de:	0028      	movs	r0, r5
 80059e0:	f7ff fd76 	bl	80054d0 <_free_r>
 80059e4:	2000      	movs	r0, #0
 80059e6:	6360      	str	r0, [r4, #52]	; 0x34
 80059e8:	e7bd      	b.n	8005966 <__sflush_r+0x1a>
 80059ea:	2301      	movs	r3, #1
 80059ec:	0028      	movs	r0, r5
 80059ee:	6a21      	ldr	r1, [r4, #32]
 80059f0:	47b8      	blx	r7
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d1c5      	bne.n	8005982 <__sflush_r+0x36>
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0c2      	beq.n	8005982 <__sflush_r+0x36>
 80059fc:	2b1d      	cmp	r3, #29
 80059fe:	d001      	beq.n	8005a04 <__sflush_r+0xb8>
 8005a00:	2b16      	cmp	r3, #22
 8005a02:	d101      	bne.n	8005a08 <__sflush_r+0xbc>
 8005a04:	602e      	str	r6, [r5, #0]
 8005a06:	e7ad      	b.n	8005964 <__sflush_r+0x18>
 8005a08:	2340      	movs	r3, #64	; 0x40
 8005a0a:	89a2      	ldrh	r2, [r4, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	e7a9      	b.n	8005966 <__sflush_r+0x1a>
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	430b      	orrs	r3, r1
 8005a16:	e7fa      	b.n	8005a0e <__sflush_r+0xc2>
 8005a18:	690f      	ldr	r7, [r1, #16]
 8005a1a:	2f00      	cmp	r7, #0
 8005a1c:	d0a2      	beq.n	8005964 <__sflush_r+0x18>
 8005a1e:	680a      	ldr	r2, [r1, #0]
 8005a20:	600f      	str	r7, [r1, #0]
 8005a22:	1bd2      	subs	r2, r2, r7
 8005a24:	9201      	str	r2, [sp, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	079b      	lsls	r3, r3, #30
 8005a2a:	d100      	bne.n	8005a2e <__sflush_r+0xe2>
 8005a2c:	694a      	ldr	r2, [r1, #20]
 8005a2e:	60a2      	str	r2, [r4, #8]
 8005a30:	9b01      	ldr	r3, [sp, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	dc00      	bgt.n	8005a38 <__sflush_r+0xec>
 8005a36:	e795      	b.n	8005964 <__sflush_r+0x18>
 8005a38:	003a      	movs	r2, r7
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	9b01      	ldr	r3, [sp, #4]
 8005a3e:	6a21      	ldr	r1, [r4, #32]
 8005a40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a42:	47b0      	blx	r6
 8005a44:	2800      	cmp	r0, #0
 8005a46:	dc06      	bgt.n	8005a56 <__sflush_r+0x10a>
 8005a48:	2340      	movs	r3, #64	; 0x40
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	89a2      	ldrh	r2, [r4, #12]
 8005a4e:	4240      	negs	r0, r0
 8005a50:	4313      	orrs	r3, r2
 8005a52:	81a3      	strh	r3, [r4, #12]
 8005a54:	e787      	b.n	8005966 <__sflush_r+0x1a>
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	183f      	adds	r7, r7, r0
 8005a5a:	1a1b      	subs	r3, r3, r0
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	e7e7      	b.n	8005a30 <__sflush_r+0xe4>
 8005a60:	20400001 	.word	0x20400001

08005a64 <_fflush_r>:
 8005a64:	690b      	ldr	r3, [r1, #16]
 8005a66:	b570      	push	{r4, r5, r6, lr}
 8005a68:	0005      	movs	r5, r0
 8005a6a:	000c      	movs	r4, r1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <_fflush_r+0x12>
 8005a70:	2500      	movs	r5, #0
 8005a72:	0028      	movs	r0, r5
 8005a74:	bd70      	pop	{r4, r5, r6, pc}
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d004      	beq.n	8005a84 <_fflush_r+0x20>
 8005a7a:	6983      	ldr	r3, [r0, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <_fflush_r+0x20>
 8005a80:	f000 f892 	bl	8005ba8 <__sinit>
 8005a84:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <_fflush_r+0x74>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d11b      	bne.n	8005ac2 <_fflush_r+0x5e>
 8005a8a:	686c      	ldr	r4, [r5, #4]
 8005a8c:	220c      	movs	r2, #12
 8005a8e:	5ea3      	ldrsh	r3, [r4, r2]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0ed      	beq.n	8005a70 <_fflush_r+0xc>
 8005a94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a96:	07d2      	lsls	r2, r2, #31
 8005a98:	d404      	bmi.n	8005aa4 <_fflush_r+0x40>
 8005a9a:	059b      	lsls	r3, r3, #22
 8005a9c:	d402      	bmi.n	8005aa4 <_fflush_r+0x40>
 8005a9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa0:	f000 f923 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005aa4:	0028      	movs	r0, r5
 8005aa6:	0021      	movs	r1, r4
 8005aa8:	f7ff ff50 	bl	800594c <__sflush_r>
 8005aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aae:	0005      	movs	r5, r0
 8005ab0:	07db      	lsls	r3, r3, #31
 8005ab2:	d4de      	bmi.n	8005a72 <_fflush_r+0xe>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	059b      	lsls	r3, r3, #22
 8005ab8:	d4db      	bmi.n	8005a72 <_fflush_r+0xe>
 8005aba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005abc:	f000 f916 	bl	8005cec <__retarget_lock_release_recursive>
 8005ac0:	e7d7      	b.n	8005a72 <_fflush_r+0xe>
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <_fflush_r+0x78>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	d101      	bne.n	8005acc <_fflush_r+0x68>
 8005ac8:	68ac      	ldr	r4, [r5, #8]
 8005aca:	e7df      	b.n	8005a8c <_fflush_r+0x28>
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <_fflush_r+0x7c>)
 8005ace:	429c      	cmp	r4, r3
 8005ad0:	d1dc      	bne.n	8005a8c <_fflush_r+0x28>
 8005ad2:	68ec      	ldr	r4, [r5, #12]
 8005ad4:	e7da      	b.n	8005a8c <_fflush_r+0x28>
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	08006198 	.word	0x08006198
 8005adc:	080061b8 	.word	0x080061b8
 8005ae0:	08006178 	.word	0x08006178

08005ae4 <std>:
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	0004      	movs	r4, r0
 8005aea:	6003      	str	r3, [r0, #0]
 8005aec:	6043      	str	r3, [r0, #4]
 8005aee:	6083      	str	r3, [r0, #8]
 8005af0:	8181      	strh	r1, [r0, #12]
 8005af2:	6643      	str	r3, [r0, #100]	; 0x64
 8005af4:	0019      	movs	r1, r3
 8005af6:	81c2      	strh	r2, [r0, #14]
 8005af8:	6103      	str	r3, [r0, #16]
 8005afa:	6143      	str	r3, [r0, #20]
 8005afc:	6183      	str	r3, [r0, #24]
 8005afe:	2208      	movs	r2, #8
 8005b00:	305c      	adds	r0, #92	; 0x5c
 8005b02:	f7ff fcdc 	bl	80054be <memset>
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <std+0x38>)
 8005b08:	6224      	str	r4, [r4, #32]
 8005b0a:	6263      	str	r3, [r4, #36]	; 0x24
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <std+0x3c>)
 8005b0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <std+0x40>)
 8005b12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b14:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <std+0x44>)
 8005b16:	6323      	str	r3, [r4, #48]	; 0x30
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	08005de9 	.word	0x08005de9
 8005b20:	08005e11 	.word	0x08005e11
 8005b24:	08005e49 	.word	0x08005e49
 8005b28:	08005e75 	.word	0x08005e75

08005b2c <_cleanup_r>:
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	4902      	ldr	r1, [pc, #8]	; (8005b38 <_cleanup_r+0xc>)
 8005b30:	f000 f8ba 	bl	8005ca8 <_fwalk_reent>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	08005a65 	.word	0x08005a65

08005b3c <__sfmoreglue>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	2568      	movs	r5, #104	; 0x68
 8005b40:	1e4a      	subs	r2, r1, #1
 8005b42:	4355      	muls	r5, r2
 8005b44:	000e      	movs	r6, r1
 8005b46:	0029      	movs	r1, r5
 8005b48:	3174      	adds	r1, #116	; 0x74
 8005b4a:	f7ff fd2d 	bl	80055a8 <_malloc_r>
 8005b4e:	1e04      	subs	r4, r0, #0
 8005b50:	d008      	beq.n	8005b64 <__sfmoreglue+0x28>
 8005b52:	2100      	movs	r1, #0
 8005b54:	002a      	movs	r2, r5
 8005b56:	6001      	str	r1, [r0, #0]
 8005b58:	6046      	str	r6, [r0, #4]
 8005b5a:	300c      	adds	r0, #12
 8005b5c:	60a0      	str	r0, [r4, #8]
 8005b5e:	3268      	adds	r2, #104	; 0x68
 8005b60:	f7ff fcad 	bl	80054be <memset>
 8005b64:	0020      	movs	r0, r4
 8005b66:	bd70      	pop	{r4, r5, r6, pc}

08005b68 <__sfp_lock_acquire>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	4802      	ldr	r0, [pc, #8]	; (8005b74 <__sfp_lock_acquire+0xc>)
 8005b6c:	f000 f8bd 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	20000621 	.word	0x20000621

08005b78 <__sfp_lock_release>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4802      	ldr	r0, [pc, #8]	; (8005b84 <__sfp_lock_release+0xc>)
 8005b7c:	f000 f8b6 	bl	8005cec <__retarget_lock_release_recursive>
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	20000621 	.word	0x20000621

08005b88 <__sinit_lock_acquire>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4802      	ldr	r0, [pc, #8]	; (8005b94 <__sinit_lock_acquire+0xc>)
 8005b8c:	f000 f8ad 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	20000622 	.word	0x20000622

08005b98 <__sinit_lock_release>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <__sinit_lock_release+0xc>)
 8005b9c:	f000 f8a6 	bl	8005cec <__retarget_lock_release_recursive>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	20000622 	.word	0x20000622

08005ba8 <__sinit>:
 8005ba8:	b513      	push	{r0, r1, r4, lr}
 8005baa:	0004      	movs	r4, r0
 8005bac:	f7ff ffec 	bl	8005b88 <__sinit_lock_acquire>
 8005bb0:	69a3      	ldr	r3, [r4, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <__sinit+0x14>
 8005bb6:	f7ff ffef 	bl	8005b98 <__sinit_lock_release>
 8005bba:	bd13      	pop	{r0, r1, r4, pc}
 8005bbc:	64a3      	str	r3, [r4, #72]	; 0x48
 8005bbe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <__sinit+0x68>)
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <__sinit+0x6c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d101      	bne.n	8005bd4 <__sinit+0x2c>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	61a3      	str	r3, [r4, #24]
 8005bd4:	0020      	movs	r0, r4
 8005bd6:	f000 f81f 	bl	8005c18 <__sfp>
 8005bda:	6060      	str	r0, [r4, #4]
 8005bdc:	0020      	movs	r0, r4
 8005bde:	f000 f81b 	bl	8005c18 <__sfp>
 8005be2:	60a0      	str	r0, [r4, #8]
 8005be4:	0020      	movs	r0, r4
 8005be6:	f000 f817 	bl	8005c18 <__sfp>
 8005bea:	2200      	movs	r2, #0
 8005bec:	2104      	movs	r1, #4
 8005bee:	60e0      	str	r0, [r4, #12]
 8005bf0:	6860      	ldr	r0, [r4, #4]
 8005bf2:	f7ff ff77 	bl	8005ae4 <std>
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	2109      	movs	r1, #9
 8005bfa:	68a0      	ldr	r0, [r4, #8]
 8005bfc:	f7ff ff72 	bl	8005ae4 <std>
 8005c00:	2202      	movs	r2, #2
 8005c02:	2112      	movs	r1, #18
 8005c04:	68e0      	ldr	r0, [r4, #12]
 8005c06:	f7ff ff6d 	bl	8005ae4 <std>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61a3      	str	r3, [r4, #24]
 8005c0e:	e7d2      	b.n	8005bb6 <__sinit+0xe>
 8005c10:	08006174 	.word	0x08006174
 8005c14:	08005b2d 	.word	0x08005b2d

08005c18 <__sfp>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	0007      	movs	r7, r0
 8005c1c:	f7ff ffa4 	bl	8005b68 <__sfp_lock_acquire>
 8005c20:	4b1f      	ldr	r3, [pc, #124]	; (8005ca0 <__sfp+0x88>)
 8005c22:	681e      	ldr	r6, [r3, #0]
 8005c24:	69b3      	ldr	r3, [r6, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <__sfp+0x18>
 8005c2a:	0030      	movs	r0, r6
 8005c2c:	f7ff ffbc 	bl	8005ba8 <__sinit>
 8005c30:	3648      	adds	r6, #72	; 0x48
 8005c32:	68b4      	ldr	r4, [r6, #8]
 8005c34:	6873      	ldr	r3, [r6, #4]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	d504      	bpl.n	8005c44 <__sfp+0x2c>
 8005c3a:	6833      	ldr	r3, [r6, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d022      	beq.n	8005c86 <__sfp+0x6e>
 8005c40:	6836      	ldr	r6, [r6, #0]
 8005c42:	e7f6      	b.n	8005c32 <__sfp+0x1a>
 8005c44:	220c      	movs	r2, #12
 8005c46:	5ea5      	ldrsh	r5, [r4, r2]
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d11a      	bne.n	8005c82 <__sfp+0x6a>
 8005c4c:	0020      	movs	r0, r4
 8005c4e:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <__sfp+0x8c>)
 8005c50:	3058      	adds	r0, #88	; 0x58
 8005c52:	60e3      	str	r3, [r4, #12]
 8005c54:	6665      	str	r5, [r4, #100]	; 0x64
 8005c56:	f000 f847 	bl	8005ce8 <__retarget_lock_init_recursive>
 8005c5a:	f7ff ff8d 	bl	8005b78 <__sfp_lock_release>
 8005c5e:	0020      	movs	r0, r4
 8005c60:	2208      	movs	r2, #8
 8005c62:	0029      	movs	r1, r5
 8005c64:	6025      	str	r5, [r4, #0]
 8005c66:	60a5      	str	r5, [r4, #8]
 8005c68:	6065      	str	r5, [r4, #4]
 8005c6a:	6125      	str	r5, [r4, #16]
 8005c6c:	6165      	str	r5, [r4, #20]
 8005c6e:	61a5      	str	r5, [r4, #24]
 8005c70:	305c      	adds	r0, #92	; 0x5c
 8005c72:	f7ff fc24 	bl	80054be <memset>
 8005c76:	6365      	str	r5, [r4, #52]	; 0x34
 8005c78:	63a5      	str	r5, [r4, #56]	; 0x38
 8005c7a:	64a5      	str	r5, [r4, #72]	; 0x48
 8005c7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005c7e:	0020      	movs	r0, r4
 8005c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c82:	3468      	adds	r4, #104	; 0x68
 8005c84:	e7d7      	b.n	8005c36 <__sfp+0x1e>
 8005c86:	2104      	movs	r1, #4
 8005c88:	0038      	movs	r0, r7
 8005c8a:	f7ff ff57 	bl	8005b3c <__sfmoreglue>
 8005c8e:	1e04      	subs	r4, r0, #0
 8005c90:	6030      	str	r0, [r6, #0]
 8005c92:	d1d5      	bne.n	8005c40 <__sfp+0x28>
 8005c94:	f7ff ff70 	bl	8005b78 <__sfp_lock_release>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	e7ef      	b.n	8005c7e <__sfp+0x66>
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	08006174 	.word	0x08006174
 8005ca4:	ffff0001 	.word	0xffff0001

08005ca8 <_fwalk_reent>:
 8005ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005caa:	0004      	movs	r4, r0
 8005cac:	0006      	movs	r6, r0
 8005cae:	2700      	movs	r7, #0
 8005cb0:	9101      	str	r1, [sp, #4]
 8005cb2:	3448      	adds	r4, #72	; 0x48
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	68a5      	ldr	r5, [r4, #8]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	9b00      	ldr	r3, [sp, #0]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	d504      	bpl.n	8005ccc <_fwalk_reent+0x24>
 8005cc2:	6824      	ldr	r4, [r4, #0]
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	d1f5      	bne.n	8005cb4 <_fwalk_reent+0xc>
 8005cc8:	0038      	movs	r0, r7
 8005cca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ccc:	89ab      	ldrh	r3, [r5, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d908      	bls.n	8005ce4 <_fwalk_reent+0x3c>
 8005cd2:	220e      	movs	r2, #14
 8005cd4:	5eab      	ldrsh	r3, [r5, r2]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	d004      	beq.n	8005ce4 <_fwalk_reent+0x3c>
 8005cda:	0029      	movs	r1, r5
 8005cdc:	0030      	movs	r0, r6
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	4798      	blx	r3
 8005ce2:	4307      	orrs	r7, r0
 8005ce4:	3568      	adds	r5, #104	; 0x68
 8005ce6:	e7e8      	b.n	8005cba <_fwalk_reent+0x12>

08005ce8 <__retarget_lock_init_recursive>:
 8005ce8:	4770      	bx	lr

08005cea <__retarget_lock_acquire_recursive>:
 8005cea:	4770      	bx	lr

08005cec <__retarget_lock_release_recursive>:
 8005cec:	4770      	bx	lr
	...

08005cf0 <__swhatbuf_r>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	000e      	movs	r6, r1
 8005cf4:	001d      	movs	r5, r3
 8005cf6:	230e      	movs	r3, #14
 8005cf8:	5ec9      	ldrsh	r1, [r1, r3]
 8005cfa:	0014      	movs	r4, r2
 8005cfc:	b096      	sub	sp, #88	; 0x58
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	da08      	bge.n	8005d14 <__swhatbuf_r+0x24>
 8005d02:	220c      	movs	r2, #12
 8005d04:	5eb3      	ldrsh	r3, [r6, r2]
 8005d06:	2200      	movs	r2, #0
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	061b      	lsls	r3, r3, #24
 8005d0c:	d411      	bmi.n	8005d32 <__swhatbuf_r+0x42>
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	e00f      	b.n	8005d34 <__swhatbuf_r+0x44>
 8005d14:	466a      	mov	r2, sp
 8005d16:	f000 f8d9 	bl	8005ecc <_fstat_r>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	dbf1      	blt.n	8005d02 <__swhatbuf_r+0x12>
 8005d1e:	23f0      	movs	r3, #240	; 0xf0
 8005d20:	9901      	ldr	r1, [sp, #4]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	4019      	ands	r1, r3
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <__swhatbuf_r+0x4c>)
 8005d28:	18c9      	adds	r1, r1, r3
 8005d2a:	424b      	negs	r3, r1
 8005d2c:	4159      	adcs	r1, r3
 8005d2e:	6029      	str	r1, [r5, #0]
 8005d30:	e7ed      	b.n	8005d0e <__swhatbuf_r+0x1e>
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	2000      	movs	r0, #0
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	b016      	add	sp, #88	; 0x58
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	ffffe000 	.word	0xffffe000

08005d40 <__smakebuf_r>:
 8005d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d42:	2602      	movs	r6, #2
 8005d44:	898b      	ldrh	r3, [r1, #12]
 8005d46:	0005      	movs	r5, r0
 8005d48:	000c      	movs	r4, r1
 8005d4a:	4233      	tst	r3, r6
 8005d4c:	d006      	beq.n	8005d5c <__smakebuf_r+0x1c>
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3347      	adds	r3, #71	; 0x47
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	2301      	movs	r3, #1
 8005d58:	6163      	str	r3, [r4, #20]
 8005d5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005d5c:	466a      	mov	r2, sp
 8005d5e:	ab01      	add	r3, sp, #4
 8005d60:	f7ff ffc6 	bl	8005cf0 <__swhatbuf_r>
 8005d64:	9900      	ldr	r1, [sp, #0]
 8005d66:	0007      	movs	r7, r0
 8005d68:	0028      	movs	r0, r5
 8005d6a:	f7ff fc1d 	bl	80055a8 <_malloc_r>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d108      	bne.n	8005d84 <__smakebuf_r+0x44>
 8005d72:	220c      	movs	r2, #12
 8005d74:	5ea3      	ldrsh	r3, [r4, r2]
 8005d76:	059a      	lsls	r2, r3, #22
 8005d78:	d4ef      	bmi.n	8005d5a <__smakebuf_r+0x1a>
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	4393      	bics	r3, r2
 8005d7e:	431e      	orrs	r6, r3
 8005d80:	81a6      	strh	r6, [r4, #12]
 8005d82:	e7e4      	b.n	8005d4e <__smakebuf_r+0xe>
 8005d84:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <__smakebuf_r+0x84>)
 8005d86:	62ab      	str	r3, [r5, #40]	; 0x28
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	89a2      	ldrh	r2, [r4, #12]
 8005d8c:	6020      	str	r0, [r4, #0]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	9b00      	ldr	r3, [sp, #0]
 8005d94:	6120      	str	r0, [r4, #16]
 8005d96:	6163      	str	r3, [r4, #20]
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <__smakebuf_r+0x7a>
 8005d9e:	0028      	movs	r0, r5
 8005da0:	230e      	movs	r3, #14
 8005da2:	5ee1      	ldrsh	r1, [r4, r3]
 8005da4:	f000 f8a4 	bl	8005ef0 <_isatty_r>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d006      	beq.n	8005dba <__smakebuf_r+0x7a>
 8005dac:	2203      	movs	r2, #3
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	4393      	bics	r3, r2
 8005db2:	001a      	movs	r2, r3
 8005db4:	2301      	movs	r3, #1
 8005db6:	4313      	orrs	r3, r2
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	89a0      	ldrh	r0, [r4, #12]
 8005dbc:	4307      	orrs	r7, r0
 8005dbe:	81a7      	strh	r7, [r4, #12]
 8005dc0:	e7cb      	b.n	8005d5a <__smakebuf_r+0x1a>
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	08005b2d 	.word	0x08005b2d

08005dc8 <__malloc_lock>:
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	4802      	ldr	r0, [pc, #8]	; (8005dd4 <__malloc_lock+0xc>)
 8005dcc:	f7ff ff8d 	bl	8005cea <__retarget_lock_acquire_recursive>
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	20000620 	.word	0x20000620

08005dd8 <__malloc_unlock>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	4802      	ldr	r0, [pc, #8]	; (8005de4 <__malloc_unlock+0xc>)
 8005ddc:	f7ff ff86 	bl	8005cec <__retarget_lock_release_recursive>
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	20000620 	.word	0x20000620

08005de8 <__sread>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	000c      	movs	r4, r1
 8005dec:	250e      	movs	r5, #14
 8005dee:	5f49      	ldrsh	r1, [r1, r5]
 8005df0:	f000 f8a4 	bl	8005f3c <_read_r>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	db03      	blt.n	8005e00 <__sread+0x18>
 8005df8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005dfa:	181b      	adds	r3, r3, r0
 8005dfc:	6563      	str	r3, [r4, #84]	; 0x54
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	4a02      	ldr	r2, [pc, #8]	; (8005e0c <__sread+0x24>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	e7f9      	b.n	8005dfe <__sread+0x16>
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	ffffefff 	.word	0xffffefff

08005e10 <__swrite>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	001f      	movs	r7, r3
 8005e14:	898b      	ldrh	r3, [r1, #12]
 8005e16:	0005      	movs	r5, r0
 8005e18:	000c      	movs	r4, r1
 8005e1a:	0016      	movs	r6, r2
 8005e1c:	05db      	lsls	r3, r3, #23
 8005e1e:	d505      	bpl.n	8005e2c <__swrite+0x1c>
 8005e20:	230e      	movs	r3, #14
 8005e22:	5ec9      	ldrsh	r1, [r1, r3]
 8005e24:	2200      	movs	r2, #0
 8005e26:	2302      	movs	r3, #2
 8005e28:	f000 f874 	bl	8005f14 <_lseek_r>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	4a05      	ldr	r2, [pc, #20]	; (8005e44 <__swrite+0x34>)
 8005e30:	0028      	movs	r0, r5
 8005e32:	4013      	ands	r3, r2
 8005e34:	81a3      	strh	r3, [r4, #12]
 8005e36:	0032      	movs	r2, r6
 8005e38:	230e      	movs	r3, #14
 8005e3a:	5ee1      	ldrsh	r1, [r4, r3]
 8005e3c:	003b      	movs	r3, r7
 8005e3e:	f000 f81f 	bl	8005e80 <_write_r>
 8005e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e44:	ffffefff 	.word	0xffffefff

08005e48 <__sseek>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	000c      	movs	r4, r1
 8005e4c:	250e      	movs	r5, #14
 8005e4e:	5f49      	ldrsh	r1, [r1, r5]
 8005e50:	f000 f860 	bl	8005f14 <_lseek_r>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	1c42      	adds	r2, r0, #1
 8005e58:	d103      	bne.n	8005e62 <__sseek+0x1a>
 8005e5a:	4a05      	ldr	r2, [pc, #20]	; (8005e70 <__sseek+0x28>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	0152      	lsls	r2, r2, #5
 8005e66:	4313      	orrs	r3, r2
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e6c:	e7f8      	b.n	8005e60 <__sseek+0x18>
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	ffffefff 	.word	0xffffefff

08005e74 <__sclose>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	230e      	movs	r3, #14
 8005e78:	5ec9      	ldrsh	r1, [r1, r3]
 8005e7a:	f000 f815 	bl	8005ea8 <_close_r>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <_write_r>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	0004      	movs	r4, r0
 8005e84:	0008      	movs	r0, r1
 8005e86:	0011      	movs	r1, r2
 8005e88:	001a      	movs	r2, r3
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	4d05      	ldr	r5, [pc, #20]	; (8005ea4 <_write_r+0x24>)
 8005e8e:	602b      	str	r3, [r5, #0]
 8005e90:	f7fc f889 	bl	8001fa6 <_write>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d103      	bne.n	8005ea0 <_write_r+0x20>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d000      	beq.n	8005ea0 <_write_r+0x20>
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	20000624 	.word	0x20000624

08005ea8 <_close_r>:
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	b570      	push	{r4, r5, r6, lr}
 8005eac:	4d06      	ldr	r5, [pc, #24]	; (8005ec8 <_close_r+0x20>)
 8005eae:	0004      	movs	r4, r0
 8005eb0:	0008      	movs	r0, r1
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	f7fc f893 	bl	8001fde <_close>
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d103      	bne.n	8005ec4 <_close_r+0x1c>
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d000      	beq.n	8005ec4 <_close_r+0x1c>
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	20000624 	.word	0x20000624

08005ecc <_fstat_r>:
 8005ecc:	2300      	movs	r3, #0
 8005ece:	b570      	push	{r4, r5, r6, lr}
 8005ed0:	4d06      	ldr	r5, [pc, #24]	; (8005eec <_fstat_r+0x20>)
 8005ed2:	0004      	movs	r4, r0
 8005ed4:	0008      	movs	r0, r1
 8005ed6:	0011      	movs	r1, r2
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	f7fc f88a 	bl	8001ff2 <_fstat>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d103      	bne.n	8005eea <_fstat_r+0x1e>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d000      	beq.n	8005eea <_fstat_r+0x1e>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	20000624 	.word	0x20000624

08005ef0 <_isatty_r>:
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	b570      	push	{r4, r5, r6, lr}
 8005ef4:	4d06      	ldr	r5, [pc, #24]	; (8005f10 <_isatty_r+0x20>)
 8005ef6:	0004      	movs	r4, r0
 8005ef8:	0008      	movs	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fc f887 	bl	800200e <_isatty>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d103      	bne.n	8005f0c <_isatty_r+0x1c>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d000      	beq.n	8005f0c <_isatty_r+0x1c>
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	20000624 	.word	0x20000624

08005f14 <_lseek_r>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	0004      	movs	r4, r0
 8005f18:	0008      	movs	r0, r1
 8005f1a:	0011      	movs	r1, r2
 8005f1c:	001a      	movs	r2, r3
 8005f1e:	2300      	movs	r3, #0
 8005f20:	4d05      	ldr	r5, [pc, #20]	; (8005f38 <_lseek_r+0x24>)
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	f7fc f87c 	bl	8002020 <_lseek>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d103      	bne.n	8005f34 <_lseek_r+0x20>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d000      	beq.n	8005f34 <_lseek_r+0x20>
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	20000624 	.word	0x20000624

08005f3c <_read_r>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	0004      	movs	r4, r0
 8005f40:	0008      	movs	r0, r1
 8005f42:	0011      	movs	r1, r2
 8005f44:	001a      	movs	r2, r3
 8005f46:	2300      	movs	r3, #0
 8005f48:	4d05      	ldr	r5, [pc, #20]	; (8005f60 <_read_r+0x24>)
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	f7fc f80e 	bl	8001f6c <_read>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d103      	bne.n	8005f5c <_read_r+0x20>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d000      	beq.n	8005f5c <_read_r+0x20>
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	bd70      	pop	{r4, r5, r6, pc}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	20000624 	.word	0x20000624

08005f64 <_init>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr

08005f70 <_fini>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr
