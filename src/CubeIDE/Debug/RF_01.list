
RF_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006784  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ac8  08006ac8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ac8  08006ac8  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ac8  08006ac8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  2000017c  08006c4c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  08006c4c  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013284  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a95  00000000  00000000  00033428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00036ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001610c  00000000  00000000  00039338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca1b  00000000  00000000  0004f444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b97f  00000000  00000000  0006be5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d77de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004850  00000000  00000000  000d7830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800682c 	.word	0x0800682c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	0800682c 	.word	0x0800682c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <errorStateHandler>:
 * 
 * @param stateData 
 * @param event 
 */
void errorStateHandler(void *stateData, struct event *event )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
   puts( "ENTERED ERROR STATE!" );
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <errorStateHandler+0x1c>)
 800022c:	0018      	movs	r0, r3
 800022e:	f005 ff07 	bl	8006040 <puts>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	b002      	add	sp, #8
 8000238:	bd80      	pop	{r7, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	08006844 	.word	0x08006844

08000240 <rfRecvStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b0a5      	sub	sp, #148	; 0x94
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
    uint8_t user_rxBuffer[RF_PACKET_SIZE] = { 0 };
 800024c:	2410      	movs	r4, #16
 800024e:	193b      	adds	r3, r7, r4
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	3304      	adds	r3, #4
 8000256:	227c      	movs	r2, #124	; 0x7c
 8000258:	2100      	movs	r1, #0
 800025a:	0018      	movs	r0, r3
 800025c:	f005 fd93 	bl	8005d86 <memset>
    memcpy(user_rxBuffer, g_rxBuffer, g_rxBuffer[0]);
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <rfRecvStateAction+0x58>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	001a      	movs	r2, r3
 8000266:	490c      	ldr	r1, [pc, #48]	; (8000298 <rfRecvStateAction+0x58>)
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	f005 fd82 	bl	8005d74 <memcpy>
    uartSendData(BSP_TTL_CHANNEL1, user_rxBuffer, user_rxBuffer[0]);
 8000270:	193b      	adds	r3, r7, r4
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b29a      	uxth	r2, r3
 8000276:	193b      	adds	r3, r7, r4
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f001 fcea 	bl	8001c54 <uartSendData>
    
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 8000280:	2301      	movs	r3, #1
 8000282:	425a      	negs	r2, r3
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <rfRecvStateAction+0x58>)
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	0018      	movs	r0, r3
 800028a:	f001 f97f 	bl	800158c <RF_StartRx>
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b025      	add	sp, #148	; 0x94
 8000294:	bd90      	pop	{r4, r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	2000029c 	.word	0x2000029c

0800029c <rfRecvEnableRecv>:
 * @param event 
 * @param newStateData 
 */
void rfRecvEnableRecv( void *oldStateData, struct event *event,
      void *newStateData )
{   
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80002a8:	2301      	movs	r3, #1
 80002aa:	425a      	negs	r2, r3
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <rfRecvEnableRecv+0x24>)
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 f96b 	bl	800158c <RF_StartRx>
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	2000029c 	.word	0x2000029c

080002c4 <rfRecvStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateEnter( void *stateData, struct event *event )
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80002ce:	2301      	movs	r3, #1
 80002d0:	425a      	negs	r2, r3
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <rfRecvStateEnter+0x24>)
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 f958 	bl	800158c <RF_StartRx>
    rfTimerEnable();
 80002dc:	f001 fbca 	bl	8001a74 <rfTimerEnable>
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b002      	add	sp, #8
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000029c 	.word	0x2000029c

080002ec <rfRecvStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfRecvStateExit( void *stateData, struct event *event )
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
    rfTimerDisable();
 80002f6:	f001 fbc9 	bl	8001a8c <rfTimerDisable>
}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b002      	add	sp, #8
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <rfRecvDefaultStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfRecvDefaultStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
    RF_Process();
 8000310:	f001 f988 	bl	8001624 <RF_Process>
    mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 8000314:	2110      	movs	r1, #16
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2202      	movs	r2, #2
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	187a      	adds	r2, r7, r1
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <rfRecvDefaultStateAction+0x34>)
 8000326:	0011      	movs	r1, r2
 8000328:	0018      	movs	r0, r3
 800032a:	f005 fb6c 	bl	8005a06 <mq_push>
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b006      	add	sp, #24
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	20000328 	.word	0x20000328

0800033c <rfSendStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]

}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}

08000350 <rfUartGetMessage>:
 * @param event 
 * @param newStateData 
 */
void rfUartGetMessage( void *oldStateData, struct event *event,
      void *newStateData )
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
    bufferSize = uartGetData(BSP_TTL_CHANNEL1, txBuffer + 1, 256);
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <rfUartGetMessage+0x70>)
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	0052      	lsls	r2, r2, #1
 8000362:	0019      	movs	r1, r3
 8000364:	2000      	movs	r0, #0
 8000366:	f001 fcd3 	bl	8001d10 <uartGetData>
 800036a:	0002      	movs	r2, r0
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <rfUartGetMessage+0x74>)
 800036e:	601a      	str	r2, [r3, #0]
	if (bufferSize)
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <rfUartGetMessage+0x74>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d01f      	beq.n	80003b8 <rfUartGetMessage+0x68>
        // uartSendData(BSP_TTL_CHANNEL1, txBuffer, bufferSize);
        // HAL_Delay_nMs(1000);

		/* reset the value */
		// bufferSize = 0;
        txBuffer[0] = bufferSize + 1;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <rfUartGetMessage+0x74>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <rfUartGetMessage+0x78>)
 8000384:	701a      	strb	r2, [r3, #0]
        uartResetData(BSP_TTL_CHANNEL1);
 8000386:	2000      	movs	r0, #0
 8000388:	f001 fcf0 	bl	8001d6c <uartResetData>
        RF_StartTx(txBuffer,  txBuffer[0] , INFINITE);
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <rfUartGetMessage+0x78>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	b299      	uxth	r1, r3
 8000392:	2301      	movs	r3, #1
 8000394:	425a      	negs	r2, r3
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <rfUartGetMessage+0x78>)
 8000398:	0018      	movs	r0, r3
 800039a:	f001 f921 	bl	80015e0 <RF_StartTx>
		mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 800039e:	2110      	movs	r1, #16
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2202      	movs	r2, #2
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	187a      	adds	r2, r7, r1
 80003ae:	4b07      	ldr	r3, [pc, #28]	; (80003cc <rfUartGetMessage+0x7c>)
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f005 fb27 	bl	8005a06 <mq_push>
	}
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b006      	add	sp, #24
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000199 	.word	0x20000199
 80003c4:	20000298 	.word	0x20000298
 80003c8:	20000198 	.word	0x20000198
 80003cc:	20000328 	.word	0x20000328

080003d0 <rfSendStateEnter>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateEnter( void *stateData, struct event *event )
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
	
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b002      	add	sp, #8
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <rfSendStateExit>:
 * 
 * @param stateData 
 * @param event 
 */
void rfSendStateExit( void *stateData, struct event *event )
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
   bufferSize = 0;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <rfSendStateExit+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
   mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 80003f4:	2108      	movs	r1, #8
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2202      	movs	r2, #2
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	187a      	adds	r2, r7, r1
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <rfSendStateExit+0x48>)
 8000406:	0011      	movs	r1, r2
 8000408:	0018      	movs	r0, r3
 800040a:	f005 fafc 	bl	8005a06 <mq_push>
   RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 800040e:	2301      	movs	r3, #1
 8000410:	425a      	negs	r2, r3
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <rfSendStateExit+0x4c>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0018      	movs	r0, r3
 8000418:	f001 f8b8 	bl	800158c <RF_StartRx>
   rfTimerEnable();
 800041c:	f001 fb2a 	bl	8001a74 <rfTimerEnable>
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b004      	add	sp, #16
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000298 	.word	0x20000298
 800042c:	20000328 	.word	0x20000328
 8000430:	2000029c 	.word	0x2000029c

08000434 <rfSendDefaultStateAction>:
 * @param event 
 * @param newStateData 
 */
void rfSendDefaultStateAction( void *oldStateData, struct event *event,
      void *newStateData )
{   
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
    RF_Process();
 8000440:	f001 f8f0 	bl	8001624 <RF_Process>
    mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 8000444:	2110      	movs	r1, #16
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2202      	movs	r2, #2
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	187a      	adds	r2, r7, r1
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <rfSendDefaultStateAction+0x34>)
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f005 fad4 	bl	8005a06 <mq_push>
}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b006      	add	sp, #24
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	20000328 	.word	0x20000328

0800046c <stateActuator>:
 * 
 * @param None
 * @retval None
 */
void stateActuator(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
    struct msg *msg;
    stateM_init(&m, &rfRecvState, &errorState);
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <stateActuator+0x54>)
 8000474:	4913      	ldr	r1, [pc, #76]	; (80004c4 <stateActuator+0x58>)
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <stateActuator+0x5c>)
 8000478:	0018      	movs	r0, r3
 800047a:	f005 fb30 	bl	8005ade <stateM_init>
    mq_init(&mq);
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <stateActuator+0x60>)
 8000480:	0018      	movs	r0, r3
 8000482:	f005 fa86 	bl	8005992 <mq_init>
    
    /* triggle state machine */
    mq_push(&mq, &(struct msg){rfProcessEvent, NULL});
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2202      	movs	r2, #2
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	1d3a      	adds	r2, r7, #4
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <stateActuator+0x60>)
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f005 fab4 	bl	8005a06 <mq_push>

    while ( 1 )
    {
        if ((msg = mq_pop( &mq )) != NULL)
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <stateActuator+0x60>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f005 faec 	bl	8005a7e <mq_pop>
 80004a6:	0003      	movs	r3, r0
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f6      	beq.n	800049e <stateActuator+0x32>
        {
            stateM_handleEvent(&m, (struct event *)msg);
 80004b0:	68fa      	ldr	r2, [r7, #12]
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <stateActuator+0x5c>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f005 fb28 	bl	8005b0c <stateM_handleEvent>
        if ((msg = mq_pop( &mq )) != NULL)
 80004bc:	e7ef      	b.n	800049e <stateActuator+0x32>
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	200000d8 	.word	0x200000d8
 80004c4:	20000064 	.word	0x20000064
 80004c8:	2000031c 	.word	0x2000031c
 80004cc:	20000328 	.word	0x20000328

080004d0 <Cmt2300_SoftReset>:
/*! ********************************************************
* @name    Cmt2300_SoftReset
* @desc    Soft reset.
* *********************************************************/
void Cmt2300_SoftReset(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(0x7F, 0xFF);
 80004d4:	21ff      	movs	r1, #255	; 0xff
 80004d6:	207f      	movs	r0, #127	; 0x7f
 80004d8:	f000 fd0c 	bl	8000ef4 <Cmt2300_WriteReg>
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <Cmt2300_GetChipStatus>:
*          CMT2300_STA_TX
*          CMT2300_STA_EEPROM
*          CMT2300_STA_CAL
* *********************************************************/
uint8_t Cmt2300_GetChipStatus(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
    return Cmt2300_ReadReg(CMT2300_CUS_MODE_STA) & CMT2300_MASK_CHIP_MODE_STA;
 80004e6:	2061      	movs	r0, #97	; 0x61
 80004e8:	f000 fced 	bl	8000ec6 <Cmt2300_ReadReg>
 80004ec:	0003      	movs	r3, r0
 80004ee:	001a      	movs	r2, r3
 80004f0:	230f      	movs	r3, #15
 80004f2:	4013      	ands	r3, r2
 80004f4:	b2db      	uxtb	r3, r3
}
 80004f6:	0018      	movs	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <Cmt2300_WaitChipStatus>:
* @desc    Wait the chip status, and 50*200 us as timeout.
* @param   nStatus: the chip status
* @return  true or false
* *********************************************************/
bool Cmt2300_WaitChipStatus(uint8_t nStatus)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_WAIT_CHIP_STATUS
    uint8_t i;
    uint8_t temp;

    for (i = 0; i < 50; i++)
 8000508:	230f      	movs	r3, #15
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	e013      	b.n	800053a <Cmt2300_WaitChipStatus+0x3e>
    {
        //			Cmt2300_DelayUs(200);
        temp = Cmt2300_GetChipStatus();
 8000512:	250e      	movs	r5, #14
 8000514:	197c      	adds	r4, r7, r5
 8000516:	f7ff ffe4 	bl	80004e2 <Cmt2300_GetChipStatus>
 800051a:	0003      	movs	r3, r0
 800051c:	7023      	strb	r3, [r4, #0]
        if (nStatus == temp)
 800051e:	1dfa      	adds	r2, r7, #7
 8000520:	197b      	adds	r3, r7, r5
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	d101      	bne.n	800052e <Cmt2300_WaitChipStatus+0x32>
            return true;
 800052a:	2301      	movs	r3, #1
 800052c:	e00b      	b.n	8000546 <Cmt2300_WaitChipStatus+0x4a>
    for (i = 0; i < 50; i++)
 800052e:	210f      	movs	r1, #15
 8000530:	187b      	adds	r3, r7, r1
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	187b      	adds	r3, r7, r1
 8000536:	3201      	adds	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	230f      	movs	r3, #15
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b31      	cmp	r3, #49	; 0x31
 8000542:	d9e6      	bls.n	8000512 <Cmt2300_WaitChipStatus+0x16>
    }

    return false;
 8000544:	2300      	movs	r3, #0
#else
    return true;
#endif
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bdb0      	pop	{r4, r5, r7, pc}

0800054e <Cmt2300_ConfigPktLenthType>:
//							CMT2300_PKT_TYPE_FIXED
//							CMT2300_PKT_TYPE_VARIABLE

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigPktLenthType(uint8_t PktLenthType)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b084      	sub	sp, #16
 8000552:	af00      	add	r7, sp, #0
 8000554:	0002      	movs	r2, r0
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14) & (~CMT2300_MASK_PKT_TYPE);
 800055a:	2045      	movs	r0, #69	; 0x45
 800055c:	f000 fcb3 	bl	8000ec6 <Cmt2300_ReadReg>
 8000560:	0003      	movs	r3, r0
 8000562:	0019      	movs	r1, r3
 8000564:	200f      	movs	r0, #15
 8000566:	183b      	adds	r3, r7, r0
 8000568:	2201      	movs	r2, #1
 800056a:	4391      	bics	r1, r2
 800056c:	000a      	movs	r2, r1
 800056e:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp | PktLenthType);
 8000570:	183a      	adds	r2, r7, r0
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4313      	orrs	r3, r2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	0019      	movs	r1, r3
 800057e:	2045      	movs	r0, #69	; 0x45
 8000580:	f000 fcb8 	bl	8000ef4 <Cmt2300_WriteReg>
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}

0800058c <Cmt2300_GoSleep>:
* @name    Cmt2300_GoSleep
* @desc    Entry SLEEP mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoSleep(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_SLEEP);
 8000590:	2110      	movs	r1, #16
 8000592:	2060      	movs	r0, #96	; 0x60
 8000594:	f000 fcae 	bl	8000ef4 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_SLEEP);
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff ffaf 	bl	80004fc <Cmt2300_WaitChipStatus>
 800059e:	0003      	movs	r3, r0
}
 80005a0:	0018      	movs	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <Cmt2300_GoStby>:
* @name    Cmt2300_GoStby
* @desc    Entry Sleep mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoStby(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_STBY);
 80005aa:	2102      	movs	r1, #2
 80005ac:	2060      	movs	r0, #96	; 0x60
 80005ae:	f000 fca1 	bl	8000ef4 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_STBY);
 80005b2:	2002      	movs	r0, #2
 80005b4:	f7ff ffa2 	bl	80004fc <Cmt2300_WaitChipStatus>
 80005b8:	0003      	movs	r3, r0
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Cmt2300_GoTx>:
* @name    Cmt2300_GoTx
* @desc    Entry Tx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoTx(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_TX);
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	2060      	movs	r0, #96	; 0x60
 80005c8:	f000 fc94 	bl	8000ef4 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_TX);
 80005cc:	2006      	movs	r0, #6
 80005ce:	f7ff ff95 	bl	80004fc <Cmt2300_WaitChipStatus>
 80005d2:	0003      	movs	r3, r0
}
 80005d4:	0018      	movs	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <Cmt2300_GoRx>:
* @name    Cmt2300_GoRx
* @desc    Entry Rx mode.
* @return  true or false
* *********************************************************/
bool Cmt2300_GoRx(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
    Cmt2300_WriteReg(CMT2300_CUS_MODE_CTL, CMT2300_GO_RX);
 80005de:	2108      	movs	r1, #8
 80005e0:	2060      	movs	r0, #96	; 0x60
 80005e2:	f000 fc87 	bl	8000ef4 <Cmt2300_WriteReg>
    return Cmt2300_WaitChipStatus(CMT2300_STA_RX);
 80005e6:	2005      	movs	r0, #5
 80005e8:	f7ff ff88 	bl	80004fc <Cmt2300_WaitChipStatus>
 80005ec:	0003      	movs	r3, r0
}
 80005ee:	0018      	movs	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <Cmt2300_ConfigGpio>:
*            CMT2300_GPIO4_SEL_INT1
*            CMT2300_GPIO4_SEL_DOUT 
*            CMT2300_GPIO4_SEL_DCLK
* *********************************************************/
void Cmt2300_ConfigGpio(uint8_t nGpioSel)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	0002      	movs	r2, r0
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_IO_SEL, nGpioSel);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	0019      	movs	r1, r3
 8000606:	2065      	movs	r0, #101	; 0x65
 8000608:	f000 fc74 	bl	8000ef4 <Cmt2300_WriteReg>
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b002      	add	sp, #8
 8000612:	bd80      	pop	{r7, pc}

08000614 <Cmt2300_ConfigInterrupt>:
*            CMT2300_INT_SEL_LED
*            CMT2300_INT_SEL_TRX_ACTIVE
*            CMT2300_INT_SEL_PKT_DONE
* *********************************************************/
void Cmt2300_ConfigInterrupt(uint8_t nInt1Sel, uint8_t nInt2Sel)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	1c0a      	adds	r2, r1, #0
 8000624:	701a      	strb	r2, [r3, #0]
    nInt1Sel &= CMT2300_MASK_INT1_SEL;
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	1dfa      	adds	r2, r7, #7
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	211f      	movs	r1, #31
 800062e:	400a      	ands	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
    nInt1Sel |= (~CMT2300_MASK_INT1_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000632:	2066      	movs	r0, #102	; 0x66
 8000634:	f000 fc47 	bl	8000ec6 <Cmt2300_ReadReg>
 8000638:	0003      	movs	r3, r0
 800063a:	001a      	movs	r2, r3
 800063c:	231f      	movs	r3, #31
 800063e:	439a      	bics	r2, r3
 8000640:	0013      	movs	r3, r2
 8000642:	b25a      	sxtb	r2, r3
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b25a      	sxtb	r2, r3
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, nInt1Sel);
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	0019      	movs	r1, r3
 8000658:	2066      	movs	r0, #102	; 0x66
 800065a:	f000 fc4b 	bl	8000ef4 <Cmt2300_WriteReg>

    nInt2Sel &= CMT2300_MASK_INT2_SEL;
 800065e:	1dbb      	adds	r3, r7, #6
 8000660:	1dba      	adds	r2, r7, #6
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	211f      	movs	r1, #31
 8000666:	400a      	ands	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
    nInt2Sel |= (~CMT2300_MASK_INT2_SEL) & Cmt2300_ReadReg(CMT2300_CUS_INT2_CTL);
 800066a:	2067      	movs	r0, #103	; 0x67
 800066c:	f000 fc2b 	bl	8000ec6 <Cmt2300_ReadReg>
 8000670:	0003      	movs	r3, r0
 8000672:	001a      	movs	r2, r3
 8000674:	231f      	movs	r3, #31
 8000676:	439a      	bics	r2, r3
 8000678:	0013      	movs	r3, r2
 800067a:	b25a      	sxtb	r2, r3
 800067c:	1dbb      	adds	r3, r7, #6
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b25b      	sxtb	r3, r3
 8000682:	4313      	orrs	r3, r2
 8000684:	b25a      	sxtb	r2, r3
 8000686:	1dbb      	adds	r3, r7, #6
 8000688:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT2_CTL, nInt2Sel);
 800068a:	1dbb      	adds	r3, r7, #6
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	0019      	movs	r1, r3
 8000690:	2067      	movs	r0, #103	; 0x67
 8000692:	f000 fc2f 	bl	8000ef4 <Cmt2300_WriteReg>
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}

0800069e <Cmt2300_EnableAntennaSwitch>:
*               GPIO1: RX_ACTIVE, GPIO2: TX_ACTIVE
*            1: RF_SWT1_EN=0, RF_SWT2_EN=1
*               GPIO1: RX_ACTIVE, GPIO2: ~RX_ACTIVE
* *********************************************************/
void Cmt2300_EnableAntennaSwitch(uint8_t nMode)
{
 800069e:	b5b0      	push	{r4, r5, r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	0002      	movs	r2, r0
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 80006aa:	250f      	movs	r5, #15
 80006ac:	197c      	adds	r4, r7, r5
 80006ae:	2066      	movs	r0, #102	; 0x66
 80006b0:	f000 fc09 	bl	8000ec6 <Cmt2300_ReadReg>
 80006b4:	0003      	movs	r3, r0
 80006b6:	7023      	strb	r3, [r4, #0]

    if (0 == nMode)
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10d      	bne.n	80006dc <Cmt2300_EnableAntennaSwitch+0x3e>
    {
        tmp |= CMT2300_MASK_RF_SWT1_EN;
 80006c0:	197b      	adds	r3, r7, r5
 80006c2:	197a      	adds	r2, r7, r5
 80006c4:	7812      	ldrb	r2, [r2, #0]
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	4249      	negs	r1, r1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_RF_SWT2_EN;
 80006ce:	197b      	adds	r3, r7, r5
 80006d0:	197a      	adds	r2, r7, r5
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	438a      	bics	r2, r1
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e010      	b.n	80006fe <Cmt2300_EnableAntennaSwitch+0x60>
    }
    else if (1 == nMode)
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d10c      	bne.n	80006fe <Cmt2300_EnableAntennaSwitch+0x60>
    {
        tmp &= ~CMT2300_MASK_RF_SWT1_EN;
 80006e4:	200f      	movs	r0, #15
 80006e6:	183b      	adds	r3, r7, r0
 80006e8:	183a      	adds	r2, r7, r0
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	217f      	movs	r1, #127	; 0x7f
 80006ee:	400a      	ands	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_RF_SWT2_EN;
 80006f2:	183b      	adds	r3, r7, r0
 80006f4:	183a      	adds	r2, r7, r0
 80006f6:	7812      	ldrb	r2, [r2, #0]
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	430a      	orrs	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT1_CTL, tmp);
 80006fe:	230f      	movs	r3, #15
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	0019      	movs	r1, r3
 8000706:	2066      	movs	r0, #102	; 0x66
 8000708:	f000 fbf4 	bl	8000ef4 <Cmt2300_WriteReg>
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bdb0      	pop	{r4, r5, r7, pc}

08000714 <Cmt2300_EnableInterrupt>:
*            CMT2300_MASK_NODE_OK_EN  |
*            CMT2300_MASK_CRC_OK_EN   |
*            CMT2300_MASK_PKT_DONE_EN
* *********************************************************/
void Cmt2300_EnableInterrupt(uint8_t nEnable)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_INT_EN, nEnable);
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	0019      	movs	r1, r3
 8000726:	2068      	movs	r0, #104	; 0x68
 8000728:	f000 fbe4 	bl	8000ef4 <Cmt2300_WriteReg>
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}

08000734 <Cmt2300_EnableFifoMerge>:
* @desc    Enable FIFO merge.
* @param   bEnable(true): use a single 64-byte FIFO for either Tx or Rx
*          bEnable(false): use a 32-byte FIFO for Tx and another 32-byte FIFO for Rx(default)
* *********************************************************/
void Cmt2300_EnableFifoMerge(bool bEnable)
{
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	0002      	movs	r2, r0
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 8000740:	250f      	movs	r5, #15
 8000742:	197c      	adds	r4, r7, r5
 8000744:	2069      	movs	r0, #105	; 0x69
 8000746:	f000 fbbe 	bl	8000ec6 <Cmt2300_ReadReg>
 800074a:	0003      	movs	r3, r0
 800074c:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d006      	beq.n	8000764 <Cmt2300_EnableFifoMerge+0x30>
        tmp |= CMT2300_MASK_FIFO_MERGE_EN;
 8000756:	197b      	adds	r3, r7, r5
 8000758:	197a      	adds	r2, r7, r5
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	2102      	movs	r1, #2
 800075e:	430a      	orrs	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	e006      	b.n	8000772 <Cmt2300_EnableFifoMerge+0x3e>
    else
        tmp &= ~CMT2300_MASK_FIFO_MERGE_EN;
 8000764:	220f      	movs	r2, #15
 8000766:	18bb      	adds	r3, r7, r2
 8000768:	18ba      	adds	r2, r7, r2
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	2102      	movs	r1, #2
 800076e:	438a      	bics	r2, r1
 8000770:	701a      	strb	r2, [r3, #0]

    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 8000772:	230f      	movs	r3, #15
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	0019      	movs	r1, r3
 800077a:	2069      	movs	r0, #105	; 0x69
 800077c:	f000 fbba 	bl	8000ef4 <Cmt2300_WriteReg>
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b004      	add	sp, #16
 8000786:	bdb0      	pop	{r4, r5, r7, pc}

08000788 <Cmt2300_EnableReadFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableReadFifo
* @desc    Enable SPI to read the FIFO.
* *********************************************************/
void Cmt2300_EnableReadFifo(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 800078e:	1dfc      	adds	r4, r7, #7
 8000790:	2069      	movs	r0, #105	; 0x69
 8000792:	f000 fb98 	bl	8000ec6 <Cmt2300_ReadReg>
 8000796:	0003      	movs	r3, r0
 8000798:	7023      	strb	r3, [r4, #0]
    tmp &= ~CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	1dfa      	adds	r2, r7, #7
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	2101      	movs	r1, #1
 80007a2:	438a      	bics	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_FIFO_RX_TX_SEL;
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	1dfa      	adds	r2, r7, #7
 80007aa:	7812      	ldrb	r2, [r2, #0]
 80007ac:	2104      	movs	r1, #4
 80007ae:	438a      	bics	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	0019      	movs	r1, r3
 80007b8:	2069      	movs	r0, #105	; 0x69
 80007ba:	f000 fb9b 	bl	8000ef4 <Cmt2300_WriteReg>
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b003      	add	sp, #12
 80007c4:	bd90      	pop	{r4, r7, pc}

080007c6 <Cmt2300_EnableWriteFifo>:
/*! ********************************************************
* @name    Cmt2300_EnableWriteFifo
* @desc    Enable SPI to write the FIFO.
* *********************************************************/
void Cmt2300_EnableWriteFifo(void)
{
 80007c6:	b590      	push	{r4, r7, lr}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CTL);
 80007cc:	1dfc      	adds	r4, r7, #7
 80007ce:	2069      	movs	r0, #105	; 0x69
 80007d0:	f000 fb79 	bl	8000ec6 <Cmt2300_ReadReg>
 80007d4:	0003      	movs	r3, r0
 80007d6:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_SPI_FIFO_RD_WR_SEL;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	1dfa      	adds	r2, r7, #7
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	430a      	orrs	r2, r1
 80007e2:	701a      	strb	r2, [r3, #0]
    tmp |= CMT2300_MASK_FIFO_RX_TX_SEL;
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	2104      	movs	r1, #4
 80007ec:	430a      	orrs	r2, r1
 80007ee:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CTL, tmp);
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	0019      	movs	r1, r3
 80007f6:	2069      	movs	r0, #105	; 0x69
 80007f8:	f000 fb7c 	bl	8000ef4 <Cmt2300_WriteReg>
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b003      	add	sp, #12
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <Cmt2300_ClearFifo>:
*            CMT2300_MASK_TX_FIFO_FULL_FLG |
*            CMT2300_MASK_TX_FIFO_NMTY_FLG |
*            CMT2300_MASK_TX_FIFO_TH_FLG
* *********************************************************/
uint8_t Cmt2300_ClearFifo(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_FIFO_CLR);
 800080a:	1dfc      	adds	r4, r7, #7
 800080c:	206c      	movs	r0, #108	; 0x6c
 800080e:	f000 fb5a 	bl	8000ec6 <Cmt2300_ReadReg>
 8000812:	0003      	movs	r3, r0
 8000814:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_FIFO_CLR, CMT2300_MASK_FIFO_CLR_RX | CMT2300_MASK_FIFO_CLR_TX);
 8000816:	2103      	movs	r1, #3
 8000818:	206c      	movs	r0, #108	; 0x6c
 800081a:	f000 fb6b 	bl	8000ef4 <Cmt2300_WriteReg>
    return tmp;
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
}
 8000822:	0018      	movs	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	b003      	add	sp, #12
 8000828:	bd90      	pop	{r4, r7, pc}

0800082a <Cmt2300_ClearInterruptFlags>:
*            CMT2300_MASK_NODE_OK_FLG  |
*            CMT2300_MASK_CRC_OK_FLG   |
*            CMT2300_MASK_PKT_OK_FLG
* *********************************************************/
uint8_t Cmt2300_ClearInterruptFlags(void)
{
 800082a:	b590      	push	{r4, r7, lr}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
    uint8_t nFlag1, nFlag2;
    uint8_t nClr1 = 0;
 8000830:	1d7b      	adds	r3, r7, #5
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
    uint8_t nClr2 = 0;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
    uint8_t nRet = 0;
 800083c:	1cfb      	adds	r3, r7, #3
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
    uint8_t nIntPolar;

    nIntPolar = Cmt2300_ReadReg(CMT2300_CUS_INT1_CTL);
 8000842:	1cbc      	adds	r4, r7, #2
 8000844:	2066      	movs	r0, #102	; 0x66
 8000846:	f000 fb3e 	bl	8000ec6 <Cmt2300_ReadReg>
 800084a:	0003      	movs	r3, r0
 800084c:	7023      	strb	r3, [r4, #0]
    nIntPolar = (nIntPolar & CMT2300_MASK_INT_POLAR) ? 1 : 0;
 800084e:	1cbb      	adds	r3, r7, #2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	115b      	asrs	r3, r3, #5
 8000854:	b2da      	uxtb	r2, r3
 8000856:	1cbb      	adds	r3, r7, #2
 8000858:	2101      	movs	r1, #1
 800085a:	400a      	ands	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]

    nFlag1 = Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG);
 800085e:	1dfc      	adds	r4, r7, #7
 8000860:	206d      	movs	r0, #109	; 0x6d
 8000862:	f000 fb30 	bl	8000ec6 <Cmt2300_ReadReg>
 8000866:	0003      	movs	r3, r0
 8000868:	7023      	strb	r3, [r4, #0]
    nFlag2 = Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1);
 800086a:	1dbc      	adds	r4, r7, #6
 800086c:	206a      	movs	r0, #106	; 0x6a
 800086e:	f000 fb2a 	bl	8000ec6 <Cmt2300_ReadReg>
 8000872:	0003      	movs	r3, r0
 8000874:	7023      	strb	r3, [r4, #0]

    if (nIntPolar)
 8000876:	1cbb      	adds	r3, r7, #2
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d009      	beq.n	8000892 <Cmt2300_ClearInterruptFlags+0x68>
    {
        /* Interrupt flag active-low */
        nFlag1 = ~nFlag1;
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	1dfa      	adds	r2, r7, #7
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	43d2      	mvns	r2, r2
 8000886:	701a      	strb	r2, [r3, #0]
        nFlag2 = ~nFlag2;
 8000888:	1dbb      	adds	r3, r7, #6
 800088a:	1dba      	adds	r2, r7, #6
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	43d2      	mvns	r2, r2
 8000890:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_LBD_FLG & nFlag1)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	da05      	bge.n	80008a8 <Cmt2300_ClearInterruptFlags+0x7e>
    {
        nClr2 |= CMT2300_MASK_LBD_CLR; /* Clear LBD_FLG */
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	2120      	movs	r1, #32
 80008a4:	430a      	orrs	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_COL_ERR_FLG & nFlag1)
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2240      	movs	r2, #64	; 0x40
 80008ae:	4013      	ands	r3, r2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d005      	beq.n	80008c2 <Cmt2300_ClearInterruptFlags+0x98>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear COL_ERR_FLG by PKT_DONE_CLR */
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	1d3a      	adds	r2, r7, #4
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_ERR_FLG & nFlag1)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2220      	movs	r2, #32
 80008c8:	4013      	ands	r3, r2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d005      	beq.n	80008dc <Cmt2300_ClearInterruptFlags+0xb2>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_ERR_FLG by PKT_DONE_CLR */
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	1d3a      	adds	r2, r7, #4
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	2101      	movs	r1, #1
 80008d8:	430a      	orrs	r2, r1
 80008da:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PREAM_OK_FLG & nFlag1)
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2210      	movs	r2, #16
 80008e2:	4013      	ands	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00b      	beq.n	8000902 <Cmt2300_ClearInterruptFlags+0xd8>
    {
        nClr2 |= CMT2300_MASK_PREAM_OK_CLR; /* Clear PREAM_OK_FLG */
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	1d3a      	adds	r2, r7, #4
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	2110      	movs	r1, #16
 80008f2:	430a      	orrs	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PREAM_OK_FLG;  /* Return PREAM_OK_FLG */
 80008f6:	1cfb      	adds	r3, r7, #3
 80008f8:	1cfa      	adds	r2, r7, #3
 80008fa:	7812      	ldrb	r2, [r2, #0]
 80008fc:	2110      	movs	r1, #16
 80008fe:	430a      	orrs	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SYNC_OK_FLG & nFlag1)
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2208      	movs	r2, #8
 8000908:	4013      	ands	r3, r2
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00b      	beq.n	8000928 <Cmt2300_ClearInterruptFlags+0xfe>
    {
        nClr2 |= CMT2300_MASK_SYNC_OK_CLR; /* Clear SYNC_OK_FLG */
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	1d3a      	adds	r2, r7, #4
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	2108      	movs	r1, #8
 8000918:	430a      	orrs	r2, r1
 800091a:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SYNC_OK_FLG;  /* Return SYNC_OK_FLG */
 800091c:	1cfb      	adds	r3, r7, #3
 800091e:	1cfa      	adds	r2, r7, #3
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	2108      	movs	r1, #8
 8000924:	430a      	orrs	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_NODE_OK_FLG & nFlag1)
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2204      	movs	r2, #4
 800092e:	4013      	ands	r3, r2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00b      	beq.n	800094e <Cmt2300_ClearInterruptFlags+0x124>
    {
        nClr2 |= CMT2300_MASK_NODE_OK_CLR; /* Clear NODE_OK_FLG */
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	1d3a      	adds	r2, r7, #4
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	2104      	movs	r1, #4
 800093e:	430a      	orrs	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_NODE_OK_FLG;  /* Return NODE_OK_FLG */
 8000942:	1cfb      	adds	r3, r7, #3
 8000944:	1cfa      	adds	r2, r7, #3
 8000946:	7812      	ldrb	r2, [r2, #0]
 8000948:	2104      	movs	r1, #4
 800094a:	430a      	orrs	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_CRC_OK_FLG & nFlag1)
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2202      	movs	r2, #2
 8000954:	4013      	ands	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00b      	beq.n	8000974 <Cmt2300_ClearInterruptFlags+0x14a>
    {
        nClr2 |= CMT2300_MASK_CRC_OK_CLR; /* Clear CRC_OK_FLG */
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	1d3a      	adds	r2, r7, #4
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	2102      	movs	r1, #2
 8000964:	430a      	orrs	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_CRC_OK_FLG;  /* Return CRC_OK_FLG */
 8000968:	1cfb      	adds	r3, r7, #3
 800096a:	1cfa      	adds	r2, r7, #3
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	2102      	movs	r1, #2
 8000970:	430a      	orrs	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_PKT_OK_FLG & nFlag1)
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	4013      	ands	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00b      	beq.n	800099a <Cmt2300_ClearInterruptFlags+0x170>
    {
        nClr2 |= CMT2300_MASK_PKT_DONE_CLR; /* Clear PKT_OK_FLG */
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	1d3a      	adds	r2, r7, #4
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_PKT_OK_FLG;    /* Return PKT_OK_FLG */
 800098e:	1cfb      	adds	r3, r7, #3
 8000990:	1cfa      	adds	r2, r7, #3
 8000992:	7812      	ldrb	r2, [r2, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_SL_TMO_FLG & nFlag2)
 800099a:	1dbb      	adds	r3, r7, #6
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2220      	movs	r2, #32
 80009a0:	4013      	ands	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00c      	beq.n	80009c2 <Cmt2300_ClearInterruptFlags+0x198>
    {
        nClr1 |= CMT2300_MASK_SL_TMO_CLR; /* Clear SL_TMO_FLG */
 80009a8:	1d7b      	adds	r3, r7, #5
 80009aa:	1d7a      	adds	r2, r7, #5
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	2102      	movs	r1, #2
 80009b0:	430a      	orrs	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_SL_TMO_EN;   /* Return SL_TMO_FLG by SL_TMO_EN */
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	1cfa      	adds	r2, r7, #3
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	4249      	negs	r1, r1
 80009be:	430a      	orrs	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_RX_TMO_FLG & nFlag2)
 80009c2:	1dbb      	adds	r3, r7, #6
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2210      	movs	r2, #16
 80009c8:	4013      	ands	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00b      	beq.n	80009e8 <Cmt2300_ClearInterruptFlags+0x1be>
    {
        nClr1 |= CMT2300_MASK_RX_TMO_CLR; /* Clear RX_TMO_FLG */
 80009d0:	1d7b      	adds	r3, r7, #5
 80009d2:	1d7a      	adds	r2, r7, #5
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	2101      	movs	r1, #1
 80009d8:	430a      	orrs	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_RX_TMO_EN;   /* Return RX_TMO_FLG by RX_TMO_EN */
 80009dc:	1cfb      	adds	r3, r7, #3
 80009de:	1cfa      	adds	r2, r7, #3
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	430a      	orrs	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
    }

    if (CMT2300_MASK_TX_DONE_FLG & nFlag2)
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2208      	movs	r2, #8
 80009ee:	4013      	ands	r3, r2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00b      	beq.n	8000a0e <Cmt2300_ClearInterruptFlags+0x1e4>
    {
        nClr1 |= CMT2300_MASK_TX_DONE_CLR; /* Clear TX_DONE_FLG */
 80009f6:	1d7b      	adds	r3, r7, #5
 80009f8:	1d7a      	adds	r2, r7, #5
 80009fa:	7812      	ldrb	r2, [r2, #0]
 80009fc:	2104      	movs	r1, #4
 80009fe:	430a      	orrs	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
        nRet |= CMT2300_MASK_TX_DONE_EN;   /* Return TX_DONE_FLG by TX_DONE_EN */
 8000a02:	1cfb      	adds	r3, r7, #3
 8000a04:	1cfa      	adds	r2, r7, #3
 8000a06:	7812      	ldrb	r2, [r2, #0]
 8000a08:	2120      	movs	r1, #32
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR1, nClr1);
 8000a0e:	1d7b      	adds	r3, r7, #5
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0019      	movs	r1, r3
 8000a14:	206a      	movs	r0, #106	; 0x6a
 8000a16:	f000 fa6d 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(CMT2300_CUS_INT_CLR2, nClr2);
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	0019      	movs	r1, r3
 8000a20:	206b      	movs	r0, #107	; 0x6b
 8000a22:	f000 fa67 	bl	8000ef4 <Cmt2300_WriteReg>

    if (nIntPolar)
 8000a26:	1cbb      	adds	r3, r7, #2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d004      	beq.n	8000a38 <Cmt2300_ClearInterruptFlags+0x20e>
    {
        /* Interrupt flag active-low */
        nRet = ~nRet;
 8000a2e:	1cfb      	adds	r3, r7, #3
 8000a30:	1cfa      	adds	r2, r7, #3
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	701a      	strb	r2, [r3, #0]
    }

    return nRet;
 8000a38:	1cfb      	adds	r3, r7, #3
 8000a3a:	781b      	ldrb	r3, [r3, #0]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b003      	add	sp, #12
 8000a42:	bd90      	pop	{r4, r7, pc}

08000a44 <Cmt2300_ConfigDataRate>:
            =6 100k
            =7 200k

* *********************************************************/
void Cmt2300_ConfigDataRate(uint8_t DataRate)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	701a      	strb	r2, [r3, #0]
 
    uint8_t tmp = Cmt2300_ReadReg(0x04) & 0x0f;
 8000a50:	2004      	movs	r0, #4
 8000a52:	f000 fa38 	bl	8000ec6 <Cmt2300_ReadReg>
 8000a56:	0003      	movs	r3, r0
 8000a58:	0019      	movs	r1, r3
 8000a5a:	240f      	movs	r4, #15
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	220f      	movs	r2, #15
 8000a60:	400a      	ands	r2, r1
 8000a62:	701a      	strb	r2, [r3, #0]

    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRate_SetTab[DataRate], CMT2300_DATA_RATE_BANK_SIZE);
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	0013      	movs	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	189b      	adds	r3, r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4a4d      	ldr	r2, [pc, #308]	; (8000ba8 <Cmt2300_ConfigDataRate+0x164>)
 8000a72:	189b      	adds	r3, r3, r2
 8000a74:	2218      	movs	r2, #24
 8000a76:	0019      	movs	r1, r3
 8000a78:	2020      	movs	r0, #32
 8000a7a:	f000 f9ec 	bl	8000e56 <Cmt2300_ConfigRegBank>
    Cmt2300_WriteReg(0x04, (g_cmt2300DataRate_SetTab2[DataRate][0] & (~0x0f)) | tmp);
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	494a      	ldr	r1, [pc, #296]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000a84:	0013      	movs	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	189b      	adds	r3, r3, r2
 8000a8a:	5c5b      	ldrb	r3, [r3, r1]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	220f      	movs	r2, #15
 8000a90:	4393      	bics	r3, r2
 8000a92:	b25a      	sxtb	r2, r3
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	2004      	movs	r0, #4
 8000aa4:	f000 fa26 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x55, g_cmt2300DataRate_SetTab2[DataRate][1]);
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	493f      	ldr	r1, [pc, #252]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000aae:	0013      	movs	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	18cb      	adds	r3, r1, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0019      	movs	r1, r3
 8000abc:	2055      	movs	r0, #85	; 0x55
 8000abe:	f000 fa19 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x56, g_cmt2300DataRate_SetTab2[DataRate][2]);
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	4939      	ldr	r1, [pc, #228]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000ac8:	0013      	movs	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	189b      	adds	r3, r3, r2
 8000ace:	18cb      	adds	r3, r1, r3
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	2056      	movs	r0, #86	; 0x56
 8000ad8:	f000 fa0c 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x57, g_cmt2300DataRate_SetTab2[DataRate][3]);
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	4932      	ldr	r1, [pc, #200]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	18cb      	adds	r3, r1, r3
 8000aea:	3303      	adds	r3, #3
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	2057      	movs	r0, #87	; 0x57
 8000af2:	f000 f9ff 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x58, g_cmt2300DataRate_SetTab2[DataRate][4]);
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	492c      	ldr	r1, [pc, #176]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000afc:	0013      	movs	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	18cb      	adds	r3, r1, r3
 8000b04:	3304      	adds	r3, #4
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	0019      	movs	r1, r3
 8000b0a:	2058      	movs	r0, #88	; 0x58
 8000b0c:	f000 f9f2 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x59, g_cmt2300DataRate_SetTab2[DataRate][5]);
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4925      	ldr	r1, [pc, #148]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000b16:	0013      	movs	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	18cb      	adds	r3, r1, r3
 8000b1e:	3305      	adds	r3, #5
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0019      	movs	r1, r3
 8000b24:	2059      	movs	r0, #89	; 0x59
 8000b26:	f000 f9e5 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5a, g_cmt2300DataRate_SetTab2[DataRate][6]);
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	491f      	ldr	r1, [pc, #124]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000b30:	0013      	movs	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	189b      	adds	r3, r3, r2
 8000b36:	18cb      	adds	r3, r1, r3
 8000b38:	3306      	adds	r3, #6
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	205a      	movs	r0, #90	; 0x5a
 8000b40:	f000 f9d8 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5b, g_cmt2300DataRate_SetTab2[DataRate][7]);
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	4918      	ldr	r1, [pc, #96]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	189b      	adds	r3, r3, r2
 8000b50:	18cb      	adds	r3, r1, r3
 8000b52:	3307      	adds	r3, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0019      	movs	r1, r3
 8000b58:	205b      	movs	r0, #91	; 0x5b
 8000b5a:	f000 f9cb 	bl	8000ef4 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & 0x3f;
 8000b5e:	205e      	movs	r0, #94	; 0x5e
 8000b60:	f000 f9b1 	bl	8000ec6 <Cmt2300_ReadReg>
 8000b64:	0003      	movs	r3, r0
 8000b66:	0019      	movs	r1, r3
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	223f      	movs	r2, #63	; 0x3f
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300DataRate_SetTab2[DataRate][8] & (~0x3f)) | tmp);
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	490d      	ldr	r1, [pc, #52]	; (8000bac <Cmt2300_ConfigDataRate+0x168>)
 8000b76:	0013      	movs	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	189b      	adds	r3, r3, r2
 8000b7c:	18cb      	adds	r3, r1, r3
 8000b7e:	3308      	adds	r3, #8
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	223f      	movs	r2, #63	; 0x3f
 8000b86:	4393      	bics	r3, r2
 8000b88:	b25a      	sxtb	r2, r3
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	0019      	movs	r1, r3
 8000b98:	205e      	movs	r0, #94	; 0x5e
 8000b9a:	f000 f9ab 	bl	8000ef4 <Cmt2300_WriteReg>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b005      	add	sp, #20
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	08006878 	.word	0x08006878
 8000bac:	08006938 	.word	0x08006938

08000bb0 <Cmt2300_ConfigDataMode>:
//							CMT2300_DATA_MODE_DIRECT
//							CMT2300_DATA_MODE_PACKET

//-----------------------------------------------------------------------------------------------
void Cmt2300_ConfigDataMode(uint8_t DataMode)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT1) & (~0x03);
 8000bbc:	2038      	movs	r0, #56	; 0x38
 8000bbe:	f000 f982 	bl	8000ec6 <Cmt2300_ReadReg>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	2203      	movs	r2, #3
 8000bcc:	4391      	bics	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
    ;
    Cmt2300_WriteReg(CMT2300_CUS_PKT1, tmp | DataMode);
 8000bd2:	183a      	adds	r2, r7, r0
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	0019      	movs	r1, r3
 8000be0:	2038      	movs	r0, #56	; 0x38
 8000be2:	f000 f987 	bl	8000ef4 <Cmt2300_WriteReg>
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <Cmt2300_ConfigTxPower>:
* @name    Cmt2300_ConfigTxPower
* @desc    
* @param   TxPower = 0,1,2,3，4,5,6,7
* *********************************************************/
void Cmt2300_ConfigTxPower(uint8_t TxPower)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(0x03) & (~0x01);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f962 	bl	8000ec6 <Cmt2300_ReadReg>
 8000c02:	0003      	movs	r3, r0
 8000c04:	0019      	movs	r1, r3
 8000c06:	230f      	movs	r3, #15
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4391      	bics	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]

    if(TxPower>7)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	d902      	bls.n	8000c20 <Cmt2300_ConfigTxPower+0x30>
    {
       TxPower=7;
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	701a      	strb	r2, [r3, #0]
    }
    
    Cmt2300_WriteReg(0x03, (g_cmt2300TxPower_Tab[TxPower][0] & 0x01) | tmp);
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <Cmt2300_ConfigTxPower+0xcc>)
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	5cd3      	ldrb	r3, [r2, r3]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4013      	ands	r3, r2
 8000c30:	b25a      	sxtb	r2, r3
 8000c32:	240f      	movs	r4, #15
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	0019      	movs	r1, r3
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f956 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5c, g_cmt2300TxPower_Tab[TxPower][1]);
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <Cmt2300_ConfigTxPower+0xcc>)
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	18d3      	adds	r3, r2, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0019      	movs	r1, r3
 8000c58:	205c      	movs	r0, #92	; 0x5c
 8000c5a:	f000 f94b 	bl	8000ef4 <Cmt2300_WriteReg>
    Cmt2300_WriteReg(0x5d, g_cmt2300TxPower_Tab[TxPower][2]);
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <Cmt2300_ConfigTxPower+0xcc>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	18d3      	adds	r3, r2, r3
 8000c68:	3302      	adds	r3, #2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	205d      	movs	r0, #93	; 0x5d
 8000c70:	f000 f940 	bl	8000ef4 <Cmt2300_WriteReg>
    tmp = Cmt2300_ReadReg(0x5e) & (~0x3f);
 8000c74:	205e      	movs	r0, #94	; 0x5e
 8000c76:	f000 f926 	bl	8000ec6 <Cmt2300_ReadReg>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	223f      	movs	r2, #63	; 0x3f
 8000c82:	4391      	bics	r1, r2
 8000c84:	000a      	movs	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(0x5e, (g_cmt2300TxPower_Tab[TxPower][3] & 0x3f) | tmp);
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <Cmt2300_ConfigTxPower+0xcc>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	3303      	adds	r3, #3
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	223f      	movs	r2, #63	; 0x3f
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	0019      	movs	r1, r3
 8000cac:	205e      	movs	r0, #94	; 0x5e
 8000cae:	f000 f921 	bl	8000ef4 <Cmt2300_WriteReg>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b005      	add	sp, #20
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	08006980 	.word	0x08006980

08000cc0 <Cmt2300_IsExist>:
* @name    Cmt2300_IsExist
* @desc    Chip indentify.
* @return  true: chip is exist, false: chip not found
* *********************************************************/
bool Cmt2300_IsExist(void)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
    uint8_t back, dat;

    back = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000cc6:	1dfc      	adds	r4, r7, #7
 8000cc8:	2048      	movs	r0, #72	; 0x48
 8000cca:	f000 f8fc 	bl	8000ec6 <Cmt2300_ReadReg>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, 0xAA);
 8000cd2:	21aa      	movs	r1, #170	; 0xaa
 8000cd4:	2048      	movs	r0, #72	; 0x48
 8000cd6:	f000 f90d 	bl	8000ef4 <Cmt2300_WriteReg>

    // system_delay_us(5*20);

    dat = Cmt2300_ReadReg(CMT2300_CUS_PKT17);
 8000cda:	1dbc      	adds	r4, r7, #6
 8000cdc:	2048      	movs	r0, #72	; 0x48
 8000cde:	f000 f8f2 	bl	8000ec6 <Cmt2300_ReadReg>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	7023      	strb	r3, [r4, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT17, back);
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	0019      	movs	r1, r3
 8000cec:	2048      	movs	r0, #72	; 0x48
 8000cee:	f000 f901 	bl	8000ef4 <Cmt2300_WriteReg>

    if (0xAA == dat)
 8000cf2:	1dbb      	adds	r3, r7, #6
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2baa      	cmp	r3, #170	; 0xaa
 8000cf8:	d101      	bne.n	8000cfe <Cmt2300_IsExist+0x3e>
        return true;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <Cmt2300_IsExist+0x40>

    return false;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b003      	add	sp, #12
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <Cmt2300_SetPayloadLength>:
* @name    Cmt2300_SetPayloadLength
* @desc    Set payload length.
* @param   nLength
* *********************************************************/
void Cmt2300_SetPayloadLength(uint16_t nLength)
{
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	801a      	strh	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_PKT14);
 8000d14:	250f      	movs	r5, #15
 8000d16:	197c      	adds	r4, r7, r5
 8000d18:	2045      	movs	r0, #69	; 0x45
 8000d1a:	f000 f8d4 	bl	8000ec6 <Cmt2300_ReadReg>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	7023      	strb	r3, [r4, #0]

    tmp &= ~CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000d22:	0028      	movs	r0, r5
 8000d24:	183b      	adds	r3, r7, r0
 8000d26:	183a      	adds	r2, r7, r0
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	2170      	movs	r1, #112	; 0x70
 8000d2c:	438a      	bics	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
    tmp |= (nLength >> 4) & CMT2300_MASK_PAYLOAD_LENG_10_8;
 8000d30:	1dbb      	adds	r3, r7, #6
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	2270      	movs	r2, #112	; 0x70
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	b25a      	sxtb	r2, r3
 8000d40:	183b      	adds	r3, r7, r0
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b25a      	sxtb	r2, r3
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT14, tmp);
 8000d4e:	0004      	movs	r4, r0
 8000d50:	183b      	adds	r3, r7, r0
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	0019      	movs	r1, r3
 8000d56:	2045      	movs	r0, #69	; 0x45
 8000d58:	f000 f8cc 	bl	8000ef4 <Cmt2300_WriteReg>

    tmp = nLength & CMT2300_MASK_PAYLOAD_LENG_7_0;
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	183b      	adds	r3, r7, r0
 8000d60:	1dba      	adds	r2, r7, #6
 8000d62:	8812      	ldrh	r2, [r2, #0]
 8000d64:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_PKT15, tmp);
 8000d66:	183b      	adds	r3, r7, r0
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	2046      	movs	r0, #70	; 0x46
 8000d6e:	f000 f8c1 	bl	8000ef4 <Cmt2300_WriteReg>
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bdb0      	pop	{r4, r5, r7, pc}

08000d7a <Cmt2300_EnableLfosc>:
* @desc    If you need use sleep timer, you should enable LFOSC.
* @param   bEnable(true): Enable it(default)
*          bEnable(false): Disable it
* *********************************************************/
void Cmt2300_EnableLfosc(bool bEnable)
{
 8000d7a:	b5b0      	push	{r4, r5, r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	0002      	movs	r2, r0
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = Cmt2300_ReadReg(CMT2300_CUS_SYS2);
 8000d86:	250f      	movs	r5, #15
 8000d88:	197c      	adds	r4, r7, r5
 8000d8a:	200d      	movs	r0, #13
 8000d8c:	f000 f89b 	bl	8000ec6 <Cmt2300_ReadReg>
 8000d90:	0003      	movs	r3, r0
 8000d92:	7023      	strb	r3, [r4, #0]

    if (bEnable)
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <Cmt2300_EnableLfosc+0x4a>
    {
        tmp |= CMT2300_MASK_LFOSC_RECAL_EN;
 8000d9c:	197b      	adds	r3, r7, r5
 8000d9e:	197a      	adds	r2, r7, r5
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	4249      	negs	r1, r1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL1_EN;
 8000daa:	197b      	adds	r3, r7, r5
 8000dac:	197a      	adds	r2, r7, r5
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	430a      	orrs	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
        tmp |= CMT2300_MASK_LFOSC_CAL2_EN;
 8000db6:	197b      	adds	r3, r7, r5
 8000db8:	197a      	adds	r2, r7, r5
 8000dba:	7812      	ldrb	r2, [r2, #0]
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e012      	b.n	8000dea <Cmt2300_EnableLfosc+0x70>
    }
    else
    {
        tmp &= ~CMT2300_MASK_LFOSC_RECAL_EN;
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	183b      	adds	r3, r7, r0
 8000dc8:	183a      	adds	r2, r7, r0
 8000dca:	7812      	ldrb	r2, [r2, #0]
 8000dcc:	217f      	movs	r1, #127	; 0x7f
 8000dce:	400a      	ands	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL1_EN;
 8000dd2:	183b      	adds	r3, r7, r0
 8000dd4:	183a      	adds	r2, r7, r0
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	438a      	bics	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
        tmp &= ~CMT2300_MASK_LFOSC_CAL2_EN;
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	183a      	adds	r2, r7, r0
 8000de2:	7812      	ldrb	r2, [r2, #0]
 8000de4:	2120      	movs	r1, #32
 8000de6:	438a      	bics	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
    }

    Cmt2300_WriteReg(CMT2300_CUS_SYS2, tmp);
 8000dea:	230f      	movs	r3, #15
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	0019      	movs	r1, r3
 8000df2:	200d      	movs	r0, #13
 8000df4:	f000 f87e 	bl	8000ef4 <Cmt2300_WriteReg>
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b004      	add	sp, #16
 8000dfe:	bdb0      	pop	{r4, r5, r7, pc}

08000e00 <Cmt2300_Init>:
/*! ********************************************************
* @name    Cmt2300_Init
* @desc    Initialize chip status.
* *********************************************************/
void Cmt2300_Init(void)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
    uint8_t tmp;

    Cmt2300_SoftReset();
 8000e06:	f7ff fb63 	bl	80004d0 <Cmt2300_SoftReset>
   
    Delay_Ms(10);
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f000 fd90 	bl	8001930 <Delay_Ms>
   
    Cmt2300_GoStby();
 8000e10:	f7ff fbc9 	bl	80005a6 <Cmt2300_GoStby>

    tmp = Cmt2300_ReadReg(CMT2300_CUS_MODE_STA);
 8000e14:	1dfc      	adds	r4, r7, #7
 8000e16:	2061      	movs	r0, #97	; 0x61
 8000e18:	f000 f855 	bl	8000ec6 <Cmt2300_ReadReg>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	7023      	strb	r3, [r4, #0]
    tmp |= CMT2300_MASK_CFG_RETAIN;  /* Enable CFG_RETAIN */
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	1dfa      	adds	r2, r7, #7
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	2110      	movs	r1, #16
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
    tmp &= ~CMT2300_MASK_RSTN_IN_EN; /* Disable RSTN_IN */
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	1dfa      	adds	r2, r7, #7
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	2120      	movs	r1, #32
 8000e34:	438a      	bics	r2, r1
 8000e36:	701a      	strb	r2, [r3, #0]
    Cmt2300_WriteReg(CMT2300_CUS_MODE_STA, tmp);
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	2061      	movs	r0, #97	; 0x61
 8000e40:	f000 f858 	bl	8000ef4 <Cmt2300_WriteReg>

    Cmt2300_EnableLfosc(false); /* Diable LFOSC */
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff ff98 	bl	8000d7a <Cmt2300_EnableLfosc>

    Cmt2300_ClearInterruptFlags();
 8000e4a:	f7ff fcee 	bl	800082a <Cmt2300_ClearInterruptFlags>
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b003      	add	sp, #12
 8000e54:	bd90      	pop	{r4, r7, pc}

08000e56 <Cmt2300_ConfigRegBank>:
/*! ********************************************************
* @name    Cmt2300_ConfigRegBank
* @desc    Config one register bank.
* *********************************************************/
bool Cmt2300_ConfigRegBank(uint8_t base_addr, const uint8_t bank[], uint8_t len)
{
 8000e56:	b590      	push	{r4, r7, lr}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	0011      	movs	r1, r2
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	1dbb      	adds	r3, r7, #6
 8000e68:	1c0a      	adds	r2, r1, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for (i = 0; i < len; i++)
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e014      	b.n	8000ea0 <Cmt2300_ConfigRegBank+0x4a>
        Cmt2300_WriteReg(i + base_addr, bank[i]);
 8000e76:	210f      	movs	r1, #15
 8000e78:	187a      	adds	r2, r7, r1
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	b2d8      	uxtb	r0, r3
 8000e84:	000c      	movs	r4, r1
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	0019      	movs	r1, r3
 8000e92:	f000 f82f 	bl	8000ef4 <Cmt2300_WriteReg>
    for (i = 0; i < len; i++)
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	3201      	adds	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fa      	adds	r2, r7, r3
 8000ea4:	1dbb      	adds	r3, r7, #6
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3e3      	bcc.n	8000e76 <Cmt2300_ConfigRegBank+0x20>

    return true;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b005      	add	sp, #20
 8000eb6:	bd90      	pop	{r4, r7, pc}

08000eb8 <Cmt2300_InitGpio>:
/*! ********************************************************
* @name    Cmt2300_InitGpio
* @desc    Initializes the CMT2300 interface GPIOs.
* *********************************************************/
void Cmt2300_InitGpio(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    cmt_spi3_init();
 8000ebc:	f000 f876 	bl	8000fac <cmt_spi3_init>
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <Cmt2300_ReadReg>:
* @desc    Read the CMT2300 register at the specified address.
* @param   addr: register address
* @return  Register value
* *********************************************************/
uint8_t Cmt2300_ReadReg(uint8_t addr)
{
 8000ec6:	b590      	push	{r4, r7, lr}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	0002      	movs	r2, r0
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	701a      	strb	r2, [r3, #0]
    uint8_t dat = 0xFF;
 8000ed2:	240f      	movs	r4, #15
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	701a      	strb	r2, [r3, #0]
    cmt_spi3_read(addr, &dat);
 8000eda:	193a      	adds	r2, r7, r4
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 f974 	bl	80011d0 <cmt_spi3_read>

    return dat;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	781b      	ldrb	r3, [r3, #0]
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b005      	add	sp, #20
 8000ef2:	bd90      	pop	{r4, r7, pc}

08000ef4 <Cmt2300_WriteReg>:
* @desc    Write the CMT2300 register at the specified address.
* @param   addr: register address
*          dat: register value
* *********************************************************/
void Cmt2300_WriteReg(uint8_t addr, uint8_t dat)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	1c0a      	adds	r2, r1, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    cmt_spi3_write(addr, dat);
 8000f06:	1dbb      	adds	r3, r7, #6
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 f8e9 	bl	80010e8 <cmt_spi3_write>
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <Cmt2300_ReadFifo>:
* @desc    Reads the contents of the CMT2300 FIFO.
* @param   buf: buffer where to copy the FIFO read data
*          len: number of bytes to be read from the FIFO
* *********************************************************/
void Cmt2300_ReadFifo(uint8_t buf[], uint16_t len)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	000a      	movs	r2, r1
 8000f28:	1cbb      	adds	r3, r7, #2
 8000f2a:	801a      	strh	r2, [r3, #0]
    cmt_spi3_read_fifo(buf, len);
 8000f2c:	1cbb      	adds	r3, r7, #2
 8000f2e:	881a      	ldrh	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fa4b 	bl	80013d0 <cmt_spi3_read_fifo>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <Cmt2300_WriteFifo>:
* @desc    Writes the buffer contents to the CMT2300 FIFO.
* @param   buf: buffer containing data to be put on the FIFO
*          len: number of bytes to be written to the FIFO
* *********************************************************/
void Cmt2300_WriteFifo(const uint8_t buf[], uint16_t len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	1cbb      	adds	r3, r7, #2
 8000f4e:	801a      	strh	r2, [r3, #0]
    cmt_spi3_write_fifo(buf, len);
 8000f50:	1cbb      	adds	r3, r7, #2
 8000f52:	881a      	ldrh	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f9af 	bl	80012bc <cmt_spi3_write_fifo>
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <cmt_spi3_delay>:
#include "cmt_spi3.h"
#include "./../../gpio.h"

void cmt_spi3_delay(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
    uint32_t n = 8;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
    while (n--)
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	1e5a      	subs	r2, r3, #1
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1fa      	bne.n	8000f72 <cmt_spi3_delay+0xc>
        ;
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <cmt_spi3_delay_us>:

void cmt_spi3_delay_us(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
    uint16_t n = 8;
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	2208      	movs	r2, #8
 8000f90:	801a      	strh	r2, [r3, #0]
    while (n--)
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	1dbb      	adds	r3, r7, #6
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	1dba      	adds	r2, r7, #6
 8000f9a:	1e59      	subs	r1, r3, #1
 8000f9c:	8011      	strh	r1, [r2, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f8      	bne.n	8000f94 <cmt_spi3_delay_us+0xe>
        ;
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <cmt_spi3_init>:

void cmt_spi3_init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
    spi_gpio_init();
 8000fb0:	f000 fce2 	bl	8001978 <spi_gpio_init>
    cmt_spi3_sda_in();
 8000fb4:	f000 fd18 	bl	80019e8 <cmt_spi3_sda_in>
    cmt_spi3_delay();
 8000fb8:	f7ff ffd5 	bl	8000f66 <cmt_spi3_delay>
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <cmt_spi3_send>:

void cmt_spi3_send(uint8_t data8)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	0002      	movs	r2, r0
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++)
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e034      	b.n	8001042 <cmt_spi3_send+0x80>
    {
        cmt_spi3_scl_0();
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	0119      	lsls	r1, r3, #4
 8000fdc:	2390      	movs	r3, #144	; 0x90
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f002 f943 	bl	800326e <HAL_GPIO_WritePin>

        /* Send byte on the rising edge of SCL */
        if (data8 & 0x80)
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da08      	bge.n	8001004 <cmt_spi3_send+0x42>
            cmt_spi3_sda_1();
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	0059      	lsls	r1, r3, #1
 8000ff6:	2390      	movs	r3, #144	; 0x90
 8000ff8:	05db      	lsls	r3, r3, #23
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f002 f936 	bl	800326e <HAL_GPIO_WritePin>
 8001002:	e007      	b.n	8001014 <cmt_spi3_send+0x52>
        else
            cmt_spi3_sda_0();
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	0059      	lsls	r1, r3, #1
 8001008:	2390      	movs	r3, #144	; 0x90
 800100a:	05db      	lsls	r3, r3, #23
 800100c:	2200      	movs	r2, #0
 800100e:	0018      	movs	r0, r3
 8001010:	f002 f92d 	bl	800326e <HAL_GPIO_WritePin>

        cmt_spi3_delay();
 8001014:	f7ff ffa7 	bl	8000f66 <cmt_spi3_delay>

        data8 <<= 1;
 8001018:	1dfa      	adds	r2, r7, #7
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	18db      	adds	r3, r3, r3
 8001020:	7013      	strb	r3, [r2, #0]
        cmt_spi3_scl_1();
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	0119      	lsls	r1, r3, #4
 8001026:	2390      	movs	r3, #144	; 0x90
 8001028:	05db      	lsls	r3, r3, #23
 800102a:	2201      	movs	r2, #1
 800102c:	0018      	movs	r0, r3
 800102e:	f002 f91e 	bl	800326e <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 8001032:	f7ff ff98 	bl	8000f66 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 8001036:	210f      	movs	r1, #15
 8001038:	187b      	adds	r3, r7, r1
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	187b      	adds	r3, r7, r1
 800103e:	3201      	adds	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	230f      	movs	r3, #15
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b07      	cmp	r3, #7
 800104a:	d9c5      	bls.n	8000fd8 <cmt_spi3_send+0x16>
    }
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}

08001056 <cmt_spi3_recv>:

uint8_t cmt_spi3_recv(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t data8 = 0xFF;
 800105c:	1dbb      	adds	r3, r7, #6
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 8; i++)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e034      	b.n	80010d4 <cmt_spi3_recv+0x7e>
    {
        cmt_spi3_scl_0();
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	0119      	lsls	r1, r3, #4
 800106e:	2390      	movs	r3, #144	; 0x90
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	2200      	movs	r2, #0
 8001074:	0018      	movs	r0, r3
 8001076:	f002 f8fa 	bl	800326e <HAL_GPIO_WritePin>
        cmt_spi3_delay();
 800107a:	f7ff ff74 	bl	8000f66 <cmt_spi3_delay>
        data8 <<= 1;
 800107e:	1dba      	adds	r2, r7, #6
 8001080:	1dbb      	adds	r3, r7, #6
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	18db      	adds	r3, r3, r3
 8001086:	7013      	strb	r3, [r2, #0]

        cmt_spi3_scl_1();
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	0119      	lsls	r1, r3, #4
 800108c:	2390      	movs	r3, #144	; 0x90
 800108e:	05db      	lsls	r3, r3, #23
 8001090:	2201      	movs	r2, #1
 8001092:	0018      	movs	r0, r3
 8001094:	f002 f8eb 	bl	800326e <HAL_GPIO_WritePin>

        /* Read byte on the rising edge of SCL */
        if (cmt_spi3_sda_read())
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	005a      	lsls	r2, r3, #1
 800109c:	2390      	movs	r3, #144	; 0x90
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	0011      	movs	r1, r2
 80010a2:	0018      	movs	r0, r3
 80010a4:	f002 f8c6 	bl	8003234 <HAL_GPIO_ReadPin>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d006      	beq.n	80010ba <cmt_spi3_recv+0x64>
            data8 |= 0x01;
 80010ac:	1dbb      	adds	r3, r7, #6
 80010ae:	1dba      	adds	r2, r7, #6
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	2101      	movs	r1, #1
 80010b4:	430a      	orrs	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e005      	b.n	80010c6 <cmt_spi3_recv+0x70>
        else
            data8 &= ~0x01;
 80010ba:	1dbb      	adds	r3, r7, #6
 80010bc:	1dba      	adds	r2, r7, #6
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	438a      	bics	r2, r1
 80010c4:	701a      	strb	r2, [r3, #0]

        cmt_spi3_delay();
 80010c6:	f7ff ff4e 	bl	8000f66 <cmt_spi3_delay>
    for (i = 0; i < 8; i++)
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	3201      	adds	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d9c6      	bls.n	800106a <cmt_spi3_recv+0x14>
    }

    return data8;
 80010dc:	1dbb      	adds	r3, r7, #6
 80010de:	781b      	ldrb	r3, [r3, #0]
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <cmt_spi3_write>:

void cmt_spi3_write(uint8_t addr, uint8_t dat)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	0002      	movs	r2, r0
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	1c0a      	adds	r2, r1, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 80010fa:	f000 fc43 	bl	8001984 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	0059      	lsls	r1, r3, #1
 8001102:	2390      	movs	r3, #144	; 0x90
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2201      	movs	r2, #1
 8001108:	0018      	movs	r0, r3
 800110a:	f002 f8b0 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	0119      	lsls	r1, r3, #4
 8001112:	2390      	movs	r3, #144	; 0x90
 8001114:	05db      	lsls	r3, r3, #23
 8001116:	2200      	movs	r2, #0
 8001118:	0018      	movs	r0, r3
 800111a:	f002 f8a8 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	0119      	lsls	r1, r3, #4
 8001122:	2390      	movs	r3, #144	; 0x90
 8001124:	05db      	lsls	r3, r3, #23
 8001126:	2200      	movs	r2, #0
 8001128:	0018      	movs	r0, r3
 800112a:	f002 f8a0 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	01db      	lsls	r3, r3, #7
 8001132:	4826      	ldr	r0, [pc, #152]	; (80011cc <cmt_spi3_write+0xe4>)
 8001134:	2201      	movs	r2, #1
 8001136:	0019      	movs	r1, r3
 8001138:	f002 f899 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	4822      	ldr	r0, [pc, #136]	; (80011cc <cmt_spi3_write+0xe4>)
 8001142:	2201      	movs	r2, #1
 8001144:	0019      	movs	r1, r3
 8001146:	f002 f892 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	481f      	ldr	r0, [pc, #124]	; (80011cc <cmt_spi3_write+0xe4>)
 8001150:	2200      	movs	r2, #0
 8001152:	0019      	movs	r1, r3
 8001154:	f002 f88b 	bl	800326e <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001158:	f7ff ff05 	bl	8000f66 <cmt_spi3_delay>
    cmt_spi3_delay();
 800115c:	f7ff ff03 	bl	8000f66 <cmt_spi3_delay>

    /* r/w = 0 */
    cmt_spi3_send(addr & 0x7F);
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	227f      	movs	r2, #127	; 0x7f
 8001166:	4013      	ands	r3, r2
 8001168:	b2db      	uxtb	r3, r3
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff ff29 	bl	8000fc2 <cmt_spi3_send>

    cmt_spi3_send(dat);
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff ff24 	bl	8000fc2 <cmt_spi3_send>

    cmt_spi3_scl_0();
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	0119      	lsls	r1, r3, #4
 800117e:	2390      	movs	r3, #144	; 0x90
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	2200      	movs	r2, #0
 8001184:	0018      	movs	r0, r3
 8001186:	f002 f872 	bl	800326e <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 800118a:	f7ff feec 	bl	8000f66 <cmt_spi3_delay>
    cmt_spi3_delay();
 800118e:	f7ff feea 	bl	8000f66 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <cmt_spi3_write+0xe4>)
 8001198:	2201      	movs	r2, #1
 800119a:	0019      	movs	r1, r3
 800119c:	f002 f867 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	0059      	lsls	r1, r3, #1
 80011a4:	2390      	movs	r3, #144	; 0x90
 80011a6:	05db      	lsls	r3, r3, #23
 80011a8:	2201      	movs	r2, #1
 80011aa:	0018      	movs	r0, r3
 80011ac:	f002 f85f 	bl	800326e <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 80011b0:	f000 fc1a 	bl	80019e8 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	01db      	lsls	r3, r3, #7
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <cmt_spi3_write+0xe4>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	0019      	movs	r1, r3
 80011be:	f002 f856 	bl	800326e <HAL_GPIO_WritePin>
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	48000400 	.word	0x48000400

080011d0 <cmt_spi3_read>:

void cmt_spi3_read(uint8_t addr, uint8_t *p_dat)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	701a      	strb	r2, [r3, #0]
    cmt_spi3_sda_out();
 80011de:	f000 fbd1 	bl	8001984 <cmt_spi3_sda_out>
    cmt_spi3_sda_1();
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	0059      	lsls	r1, r3, #1
 80011e6:	2390      	movs	r3, #144	; 0x90
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	2201      	movs	r2, #1
 80011ec:	0018      	movs	r0, r3
 80011ee:	f002 f83e 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	0119      	lsls	r1, r3, #4
 80011f6:	2390      	movs	r3, #144	; 0x90
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	2200      	movs	r2, #0
 80011fc:	0018      	movs	r0, r3
 80011fe:	f002 f836 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	0119      	lsls	r1, r3, #4
 8001206:	2390      	movs	r3, #144	; 0x90
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	2200      	movs	r2, #0
 800120c:	0018      	movs	r0, r3
 800120e:	f002 f82e 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_fcsb_1();
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	01db      	lsls	r3, r3, #7
 8001216:	4828      	ldr	r0, [pc, #160]	; (80012b8 <cmt_spi3_read+0xe8>)
 8001218:	2201      	movs	r2, #1
 800121a:	0019      	movs	r1, r3
 800121c:	f002 f827 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	4824      	ldr	r0, [pc, #144]	; (80012b8 <cmt_spi3_read+0xe8>)
 8001226:	2201      	movs	r2, #1
 8001228:	0019      	movs	r1, r3
 800122a:	f002 f820 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_csb_0();
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	4821      	ldr	r0, [pc, #132]	; (80012b8 <cmt_spi3_read+0xe8>)
 8001234:	2200      	movs	r2, #0
 8001236:	0019      	movs	r1, r3
 8001238:	f002 f819 	bl	800326e <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 800123c:	f7ff fe93 	bl	8000f66 <cmt_spi3_delay>
    cmt_spi3_delay();
 8001240:	f7ff fe91 	bl	8000f66 <cmt_spi3_delay>

    /* r/w = 1 */
    cmt_spi3_send(addr | 0x80);
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	4252      	negs	r2, r2
 800124c:	4313      	orrs	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff feb6 	bl	8000fc2 <cmt_spi3_send>

    /* Must set SDA to input before the falling edge of SCL */
    cmt_spi3_sda_in();
 8001256:	f000 fbc7 	bl	80019e8 <cmt_spi3_sda_in>

    *p_dat = cmt_spi3_recv();
 800125a:	f7ff fefc 	bl	8001056 <cmt_spi3_recv>
 800125e:	0003      	movs	r3, r0
 8001260:	001a      	movs	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	701a      	strb	r2, [r3, #0]

    cmt_spi3_scl_0();
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	0119      	lsls	r1, r3, #4
 800126a:	2390      	movs	r3, #144	; 0x90
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	2200      	movs	r2, #0
 8001270:	0018      	movs	r0, r3
 8001272:	f001 fffc 	bl	800326e <HAL_GPIO_WritePin>

    /* > 0.5 SCL cycle */
    cmt_spi3_delay();
 8001276:	f7ff fe76 	bl	8000f66 <cmt_spi3_delay>
    cmt_spi3_delay();
 800127a:	f7ff fe74 	bl	8000f66 <cmt_spi3_delay>

    cmt_spi3_csb_1();
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <cmt_spi3_read+0xe8>)
 8001284:	2201      	movs	r2, #1
 8001286:	0019      	movs	r1, r3
 8001288:	f001 fff1 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_sda_1();
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	0059      	lsls	r1, r3, #1
 8001290:	2390      	movs	r3, #144	; 0x90
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	2201      	movs	r2, #1
 8001296:	0018      	movs	r0, r3
 8001298:	f001 ffe9 	bl	800326e <HAL_GPIO_WritePin>
    cmt_spi3_sda_in();
 800129c:	f000 fba4 	bl	80019e8 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	01db      	lsls	r3, r3, #7
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <cmt_spi3_read+0xe8>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	0019      	movs	r1, r3
 80012aa:	f001 ffe0 	bl	800326e <HAL_GPIO_WritePin>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	48000400 	.word	0x48000400

080012bc <cmt_spi3_write_fifo>:

void cmt_spi3_write_fifo(const uint8_t *p_buf, uint16_t len)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	000a      	movs	r2, r1
 80012c6:	1cbb      	adds	r3, r7, #2
 80012c8:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	01db      	lsls	r3, r3, #7
 80012ce:	483f      	ldr	r0, [pc, #252]	; (80013cc <cmt_spi3_write_fifo+0x110>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	0019      	movs	r1, r3
 80012d4:	f001 ffcb 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	01db      	lsls	r3, r3, #7
 80012dc:	483b      	ldr	r0, [pc, #236]	; (80013cc <cmt_spi3_write_fifo+0x110>)
 80012de:	2201      	movs	r2, #1
 80012e0:	0019      	movs	r1, r3
 80012e2:	f001 ffc4 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4838      	ldr	r0, [pc, #224]	; (80013cc <cmt_spi3_write_fifo+0x110>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	0019      	movs	r1, r3
 80012f0:	f001 ffbd 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	4834      	ldr	r0, [pc, #208]	; (80013cc <cmt_spi3_write_fifo+0x110>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	0019      	movs	r1, r3
 80012fe:	f001 ffb6 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	0119      	lsls	r1, r3, #4
 8001306:	2390      	movs	r3, #144	; 0x90
 8001308:	05db      	lsls	r3, r3, #23
 800130a:	2200      	movs	r2, #0
 800130c:	0018      	movs	r0, r3
 800130e:	f001 ffae 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	0119      	lsls	r1, r3, #4
 8001316:	2390      	movs	r3, #144	; 0x90
 8001318:	05db      	lsls	r3, r3, #23
 800131a:	2200      	movs	r2, #0
 800131c:	0018      	movs	r0, r3
 800131e:	f001 ffa6 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_sda_out();
 8001322:	f000 fb2f 	bl	8001984 <cmt_spi3_sda_out>

    for (i = 0; i < len; i++)
 8001326:	230e      	movs	r3, #14
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	2200      	movs	r2, #0
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	e039      	b.n	80013a4 <cmt_spi3_write_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	01db      	lsls	r3, r3, #7
 8001334:	4825      	ldr	r0, [pc, #148]	; (80013cc <cmt_spi3_write_fifo+0x110>)
 8001336:	2200      	movs	r2, #0
 8001338:	0019      	movs	r1, r3
 800133a:	f001 ff98 	bl	800326e <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 800133e:	f7ff fe12 	bl	8000f66 <cmt_spi3_delay>
        cmt_spi3_delay();
 8001342:	f7ff fe10 	bl	8000f66 <cmt_spi3_delay>

        cmt_spi3_send(p_buf[i]);
 8001346:	240e      	movs	r4, #14
 8001348:	193b      	adds	r3, r7, r4
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	18d3      	adds	r3, r2, r3
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff fe35 	bl	8000fc2 <cmt_spi3_send>

        cmt_spi3_scl_0();
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	0119      	lsls	r1, r3, #4
 800135c:	2390      	movs	r3, #144	; 0x90
 800135e:	05db      	lsls	r3, r3, #23
 8001360:	2200      	movs	r2, #0
 8001362:	0018      	movs	r0, r3
 8001364:	f001 ff83 	bl	800326e <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 8001368:	f7ff fe0d 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800136c:	f7ff fe0b 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001370:	f7ff fe09 	bl	8000f86 <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	4814      	ldr	r0, [pc, #80]	; (80013cc <cmt_spi3_write_fifo+0x110>)
 800137a:	2201      	movs	r2, #1
 800137c:	0019      	movs	r1, r3
 800137e:	f001 ff76 	bl	800326e <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 8001382:	f7ff fe00 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001386:	f7ff fdfe 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800138a:	f7ff fdfc 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800138e:	f7ff fdfa 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001392:	f7ff fdf8 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001396:	f7ff fdf6 	bl	8000f86 <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 800139a:	193b      	adds	r3, r7, r4
 800139c:	881a      	ldrh	r2, [r3, #0]
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	3201      	adds	r2, #1
 80013a2:	801a      	strh	r2, [r3, #0]
 80013a4:	230e      	movs	r3, #14
 80013a6:	18fa      	adds	r2, r7, r3
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3be      	bcc.n	8001330 <cmt_spi3_write_fifo+0x74>
    }

    cmt_spi3_sda_in();
 80013b2:	f000 fb19 	bl	80019e8 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	01db      	lsls	r3, r3, #7
 80013ba:	4804      	ldr	r0, [pc, #16]	; (80013cc <cmt_spi3_write_fifo+0x110>)
 80013bc:	2201      	movs	r2, #1
 80013be:	0019      	movs	r1, r3
 80013c0:	f001 ff55 	bl	800326e <HAL_GPIO_WritePin>
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b005      	add	sp, #20
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	48000400 	.word	0x48000400

080013d0 <cmt_spi3_read_fifo>:

void cmt_spi3_read_fifo(uint8_t *p_buf, uint16_t len)
{
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	000a      	movs	r2, r1
 80013da:	1cbb      	adds	r3, r7, #2
 80013dc:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    cmt_spi3_fcsb_1();
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	01db      	lsls	r3, r3, #7
 80013e2:	483f      	ldr	r0, [pc, #252]	; (80014e0 <cmt_spi3_read_fifo+0x110>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	0019      	movs	r1, r3
 80013e8:	f001 ff41 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_fcsb_out();
    cmt_spi3_fcsb_1();
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	01db      	lsls	r3, r3, #7
 80013f0:	483b      	ldr	r0, [pc, #236]	; (80014e0 <cmt_spi3_read_fifo+0x110>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	0019      	movs	r1, r3
 80013f6:	f001 ff3a 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_csb_1();
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	4838      	ldr	r0, [pc, #224]	; (80014e0 <cmt_spi3_read_fifo+0x110>)
 8001400:	2201      	movs	r2, #1
 8001402:	0019      	movs	r1, r3
 8001404:	f001 ff33 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_csb_out();
    cmt_spi3_csb_1();
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	4834      	ldr	r0, [pc, #208]	; (80014e0 <cmt_spi3_read_fifo+0x110>)
 800140e:	2201      	movs	r2, #1
 8001410:	0019      	movs	r1, r3
 8001412:	f001 ff2c 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_scl_0();
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	0119      	lsls	r1, r3, #4
 800141a:	2390      	movs	r3, #144	; 0x90
 800141c:	05db      	lsls	r3, r3, #23
 800141e:	2200      	movs	r2, #0
 8001420:	0018      	movs	r0, r3
 8001422:	f001 ff24 	bl	800326e <HAL_GPIO_WritePin>
    //    cmt_spi3_scl_out();
    cmt_spi3_scl_0();
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	0119      	lsls	r1, r3, #4
 800142a:	2390      	movs	r3, #144	; 0x90
 800142c:	05db      	lsls	r3, r3, #23
 800142e:	2200      	movs	r2, #0
 8001430:	0018      	movs	r0, r3
 8001432:	f001 ff1c 	bl	800326e <HAL_GPIO_WritePin>

    cmt_spi3_sda_in();
 8001436:	f000 fad7 	bl	80019e8 <cmt_spi3_sda_in>

    for (i = 0; i < len; i++)
 800143a:	230e      	movs	r3, #14
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	2200      	movs	r2, #0
 8001440:	801a      	strh	r2, [r3, #0]
 8001442:	e039      	b.n	80014b8 <cmt_spi3_read_fifo+0xe8>
    {
        cmt_spi3_fcsb_0();
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	01db      	lsls	r3, r3, #7
 8001448:	4825      	ldr	r0, [pc, #148]	; (80014e0 <cmt_spi3_read_fifo+0x110>)
 800144a:	2200      	movs	r2, #0
 800144c:	0019      	movs	r1, r3
 800144e:	f001 ff0e 	bl	800326e <HAL_GPIO_WritePin>

        /* > 1 SCL cycle */
        cmt_spi3_delay();
 8001452:	f7ff fd88 	bl	8000f66 <cmt_spi3_delay>
        cmt_spi3_delay();
 8001456:	f7ff fd86 	bl	8000f66 <cmt_spi3_delay>

        p_buf[i] = cmt_spi3_recv();
 800145a:	250e      	movs	r5, #14
 800145c:	197b      	adds	r3, r7, r5
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	18d4      	adds	r4, r2, r3
 8001464:	f7ff fdf7 	bl	8001056 <cmt_spi3_recv>
 8001468:	0003      	movs	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]

        cmt_spi3_scl_0();
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	0119      	lsls	r1, r3, #4
 8001470:	2390      	movs	r3, #144	; 0x90
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	2200      	movs	r2, #0
 8001476:	0018      	movs	r0, r3
 8001478:	f001 fef9 	bl	800326e <HAL_GPIO_WritePin>

        /* > 2 us */
        cmt_spi3_delay_us();
 800147c:	f7ff fd83 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001480:	f7ff fd81 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 8001484:	f7ff fd7f 	bl	8000f86 <cmt_spi3_delay_us>

        cmt_spi3_fcsb_1();
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	01db      	lsls	r3, r3, #7
 800148c:	4814      	ldr	r0, [pc, #80]	; (80014e0 <cmt_spi3_read_fifo+0x110>)
 800148e:	2201      	movs	r2, #1
 8001490:	0019      	movs	r1, r3
 8001492:	f001 feec 	bl	800326e <HAL_GPIO_WritePin>

        /* > 4 us */
        cmt_spi3_delay_us();
 8001496:	f7ff fd76 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800149a:	f7ff fd74 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 800149e:	f7ff fd72 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014a2:	f7ff fd70 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014a6:	f7ff fd6e 	bl	8000f86 <cmt_spi3_delay_us>
        cmt_spi3_delay_us();
 80014aa:	f7ff fd6c 	bl	8000f86 <cmt_spi3_delay_us>
    for (i = 0; i < len; i++)
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	881a      	ldrh	r2, [r3, #0]
 80014b2:	197b      	adds	r3, r7, r5
 80014b4:	3201      	adds	r2, #1
 80014b6:	801a      	strh	r2, [r3, #0]
 80014b8:	230e      	movs	r3, #14
 80014ba:	18fa      	adds	r2, r7, r3
 80014bc:	1cbb      	adds	r3, r7, #2
 80014be:	8812      	ldrh	r2, [r2, #0]
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3be      	bcc.n	8001444 <cmt_spi3_read_fifo+0x74>
    }

    cmt_spi3_sda_in();
 80014c6:	f000 fa8f 	bl	80019e8 <cmt_spi3_sda_in>

    cmt_spi3_fcsb_1();
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	01db      	lsls	r3, r3, #7
 80014ce:	4804      	ldr	r0, [pc, #16]	; (80014e0 <cmt_spi3_read_fifo+0x110>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	0019      	movs	r1, r3
 80014d4:	f001 fecb 	bl	800326e <HAL_GPIO_WritePin>
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b004      	add	sp, #16
 80014de:	bdb0      	pop	{r4, r5, r7, pc}
 80014e0:	48000400 	.word	0x48000400

080014e4 <RF_Init>:
uint8_t PlayLoadlen;
uint8_t g_nInterrutFlags;
extern volatile uint32_t g_nSysTickCount;
extern volatile uint8_t  cmt2300_irq_request;	//request for irq
void RF_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    Cmt2300_InitGpio();
 80014e8:	f7ff fce6 	bl	8000eb8 <Cmt2300_InitGpio>
    Cmt2300_Init();
 80014ec:	f7ff fc88 	bl	8000e00 <Cmt2300_Init>

    /* Config registers */
    Cmt2300_ConfigRegBank(CMT2300_CMT_BANK_ADDR, g_cmt2300CmtBank, CMT2300_CMT_BANK_SIZE);
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <RF_Init+0x60>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	0019      	movs	r1, r3
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fcad 	bl	8000e56 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_SYSTEM_BANK_ADDR, g_cmt2300SystemBank, CMT2300_SYSTEM_BANK_SIZE);
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <RF_Init+0x64>)
 80014fe:	220c      	movs	r2, #12
 8001500:	0019      	movs	r1, r3
 8001502:	200c      	movs	r0, #12
 8001504:	f7ff fca7 	bl	8000e56 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_FREQUENCY_BANK_ADDR, g_cmt2300FrequencyBank, CMT2300_FREQUENCY_BANK_SIZE);
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <RF_Init+0x68>)
 800150a:	2208      	movs	r2, #8
 800150c:	0019      	movs	r1, r3
 800150e:	2018      	movs	r0, #24
 8001510:	f7ff fca1 	bl	8000e56 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_DATA_RATE_BANK_ADDR, g_cmt2300DataRateBank, CMT2300_DATA_RATE_BANK_SIZE);
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <RF_Init+0x6c>)
 8001516:	2218      	movs	r2, #24
 8001518:	0019      	movs	r1, r3
 800151a:	2020      	movs	r0, #32
 800151c:	f7ff fc9b 	bl	8000e56 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_BASEBAND_BANK_ADDR, g_cmt2300BasebandBank, CMT2300_BASEBAND_BANK_SIZE);
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <RF_Init+0x70>)
 8001522:	221d      	movs	r2, #29
 8001524:	0019      	movs	r1, r3
 8001526:	2038      	movs	r0, #56	; 0x38
 8001528:	f7ff fc95 	bl	8000e56 <Cmt2300_ConfigRegBank>
    Cmt2300_ConfigRegBank(CMT2300_TX_BANK_ADDR, g_cmt2300TxBank, CMT2300_TX_BANK_SIZE);
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <RF_Init+0x74>)
 800152e:	220b      	movs	r2, #11
 8001530:	0019      	movs	r1, r3
 8001532:	2055      	movs	r0, #85	; 0x55
 8001534:	f7ff fc8f 	bl	8000e56 <Cmt2300_ConfigRegBank>

    RF_Config();
 8001538:	f000 f810 	bl	800155c <RF_Config>
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	080069a0 	.word	0x080069a0
 8001548:	080069ac 	.word	0x080069ac
 800154c:	080069b8 	.word	0x080069b8
 8001550:	080069c0 	.word	0x080069c0
 8001554:	080069d8 	.word	0x080069d8
 8001558:	080069f8 	.word	0x080069f8

0800155c <RF_Config>:
        g_nNextRFState = RF_STATE_RX_WAIT;
        return 0;
    }
}
void RF_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
       and it can't output INT1/INT2 via GPIO1/GPIO2 */
    Cmt2300_EnableAntennaSwitch(0);

#else
    
    Cmt2300_EnableAntennaSwitch(0);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff f89c 	bl	800069e <Cmt2300_EnableAntennaSwitch>
        /* Config GPIOs */
    Cmt2300_ConfigGpio(
 8001566:	2020      	movs	r0, #32
 8001568:	f7ff f844 	bl	80005f4 <Cmt2300_ConfigGpio>
       // CMT2300_GPIO1_SEL_INT1 | /* INT1 > GPIO1 */
       // CMT2300_GPIO2_SEL_INT2 | /* INT2 > GPIO2 */
        CMT2300_GPIO3_SEL_INT2);   /* INT2 > GPIO3 */

    /* Config interrupt */
    Cmt2300_ConfigInterrupt(
 800156c:	2107      	movs	r1, #7
 800156e:	200a      	movs	r0, #10
 8001570:	f7ff f850 	bl	8000614 <Cmt2300_ConfigInterrupt>
        CMT2300_INT_SEL_PKT_OK   /* Config INT2 */
    );
#endif

    /* Enable interrupt */
         Cmt2300_EnableInterrupt(
 8001574:	203f      	movs	r0, #63	; 0x3f
 8001576:	f7ff f8cd 	bl	8000714 <Cmt2300_EnableInterrupt>
        CMT2300_MASK_SYNC_OK_EN |
        CMT2300_MASK_NODE_OK_EN |
        CMT2300_MASK_CRC_OK_EN |
        CMT2300_MASK_PKT_DONE_EN);

    Cmt2300_EnableLfosc(false);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fbfd 	bl	8000d7a <Cmt2300_EnableLfosc>
    //Cmt2300_EnableFifoMerge(true);

    //Cmt2300_SetFifoThreshold(16);

    /* Go to sleep for configuration to take effect */
    Cmt2300_GoSleep();
 8001580:	f7ff f804 	bl	800058c <Cmt2300_GoSleep>
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <RF_StartRx>:
{
    return g_nInterrutFlags;
}

void RF_StartRx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	200a      	movs	r0, #10
 8001598:	183b      	adds	r3, r7, r0
 800159a:	1c0a      	adds	r2, r1, #0
 800159c:	801a      	strh	r2, [r3, #0]
    g_pRxBuffer = buf;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <RF_StartRx+0x44>)
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	601a      	str	r2, [r3, #0]
    g_nRxLength = len;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <RF_StartRx+0x48>)
 80015a6:	183a      	adds	r2, r7, r0
 80015a8:	8812      	ldrh	r2, [r2, #0]
 80015aa:	801a      	strh	r2, [r3, #0]
    g_nRxTimeout = timeout;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <RF_StartRx+0x4c>)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]

    memset(g_pRxBuffer, 0, g_nRxLength);
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <RF_StartRx+0x44>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <RF_StartRx+0x48>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	001a      	movs	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f004 fbe2 	bl	8005d86 <memset>

    g_nNextRFState = RF_STATE_RX_START;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <RF_StartRx+0x50>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200003bc 	.word	0x200003bc
 80015d4:	200003c4 	.word	0x200003c4
 80015d8:	200000f4 	.word	0x200000f4
 80015dc:	200003b8 	.word	0x200003b8

080015e0 <RF_StartTx>:

void RF_StartTx(uint8_t buf[], uint16_t len, uint32_t timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	200a      	movs	r0, #10
 80015ec:	183b      	adds	r3, r7, r0
 80015ee:	1c0a      	adds	r2, r1, #0
 80015f0:	801a      	strh	r2, [r3, #0]
    g_pTxBuffer = buf;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <RF_StartTx+0x34>)
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	601a      	str	r2, [r3, #0]
    g_nTxLength = len;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <RF_StartTx+0x38>)
 80015fa:	183a      	adds	r2, r7, r0
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	801a      	strh	r2, [r3, #0]
    g_nTxTimeout = timeout;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <RF_StartTx+0x3c>)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]

    g_nNextRFState = RF_STATE_TX_START;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <RF_StartTx+0x40>)
 8001608:	2205      	movs	r2, #5
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b004      	add	sp, #16
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200003c0 	.word	0x200003c0
 8001618:	200003c6 	.word	0x200003c6
 800161c:	200000f8 	.word	0x200000f8
 8001620:	200003b8 	.word	0x200003b8

08001624 <RF_Process>:

EnumRFResult RF_Process(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
    EnumRFResult nRes = RF_BUSY;
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]

    switch (g_nNextRFState)
 8001630:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <RF_Process+0x24c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b09      	cmp	r3, #9
 8001636:	d900      	bls.n	800163a <RF_Process+0x16>
 8001638:	e10e      	b.n	8001858 <RF_Process+0x234>
 800163a:	009a      	lsls	r2, r3, #2
 800163c:	4b8d      	ldr	r3, [pc, #564]	; (8001874 <RF_Process+0x250>)
 800163e:	18d3      	adds	r3, r2, r3
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	469f      	mov	pc, r3
    {
    case RF_STATE_IDLE:
    {
        nRes = RF_IDLE;
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
        break;
 800164a:	e10a      	b.n	8001862 <RF_Process+0x23e>
    }

    case RF_STATE_RX_START:
    {
        Cmt2300_GoStby();
 800164c:	f7fe ffab 	bl	80005a6 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 8001650:	f7ff f8eb 	bl	800082a <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableReadFifo();
 8001654:	f7ff f898 	bl	8000788 <Cmt2300_EnableReadFifo>
        Cmt2300_ClearFifo();
 8001658:	f7ff f8d4 	bl	8000804 <Cmt2300_ClearFifo>

        if (false == Cmt2300_GoRx())
 800165c:	f7fe ffbd 	bl	80005da <Cmt2300_GoRx>
 8001660:	0003      	movs	r3, r0
 8001662:	001a      	movs	r2, r3
 8001664:	2301      	movs	r3, #1
 8001666:	4053      	eors	r3, r2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <RF_Process+0x52>
        {
            g_nNextRFState = RF_STATE_ERROR;
 800166e:	4b80      	ldr	r3, [pc, #512]	; (8001870 <RF_Process+0x24c>)
 8001670:	2209      	movs	r2, #9
 8001672:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;

            g_nRxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 8001674:	e0f5      	b.n	8001862 <RF_Process+0x23e>
            cmt2300_irq_request=0;
 8001676:	4b80      	ldr	r3, [pc, #512]	; (8001878 <RF_Process+0x254>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_WAIT;
 800167c:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <RF_Process+0x24c>)
 800167e:	2202      	movs	r2, #2
 8001680:	701a      	strb	r2, [r3, #0]
            g_nRxTimeCount = Cmt2300_GetTickCount();
 8001682:	4b7e      	ldr	r3, [pc, #504]	; (800187c <RF_Process+0x258>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b7e      	ldr	r3, [pc, #504]	; (8001880 <RF_Process+0x25c>)
 8001688:	601a      	str	r2, [r3, #0]
        break;
 800168a:	e0ea      	b.n	8001862 <RF_Process+0x23e>
    case RF_STATE_RX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_PKT_OK_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_FLAG)) /* Read PKT_OK flag */
#else
        if (cmt2300_irq_request) /* Read INT2, PKT_OK */
 800168c:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <RF_Process+0x254>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <RF_Process+0x7e>
#endif
        {
            cmt2300_irq_request=0;
 8001696:	4b78      	ldr	r3, [pc, #480]	; (8001878 <RF_Process+0x254>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_RX_DONE;
 800169c:	4b74      	ldr	r3, [pc, #464]	; (8001870 <RF_Process+0x24c>)
 800169e:	2203      	movs	r2, #3
 80016a0:	701a      	strb	r2, [r3, #0]
        }

        if( (INFINITE != g_nRxTimeout) && ((g_nSysTickCount-g_nRxTimeCount) > g_nRxTimeout) )
 80016a2:	4b78      	ldr	r3, [pc, #480]	; (8001884 <RF_Process+0x260>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	d100      	bne.n	80016ac <RF_Process+0x88>
 80016aa:	e0d7      	b.n	800185c <RF_Process+0x238>
 80016ac:	4b73      	ldr	r3, [pc, #460]	; (800187c <RF_Process+0x258>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b73      	ldr	r3, [pc, #460]	; (8001880 <RF_Process+0x25c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1ad2      	subs	r2, r2, r3
 80016b6:	4b73      	ldr	r3, [pc, #460]	; (8001884 <RF_Process+0x260>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d800      	bhi.n	80016c0 <RF_Process+0x9c>
 80016be:	e0cd      	b.n	800185c <RF_Process+0x238>
            g_nNextRFState = RF_STATE_RX_TIMEOUT;
 80016c0:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <RF_Process+0x24c>)
 80016c2:	2204      	movs	r2, #4
 80016c4:	701a      	strb	r2, [r3, #0]
        
        break;
 80016c6:	e0c9      	b.n	800185c <RF_Process+0x238>
    }

    case RF_STATE_RX_DONE:
    {
        Cmt2300_GoStby();
 80016c8:	f7fe ff6d 	bl	80005a6 <Cmt2300_GoStby>

        Cmt2300_ReadFifo(g_pRxBuffer, 1);//读取数据长度
 80016cc:	4b6e      	ldr	r3, [pc, #440]	; (8001888 <RF_Process+0x264>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff fc23 	bl	8000f1e <Cmt2300_ReadFifo>
           
        PlayLoadlen=g_pRxBuffer[0];
 80016d8:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <RF_Process+0x264>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	4b6b      	ldr	r3, [pc, #428]	; (800188c <RF_Process+0x268>)
 80016e0:	701a      	strb	r2, [r3, #0]
        
        /* The length need be smaller than 32 */
        Cmt2300_ReadFifo(g_pRxBuffer, PlayLoadlen);
 80016e2:	4b69      	ldr	r3, [pc, #420]	; (8001888 <RF_Process+0x264>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b69      	ldr	r3, [pc, #420]	; (800188c <RF_Process+0x268>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	0019      	movs	r1, r3
 80016ee:	0010      	movs	r0, r2
 80016f0:	f7ff fc15 	bl	8000f1e <Cmt2300_ReadFifo>

        g_nInterrutFlags = Cmt2300_ClearInterruptFlags();
 80016f4:	f7ff f899 	bl	800082a <Cmt2300_ClearInterruptFlags>
 80016f8:	0003      	movs	r3, r0
 80016fa:	001a      	movs	r2, r3
 80016fc:	4b64      	ldr	r3, [pc, #400]	; (8001890 <RF_Process+0x26c>)
 80016fe:	701a      	strb	r2, [r3, #0]

        //        Cmt2300_GoSleep();
#ifdef USE_CUBEIDE
        rfRecvDoneCallback();
 8001700:	f000 fc8e 	bl	8002020 <rfRecvDoneCallback>
        led2Toggle();
 8001704:	4b63      	ldr	r3, [pc, #396]	; (8001894 <RF_Process+0x270>)
 8001706:	2200      	movs	r2, #0
 8001708:	2120      	movs	r1, #32
 800170a:	0018      	movs	r0, r3
 800170c:	f001 fdaf 	bl	800326e <HAL_GPIO_WritePin>
 8001710:	2032      	movs	r0, #50	; 0x32
 8001712:	f000 f90d 	bl	8001930 <Delay_Ms>
 8001716:	4b5f      	ldr	r3, [pc, #380]	; (8001894 <RF_Process+0x270>)
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	0018      	movs	r0, r3
 800171e:	f001 fda6 	bl	800326e <HAL_GPIO_WritePin>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 8001722:	4b53      	ldr	r3, [pc, #332]	; (8001870 <RF_Process+0x24c>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_DONE;
 8001728:	1dfb      	adds	r3, r7, #7
 800172a:	2202      	movs	r2, #2
 800172c:	701a      	strb	r2, [r3, #0]
        break;
 800172e:	e098      	b.n	8001862 <RF_Process+0x23e>
    case RF_STATE_RX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();
        //
#ifdef USE_CUBEIDE
    	rfRecvTimeoutCallback();
 8001730:	f000 fca2 	bl	8002078 <rfRecvTimeoutCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <RF_Process+0x24c>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
        nRes = RF_RX_TIMEOUT;
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	2203      	movs	r2, #3
 800173e:	701a      	strb	r2, [r3, #0]

        break;
 8001740:	e08f      	b.n	8001862 <RF_Process+0x23e>
    }

    case RF_STATE_TX_START:
    {
        Cmt2300_GoStby();
 8001742:	f7fe ff30 	bl	80005a6 <Cmt2300_GoStby>
        Cmt2300_ClearInterruptFlags();
 8001746:	f7ff f870 	bl	800082a <Cmt2300_ClearInterruptFlags>

        /* Must clear FIFO after enable SPI to read or write the FIFO */
        Cmt2300_EnableWriteFifo();
 800174a:	f7ff f83c 	bl	80007c6 <Cmt2300_EnableWriteFifo>
        Cmt2300_ClearFifo();
 800174e:	f7ff f859 	bl	8000804 <Cmt2300_ClearFifo>

        Cmt2300_SetPayloadLength(g_nTxLength); //发射数据长度
 8001752:	4b51      	ldr	r3, [pc, #324]	; (8001898 <RF_Process+0x274>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff fad6 	bl	8000d08 <Cmt2300_SetPayloadLength>
      
        Cmt2300_WriteFifo(g_pTxBuffer, g_nTxLength);
 800175c:	4b4f      	ldr	r3, [pc, #316]	; (800189c <RF_Process+0x278>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <RF_Process+0x274>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	0019      	movs	r1, r3
 8001766:	0010      	movs	r0, r2
 8001768:	f7ff fbeb 	bl	8000f42 <Cmt2300_WriteFifo>

        if (0 == (CMT2300_MASK_TX_FIFO_NMTY_FLG & Cmt2300_ReadReg(CMT2300_CUS_FIFO_FLAG)))
 800176c:	206e      	movs	r0, #110	; 0x6e
 800176e:	f7ff fbaa 	bl	8000ec6 <Cmt2300_ReadReg>
 8001772:	0003      	movs	r3, r0
 8001774:	001a      	movs	r2, r3
 8001776:	2302      	movs	r3, #2
 8001778:	4013      	ands	r3, r2
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <RF_Process+0x162>
        {
            g_nNextRFState = RF_STATE_ERROR;
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <RF_Process+0x24c>)
 8001782:	2209      	movs	r2, #9
 8001784:	701a      	strb	r2, [r3, #0]
        }

        if (false == Cmt2300_GoTx())
 8001786:	f7fe ff1b 	bl	80005c0 <Cmt2300_GoTx>
 800178a:	0003      	movs	r3, r0
 800178c:	001a      	movs	r2, r3
 800178e:	2301      	movs	r3, #1
 8001790:	4053      	eors	r3, r2
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <RF_Process+0x17c>
        {
            g_nNextRFState = RF_STATE_ERROR;
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <RF_Process+0x24c>)
 800179a:	2209      	movs	r2, #9
 800179c:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;

            g_nTxTimeCount = Cmt2300_GetTickCount();
        }

        break;
 800179e:	e060      	b.n	8001862 <RF_Process+0x23e>
            cmt2300_irq_request=0;
 80017a0:	4b35      	ldr	r3, [pc, #212]	; (8001878 <RF_Process+0x254>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
            g_nNextRFState = RF_STATE_TX_WAIT;
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <RF_Process+0x24c>)
 80017a8:	2206      	movs	r2, #6
 80017aa:	701a      	strb	r2, [r3, #0]
            g_nTxTimeCount = Cmt2300_GetTickCount();
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <RF_Process+0x258>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <RF_Process+0x27c>)
 80017b2:	601a      	str	r2, [r3, #0]
        break;
 80017b4:	e055      	b.n	8001862 <RF_Process+0x23e>
    case RF_STATE_TX_WAIT:
    {
#ifdef ENABLE_ANTENNA_SWITCH
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
#else
        if (CMT2300_MASK_TX_DONE_FLG & Cmt2300_ReadReg(CMT2300_CUS_INT_CLR1)) /* Read TX_DONE flag */
 80017b6:	206a      	movs	r0, #106	; 0x6a
 80017b8:	f7ff fb85 	bl	8000ec6 <Cmt2300_ReadReg>
 80017bc:	0003      	movs	r3, r0
 80017be:	001a      	movs	r2, r3
 80017c0:	2308      	movs	r3, #8
 80017c2:	4013      	ands	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <RF_Process+0x1ac>
#endif
        {         
          g_nNextRFState = RF_STATE_TX_DONE;
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <RF_Process+0x24c>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	701a      	strb	r2, [r3, #0]
        }
        
        if( (INFINITE != g_nTxTimeout) && ((g_nSysTickCount-g_nTxTimeCount) > g_nTxTimeout) )
 80017d0:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <RF_Process+0x280>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	d043      	beq.n	8001860 <RF_Process+0x23c>
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <RF_Process+0x258>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <RF_Process+0x27c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1ad2      	subs	r2, r2, r3
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <RF_Process+0x280>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d93a      	bls.n	8001860 <RF_Process+0x23c>
            g_nNextRFState = RF_STATE_TX_TIMEOUT;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <RF_Process+0x24c>)
 80017ec:	2208      	movs	r2, #8
 80017ee:	701a      	strb	r2, [r3, #0]

        break;
 80017f0:	e036      	b.n	8001860 <RF_Process+0x23c>
    }

    case RF_STATE_TX_DONE:
    {
        Cmt2300_ClearInterruptFlags();
 80017f2:	f7ff f81a 	bl	800082a <Cmt2300_ClearInterruptFlags>
        //Cmt2300_GoSleep();
#ifdef USE_CUBEIDE
        rfSendDoneCallback();
 80017f6:	f000 fc29 	bl	800204c <rfSendDoneCallback>
        led1Toggle();
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <RF_Process+0x270>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	2110      	movs	r1, #16
 8001800:	0018      	movs	r0, r3
 8001802:	f001 fd34 	bl	800326e <HAL_GPIO_WritePin>
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f000 f892 	bl	8001930 <Delay_Ms>
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <RF_Process+0x270>)
 800180e:	2201      	movs	r2, #1
 8001810:	2110      	movs	r1, #16
 8001812:	0018      	movs	r0, r3
 8001814:	f001 fd2b 	bl	800326e <HAL_GPIO_WritePin>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <RF_Process+0x24c>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_DONE;
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	2204      	movs	r2, #4
 8001822:	701a      	strb	r2, [r3, #0]
        break;
 8001824:	e01d      	b.n	8001862 <RF_Process+0x23e>
    }

    case RF_STATE_TX_TIMEOUT:
    {
        //        Cmt2300_GoSleep();      
        g_nNextRFState = RF_STATE_IDLE;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <RF_Process+0x24c>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
        nRes = RF_TX_TIMEOUT;
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	2205      	movs	r2, #5
 8001830:	701a      	strb	r2, [r3, #0]
        break;
 8001832:	e016      	b.n	8001862 <RF_Process+0x23e>
    }

    case RF_STATE_ERROR:
    {
        Cmt2300_SoftReset();
 8001834:	f7fe fe4c 	bl	80004d0 <Cmt2300_SoftReset>
        Delay_Ms(10);
 8001838:	200a      	movs	r0, #10
 800183a:	f000 f879 	bl	8001930 <Delay_Ms>

        Cmt2300_GoStby();
 800183e:	f7fe feb2 	bl	80005a6 <Cmt2300_GoStby>
        RF_Config();
 8001842:	f7ff fe8b 	bl	800155c <RF_Config>
#ifdef USE_CUBEIDE
        rfRecvErrorCallback();
 8001846:	f000 fc2d 	bl	80020a4 <rfRecvErrorCallback>
#endif
        g_nNextRFState = RF_STATE_IDLE;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <RF_Process+0x24c>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
        nRes = RF_ERROR;
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	2206      	movs	r2, #6
 8001854:	701a      	strb	r2, [r3, #0]
        break;
 8001856:	e004      	b.n	8001862 <RF_Process+0x23e>
    }

    default:
        break;
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	e002      	b.n	8001862 <RF_Process+0x23e>
        break;
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	e000      	b.n	8001862 <RF_Process+0x23e>
        break;
 8001860:	46c0      	nop			; (mov r8, r8)
    }

    return nRes;
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	781b      	ldrb	r3, [r3, #0]
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b002      	add	sp, #8
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	200003b8 	.word	0x200003b8
 8001874:	08006a04 	.word	0x08006a04
 8001878:	200003d2 	.word	0x200003d2
 800187c:	200003d4 	.word	0x200003d4
 8001880:	200003c8 	.word	0x200003c8
 8001884:	200000f4 	.word	0x200000f4
 8001888:	200003bc 	.word	0x200003bc
 800188c:	200003d0 	.word	0x200003d0
 8001890:	200003d1 	.word	0x200003d1
 8001894:	48000400 	.word	0x48000400
 8001898:	200003c6 	.word	0x200003c6
 800189c:	200003c0 	.word	0x200003c0
 80018a0:	200003cc 	.word	0x200003cc
 80018a4:	200000f8 	.word	0x200000f8

080018a8 <bspInit>:

/*----------------------------------------------------------------
 *  FUNCTION DEFINITION
 *--------------------------------------------------------------*/
void bspInit(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    uartInit(BSP_TTL_CHANNEL1);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 f979 	bl	8001ba4 <uartInit>
    
    RF_Init();
 80018b2:	f7ff fe17 	bl	80014e4 <RF_Init>
    /* check rf is inited ok */
    if (Cmt2300_IsExist())
 80018b6:	f7ff fa03 	bl	8000cc0 <Cmt2300_IsExist>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d006      	beq.n	80018cc <bspInit+0x24>
    {
        led1On();
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <bspInit+0x80>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	2110      	movs	r1, #16
 80018c4:	0018      	movs	r0, r3
 80018c6:	f001 fcd2 	bl	800326e <HAL_GPIO_WritePin>
 80018ca:	e005      	b.n	80018d8 <bspInit+0x30>
    }
    else
    {
        led2On();
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <bspInit+0x80>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	2120      	movs	r1, #32
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fccb 	bl	800326e <HAL_GPIO_WritePin>
    }

    /* level7: 20dbm */
    Cmt2300_ConfigTxPower(7);
 80018d8:	2007      	movs	r0, #7
 80018da:	f7ff f989 	bl	8000bf0 <Cmt2300_ConfigTxPower>
    /* rate:1.2kbps */
    Cmt2300_ConfigDataRate(rf_rate_1K2);
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff f8b0 	bl	8000a44 <Cmt2300_ConfigDataRate>
    /* packet type */
    Cmt2300_ConfigPktLenthType(CMT2300_PKT_TYPE_VARIABLE);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f7fe fe32 	bl	800054e <Cmt2300_ConfigPktLenthType>
    /* packet mode */
    Cmt2300_ConfigDataMode(CMT2300_DATA_MODE_PACKET);
 80018ea:	2002      	movs	r0, #2
 80018ec:	f7ff f960 	bl	8000bb0 <Cmt2300_ConfigDataMode>
    /* enable fifo */
    Cmt2300_EnableFifoMerge(true);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7fe ff1f 	bl	8000734 <Cmt2300_EnableFifoMerge>

    /* disable rf time */
    RF_StartRx(g_rxBuffer, RF_PACKET_SIZE, INFINITE);
 80018f6:	2301      	movs	r3, #1
 80018f8:	425a      	negs	r2, r3
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <bspInit+0x84>)
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	0018      	movs	r0, r3
 8001900:	f7ff fe44 	bl	800158c <RF_StartRx>
    rfTimerEnable();
 8001904:	f000 f8b6 	bl	8001a74 <rfTimerEnable>
    led2Off();
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <bspInit+0x80>)
 800190a:	2200      	movs	r2, #0
 800190c:	2120      	movs	r1, #32
 800190e:	0018      	movs	r0, r3
 8001910:	f001 fcad 	bl	800326e <HAL_GPIO_WritePin>
    led2Off();
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <bspInit+0x80>)
 8001916:	2200      	movs	r2, #0
 8001918:	2120      	movs	r1, #32
 800191a:	0018      	movs	r0, r3
 800191c:	f001 fca7 	bl	800326e <HAL_GPIO_WritePin>
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	48000400 	.word	0x48000400
 800192c:	2000029c 	.word	0x2000029c

08001930 <Delay_Ms>:
    for(j=0;j<8;j++);
  }
}

void Delay_Ms(uint32_t delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t i=0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  uint32_t j=0;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  
  for(i=0;i<delay;i++)
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e00c      	b.n	8001960 <Delay_Ms+0x30>
  {
    for(j=0;j<4540;j++);
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	e002      	b.n	8001952 <Delay_Ms+0x22>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <Delay_Ms+0x44>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d9f8      	bls.n	800194c <Delay_Ms+0x1c>
  for(i=0;i<delay;i++)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	d3ee      	bcc.n	8001946 <Delay_Ms+0x16>
  }
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	000011bb 	.word	0x000011bb

08001978 <spi_gpio_init>:
*  The following need to be modified by user
*  ************************************************************************ */

/* ************************************************************************ */
void spi_gpio_init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <cmt_spi3_sda_out>:

void cmt_spi3_sda_out(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	0018      	movs	r0, r3
 800198e:	2314      	movs	r3, #20
 8001990:	001a      	movs	r2, r3
 8001992:	2100      	movs	r1, #0
 8001994:	f004 f9f7 	bl	8005d86 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <cmt_spi3_sda_out+0x60>)
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <cmt_spi3_sda_out+0x60>)
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	0289      	lsls	r1, r1, #10
 80019a2:	430a      	orrs	r2, r1
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <cmt_spi3_sda_out+0x60>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	4013      	ands	r3, r2
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0052      	lsls	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2201      	movs	r2, #1
 80019c0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2203      	movs	r2, #3
 80019cc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 80019ce:	1d3a      	adds	r2, r7, #4
 80019d0:	2390      	movs	r3, #144	; 0x90
 80019d2:	05db      	lsls	r3, r3, #23
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f001 f9ec 	bl	8002db4 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b006      	add	sp, #24
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000

080019e8 <cmt_spi3_sda_in>:
void cmt_spi3_sda_in(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
#ifdef USE_CUBEIDE
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	0018      	movs	r0, r3
 80019f2:	2314      	movs	r3, #20
 80019f4:	001a      	movs	r2, r3
 80019f6:	2100      	movs	r1, #0
 80019f8:	f004 f9c5 	bl	8005d86 <memset>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <cmt_spi3_sda_in+0x5c>)
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <cmt_spi3_sda_in+0x5c>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	0289      	lsls	r1, r1, #10
 8001a06:	430a      	orrs	r2, r1
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <cmt_spi3_sda_in+0x5c>)
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	029b      	lsls	r3, r3, #10
 8001a12:	4013      	ands	r3, r2
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	0052      	lsls	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	1d3a      	adds	r2, r7, #4
 8001a2e:	2390      	movs	r3, #144	; 0x90
 8001a30:	05db      	lsls	r3, r3, #23
 8001a32:	0011      	movs	r1, r2
 8001a34:	0018      	movs	r0, r3
 8001a36:	f001 f9bd 	bl	8002db4 <HAL_GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = cmt_spi_sda_pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(cmt_spi_sda_port, &GPIO_InitStructure);
#endif
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b006      	add	sp, #24
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	40021000 	.word	0x40021000

08001a48 <HAL_GPIO_EXTI_Callback>:
#endif
}

#ifdef USE_CUBEIDE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	0002      	movs	r2, r0
 8001a50:	1dbb      	adds	r3, r7, #6
 8001a52:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_RF_GPIO3_Pin)
 8001a54:	1dbb      	adds	r3, r7, #6
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d102      	bne.n	8001a66 <HAL_GPIO_EXTI_Callback+0x1e>
//        else if (ret == RF_STATE_TX_WAIT)
//        {
//            rfSendDoneCallback();
//        }
        
		cmt2300_irq_request = 1;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x28>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
	}
}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	200003d2 	.word	0x200003d2

08001a74 <rfTimerEnable>:
/**
 * @brief rf timer enable
 * 
 */
void rfTimerEnable(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim16);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <rfTimerEnable+0x14>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f002 f9ae 	bl	8003ddc <HAL_TIM_Base_Start_IT>
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	200005fc 	.word	0x200005fc

08001a8c <rfTimerDisable>:
/**
 * @brief rf timer disable
 * 
 */
void rfTimerDisable(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim16);
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <rfTimerDisable+0x14>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f002 f9ee 	bl	8003e74 <HAL_TIM_Base_Stop_IT>
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	200005fc 	.word	0x200005fc

08001aa4 <HAL_TIM_PeriodElapsedCallback>:
 * 
 * @param htim timer handler
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    //	if(htim->Instance == htim14.Instance)
    //	{
    //		time10ms_flag = 1;
    //		timer10InterruptHandler();
    //	}
    if(htim->Instance == htim16.Instance)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d101      	bne.n	8001abc <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        HAL_Timer16Callback();
 8001ab8:	f000 fb0a 	bl	80020d0 <HAL_Timer16Callback>
    }
    if (htim->Instance == htim17.Instance) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d103      	bne.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2c>
        uartTimerIrqHandler(htim);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fa00 	bl	8001ed0 <uartTimerIrqHandler>
    }
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200005fc 	.word	0x200005fc
 8001adc:	20000644 	.word	0x20000644

08001ae0 <HAL_SysTick_Handler>:
 * 
 * @param None
 * @retval None
 */
void HAL_SysTick_Handler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	g_nSysTickCount++;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_SysTick_Handler+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <HAL_SysTick_Handler+0x14>)
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200003d4 	.word	0x200003d4

08001af8 <kfifo_reset>:
/**
 * kfifo_reset - removes the entire FIFO contents
 * @fifo: the fifo to be emptied.
 */
static __inline void kfifo_reset(struct kfifo *fifo)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b002      	add	sp, #8
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <uartInitRxFifo>:
 * 
 * @param None
 * @retval None
 */
static void uartInitRxFifo(uartChannel_t channel)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	0002      	movs	r2, r0
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	701a      	strb	r2, [r3, #0]
    kfifo_init(&uart_rx_fifo[channel], uart_rx_buffer[channel], UART_BUFFER_SIZE);
 8001b24:	1dfb      	adds	r3, r7, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	011a      	lsls	r2, r3, #4
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <uartInitRxFifo+0x34>)
 8001b2c:	18d0      	adds	r0, r2, r3
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	025a      	lsls	r2, r3, #9
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <uartInitRxFifo+0x38>)
 8001b36:	18d3      	adds	r3, r2, r3
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	f003 fe60 	bl	8005802 <kfifo_init>
}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b002      	add	sp, #8
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	200005dc 	.word	0x200005dc
 8001b50:	200003dc 	.word	0x200003dc

08001b54 <UART_Receive_IT>:
 * @param pData data
 * @param Size size
 * @return HAL_StatusTypeDef return handle status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	1dbb      	adds	r3, r7, #6
 8001b60:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8001b62:	2517      	movs	r5, #23
 8001b64:	197b      	adds	r3, r7, r5
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]

    status = HAL_UART_Receive_IT(huart, pData, Size);
 8001b6a:	197c      	adds	r4, r7, r5
 8001b6c:	1dbb      	adds	r3, r7, #6
 8001b6e:	881a      	ldrh	r2, [r3, #0]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f002 fc99 	bl	80044ac <HAL_UART_Receive_IT>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8001b7e:	197b      	adds	r3, r7, r5
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <UART_Receive_IT+0x42>
        // if (HAL_UART_STATE_READY == huart->RxState && HAL_LOCKED == huart->Lock) {
        // {
        // 	__HAL_UNLOCK(huart);
        // }
        /* strategy2 */
        huart->RxState = HAL_UART_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	5099      	str	r1, [r3, r2]
        __HAL_UNLOCK(huart);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2278      	movs	r2, #120	; 0x78
 8001b92:	2100      	movs	r1, #0
 8001b94:	5499      	strb	r1, [r3, r2]
    }

    return status;
 8001b96:	2317      	movs	r3, #23
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b006      	add	sp, #24
 8001ba2:	bdb0      	pop	{r4, r5, r7, pc}

08001ba4 <uartInit>:
 * 
 * @param channel uart channel
 * @retval None
 */
void uartInit(uartChannel_t channel)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	0002      	movs	r2, r0
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	701a      	strb	r2, [r3, #0]
    uartInitRxFifo(channel);
 8001bb0:	1dfb      	adds	r3, r7, #7
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ffaf 	bl	8001b18 <uartInitRxFifo>
    uart_rx_counter[channel] = 0;
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <uartInit+0x60>)
 8001bc0:	0052      	lsls	r2, r2, #1
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	52d1      	strh	r1, [r2, r3]
    uart_rx_size[channel] = 0;
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <uartInit+0x64>)
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	2100      	movs	r1, #0
 8001bd0:	52d1      	strh	r1, [r2, r3]
    uart_tx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <uartInit+0x68>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	705a      	strb	r2, [r3, #1]
    uart_rx_status[UART_ENABLED_CHANNEL] = BSP_UART_IDLE;
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <uartInit+0x6c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	705a      	strb	r2, [r3, #1]
    UART_Receive_IT(uartPara[channel].uart_handle_addr, &uart_rx_byte[channel], 1);
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <uartInit+0x70>)
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	18d3      	adds	r3, r2, r3
 8001be8:	3304      	adds	r3, #4
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <uartInit+0x74>)
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	f7ff ffac 	bl	8001b54 <UART_Receive_IT>
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200005ec 	.word	0x200005ec
 8001c08:	200005f0 	.word	0x200005f0
 8001c0c:	200005f4 	.word	0x200005f4
 8001c10:	200005f8 	.word	0x200005f8
 8001c14:	200000fc 	.word	0x200000fc
 8001c18:	200003d8 	.word	0x200003d8

08001c1c <uartRecovery>:
 * 
 * @param channel 
 * @retval None
 */
static void uartRecovery(uartChannel_t channel)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	0002      	movs	r2, r0
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	701a      	strb	r2, [r3, #0]
    HAL_UART_DeInit(uartPara[channel].uart_handle_addr);
 8001c28:	1dfb      	adds	r3, r7, #7
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <uartRecovery+0x34>)
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	18d3      	adds	r3, r2, r3
 8001c32:	3304      	adds	r3, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f002 fb5a 	bl	80042f0 <HAL_UART_DeInit>
    uartInit(channel);
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff ffaf 	bl	8001ba4 <uartInit>
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	200000fc 	.word	0x200000fc

08001c54 <uartSendData>:
 * @param data
 * @param length
 * @retval None
 */
void uartSendData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6039      	str	r1, [r7, #0]
 8001c5c:	0011      	movs	r1, r2
 8001c5e:	1dfb      	adds	r3, r7, #7
 8001c60:	1c02      	adds	r2, r0, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	1c0a      	adds	r2, r1, #0
 8001c68:	801a      	strh	r2, [r3, #0]
    uart_tx_status[channel] = BSP_UART_TX_START;
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <uartSendData+0x54>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	54d1      	strb	r1, [r2, r3]
	// if (HAL_UART_Transmit_DMA(uartPara[channel].uart_handle_addr, data, length) != HAL_OK)
	/* use IT mode send data */
	// if (HAL_UART_Transmit_IT( uartPara[channel].uart_handle_addr, data, length ) != HAL_OK)
	/* use poll mode send data */
	if (HAL_UART_Transmit(uartPara[channel].uart_handle_addr, data, length, 0xFFFF) != HAL_OK)
 8001c74:	1dfb      	adds	r3, r7, #7
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <uartSendData+0x58>)
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	3304      	adds	r3, #4
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <uartSendData+0x5c>)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	0023      	movs	r3, r4
 8001c8c:	f002 fb6e 	bl	800436c <HAL_UART_Transmit>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d004      	beq.n	8001c9e <uartSendData+0x4a>
    {
        uartRecovery(channel);
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff ffbf 	bl	8001c1c <uartRecovery>
    }
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b003      	add	sp, #12
 8001ca4:	bd90      	pop	{r4, r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	200005f4 	.word	0x200005f4
 8001cac:	200000fc 	.word	0x200000fc
 8001cb0:	0000ffff 	.word	0x0000ffff

08001cb4 <HAL_UART_TxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_UART_TxCpltCallback+0x3e>
	{
        if (uartPara[i].uart_instance == huart->Instance) 
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_UART_TxCpltCallback+0x54>)
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	58d2      	ldr	r2, [r2, r3]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d105      	bne.n	8001ce6 <HAL_UART_TxCpltCallback+0x32>
        {
            uart_tx_status[i] = BSP_UART_TX_COMPLETED; 
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_UART_TxCpltCallback+0x58>)
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	54d1      	strb	r1, [r2, r3]
            break;
 8001ce4:	e00b      	b.n	8001cfe <HAL_UART_TxCpltCallback+0x4a>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	3201      	adds	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	230f      	movs	r3, #15
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0e4      	beq.n	8001cc6 <HAL_UART_TxCpltCallback+0x12>
        }
    }
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b004      	add	sp, #16
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	200000fc 	.word	0x200000fc
 8001d0c:	200005f4 	.word	0x200005f4

08001d10 <uartGetData>:
 * @param data 
 * @param length 
 * @retval uint32_t 
 */
uint32_t uartGetData(uartChannel_t channel, uint8_t data[], uint16_t length)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6039      	str	r1, [r7, #0]
 8001d18:	0011      	movs	r1, r2
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	1c02      	adds	r2, r0, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	1c0a      	adds	r2, r1, #0
 8001d24:	801a      	strh	r2, [r3, #0]
    uint32_t ret = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]

    if (BSP_UART_RX_COMPLETED == uart_rx_status[channel]) 
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <uartGetData+0x54>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d10d      	bne.n	8001d54 <uartGetData+0x44>
	{
		ret = kfifo_out(&uart_rx_fifo[channel], data, length);
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	011a      	lsls	r2, r3, #4
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <uartGetData+0x58>)
 8001d40:	18d0      	adds	r0, r2, r3
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	881a      	ldrh	r2, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	0019      	movs	r1, r3
 8001d4a:	f003 fdfb 	bl	8005944 <kfifo_out>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	e001      	b.n	8001d58 <uartGetData+0x48>
	}    
	else
	{
		ret = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
	}

    return ret;
 8001d58:	68fb      	ldr	r3, [r7, #12]
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	200005f8 	.word	0x200005f8
 8001d68:	200005dc 	.word	0x200005dc

08001d6c <uartResetData>:
 * 
 * @param channel 
 * @retval None
 */
void uartResetData(uartChannel_t channel)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	0002      	movs	r2, r0
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	701a      	strb	r2, [r3, #0]
    kfifo_reset(&uart_rx_fifo[channel]);
 8001d78:	1dfb      	adds	r3, r7, #7
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	011a      	lsls	r2, r3, #4
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <uartResetData+0x3c>)
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff feb8 	bl	8001af8 <kfifo_reset>
    uart_rx_size[channel] = 0;
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <uartResetData+0x40>)
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	2100      	movs	r1, #0
 8001d92:	52d1      	strh	r1, [r2, r3]
    uart_rx_status[channel] = BSP_UART_IDLE;
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <uartResetData+0x44>)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	54d1      	strb	r1, [r2, r3]
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	200005dc 	.word	0x200005dc
 8001dac:	200005f0 	.word	0x200005f0
 8001db0:	200005f8 	.word	0x200005f8

08001db4 <HAL_UART_RxCpltCallback>:
 * 
 * @param huart 
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e072      	b.n	8001eac <HAL_UART_RxCpltCallback+0xf8>
    {
        if (uartPara[i].uart_instance == huart->Instance) 
 8001dc6:	240f      	movs	r4, #15
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_UART_RxCpltCallback+0x108>)
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	58d2      	ldr	r2, [r2, r3]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d162      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0xec>
		{
            uart_rx_status[i] = BSP_UART_RX_START; 
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	4a38      	ldr	r2, [pc, #224]	; (8001ec0 <HAL_UART_RxCpltCallback+0x10c>)
 8001de0:	2103      	movs	r1, #3
 8001de2:	54d1      	strb	r1, [r2, r3]
            uartPara[i].tim_instance->SR = 0; 
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <HAL_UART_RxCpltCallback+0x108>)
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	18d3      	adds	r3, r2, r3
 8001dee:	3308      	adds	r3, #8
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
            uartPara[i].tim_instance->CNT = 1;
 8001df6:	193b      	adds	r3, r7, r4
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4a30      	ldr	r2, [pc, #192]	; (8001ebc <HAL_UART_RxCpltCallback+0x108>)
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	18d3      	adds	r3, r2, r3
 8001e00:	3308      	adds	r3, #8
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start_IT(uartPara[i].tim_handle_addr); 
 8001e08:	193b      	adds	r3, r7, r4
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4a2b      	ldr	r2, [pc, #172]	; (8001ebc <HAL_UART_RxCpltCallback+0x108>)
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	18d3      	adds	r3, r2, r3
 8001e12:	330c      	adds	r3, #12
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f001 ffe0 	bl	8003ddc <HAL_TIM_Base_Start_IT>
            if (uart_rx_counter[i] >= (UART_BUFFER_SIZE-1))
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_UART_RxCpltCallback+0x110>)
 8001e22:	0052      	lsls	r2, r2, #1
 8001e24:	5ad2      	ldrh	r2, [r2, r3]
 8001e26:	23ff      	movs	r3, #255	; 0xff
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d90d      	bls.n	8001e4a <HAL_UART_RxCpltCallback+0x96>
            {
            	kfifo_reset(&uart_rx_fifo[i]);
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	011a      	lsls	r2, r3, #4
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_UART_RxCpltCallback+0x114>)
 8001e36:	18d3      	adds	r3, r2, r3
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff fe5d 	bl	8001af8 <kfifo_reset>
            	uart_rx_counter[i] = 0;
 8001e3e:	193b      	adds	r3, r7, r4
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_UART_RxCpltCallback+0x110>)
 8001e44:	0052      	lsls	r2, r2, #1
 8001e46:	2100      	movs	r1, #0
 8001e48:	52d1      	strh	r1, [r2, r3]
            }
            kfifo_in(&uart_rx_fifo[i], &uart_rx_byte[i], sizeof(uart_rx_byte[i]));
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	011a      	lsls	r2, r3, #4
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_UART_RxCpltCallback+0x114>)
 8001e54:	18d0      	adds	r0, r2, r3
 8001e56:	000c      	movs	r4, r1
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_UART_RxCpltCallback+0x118>)
 8001e5e:	18d3      	adds	r3, r2, r3
 8001e60:	2201      	movs	r2, #1
 8001e62:	0019      	movs	r1, r3
 8001e64:	f003 fd47 	bl	80058f6 <kfifo_in>
            uart_rx_counter[i]++;
 8001e68:	0020      	movs	r0, r4
 8001e6a:	183b      	adds	r3, r7, r0
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <HAL_UART_RxCpltCallback+0x110>)
 8001e70:	0059      	lsls	r1, r3, #1
 8001e72:	5a8a      	ldrh	r2, [r1, r2]
 8001e74:	3201      	adds	r2, #1
 8001e76:	b291      	uxth	r1, r2
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <HAL_UART_RxCpltCallback+0x110>)
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	5299      	strh	r1, [r3, r2]
            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
 8001e7e:	0001      	movs	r1, r0
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <HAL_UART_RxCpltCallback+0x108>)
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	18d3      	adds	r3, r2, r3
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_UART_RxCpltCallback+0x118>)
 8001e94:	18d3      	adds	r3, r2, r3
 8001e96:	2201      	movs	r2, #1
 8001e98:	0019      	movs	r1, r3
 8001e9a:	f7ff fe5b 	bl	8001b54 <UART_Receive_IT>
            return;
 8001e9e:	e00a      	b.n	8001eb6 <HAL_UART_RxCpltCallback+0x102>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++) 
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	3201      	adds	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d087      	beq.n	8001dc6 <HAL_UART_RxCpltCallback+0x12>
        }
    }
}
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b005      	add	sp, #20
 8001eba:	bd90      	pop	{r4, r7, pc}
 8001ebc:	200000fc 	.word	0x200000fc
 8001ec0:	200005f8 	.word	0x200005f8
 8001ec4:	200005ec 	.word	0x200005ec
 8001ec8:	200005dc 	.word	0x200005dc
 8001ecc:	200003d8 	.word	0x200003d8

08001ed0 <uartTimerIrqHandler>:
 * 
 * @param htim 
 * @retval None
 */
void uartTimerIrqHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e060      	b.n	8001fa4 <uartTimerIrqHandler+0xd4>
    {
        if (uartPara[i].tim_instance == htim->Instance)
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4a33      	ldr	r2, [pc, #204]	; (8001fb8 <uartTimerIrqHandler+0xe8>)
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	18d3      	adds	r3, r2, r3
 8001eee:	3308      	adds	r3, #8
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d14e      	bne.n	8001f98 <uartTimerIrqHandler+0xc8>
		{
            HAL_TIM_Base_Stop_IT(uartPara[i].tim_handle_addr); 
 8001efa:	000c      	movs	r4, r1
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4a2d      	ldr	r2, [pc, #180]	; (8001fb8 <uartTimerIrqHandler+0xe8>)
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	18d3      	adds	r3, r2, r3
 8001f06:	330c      	adds	r3, #12
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f001 ffb2 	bl	8003e74 <HAL_TIM_Base_Stop_IT>
            uart_rx_status[i] = BSP_UART_RX_COMPLETED;
 8001f10:	0020      	movs	r0, r4
 8001f12:	183b      	adds	r3, r7, r0
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <uartTimerIrqHandler+0xec>)
 8001f18:	2104      	movs	r1, #4
 8001f1a:	54d1      	strb	r1, [r2, r3]
            uart_rx_size[i] += uart_rx_counter[i];
 8001f1c:	183b      	adds	r3, r7, r0
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <uartTimerIrqHandler+0xf0>)
 8001f22:	0052      	lsls	r2, r2, #1
 8001f24:	5ad1      	ldrh	r1, [r2, r3]
 8001f26:	183b      	adds	r3, r7, r0
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <uartTimerIrqHandler+0xf4>)
 8001f2c:	0052      	lsls	r2, r2, #1
 8001f2e:	5ad3      	ldrh	r3, [r2, r3]
 8001f30:	183a      	adds	r2, r7, r0
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	18cb      	adds	r3, r1, r3
 8001f36:	b299      	uxth	r1, r3
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <uartTimerIrqHandler+0xf0>)
 8001f3a:	0052      	lsls	r2, r2, #1
 8001f3c:	52d1      	strh	r1, [r2, r3]
            /* uart fifo overflow, discard one package */
            if (uart_rx_size[i] > UART_BUFFER_SIZE)
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <uartTimerIrqHandler+0xf0>)
 8001f44:	0052      	lsls	r2, r2, #1
 8001f46:	5ad2      	ldrh	r2, [r2, r3]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d919      	bls.n	8001f84 <uartTimerIrqHandler+0xb4>
            {
            	kfifo_reset(&uart_rx_fifo[i]);
 8001f50:	0004      	movs	r4, r0
 8001f52:	183b      	adds	r3, r7, r0
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	011a      	lsls	r2, r3, #4
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <uartTimerIrqHandler+0xf8>)
 8001f5a:	18d3      	adds	r3, r2, r3
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff fdcb 	bl	8001af8 <kfifo_reset>
            	uart_rx_size[i] = uart_rx_counter[i];
 8001f62:	0020      	movs	r0, r4
 8001f64:	183b      	adds	r3, r7, r0
 8001f66:	7819      	ldrb	r1, [r3, #0]
 8001f68:	183b      	adds	r3, r7, r0
 8001f6a:	781a      	ldrb	r2, [r3, #0]
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <uartTimerIrqHandler+0xf4>)
 8001f6e:	0049      	lsls	r1, r1, #1
 8001f70:	5ac9      	ldrh	r1, [r1, r3]
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <uartTimerIrqHandler+0xf0>)
 8001f74:	0052      	lsls	r2, r2, #1
 8001f76:	52d1      	strh	r1, [r2, r3]
            	uart_rx_size[i] = 0;
 8001f78:	183b      	adds	r3, r7, r0
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <uartTimerIrqHandler+0xf0>)
 8001f7e:	0052      	lsls	r2, r2, #1
 8001f80:	2100      	movs	r1, #0
 8001f82:	52d1      	strh	r1, [r2, r3]
            }
            uart_rx_counter[i] = 0;
 8001f84:	230f      	movs	r3, #15
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <uartTimerIrqHandler+0xf4>)
 8001f8c:	0052      	lsls	r2, r2, #1
 8001f8e:	2100      	movs	r1, #0
 8001f90:	52d1      	strh	r1, [r2, r3]

#ifdef USE_CUBEIDE
            uartRecvDoneCallback();
 8001f92:	f000 f8a3 	bl	80020dc <uartRecvDoneCallback>
#endif
//            UART_Receive_IT(uartPara[i].uart_handle_addr, &uart_rx_byte[i], 1);
            break;
 8001f96:	e00b      	b.n	8001fb0 <uartTimerIrqHandler+0xe0>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001f98:	210f      	movs	r1, #15
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	3201      	adds	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d099      	beq.n	8001ee2 <uartTimerIrqHandler+0x12>
        }
    }
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b005      	add	sp, #20
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	200000fc 	.word	0x200000fc
 8001fbc:	200005f8 	.word	0x200005f8
 8001fc0:	200005f0 	.word	0x200005f0
 8001fc4:	200005ec 	.word	0x200005ec
 8001fc8:	200005dc 	.word	0x200005dc

08001fcc <HAL_UART_ErrorCallback>:
 * 
 * @param huart
 * @retval None 
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e014      	b.n	8002008 <HAL_UART_ErrorCallback+0x3c>
    {
        if (uartPara[i].uart_instance == huart->Instance)
 8001fde:	210f      	movs	r1, #15
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_UART_ErrorCallback+0x50>)
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	58d2      	ldr	r2, [r2, r3]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d104      	bne.n	8001ffc <HAL_UART_ErrorCallback+0x30>
        {
            uartRecovery(i);
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff fe10 	bl	8001c1c <uartRecovery>
    for (uint8_t i = 0; i < UART_ENABLED_CHANNEL; i++)
 8001ffc:	210f      	movs	r1, #15
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	187b      	adds	r3, r7, r1
 8002004:	3201      	adds	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	230f      	movs	r3, #15
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0e5      	beq.n	8001fde <HAL_UART_ErrorCallback+0x12>
        }
    }
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200000fc 	.word	0x200000fc

08002020 <rfRecvDoneCallback>:
/**
 * @brief rf recv done callback
 * 
 */
void rfRecvDoneCallback(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){uartRecvEvent, NULL});
 8002026:	003b      	movs	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	003b      	movs	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	003a      	movs	r2, r7
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <rfRecvDoneCallback+0x28>)
 8002036:	0011      	movs	r1, r2
 8002038:	0018      	movs	r0, r3
 800203a:	f003 fce4 	bl	8005a06 <mq_push>
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	20000328 	.word	0x20000328

0800204c <rfSendDoneCallback>:
/**
 * @brief rf send done callback
 * 
 */
void rfSendDoneCallback(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfSendEvent, NULL});
 8002052:	003b      	movs	r3, r7
 8002054:	2203      	movs	r2, #3
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	003b      	movs	r3, r7
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	003a      	movs	r2, r7
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <rfSendDoneCallback+0x28>)
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f003 fcce 	bl	8005a06 <mq_push>
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	20000328 	.word	0x20000328

08002078 <rfRecvTimeoutCallback>:
/**
 * @brief 
 * 
 */
void rfRecvTimeoutCallback(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvTimeoutEvent, NULL});
 800207e:	003b      	movs	r3, r7
 8002080:	2205      	movs	r2, #5
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	003b      	movs	r3, r7
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	003a      	movs	r2, r7
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <rfRecvTimeoutCallback+0x28>)
 800208e:	0011      	movs	r1, r2
 8002090:	0018      	movs	r0, r3
 8002092:	f003 fcb8 	bl	8005a06 <mq_push>
}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	20000328 	.word	0x20000328

080020a4 <rfRecvErrorCallback>:
/**
 * @brief 
 * 
 */
void rfRecvErrorCallback(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){rfRecvErrorEvent, NULL});
 80020aa:	003b      	movs	r3, r7
 80020ac:	2204      	movs	r2, #4
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	003b      	movs	r3, r7
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	003a      	movs	r2, r7
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <rfRecvErrorCallback+0x28>)
 80020ba:	0011      	movs	r1, r2
 80020bc:	0018      	movs	r0, r3
 80020be:	f003 fca2 	bl	8005a06 <mq_push>
}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000328 	.word	0x20000328

080020d0 <HAL_Timer16Callback>:
/**
 * @brief timer16 callback,10ms
 *
 */
void HAL_Timer16Callback(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
//    }
//    else if (RF_STATE_ERROR == rfState)
//    {
//        rfRecvErrorCallback();
//    }
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <uartRecvDoneCallback>:
/**
 * @brief uart recv done callback
 * 
 */
void uartRecvDoneCallback(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
    mq_push(&mq, &(struct msg){uartRecvEvent, NULL});
 80020e2:	003b      	movs	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	003b      	movs	r3, r7
 80020ea:	2200      	movs	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	003a      	movs	r2, r7
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <uartRecvDoneCallback+0x28>)
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f003 fc86 	bl	8005a06 <mq_push>
}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	20000328 	.word	0x20000328

08002108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800210c:	f000 fc60 	bl	80029d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002110:	f000 f80f 	bl	8002132 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002114:	f000 f91c 	bl	8002350 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002118:	f000 f8ba 	bl	8002290 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800211c:	f000 f8e8 	bl	80022f0 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8002120:	f000 f88e 	bl	8002240 <MX_TIM17_Init>
  MX_TIM16_Init();
 8002124:	f000 f864 	bl	80021f0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  bspInit();
 8002128:	f7ff fbbe 	bl	80018a8 <bspInit>
  stateActuator();
 800212c:	f7fe f99e 	bl	800046c <stateActuator>
//  messageQueueTest();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002130:	e7fe      	b.n	8002130 <main+0x28>

08002132 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002132:	b590      	push	{r4, r7, lr}
 8002134:	b095      	sub	sp, #84	; 0x54
 8002136:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002138:	2420      	movs	r4, #32
 800213a:	193b      	adds	r3, r7, r4
 800213c:	0018      	movs	r0, r3
 800213e:	2330      	movs	r3, #48	; 0x30
 8002140:	001a      	movs	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	f003 fe1f 	bl	8005d86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002148:	2310      	movs	r3, #16
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	0018      	movs	r0, r3
 800214e:	2310      	movs	r3, #16
 8002150:	001a      	movs	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	f003 fe17 	bl	8005d86 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002158:	003b      	movs	r3, r7
 800215a:	0018      	movs	r0, r3
 800215c:	2310      	movs	r3, #16
 800215e:	001a      	movs	r2, r3
 8002160:	2100      	movs	r1, #0
 8002162:	f003 fe10 	bl	8005d86 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002166:	0021      	movs	r1, r4
 8002168:	187b      	adds	r3, r7, r1
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216e:	187b      	adds	r3, r7, r1
 8002170:	2201      	movs	r2, #1
 8002172:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002174:	187b      	adds	r3, r7, r1
 8002176:	2202      	movs	r2, #2
 8002178:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217a:	187b      	adds	r3, r7, r1
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	0252      	lsls	r2, r2, #9
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8002182:	187b      	adds	r3, r7, r1
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	02d2      	lsls	r2, r2, #11
 8002188:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800218a:	187b      	adds	r3, r7, r1
 800218c:	2200      	movs	r2, #0
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002190:	187b      	adds	r3, r7, r1
 8002192:	0018      	movs	r0, r3
 8002194:	f001 f8a4 	bl	80032e0 <HAL_RCC_OscConfig>
 8002198:	1e03      	subs	r3, r0, #0
 800219a:	d001      	beq.n	80021a0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800219c:	f000 f9c6 	bl	800252c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a0:	2110      	movs	r1, #16
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	2202      	movs	r2, #2
 80021ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021ba:	187b      	adds	r3, r7, r1
 80021bc:	2101      	movs	r1, #1
 80021be:	0018      	movs	r0, r3
 80021c0:	f001 fba8 	bl	8003914 <HAL_RCC_ClockConfig>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d001      	beq.n	80021cc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021c8:	f000 f9b0 	bl	800252c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021cc:	003b      	movs	r3, r7
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80021d2:	003b      	movs	r3, r7
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d8:	003b      	movs	r3, r7
 80021da:	0018      	movs	r0, r3
 80021dc:	f001 fce0 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	1e03      	subs	r3, r0, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80021e4:	f000 f9a2 	bl	800252c <Error_Handler>
  }
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b015      	add	sp, #84	; 0x54
 80021ee:	bd90      	pop	{r4, r7, pc}

080021f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MX_TIM16_Init+0x44>)
 80021f6:	4a10      	ldr	r2, [pc, #64]	; (8002238 <MX_TIM16_Init+0x48>)
 80021f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_TIM16_Init+0x44>)
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <MX_TIM16_Init+0x4c>)
 80021fe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_TIM16_Init+0x44>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MX_TIM16_Init+0x44>)
 8002208:	2263      	movs	r2, #99	; 0x63
 800220a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <MX_TIM16_Init+0x44>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_TIM16_Init+0x44>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_TIM16_Init+0x44>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <MX_TIM16_Init+0x44>)
 8002220:	0018      	movs	r0, r3
 8002222:	f001 fd8b 	bl	8003d3c <HAL_TIM_Base_Init>
 8002226:	1e03      	subs	r3, r0, #0
 8002228:	d001      	beq.n	800222e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800222a:	f000 f97f 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200005fc 	.word	0x200005fc
 8002238:	40014400 	.word	0x40014400
 800223c:	000012bf 	.word	0x000012bf

08002240 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_TIM17_Init+0x44>)
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <MX_TIM17_Init+0x48>)
 8002248:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4800-1;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_TIM17_Init+0x44>)
 800224c:	4a0f      	ldr	r2, [pc, #60]	; (800228c <MX_TIM17_Init+0x4c>)
 800224e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_TIM17_Init+0x44>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 36-1;
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_TIM17_Init+0x44>)
 8002258:	2223      	movs	r2, #35	; 0x23
 800225a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_TIM17_Init+0x44>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <MX_TIM17_Init+0x44>)
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_TIM17_Init+0x44>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <MX_TIM17_Init+0x44>)
 8002270:	0018      	movs	r0, r3
 8002272:	f001 fd63 	bl	8003d3c <HAL_TIM_Base_Init>
 8002276:	1e03      	subs	r3, r0, #0
 8002278:	d001      	beq.n	800227e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800227a:	f000 f957 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000644 	.word	0x20000644
 8002288:	40014800 	.word	0x40014800
 800228c:	000012bf 	.word	0x000012bf

08002290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <MX_USART1_UART_Init+0x5c>)
 8002298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 800229c:	22e1      	movs	r2, #225	; 0xe1
 800229e:	0252      	lsls	r2, r2, #9
 80022a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022b6:	220c      	movs	r2, #12
 80022b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <MX_USART1_UART_Init+0x58>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f001 ffb7 	bl	8004248 <HAL_UART_Init>
 80022da:	1e03      	subs	r3, r0, #0
 80022dc:	d001      	beq.n	80022e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022de:	f000 f925 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000068c 	.word	0x2000068c
 80022ec:	40013800 	.word	0x40013800

080022f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_USART2_UART_Init+0x58>)
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <MX_USART2_UART_Init+0x5c>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <MX_USART2_UART_Init+0x58>)
 80022fc:	22e1      	movs	r2, #225	; 0xe1
 80022fe:	0252      	lsls	r2, r2, #9
 8002300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_USART2_UART_Init+0x58>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <MX_USART2_UART_Init+0x58>)
 8002334:	0018      	movs	r0, r3
 8002336:	f001 ff87 	bl	8004248 <HAL_UART_Init>
 800233a:	1e03      	subs	r3, r0, #0
 800233c:	d001      	beq.n	8002342 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800233e:	f000 f8f5 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000714 	.word	0x20000714
 800234c:	40004400 	.word	0x40004400

08002350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002356:	240c      	movs	r4, #12
 8002358:	193b      	adds	r3, r7, r4
 800235a:	0018      	movs	r0, r3
 800235c:	2314      	movs	r3, #20
 800235e:	001a      	movs	r2, r3
 8002360:	2100      	movs	r1, #0
 8002362:	f003 fd10 	bl	8005d86 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002366:	4b6e      	ldr	r3, [pc, #440]	; (8002520 <MX_GPIO_Init+0x1d0>)
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <MX_GPIO_Init+0x1d0>)
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	03c9      	lsls	r1, r1, #15
 8002370:	430a      	orrs	r2, r1
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <MX_GPIO_Init+0x1d0>)
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	03db      	lsls	r3, r3, #15
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	4b67      	ldr	r3, [pc, #412]	; (8002520 <MX_GPIO_Init+0x1d0>)
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	4b66      	ldr	r3, [pc, #408]	; (8002520 <MX_GPIO_Init+0x1d0>)
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	0289      	lsls	r1, r1, #10
 800238c:	430a      	orrs	r2, r1
 800238e:	615a      	str	r2, [r3, #20]
 8002390:	4b63      	ldr	r3, [pc, #396]	; (8002520 <MX_GPIO_Init+0x1d0>)
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	4013      	ands	r3, r2
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	4b60      	ldr	r3, [pc, #384]	; (8002520 <MX_GPIO_Init+0x1d0>)
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <MX_GPIO_Init+0x1d0>)
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	02c9      	lsls	r1, r1, #11
 80023a8:	430a      	orrs	r2, r1
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	4b5c      	ldr	r3, [pc, #368]	; (8002520 <MX_GPIO_Init+0x1d0>)
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	02db      	lsls	r3, r3, #11
 80023b4:	4013      	ands	r3, r2
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_RS485_EN_Pin|GPIO_RF_SCK_Pin, GPIO_PIN_RESET);
 80023ba:	2381      	movs	r3, #129	; 0x81
 80023bc:	0119      	lsls	r1, r3, #4
 80023be:	2390      	movs	r3, #144	; 0x90
 80023c0:	05db      	lsls	r3, r3, #23
 80023c2:	2200      	movs	r2, #0
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 ff52 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin|GPIO_LED1_Pin|GPIO_LED2_Pin, GPIO_PIN_RESET);
 80023ca:	4956      	ldr	r1, [pc, #344]	; (8002524 <MX_GPIO_Init+0x1d4>)
 80023cc:	4b56      	ldr	r3, [pc, #344]	; (8002528 <MX_GPIO_Init+0x1d8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 ff4c 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_RS485_EN_Pin;
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	2210      	movs	r2, #16
 80023da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	2201      	movs	r2, #1
 80023e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	2201      	movs	r2, #1
 80023ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80023ee:	193a      	adds	r2, r7, r4
 80023f0:	2390      	movs	r3, #144	; 0x90
 80023f2:	05db      	lsls	r3, r3, #23
 80023f4:	0011      	movs	r1, r2
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fcdc 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO1_Pin;
 80023fc:	0021      	movs	r1, r4
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	0152      	lsls	r2, r2, #5
 8002404:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002406:	000c      	movs	r4, r1
 8002408:	193b      	adds	r3, r7, r4
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240e:	193b      	adds	r3, r7, r4
 8002410:	2201      	movs	r2, #1
 8002412:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8002414:	193b      	adds	r3, r7, r4
 8002416:	4a44      	ldr	r2, [pc, #272]	; (8002528 <MX_GPIO_Init+0x1d8>)
 8002418:	0019      	movs	r1, r3
 800241a:	0010      	movs	r0, r2
 800241c:	f000 fcca 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO2_Pin;
 8002420:	0021      	movs	r1, r4
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	0192      	lsls	r2, r2, #6
 8002428:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242a:	187b      	adds	r3, r7, r1
 800242c:	2288      	movs	r2, #136	; 0x88
 800242e:	0352      	lsls	r2, r2, #13
 8002430:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2201      	movs	r2, #1
 8002436:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8002438:	000c      	movs	r4, r1
 800243a:	187b      	adds	r3, r7, r1
 800243c:	4a3a      	ldr	r2, [pc, #232]	; (8002528 <MX_GPIO_Init+0x1d8>)
 800243e:	0019      	movs	r1, r3
 8002440:	0010      	movs	r0, r2
 8002442:	f000 fcb7 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RF_FCSB_Pin GPIO_RF_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_FCSB_Pin|GPIO_RF_CSB_Pin;
 8002446:	0021      	movs	r1, r4
 8002448:	187b      	adds	r3, r7, r1
 800244a:	22c0      	movs	r2, #192	; 0xc0
 800244c:	0212      	lsls	r2, r2, #8
 800244e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002450:	000c      	movs	r4, r1
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2201      	movs	r2, #1
 8002456:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	193b      	adds	r3, r7, r4
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800245e:	193b      	adds	r3, r7, r4
 8002460:	2203      	movs	r2, #3
 8002462:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	193b      	adds	r3, r7, r4
 8002466:	4a30      	ldr	r2, [pc, #192]	; (8002528 <MX_GPIO_Init+0x1d8>)
 8002468:	0019      	movs	r1, r3
 800246a:	0010      	movs	r0, r2
 800246c:	f000 fca2 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SDIO_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SDIO_Pin;
 8002470:	193b      	adds	r3, r7, r4
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	0052      	lsls	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	193b      	adds	r3, r7, r4
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	193b      	adds	r3, r7, r4
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_SDIO_GPIO_Port, &GPIO_InitStruct);
 8002484:	193a      	adds	r2, r7, r4
 8002486:	2390      	movs	r3, #144	; 0x90
 8002488:	05db      	lsls	r3, r3, #23
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f000 fc91 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_SCK_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_SCK_Pin;
 8002492:	0021      	movs	r1, r4
 8002494:	187b      	adds	r3, r7, r1
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249c:	000c      	movs	r4, r1
 800249e:	193b      	adds	r3, r7, r4
 80024a0:	2201      	movs	r2, #1
 80024a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024aa:	193b      	adds	r3, r7, r4
 80024ac:	2203      	movs	r2, #3
 80024ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_RF_SCK_GPIO_Port, &GPIO_InitStruct);
 80024b0:	193a      	adds	r2, r7, r4
 80024b2:	2390      	movs	r3, #144	; 0x90
 80024b4:	05db      	lsls	r3, r3, #23
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 fc7b 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RF_GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO_RF_GPIO3_Pin;
 80024be:	193b      	adds	r3, r7, r4
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	0152      	lsls	r2, r2, #5
 80024c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	2288      	movs	r2, #136	; 0x88
 80024ca:	0352      	lsls	r2, r2, #13
 80024cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	2201      	movs	r2, #1
 80024d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_RF_GPIO3_GPIO_Port, &GPIO_InitStruct);
 80024d4:	193a      	adds	r2, r7, r4
 80024d6:	2390      	movs	r3, #144	; 0x90
 80024d8:	05db      	lsls	r3, r3, #23
 80024da:	0011      	movs	r1, r2
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 fc69 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin GPIO_LED2_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|GPIO_LED2_Pin;
 80024e2:	0021      	movs	r1, r4
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2230      	movs	r2, #48	; 0x30
 80024e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2201      	movs	r2, #1
 80024ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2201      	movs	r2, #1
 80024fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <MX_GPIO_Init+0x1d8>)
 8002500:	0019      	movs	r1, r3
 8002502:	0010      	movs	r0, r2
 8002504:	f000 fc56 	bl	8002db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	2007      	movs	r0, #7
 800250e:	f000 fb91 	bl	8002c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002512:	2007      	movs	r0, #7
 8002514:	f000 fba3 	bl	8002c5e <HAL_NVIC_EnableIRQ>

}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b009      	add	sp, #36	; 0x24
 800251e:	bd90      	pop	{r4, r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	0000c030 	.word	0x0000c030
 8002528:	48000400 	.word	0x48000400

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002530:	b672      	cpsid	i
}
 8002532:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002534:	e7fe      	b.n	8002534 <Error_Handler+0x8>
	...

08002538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_MspInit+0x44>)
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_MspInit+0x44>)
 8002544:	2101      	movs	r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	619a      	str	r2, [r3, #24]
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_MspInit+0x44>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2201      	movs	r2, #1
 8002550:	4013      	ands	r3, r2
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_MspInit+0x44>)
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_MspInit+0x44>)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	0549      	lsls	r1, r1, #21
 8002560:	430a      	orrs	r2, r1
 8002562:	61da      	str	r2, [r3, #28]
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_MspInit+0x44>)
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	055b      	lsls	r3, r3, #21
 800256c:	4013      	ands	r3, r2
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <HAL_TIM_Base_MspInit+0x80>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d116      	bne.n	80025c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_TIM_Base_MspInit+0x84>)
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_TIM_Base_MspInit+0x84>)
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	0289      	lsls	r1, r1, #10
 800259c:	430a      	orrs	r2, r1
 800259e:	619a      	str	r2, [r3, #24]
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_TIM_Base_MspInit+0x84>)
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2015      	movs	r0, #21
 80025b4:	f000 fb3e 	bl	8002c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80025b8:	2015      	movs	r0, #21
 80025ba:	f000 fb50 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80025be:	e01a      	b.n	80025f6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a10      	ldr	r2, [pc, #64]	; (8002608 <HAL_TIM_Base_MspInit+0x88>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d115      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_TIM_Base_MspInit+0x84>)
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_TIM_Base_MspInit+0x84>)
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	02c9      	lsls	r1, r1, #11
 80025d4:	430a      	orrs	r2, r1
 80025d6:	619a      	str	r2, [r3, #24]
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_TIM_Base_MspInit+0x84>)
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	02db      	lsls	r3, r3, #11
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	2016      	movs	r0, #22
 80025ec:	f000 fb22 	bl	8002c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80025f0:	2016      	movs	r0, #22
 80025f2:	f000 fb34 	bl	8002c5e <HAL_NVIC_EnableIRQ>
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40014400 	.word	0x40014400
 8002604:	40021000 	.word	0x40021000
 8002608:	40014800 	.word	0x40014800

0800260c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b08d      	sub	sp, #52	; 0x34
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	241c      	movs	r4, #28
 8002616:	193b      	adds	r3, r7, r4
 8002618:	0018      	movs	r0, r3
 800261a:	2314      	movs	r3, #20
 800261c:	001a      	movs	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	f003 fbb1 	bl	8005d86 <memset>
  if(huart->Instance==USART1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3d      	ldr	r2, [pc, #244]	; (8002720 <HAL_UART_MspInit+0x114>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d13c      	bne.n	80026a8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_UART_MspInit+0x118>)
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	4b3c      	ldr	r3, [pc, #240]	; (8002724 <HAL_UART_MspInit+0x118>)
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	01c9      	lsls	r1, r1, #7
 8002638:	430a      	orrs	r2, r1
 800263a:	619a      	str	r2, [r3, #24]
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_UART_MspInit+0x118>)
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	01db      	lsls	r3, r3, #7
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_UART_MspInit+0x118>)
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	4b35      	ldr	r3, [pc, #212]	; (8002724 <HAL_UART_MspInit+0x118>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	0289      	lsls	r1, r1, #10
 8002654:	430a      	orrs	r2, r1
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_UART_MspInit+0x118>)
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	4013      	ands	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002666:	193b      	adds	r3, r7, r4
 8002668:	22c0      	movs	r2, #192	; 0xc0
 800266a:	00d2      	lsls	r2, r2, #3
 800266c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	0021      	movs	r1, r4
 8002670:	187b      	adds	r3, r7, r1
 8002672:	2202      	movs	r2, #2
 8002674:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2203      	movs	r2, #3
 8002680:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2201      	movs	r2, #1
 8002686:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	187a      	adds	r2, r7, r1
 800268a:	2390      	movs	r3, #144	; 0x90
 800268c:	05db      	lsls	r3, r3, #23
 800268e:	0011      	movs	r1, r2
 8002690:	0018      	movs	r0, r3
 8002692:	f000 fb8f 	bl	8002db4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2101      	movs	r1, #1
 800269a:	201b      	movs	r0, #27
 800269c:	f000 faca 	bl	8002c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026a0:	201b      	movs	r0, #27
 80026a2:	f000 fadc 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026a6:	e037      	b.n	8002718 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <HAL_UART_MspInit+0x11c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d132      	bne.n	8002718 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_UART_MspInit+0x118>)
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_UART_MspInit+0x118>)
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0289      	lsls	r1, r1, #10
 80026bc:	430a      	orrs	r2, r1
 80026be:	61da      	str	r2, [r3, #28]
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <HAL_UART_MspInit+0x118>)
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_UART_MspInit+0x118>)
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_UART_MspInit+0x118>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0289      	lsls	r1, r1, #10
 80026d8:	430a      	orrs	r2, r1
 80026da:	615a      	str	r2, [r3, #20]
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <HAL_UART_MspInit+0x118>)
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026ea:	211c      	movs	r1, #28
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2202      	movs	r2, #2
 80026f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2203      	movs	r2, #3
 8002702:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2201      	movs	r2, #1
 8002708:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	187a      	adds	r2, r7, r1
 800270c:	2390      	movs	r3, #144	; 0x90
 800270e:	05db      	lsls	r3, r3, #23
 8002710:	0011      	movs	r1, r2
 8002712:	0018      	movs	r0, r3
 8002714:	f000 fb4e 	bl	8002db4 <HAL_GPIO_Init>
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b00d      	add	sp, #52	; 0x34
 800271e:	bd90      	pop	{r4, r7, pc}
 8002720:	40013800 	.word	0x40013800
 8002724:	40021000 	.word	0x40021000
 8002728:	40004400 	.word	0x40004400

0800272c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_UART_MspDeInit+0x60>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d111      	bne.n	8002762 <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_UART_MspDeInit+0x64>)
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_UART_MspDeInit+0x64>)
 8002744:	4913      	ldr	r1, [pc, #76]	; (8002794 <HAL_UART_MspDeInit+0x68>)
 8002746:	400a      	ands	r2, r1
 8002748:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800274a:	23c0      	movs	r3, #192	; 0xc0
 800274c:	00da      	lsls	r2, r3, #3
 800274e:	2390      	movs	r3, #144	; 0x90
 8002750:	05db      	lsls	r3, r3, #23
 8002752:	0011      	movs	r1, r2
 8002754:	0018      	movs	r0, r3
 8002756:	f000 fc9d 	bl	8003094 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800275a:	201b      	movs	r0, #27
 800275c:	f000 fa8f 	bl	8002c7e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002760:	e010      	b.n	8002784 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <HAL_UART_MspDeInit+0x6c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d10b      	bne.n	8002784 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_UART_MspDeInit+0x64>)
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_UART_MspDeInit+0x64>)
 8002772:	490a      	ldr	r1, [pc, #40]	; (800279c <HAL_UART_MspDeInit+0x70>)
 8002774:	400a      	ands	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002778:	2390      	movs	r3, #144	; 0x90
 800277a:	05db      	lsls	r3, r3, #23
 800277c:	210c      	movs	r1, #12
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fc88 	bl	8003094 <HAL_GPIO_DeInit>
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40013800 	.word	0x40013800
 8002790:	40021000 	.word	0x40021000
 8002794:	ffffbfff 	.word	0xffffbfff
 8002798:	40004400 	.word	0x40004400
 800279c:	fffdffff 	.word	0xfffdffff

080027a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <NMI_Handler+0x4>

080027a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <HardFault_Handler+0x4>

080027ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c4:	f000 f94c 	bl	8002a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SysTick_Handler();
 80027c8:	f7ff f98a 	bl	8001ae0 <HAL_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	015b      	lsls	r3, r3, #5
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 fd64 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	019b      	lsls	r3, r3, #6
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fd5f 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <TIM16_IRQHandler+0x14>)
 80027f6:	0018      	movs	r0, r3
 80027f8:	f001 fb6a 	bl	8003ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	200005fc 	.word	0x200005fc

08002808 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <TIM17_IRQHandler+0x14>)
 800280e:	0018      	movs	r0, r3
 8002810:	f001 fb5e 	bl	8003ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	20000644 	.word	0x20000644

08002820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <USART1_IRQHandler+0x14>)
 8002826:	0018      	movs	r0, r3
 8002828:	f001 fe98 	bl	800455c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	2000068c 	.word	0x2000068c

08002838 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e00a      	b.n	8002860 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800284a:	e000      	b.n	800284e <_read+0x16>
 800284c:	bf00      	nop
 800284e:	0001      	movs	r1, r0
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	60ba      	str	r2, [r7, #8]
 8002856:	b2ca      	uxtb	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbf0      	blt.n	800284a <_read+0x12>
	}

return len;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b006      	add	sp, #24
 8002870:	bd80      	pop	{r7, pc}

08002872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e009      	b.n	8002898 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	60ba      	str	r2, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	0018      	movs	r0, r3
 800288e:	e000      	b.n	8002892 <_write+0x20>
 8002890:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	dbf1      	blt.n	8002884 <_write+0x12>
	}
	return len;
 80028a0:	687b      	ldr	r3, [r7, #4]
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b006      	add	sp, #24
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_close>:

int _close(int file)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
	return -1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	425b      	negs	r3, r3
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}

080028be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	0192      	lsls	r2, r2, #6
 80028ce:	605a      	str	r2, [r3, #4]
	return 0;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}

080028da <_isatty>:

int _isatty(int file)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
	return 1;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
	return 0;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b004      	add	sp, #16
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <_sbrk+0x5c>)
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <_sbrk+0x60>)
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <_sbrk+0x64>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <_sbrk+0x64>)
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <_sbrk+0x68>)
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	18d3      	adds	r3, r2, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	429a      	cmp	r2, r3
 8002932:	d207      	bcs.n	8002944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002934:	f003 f9ea 	bl	8005d0c <__errno>
 8002938:	0003      	movs	r3, r0
 800293a:	220c      	movs	r2, #12
 800293c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293e:	2301      	movs	r3, #1
 8002940:	425b      	negs	r3, r3
 8002942:	e009      	b.n	8002958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	18d2      	adds	r2, r2, r3
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <_sbrk+0x64>)
 8002954:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b006      	add	sp, #24
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20002000 	.word	0x20002000
 8002964:	00000400 	.word	0x00000400
 8002968:	2000079c 	.word	0x2000079c
 800296c:	200007b8 	.word	0x200007b8

08002970 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800297e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002980:	f7ff fff6 	bl	8002970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002986:	490d      	ldr	r1, [pc, #52]	; (80029bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <LoopForever+0xe>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800298c:	e002      	b.n	8002994 <LoopCopyDataInit>

0800298e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002992:	3304      	adds	r3, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002998:	d3f9      	bcc.n	800298e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800299c:	4c0a      	ldr	r4, [pc, #40]	; (80029c8 <LoopForever+0x16>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a0:	e001      	b.n	80029a6 <LoopFillZerobss>

080029a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a4:	3204      	adds	r2, #4

080029a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a8:	d3fb      	bcc.n	80029a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029aa:	f003 f9b5 	bl	8005d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ae:	f7ff fbab 	bl	8002108 <main>

080029b2 <LoopForever>:

LoopForever:
    b LoopForever
 80029b2:	e7fe      	b.n	80029b2 <LoopForever>
  ldr   r0, =_estack
 80029b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80029c0:	08006ad0 	.word	0x08006ad0
  ldr r2, =_sbss
 80029c4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80029c8:	200007b4 	.word	0x200007b4

080029cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC1_IRQHandler>
	...

080029d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_Init+0x24>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_Init+0x24>)
 80029da:	2110      	movs	r1, #16
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f000 f809 	bl	80029f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e6:	f7ff fda7 	bl	8002538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40022000 	.word	0x40022000

080029f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_InitTick+0x5c>)
 8002a02:	681c      	ldr	r4, [r3, #0]
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_InitTick+0x60>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	0019      	movs	r1, r3
 8002a0a:	23fa      	movs	r3, #250	; 0xfa
 8002a0c:	0098      	lsls	r0, r3, #2
 8002a0e:	f7fd fb7b 	bl	8000108 <__udivsi3>
 8002a12:	0003      	movs	r3, r0
 8002a14:	0019      	movs	r1, r3
 8002a16:	0020      	movs	r0, r4
 8002a18:	f7fd fb76 	bl	8000108 <__udivsi3>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 f93d 	bl	8002c9e <HAL_SYSTICK_Config>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e00f      	b.n	8002a4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d80b      	bhi.n	8002a4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	2301      	movs	r3, #1
 8002a36:	425b      	negs	r3, r3
 8002a38:	2200      	movs	r2, #0
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f8fa 	bl	8002c34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_InitTick+0x64>)
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b003      	add	sp, #12
 8002a52:	bd90      	pop	{r4, r7, pc}
 8002a54:	2000010c 	.word	0x2000010c
 8002a58:	20000114 	.word	0x20000114
 8002a5c:	20000110 	.word	0x20000110

08002a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_IncTick+0x1c>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	001a      	movs	r2, r3
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_IncTick+0x20>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	18d2      	adds	r2, r2, r3
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_IncTick+0x20>)
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	20000114 	.word	0x20000114
 8002a80:	200007a0 	.word	0x200007a0

08002a84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  return uwTick;
 8002a88:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <HAL_GetTick+0x10>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	200007a0 	.word	0x200007a0

08002a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8002aaa:	d809      	bhi.n	8002ac0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	231f      	movs	r3, #31
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <__NVIC_EnableIRQ+0x30>)
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4091      	lsls	r1, r2
 8002abc:	000a      	movs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
  }
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	1dfb      	adds	r3, r7, #7
 8002ad6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ade:	d810      	bhi.n	8002b02 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	231f      	movs	r3, #31
 8002ae8:	4013      	ands	r3, r2
 8002aea:	4908      	ldr	r1, [pc, #32]	; (8002b0c <__NVIC_DisableIRQ+0x40>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	2280      	movs	r2, #128	; 0x80
 8002af4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002af6:	f3bf 8f4f 	dsb	sy
}
 8002afa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002afc:	f3bf 8f6f 	isb	sy
}
 8002b00:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b002      	add	sp, #8
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	0002      	movs	r2, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	1dfb      	adds	r3, r7, #7
 8002b1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b7f      	cmp	r3, #127	; 0x7f
 8002b24:	d828      	bhi.n	8002b78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b26:	4a2f      	ldr	r2, [pc, #188]	; (8002be4 <__NVIC_SetPriority+0xd4>)
 8002b28:	1dfb      	adds	r3, r7, #7
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	33c0      	adds	r3, #192	; 0xc0
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	589b      	ldr	r3, [r3, r2]
 8002b36:	1dfa      	adds	r2, r7, #7
 8002b38:	7812      	ldrb	r2, [r2, #0]
 8002b3a:	0011      	movs	r1, r2
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	400a      	ands	r2, r1
 8002b40:	00d2      	lsls	r2, r2, #3
 8002b42:	21ff      	movs	r1, #255	; 0xff
 8002b44:	4091      	lsls	r1, r2
 8002b46:	000a      	movs	r2, r1
 8002b48:	43d2      	mvns	r2, r2
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	22ff      	movs	r2, #255	; 0xff
 8002b54:	401a      	ands	r2, r3
 8002b56:	1dfb      	adds	r3, r7, #7
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	4003      	ands	r3, r0
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b64:	481f      	ldr	r0, [pc, #124]	; (8002be4 <__NVIC_SetPriority+0xd4>)
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	33c0      	adds	r3, #192	; 0xc0
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b76:	e031      	b.n	8002bdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b78:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <__NVIC_SetPriority+0xd8>)
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	0019      	movs	r1, r3
 8002b80:	230f      	movs	r3, #15
 8002b82:	400b      	ands	r3, r1
 8002b84:	3b08      	subs	r3, #8
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	3306      	adds	r3, #6
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	18d3      	adds	r3, r2, r3
 8002b8e:	3304      	adds	r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1dfa      	adds	r2, r7, #7
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	0011      	movs	r1, r2
 8002b98:	2203      	movs	r2, #3
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	00d2      	lsls	r2, r2, #3
 8002b9e:	21ff      	movs	r1, #255	; 0xff
 8002ba0:	4091      	lsls	r1, r2
 8002ba2:	000a      	movs	r2, r1
 8002ba4:	43d2      	mvns	r2, r2
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	22ff      	movs	r2, #255	; 0xff
 8002bb0:	401a      	ands	r2, r3
 8002bb2:	1dfb      	adds	r3, r7, #7
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	2303      	movs	r3, #3
 8002bba:	4003      	ands	r3, r0
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bc0:	4809      	ldr	r0, [pc, #36]	; (8002be8 <__NVIC_SetPriority+0xd8>)
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	001c      	movs	r4, r3
 8002bc8:	230f      	movs	r3, #15
 8002bca:	4023      	ands	r3, r4
 8002bcc:	3b08      	subs	r3, #8
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	3306      	adds	r3, #6
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	18c3      	adds	r3, r0, r3
 8002bd8:	3304      	adds	r3, #4
 8002bda:	601a      	str	r2, [r3, #0]
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b003      	add	sp, #12
 8002be2:	bd90      	pop	{r4, r7, pc}
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	1e5a      	subs	r2, r3, #1
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	045b      	lsls	r3, r3, #17
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d301      	bcc.n	8002c04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c00:	2301      	movs	r3, #1
 8002c02:	e010      	b.n	8002c26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <SysTick_Config+0x44>)
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	425b      	negs	r3, r3
 8002c10:	2103      	movs	r1, #3
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7ff ff7c 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <SysTick_Config+0x44>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <SysTick_Config+0x44>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b002      	add	sp, #8
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	210f      	movs	r1, #15
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	1c02      	adds	r2, r0, #0
 8002c44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	0011      	movs	r1, r2
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7ff ff5d 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	0002      	movs	r2, r0
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff ff11 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	0002      	movs	r2, r0
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff ff1b 	bl	8002acc <__NVIC_DisableIRQ>
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b002      	add	sp, #8
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff ff9f 	bl	8002bec <SysTick_Config>
 8002cae:	0003      	movs	r3, r0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2221      	movs	r2, #33	; 0x21
 8002cc4:	5c9b      	ldrb	r3, [r3, r2]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d008      	beq.n	8002cde <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2204      	movs	r2, #4
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e020      	b.n	8002d20 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	210e      	movs	r1, #14
 8002cea:	438a      	bics	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2101      	movs	r1, #1
 8002d08:	4091      	lsls	r1, r2
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2221      	movs	r2, #33	; 0x21
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	210f      	movs	r1, #15
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2221      	movs	r2, #33	; 0x21
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d006      	beq.n	8002d52 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2204      	movs	r2, #4
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e028      	b.n	8002da4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	210e      	movs	r1, #14
 8002d5e:	438a      	bics	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	438a      	bics	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4091      	lsls	r1, r2
 8002d7e:	000a      	movs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2221      	movs	r2, #33	; 0x21
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	0010      	movs	r0, r2
 8002da2:	4798      	blx	r3
    }
  }
  return status;
 8002da4:	230f      	movs	r3, #15
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	781b      	ldrb	r3, [r3, #0]
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc2:	e14f      	b.n	8003064 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4091      	lsls	r1, r2
 8002dce:	000a      	movs	r2, r1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d100      	bne.n	8002ddc <HAL_GPIO_Init+0x28>
 8002dda:	e140      	b.n	800305e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d005      	beq.n	8002df4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d130      	bne.n	8002e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	409a      	lsls	r2, r3
 8002e02:	0013      	movs	r3, r2
 8002e04:	43da      	mvns	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	409a      	lsls	r2, r3
 8002e16:	0013      	movs	r3, r2
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	0013      	movs	r3, r2
 8002e32:	43da      	mvns	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	2201      	movs	r2, #1
 8002e42:	401a      	ands	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	409a      	lsls	r2, r3
 8002e48:	0013      	movs	r3, r2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d017      	beq.n	8002e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	0013      	movs	r3, r2
 8002e72:	43da      	mvns	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	409a      	lsls	r2, r3
 8002e84:	0013      	movs	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2203      	movs	r2, #3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d123      	bne.n	8002ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	58d3      	ldr	r3, [r2, r3]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2207      	movs	r2, #7
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	0013      	movs	r3, r2
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2107      	movs	r1, #7
 8002eca:	400b      	ands	r3, r1
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	0013      	movs	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	0092      	lsls	r2, r2, #2
 8002ee2:	6939      	ldr	r1, [r7, #16]
 8002ee4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	0013      	movs	r3, r2
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2203      	movs	r2, #3
 8002f04:	401a      	ands	r2, r3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	23c0      	movs	r3, #192	; 0xc0
 8002f20:	029b      	lsls	r3, r3, #10
 8002f22:	4013      	ands	r3, r2
 8002f24:	d100      	bne.n	8002f28 <HAL_GPIO_Init+0x174>
 8002f26:	e09a      	b.n	800305e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f28:	4b54      	ldr	r3, [pc, #336]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	430a      	orrs	r2, r1
 8002f32:	619a      	str	r2, [r3, #24]
 8002f34:	4b51      	ldr	r3, [pc, #324]	; (800307c <HAL_GPIO_Init+0x2c8>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f40:	4a4f      	ldr	r2, [pc, #316]	; (8003080 <HAL_GPIO_Init+0x2cc>)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	589b      	ldr	r3, [r3, r2]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2203      	movs	r2, #3
 8002f52:	4013      	ands	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	0013      	movs	r3, r2
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	2390      	movs	r3, #144	; 0x90
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x1e2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a44      	ldr	r2, [pc, #272]	; (8003084 <HAL_GPIO_Init+0x2d0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x1de>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a43      	ldr	r2, [pc, #268]	; (8003088 <HAL_GPIO_Init+0x2d4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x1da>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a42      	ldr	r2, [pc, #264]	; (800308c <HAL_GPIO_Init+0x2d8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x1d6>
 8002f86:	2303      	movs	r3, #3
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x1e4>
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	e004      	b.n	8002f98 <HAL_GPIO_Init+0x1e4>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x1e4>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x1e4>
 8002f96:	2300      	movs	r3, #0
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	2103      	movs	r1, #3
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	4093      	lsls	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fa8:	4935      	ldr	r1, [pc, #212]	; (8003080 <HAL_GPIO_Init+0x2cc>)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	035b      	lsls	r3, r3, #13
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	039b      	lsls	r3, r3, #14
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800300a:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	43da      	mvns	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	029b      	lsls	r3, r3, #10
 8003022:	4013      	ands	r3, r2
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43da      	mvns	r2, r3
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	025b      	lsls	r3, r3, #9
 800304c:	4013      	ands	r3, r2
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	40da      	lsrs	r2, r3
 800306c:	1e13      	subs	r3, r2, #0
 800306e:	d000      	beq.n	8003072 <HAL_GPIO_Init+0x2be>
 8003070:	e6a8      	b.n	8002dc4 <HAL_GPIO_Init+0x10>
  } 
}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b006      	add	sp, #24
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	48000400 	.word	0x48000400
 8003088:	48000800 	.word	0x48000800
 800308c:	48000c00 	.word	0x48000c00
 8003090:	40010400 	.word	0x40010400

08003094 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80030a2:	e0b1      	b.n	8003208 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030a4:	2201      	movs	r2, #1
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	409a      	lsls	r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d100      	bne.n	80030b8 <HAL_GPIO_DeInit+0x24>
 80030b6:	e0a4      	b.n	8003202 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80030b8:	4a59      	ldr	r2, [pc, #356]	; (8003220 <HAL_GPIO_DeInit+0x18c>)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	589b      	ldr	r3, [r3, r2]
 80030c4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2203      	movs	r2, #3
 80030ca:	4013      	ands	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	220f      	movs	r2, #15
 80030d0:	409a      	lsls	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4013      	ands	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	2390      	movs	r3, #144	; 0x90
 80030dc:	05db      	lsls	r3, r3, #23
 80030de:	429a      	cmp	r2, r3
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_DeInit+0x76>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_GPIO_DeInit+0x190>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_DeInit+0x72>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_GPIO_DeInit+0x194>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_DeInit+0x6e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4d      	ldr	r2, [pc, #308]	; (800322c <HAL_GPIO_DeInit+0x198>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_DeInit+0x6a>
 80030fa:	2303      	movs	r3, #3
 80030fc:	e006      	b.n	800310c <HAL_GPIO_DeInit+0x78>
 80030fe:	2305      	movs	r3, #5
 8003100:	e004      	b.n	800310c <HAL_GPIO_DeInit+0x78>
 8003102:	2302      	movs	r3, #2
 8003104:	e002      	b.n	800310c <HAL_GPIO_DeInit+0x78>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_GPIO_DeInit+0x78>
 800310a:	2300      	movs	r3, #0
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	2103      	movs	r1, #3
 8003110:	400a      	ands	r2, r1
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	4093      	lsls	r3, r2
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d132      	bne.n	8003182 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800311c:	4b44      	ldr	r3, [pc, #272]	; (8003230 <HAL_GPIO_DeInit+0x19c>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43d9      	mvns	r1, r3
 8003124:	4b42      	ldr	r3, [pc, #264]	; (8003230 <HAL_GPIO_DeInit+0x19c>)
 8003126:	400a      	ands	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_GPIO_DeInit+0x19c>)
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	43d9      	mvns	r1, r3
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_GPIO_DeInit+0x19c>)
 8003134:	400a      	ands	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003138:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_GPIO_DeInit+0x19c>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43d9      	mvns	r1, r3
 8003140:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_GPIO_DeInit+0x19c>)
 8003142:	400a      	ands	r2, r1
 8003144:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003146:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_GPIO_DeInit+0x19c>)
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43d9      	mvns	r1, r3
 800314e:	4b38      	ldr	r3, [pc, #224]	; (8003230 <HAL_GPIO_DeInit+0x19c>)
 8003150:	400a      	ands	r2, r1
 8003152:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2203      	movs	r2, #3
 8003158:	4013      	ands	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	409a      	lsls	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003164:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <HAL_GPIO_DeInit+0x18c>)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	589a      	ldr	r2, [r3, r2]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43d9      	mvns	r1, r3
 8003174:	482a      	ldr	r0, [pc, #168]	; (8003220 <HAL_GPIO_DeInit+0x18c>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	400a      	ands	r2, r1
 800317c:	3302      	adds	r3, #2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	0052      	lsls	r2, r2, #1
 800318a:	2103      	movs	r1, #3
 800318c:	4091      	lsls	r1, r2
 800318e:	000a      	movs	r2, r1
 8003190:	43d2      	mvns	r2, r2
 8003192:	401a      	ands	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	58d3      	ldr	r3, [r2, r3]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	2107      	movs	r1, #7
 80031a8:	400a      	ands	r2, r1
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	210f      	movs	r1, #15
 80031ae:	4091      	lsls	r1, r2
 80031b0:	000a      	movs	r2, r1
 80031b2:	43d1      	mvns	r1, r2
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	08d2      	lsrs	r2, r2, #3
 80031b8:	4019      	ands	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3208      	adds	r2, #8
 80031be:	0092      	lsls	r2, r2, #2
 80031c0:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	0052      	lsls	r2, r2, #1
 80031ca:	2103      	movs	r1, #3
 80031cc:	4091      	lsls	r1, r2
 80031ce:	000a      	movs	r2, r1
 80031d0:	43d2      	mvns	r2, r2
 80031d2:	401a      	ands	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2101      	movs	r1, #1
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4091      	lsls	r1, r2
 80031e2:	000a      	movs	r2, r1
 80031e4:	43d2      	mvns	r2, r2
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	0052      	lsls	r2, r2, #1
 80031f4:	2103      	movs	r1, #3
 80031f6:	4091      	lsls	r1, r2
 80031f8:	000a      	movs	r2, r1
 80031fa:	43d2      	mvns	r2, r2
 80031fc:	401a      	ands	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]

    }

    position++;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	40da      	lsrs	r2, r3
 800320e:	1e13      	subs	r3, r2, #0
 8003210:	d000      	beq.n	8003214 <HAL_GPIO_DeInit+0x180>
 8003212:	e747      	b.n	80030a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b006      	add	sp, #24
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	40010000 	.word	0x40010000
 8003224:	48000400 	.word	0x48000400
 8003228:	48000800 	.word	0x48000800
 800322c:	48000c00 	.word	0x48000c00
 8003230:	40010400 	.word	0x40010400

08003234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	000a      	movs	r2, r1
 800323e:	1cbb      	adds	r3, r7, #2
 8003240:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	1cba      	adds	r2, r7, #2
 8003248:	8812      	ldrh	r2, [r2, #0]
 800324a:	4013      	ands	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800324e:	230f      	movs	r3, #15
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e003      	b.n	8003260 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003258:	230f      	movs	r3, #15
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003260:	230f      	movs	r3, #15
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	781b      	ldrb	r3, [r3, #0]
  }
 8003266:	0018      	movs	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	b004      	add	sp, #16
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	0008      	movs	r0, r1
 8003278:	0011      	movs	r1, r2
 800327a:	1cbb      	adds	r3, r7, #2
 800327c:	1c02      	adds	r2, r0, #0
 800327e:	801a      	strh	r2, [r3, #0]
 8003280:	1c7b      	adds	r3, r7, #1
 8003282:	1c0a      	adds	r2, r1, #0
 8003284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003286:	1c7b      	adds	r3, r7, #1
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800328e:	1cbb      	adds	r3, r7, #2
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003296:	e003      	b.n	80032a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003298:	1cbb      	adds	r3, r7, #2
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	0002      	movs	r2, r0
 80032b0:	1dbb      	adds	r3, r7, #6
 80032b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	1dba      	adds	r2, r7, #6
 80032ba:	8812      	ldrh	r2, [r2, #0]
 80032bc:	4013      	ands	r3, r2
 80032be:	d008      	beq.n	80032d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80032c2:	1dba      	adds	r2, r7, #6
 80032c4:	8812      	ldrh	r2, [r2, #0]
 80032c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c8:	1dbb      	adds	r3, r7, #6
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fe fbbb 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b002      	add	sp, #8
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	40010400 	.word	0x40010400

080032e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e301      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	d100      	bne.n	80032fe <HAL_RCC_OscConfig+0x1e>
 80032fc:	e08d      	b.n	800341a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032fe:	4bc3      	ldr	r3, [pc, #780]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	220c      	movs	r2, #12
 8003304:	4013      	ands	r3, r2
 8003306:	2b04      	cmp	r3, #4
 8003308:	d00e      	beq.n	8003328 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800330a:	4bc0      	ldr	r3, [pc, #768]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	220c      	movs	r2, #12
 8003310:	4013      	ands	r3, r2
 8003312:	2b08      	cmp	r3, #8
 8003314:	d116      	bne.n	8003344 <HAL_RCC_OscConfig+0x64>
 8003316:	4bbd      	ldr	r3, [pc, #756]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	025b      	lsls	r3, r3, #9
 800331e:	401a      	ands	r2, r3
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	025b      	lsls	r3, r3, #9
 8003324:	429a      	cmp	r2, r3
 8003326:	d10d      	bne.n	8003344 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4bb8      	ldr	r3, [pc, #736]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	029b      	lsls	r3, r3, #10
 8003330:	4013      	ands	r3, r2
 8003332:	d100      	bne.n	8003336 <HAL_RCC_OscConfig+0x56>
 8003334:	e070      	b.n	8003418 <HAL_RCC_OscConfig+0x138>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d000      	beq.n	8003340 <HAL_RCC_OscConfig+0x60>
 800333e:	e06b      	b.n	8003418 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e2d8      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x7c>
 800334c:	4baf      	ldr	r3, [pc, #700]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4bae      	ldr	r3, [pc, #696]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	0249      	lsls	r1, r1, #9
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e02f      	b.n	80033bc <HAL_RCC_OscConfig+0xdc>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10c      	bne.n	800337e <HAL_RCC_OscConfig+0x9e>
 8003364:	4ba9      	ldr	r3, [pc, #676]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4ba8      	ldr	r3, [pc, #672]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800336a:	49a9      	ldr	r1, [pc, #676]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 800336c:	400a      	ands	r2, r1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	4ba6      	ldr	r3, [pc, #664]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4ba5      	ldr	r3, [pc, #660]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003376:	49a7      	ldr	r1, [pc, #668]	; (8003614 <HAL_RCC_OscConfig+0x334>)
 8003378:	400a      	ands	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e01e      	b.n	80033bc <HAL_RCC_OscConfig+0xdc>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10e      	bne.n	80033a4 <HAL_RCC_OscConfig+0xc4>
 8003386:	4ba1      	ldr	r3, [pc, #644]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4ba0      	ldr	r3, [pc, #640]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	02c9      	lsls	r1, r1, #11
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	4b9d      	ldr	r3, [pc, #628]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b9c      	ldr	r3, [pc, #624]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800339a:	2180      	movs	r1, #128	; 0x80
 800339c:	0249      	lsls	r1, r1, #9
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0xdc>
 80033a4:	4b99      	ldr	r3, [pc, #612]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b98      	ldr	r3, [pc, #608]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80033aa:	4999      	ldr	r1, [pc, #612]	; (8003610 <HAL_RCC_OscConfig+0x330>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	4b96      	ldr	r3, [pc, #600]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b95      	ldr	r3, [pc, #596]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80033b6:	4997      	ldr	r1, [pc, #604]	; (8003614 <HAL_RCC_OscConfig+0x334>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d014      	beq.n	80033ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7ff fb5e 	bl	8002a84 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ce:	f7ff fb59 	bl	8002a84 <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b64      	cmp	r3, #100	; 0x64
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e28a      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e0:	4b8a      	ldr	r3, [pc, #552]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	029b      	lsls	r3, r3, #10
 80033e8:	4013      	ands	r3, r2
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0xee>
 80033ec:	e015      	b.n	800341a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7ff fb49 	bl	8002a84 <HAL_GetTick>
 80033f2:	0003      	movs	r3, r0
 80033f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f8:	f7ff fb44 	bl	8002a84 <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e275      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	4b80      	ldr	r3, [pc, #512]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	4013      	ands	r3, r2
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x118>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2202      	movs	r2, #2
 8003420:	4013      	ands	r3, r2
 8003422:	d100      	bne.n	8003426 <HAL_RCC_OscConfig+0x146>
 8003424:	e069      	b.n	80034fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003426:	4b79      	ldr	r3, [pc, #484]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	220c      	movs	r2, #12
 800342c:	4013      	ands	r3, r2
 800342e:	d00b      	beq.n	8003448 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003430:	4b76      	ldr	r3, [pc, #472]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	220c      	movs	r2, #12
 8003436:	4013      	ands	r3, r2
 8003438:	2b08      	cmp	r3, #8
 800343a:	d11c      	bne.n	8003476 <HAL_RCC_OscConfig+0x196>
 800343c:	4b73      	ldr	r3, [pc, #460]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	025b      	lsls	r3, r3, #9
 8003444:	4013      	ands	r3, r2
 8003446:	d116      	bne.n	8003476 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003448:	4b70      	ldr	r3, [pc, #448]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2202      	movs	r2, #2
 800344e:	4013      	ands	r3, r2
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x17e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e24b      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	4b6b      	ldr	r3, [pc, #428]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	22f8      	movs	r2, #248	; 0xf8
 8003464:	4393      	bics	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00da      	lsls	r2, r3, #3
 800346e:	4b67      	ldr	r3, [pc, #412]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003474:	e041      	b.n	80034fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d024      	beq.n	80034c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347e:	4b63      	ldr	r3, [pc, #396]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b62      	ldr	r3, [pc, #392]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003484:	2101      	movs	r1, #1
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7ff fafb 	bl	8002a84 <HAL_GetTick>
 800348e:	0003      	movs	r3, r0
 8003490:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003494:	f7ff faf6 	bl	8002a84 <HAL_GetTick>
 8003498:	0002      	movs	r2, r0
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e227      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2202      	movs	r2, #2
 80034ac:	4013      	ands	r3, r2
 80034ae:	d0f1      	beq.n	8003494 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	22f8      	movs	r2, #248	; 0xf8
 80034b6:	4393      	bics	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00da      	lsls	r2, r3, #3
 80034c0:	4b52      	ldr	r3, [pc, #328]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e018      	b.n	80034fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c8:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b4f      	ldr	r3, [pc, #316]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	438a      	bics	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7ff fad6 	bl	8002a84 <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034de:	f7ff fad1 	bl	8002a84 <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e202      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2202      	movs	r2, #2
 80034f6:	4013      	ands	r3, r2
 80034f8:	d1f1      	bne.n	80034de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2208      	movs	r2, #8
 8003500:	4013      	ands	r3, r2
 8003502:	d036      	beq.n	8003572 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d019      	beq.n	8003540 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350c:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800350e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003510:	4b3e      	ldr	r3, [pc, #248]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003512:	2101      	movs	r1, #1
 8003514:	430a      	orrs	r2, r1
 8003516:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7ff fab4 	bl	8002a84 <HAL_GetTick>
 800351c:	0003      	movs	r3, r0
 800351e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003522:	f7ff faaf 	bl	8002a84 <HAL_GetTick>
 8003526:	0002      	movs	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e1e0      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2202      	movs	r2, #2
 800353a:	4013      	ands	r3, r2
 800353c:	d0f1      	beq.n	8003522 <HAL_RCC_OscConfig+0x242>
 800353e:	e018      	b.n	8003572 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003544:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003546:	2101      	movs	r1, #1
 8003548:	438a      	bics	r2, r1
 800354a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7ff fa9a 	bl	8002a84 <HAL_GetTick>
 8003550:	0003      	movs	r3, r0
 8003552:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003556:	f7ff fa95 	bl	8002a84 <HAL_GetTick>
 800355a:	0002      	movs	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1c6      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	4b28      	ldr	r3, [pc, #160]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	2202      	movs	r2, #2
 800356e:	4013      	ands	r3, r2
 8003570:	d1f1      	bne.n	8003556 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2204      	movs	r2, #4
 8003578:	4013      	ands	r3, r2
 800357a:	d100      	bne.n	800357e <HAL_RCC_OscConfig+0x29e>
 800357c:	e0b4      	b.n	80036e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357e:	201f      	movs	r0, #31
 8003580:	183b      	adds	r3, r7, r0
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003586:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	055b      	lsls	r3, r3, #21
 800358e:	4013      	ands	r3, r2
 8003590:	d110      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	0549      	lsls	r1, r1, #21
 800359c:	430a      	orrs	r2, r1
 800359e:	61da      	str	r2, [r3, #28]
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	055b      	lsls	r3, r3, #21
 80035a8:	4013      	ands	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_RCC_OscConfig+0x338>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4013      	ands	r3, r2
 80035be:	d11a      	bne.n	80035f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCC_OscConfig+0x338>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_RCC_OscConfig+0x338>)
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	0049      	lsls	r1, r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7ff fa59 	bl	8002a84 <HAL_GetTick>
 80035d2:	0003      	movs	r3, r0
 80035d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d8:	f7ff fa54 	bl	8002a84 <HAL_GetTick>
 80035dc:	0002      	movs	r2, r0
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e185      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x338>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4013      	ands	r3, r2
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10e      	bne.n	800361c <HAL_RCC_OscConfig+0x33c>
 80035fe:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	4b02      	ldr	r3, [pc, #8]	; (800360c <HAL_RCC_OscConfig+0x32c>)
 8003604:	2101      	movs	r1, #1
 8003606:	430a      	orrs	r2, r1
 8003608:	621a      	str	r2, [r3, #32]
 800360a:	e035      	b.n	8003678 <HAL_RCC_OscConfig+0x398>
 800360c:	40021000 	.word	0x40021000
 8003610:	fffeffff 	.word	0xfffeffff
 8003614:	fffbffff 	.word	0xfffbffff
 8003618:	40007000 	.word	0x40007000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10c      	bne.n	800363e <HAL_RCC_OscConfig+0x35e>
 8003624:	4bb6      	ldr	r3, [pc, #728]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003626:	6a1a      	ldr	r2, [r3, #32]
 8003628:	4bb5      	ldr	r3, [pc, #724]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800362a:	2101      	movs	r1, #1
 800362c:	438a      	bics	r2, r1
 800362e:	621a      	str	r2, [r3, #32]
 8003630:	4bb3      	ldr	r3, [pc, #716]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003632:	6a1a      	ldr	r2, [r3, #32]
 8003634:	4bb2      	ldr	r3, [pc, #712]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003636:	2104      	movs	r1, #4
 8003638:	438a      	bics	r2, r1
 800363a:	621a      	str	r2, [r3, #32]
 800363c:	e01c      	b.n	8003678 <HAL_RCC_OscConfig+0x398>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b05      	cmp	r3, #5
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x380>
 8003646:	4bae      	ldr	r3, [pc, #696]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	4bad      	ldr	r3, [pc, #692]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800364c:	2104      	movs	r1, #4
 800364e:	430a      	orrs	r2, r1
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	4bab      	ldr	r3, [pc, #684]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003654:	6a1a      	ldr	r2, [r3, #32]
 8003656:	4baa      	ldr	r3, [pc, #680]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003658:	2101      	movs	r1, #1
 800365a:	430a      	orrs	r2, r1
 800365c:	621a      	str	r2, [r3, #32]
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0x398>
 8003660:	4ba7      	ldr	r3, [pc, #668]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003662:	6a1a      	ldr	r2, [r3, #32]
 8003664:	4ba6      	ldr	r3, [pc, #664]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003666:	2101      	movs	r1, #1
 8003668:	438a      	bics	r2, r1
 800366a:	621a      	str	r2, [r3, #32]
 800366c:	4ba4      	ldr	r3, [pc, #656]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	4ba3      	ldr	r3, [pc, #652]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003672:	2104      	movs	r1, #4
 8003674:	438a      	bics	r2, r1
 8003676:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d014      	beq.n	80036aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7ff fa00 	bl	8002a84 <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	e009      	b.n	800369e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7ff f9fb 	bl	8002a84 <HAL_GetTick>
 800368e:	0002      	movs	r2, r0
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	4a9b      	ldr	r2, [pc, #620]	; (8003904 <HAL_RCC_OscConfig+0x624>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e12b      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	4b98      	ldr	r3, [pc, #608]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	2202      	movs	r2, #2
 80036a4:	4013      	ands	r3, r2
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x3aa>
 80036a8:	e013      	b.n	80036d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7ff f9eb 	bl	8002a84 <HAL_GetTick>
 80036ae:	0003      	movs	r3, r0
 80036b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b2:	e009      	b.n	80036c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7ff f9e6 	bl	8002a84 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	4a91      	ldr	r2, [pc, #580]	; (8003904 <HAL_RCC_OscConfig+0x624>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e116      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b8d      	ldr	r3, [pc, #564]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	2202      	movs	r2, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036d2:	231f      	movs	r3, #31
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b88      	ldr	r3, [pc, #544]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	4b87      	ldr	r3, [pc, #540]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80036e2:	4989      	ldr	r1, [pc, #548]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2210      	movs	r2, #16
 80036ee:	4013      	ands	r3, r2
 80036f0:	d063      	beq.n	80037ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d12a      	bne.n	8003750 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036fa:	4b81      	ldr	r3, [pc, #516]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80036fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fe:	4b80      	ldr	r3, [pc, #512]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003700:	2104      	movs	r1, #4
 8003702:	430a      	orrs	r2, r1
 8003704:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003706:	4b7e      	ldr	r3, [pc, #504]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370a:	4b7d      	ldr	r3, [pc, #500]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800370c:	2101      	movs	r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7ff f9b7 	bl	8002a84 <HAL_GetTick>
 8003716:	0003      	movs	r3, r0
 8003718:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800371c:	f7ff f9b2 	bl	8002a84 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0e3      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800372e:	4b74      	ldr	r3, [pc, #464]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003732:	2202      	movs	r2, #2
 8003734:	4013      	ands	r3, r2
 8003736:	d0f1      	beq.n	800371c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003738:	4b71      	ldr	r3, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	22f8      	movs	r2, #248	; 0xf8
 800373e:	4393      	bics	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	00da      	lsls	r2, r3, #3
 8003748:	4b6d      	ldr	r3, [pc, #436]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800374a:	430a      	orrs	r2, r1
 800374c:	635a      	str	r2, [r3, #52]	; 0x34
 800374e:	e034      	b.n	80037ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	3305      	adds	r3, #5
 8003756:	d111      	bne.n	800377c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003758:	4b69      	ldr	r3, [pc, #420]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800375a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800375e:	2104      	movs	r1, #4
 8003760:	438a      	bics	r2, r1
 8003762:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003764:	4b66      	ldr	r3, [pc, #408]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003768:	22f8      	movs	r2, #248	; 0xf8
 800376a:	4393      	bics	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	00da      	lsls	r2, r3, #3
 8003774:	4b62      	ldr	r3, [pc, #392]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003776:	430a      	orrs	r2, r1
 8003778:	635a      	str	r2, [r3, #52]	; 0x34
 800377a:	e01e      	b.n	80037ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800377c:	4b60      	ldr	r3, [pc, #384]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800377e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003780:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003782:	2104      	movs	r1, #4
 8003784:	430a      	orrs	r2, r1
 8003786:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003788:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800378a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378c:	4b5c      	ldr	r3, [pc, #368]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800378e:	2101      	movs	r1, #1
 8003790:	438a      	bics	r2, r1
 8003792:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003794:	f7ff f976 	bl	8002a84 <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800379e:	f7ff f971 	bl	8002a84 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0a2      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	2202      	movs	r2, #2
 80037b6:	4013      	ands	r3, r2
 80037b8:	d1f1      	bne.n	800379e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d100      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4e4>
 80037c2:	e097      	b.n	80038f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c4:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	220c      	movs	r2, #12
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d100      	bne.n	80037d2 <HAL_RCC_OscConfig+0x4f2>
 80037d0:	e06b      	b.n	80038aa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d14c      	bne.n	8003874 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b48      	ldr	r3, [pc, #288]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80037e0:	494a      	ldr	r1, [pc, #296]	; (800390c <HAL_RCC_OscConfig+0x62c>)
 80037e2:	400a      	ands	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7ff f94d 	bl	8002a84 <HAL_GetTick>
 80037ea:	0003      	movs	r3, r0
 80037ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f0:	f7ff f948 	bl	8002a84 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e079      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003802:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	049b      	lsls	r3, r3, #18
 800380a:	4013      	ands	r3, r2
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380e:	4b3c      	ldr	r3, [pc, #240]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	220f      	movs	r2, #15
 8003814:	4393      	bics	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	4b38      	ldr	r3, [pc, #224]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800381e:	430a      	orrs	r2, r1
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4a3a      	ldr	r2, [pc, #232]	; (8003910 <HAL_RCC_OscConfig+0x630>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	431a      	orrs	r2, r3
 8003836:	4b32      	ldr	r3, [pc, #200]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b30      	ldr	r3, [pc, #192]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0449      	lsls	r1, r1, #17
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7ff f91b 	bl	8002a84 <HAL_GetTick>
 800384e:	0003      	movs	r3, r0
 8003850:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7ff f916 	bl	8002a84 <HAL_GetTick>
 8003858:	0002      	movs	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e047      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	049b      	lsls	r3, r3, #18
 800386e:	4013      	ands	r3, r2
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x574>
 8003872:	e03f      	b.n	80038f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800387a:	4924      	ldr	r1, [pc, #144]	; (800390c <HAL_RCC_OscConfig+0x62c>)
 800387c:	400a      	ands	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7ff f900 	bl	8002a84 <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7ff f8fb 	bl	8002a84 <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e02c      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	049b      	lsls	r3, r3, #18
 80038a4:	4013      	ands	r3, r2
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x5aa>
 80038a8:	e024      	b.n	80038f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e01f      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_RCC_OscConfig+0x620>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	025b      	lsls	r3, r3, #9
 80038c8:	401a      	ands	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d10e      	bne.n	80038f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	220f      	movs	r2, #15
 80038d6:	401a      	ands	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	23f0      	movs	r3, #240	; 0xf0
 80038e4:	039b      	lsls	r3, r3, #14
 80038e6:	401a      	ands	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b008      	add	sp, #32
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	40021000 	.word	0x40021000
 8003904:	00001388 	.word	0x00001388
 8003908:	efffffff 	.word	0xefffffff
 800390c:	feffffff 	.word	0xfeffffff
 8003910:	ffc2ffff 	.word	0xffc2ffff

08003914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b3      	b.n	8003a90 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <HAL_RCC_ClockConfig+0x184>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2201      	movs	r2, #1
 800392e:	4013      	ands	r3, r2
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d911      	bls.n	800395a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b58      	ldr	r3, [pc, #352]	; (8003a98 <HAL_RCC_ClockConfig+0x184>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	4393      	bics	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	4b55      	ldr	r3, [pc, #340]	; (8003a98 <HAL_RCC_ClockConfig+0x184>)
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_ClockConfig+0x184>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e09a      	b.n	8003a90 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2202      	movs	r2, #2
 8003960:	4013      	ands	r3, r2
 8003962:	d015      	beq.n	8003990 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2204      	movs	r2, #4
 800396a:	4013      	ands	r3, r2
 800396c:	d006      	beq.n	800397c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800396e:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 8003974:	21e0      	movs	r1, #224	; 0xe0
 8003976:	00c9      	lsls	r1, r1, #3
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397c:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	22f0      	movs	r2, #240	; 0xf0
 8003982:	4393      	bics	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	4013      	ands	r3, r2
 8003998:	d040      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b3e      	ldr	r3, [pc, #248]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	029b      	lsls	r3, r3, #10
 80039aa:	4013      	ands	r3, r2
 80039ac:	d114      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06e      	b.n	8003a90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	049b      	lsls	r3, r3, #18
 80039c2:	4013      	ands	r3, r2
 80039c4:	d108      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e062      	b.n	8003a90 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ca:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2202      	movs	r2, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e05b      	b.n	8003a90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d8:	4b30      	ldr	r3, [pc, #192]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2203      	movs	r2, #3
 80039de:	4393      	bics	r3, r2
 80039e0:	0019      	movs	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039ec:	f7ff f84a 	bl	8002a84 <HAL_GetTick>
 80039f0:	0003      	movs	r3, r0
 80039f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f4:	e009      	b.n	8003a0a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f6:	f7ff f845 	bl	8002a84 <HAL_GetTick>
 80039fa:	0002      	movs	r2, r0
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <HAL_RCC_ClockConfig+0x18c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e042      	b.n	8003a90 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	220c      	movs	r2, #12
 8003a10:	401a      	ands	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d1ec      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <HAL_RCC_ClockConfig+0x184>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2201      	movs	r2, #1
 8003a22:	4013      	ands	r3, r2
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d211      	bcs.n	8003a4e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_ClockConfig+0x184>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4393      	bics	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <HAL_RCC_ClockConfig+0x184>)
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3c:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <HAL_RCC_ClockConfig+0x184>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2201      	movs	r2, #1
 8003a42:	4013      	ands	r3, r2
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e020      	b.n	8003a90 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2204      	movs	r2, #4
 8003a54:	4013      	ands	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <HAL_RCC_ClockConfig+0x190>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a6c:	f000 f820 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003a70:	0001      	movs	r1, r0
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_RCC_ClockConfig+0x188>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	220f      	movs	r2, #15
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x194>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	000a      	movs	r2, r1
 8003a82:	40da      	lsrs	r2, r3
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x198>)
 8003a86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f7fe ffb5 	bl	80029f8 <HAL_InitTick>
  
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40022000 	.word	0x40022000
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	00001388 	.word	0x00001388
 8003aa4:	fffff8ff 	.word	0xfffff8ff
 8003aa8:	08006a2c 	.word	0x08006a2c
 8003aac:	2000010c 	.word	0x2000010c

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	220c      	movs	r2, #12
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d002      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x30>
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8003ade:	e02c      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ae2:	613b      	str	r3, [r7, #16]
      break;
 8003ae4:	e02c      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	0c9b      	lsrs	r3, r3, #18
 8003aea:	220f      	movs	r2, #15
 8003aec:	4013      	ands	r3, r2
 8003aee:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003af4:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	220f      	movs	r2, #15
 8003afa:	4013      	ands	r3, r2
 8003afc:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003afe:	5cd3      	ldrb	r3, [r2, r3]
 8003b00:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	025b      	lsls	r3, r3, #9
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	4810      	ldr	r0, [pc, #64]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b10:	f7fc fafa 	bl	8000108 <__udivsi3>
 8003b14:	0003      	movs	r3, r0
 8003b16:	001a      	movs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4353      	muls	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e009      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	000a      	movs	r2, r1
 8003b24:	0152      	lsls	r2, r2, #5
 8003b26:	1a52      	subs	r2, r2, r1
 8003b28:	0193      	lsls	r3, r2, #6
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	185b      	adds	r3, r3, r1
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	613b      	str	r3, [r7, #16]
      break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xac>)
 8003b3c:	613b      	str	r3, [r7, #16]
      break;
 8003b3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b40:	693b      	ldr	r3, [r7, #16]
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b006      	add	sp, #24
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	08006a44 	.word	0x08006a44
 8003b58:	08006a54 	.word	0x08006a54
 8003b5c:	007a1200 	.word	0x007a1200

08003b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	0018      	movs	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	2000010c 	.word	0x2000010c

08003b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b78:	f7ff fff2 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003b7c:	0001      	movs	r1, r0
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	2207      	movs	r2, #7
 8003b86:	4013      	ands	r3, r2
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
 8003b8c:	40d9      	lsrs	r1, r3
 8003b8e:	000b      	movs	r3, r1
}    
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	08006a3c 	.word	0x08006a3c

08003ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	025b      	lsls	r3, r3, #9
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d100      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003bbc:	e08e      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003bbe:	2017      	movs	r0, #23
 8003bc0:	183b      	adds	r3, r7, r0
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	055b      	lsls	r3, r3, #21
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d110      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	0549      	lsls	r1, r1, #21
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	61da      	str	r2, [r3, #28]
 8003be0:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	055b      	lsls	r3, r3, #21
 8003be8:	4013      	ands	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bee:	183b      	adds	r3, r7, r0
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d11a      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c00:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b48      	ldr	r3, [pc, #288]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	0049      	lsls	r1, r1, #1
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe ff39 	bl	8002a84 <HAL_GetTick>
 8003c12:	0003      	movs	r3, r0
 8003c14:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	e008      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c18:	f7fe ff34 	bl	8002a84 <HAL_GetTick>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e077      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4013      	ands	r3, r2
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c36:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	23c0      	movs	r3, #192	; 0xc0
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d034      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	23c0      	movs	r3, #192	; 0xc0
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4013      	ands	r3, r2
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d02c      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c58:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4a33      	ldr	r2, [pc, #204]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c62:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	0249      	lsls	r1, r1, #9
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c70:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c76:	492e      	ldr	r1, [pc, #184]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c7c:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fefb 	bl	8002a84 <HAL_GetTick>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fe fef6 	bl	8002a84 <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e038      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	2202      	movs	r2, #2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cc6:	2317      	movs	r3, #23
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cd6:	4918      	ldr	r1, [pc, #96]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	2203      	movs	r2, #3
 8003cec:	4393      	bics	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	4013      	ands	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2210      	movs	r2, #16
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d14:	430a      	orrs	r2, r1
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b006      	add	sp, #24
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	fffffcff 	.word	0xfffffcff
 8003d30:	fffeffff 	.word	0xfffeffff
 8003d34:	00001388 	.word	0x00001388
 8003d38:	efffffff 	.word	0xefffffff

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e042      	b.n	8003dd4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	223d      	movs	r2, #61	; 0x3d
 8003d52:	5c9b      	ldrb	r3, [r3, r2]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	223c      	movs	r2, #60	; 0x3c
 8003d5e:	2100      	movs	r1, #0
 8003d60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7fe fc0b 	bl	8002580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	223d      	movs	r2, #61	; 0x3d
 8003d6e:	2102      	movs	r1, #2
 8003d70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	0010      	movs	r0, r2
 8003d7e:	f000 f9dd 	bl	800413c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2246      	movs	r2, #70	; 0x46
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	223e      	movs	r2, #62	; 0x3e
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	223f      	movs	r2, #63	; 0x3f
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2240      	movs	r2, #64	; 0x40
 8003d9e:	2101      	movs	r1, #1
 8003da0:	5499      	strb	r1, [r3, r2]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2241      	movs	r2, #65	; 0x41
 8003da6:	2101      	movs	r1, #1
 8003da8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2242      	movs	r2, #66	; 0x42
 8003dae:	2101      	movs	r1, #1
 8003db0:	5499      	strb	r1, [r3, r2]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2243      	movs	r2, #67	; 0x43
 8003db6:	2101      	movs	r1, #1
 8003db8:	5499      	strb	r1, [r3, r2]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2244      	movs	r2, #68	; 0x44
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	5499      	strb	r1, [r3, r2]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2245      	movs	r2, #69	; 0x45
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	223d      	movs	r2, #61	; 0x3d
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	223d      	movs	r2, #61	; 0x3d
 8003de8:	5c9b      	ldrb	r3, [r3, r2]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e035      	b.n	8003e60 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	223d      	movs	r2, #61	; 0x3d
 8003df8:	2102      	movs	r1, #2
 8003dfa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2101      	movs	r1, #1
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <HAL_TIM_Base_Start_IT+0x8c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_TIM_Base_Start_IT+0x4e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <HAL_TIM_Base_Start_IT+0x90>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_TIM_Base_Start_IT+0x4e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <HAL_TIM_Base_Start_IT+0x94>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d111      	bne.n	8003e4e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2207      	movs	r2, #7
 8003e32:	4013      	ands	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d010      	beq.n	8003e5e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4c:	e007      	b.n	8003e5e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2101      	movs	r1, #1
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40014000 	.word	0x40014000

08003e74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2101      	movs	r1, #1
 8003e88:	438a      	bics	r2, r1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <HAL_TIM_Base_Stop_IT+0x54>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	d10d      	bne.n	8003eb4 <HAL_TIM_Base_Stop_IT+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <HAL_TIM_Base_Stop_IT+0x58>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_Base_Stop_IT+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	223d      	movs	r2, #61	; 0x3d
 8003eb8:	2101      	movs	r1, #1
 8003eba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	00001111 	.word	0x00001111
 8003ecc:	00000444 	.word	0x00000444

08003ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d124      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d11d      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2203      	movs	r2, #3
 8003efa:	4252      	negs	r2, r2
 8003efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	0018      	movs	r0, r3
 8003f14:	f000 f8fa 	bl	800410c <HAL_TIM_IC_CaptureCallback>
 8003f18:	e007      	b.n	8003f2a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 f8ed 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 f8f9 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2204      	movs	r2, #4
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d125      	bne.n	8003f8a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2204      	movs	r2, #4
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d11e      	bne.n	8003f8a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2205      	movs	r2, #5
 8003f52:	4252      	negs	r2, r2
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	23c0      	movs	r3, #192	; 0xc0
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 f8cd 	bl	800410c <HAL_TIM_IC_CaptureCallback>
 8003f72:	e007      	b.n	8003f84 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	0018      	movs	r0, r3
 8003f78:	f000 f8c0 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 f8cc 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2208      	movs	r2, #8
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d124      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d11d      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2209      	movs	r2, #9
 8003fac:	4252      	negs	r2, r2
 8003fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f000 f8a1 	bl	800410c <HAL_TIM_IC_CaptureCallback>
 8003fca:	e007      	b.n	8003fdc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 f894 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 f8a0 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2210      	movs	r2, #16
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d125      	bne.n	800403c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2210      	movs	r2, #16
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d11e      	bne.n	800403c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2211      	movs	r2, #17
 8004004:	4252      	negs	r2, r2
 8004006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2208      	movs	r2, #8
 800400c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	23c0      	movs	r3, #192	; 0xc0
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4013      	ands	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	0018      	movs	r0, r3
 8004020:	f000 f874 	bl	800410c <HAL_TIM_IC_CaptureCallback>
 8004024:	e007      	b.n	8004036 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0018      	movs	r0, r3
 800402a:	f000 f867 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0018      	movs	r0, r3
 8004032:	f000 f873 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2201      	movs	r2, #1
 8004044:	4013      	ands	r3, r2
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10f      	bne.n	800406a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	4013      	ands	r3, r2
 8004054:	2b01      	cmp	r3, #1
 8004056:	d108      	bne.n	800406a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2202      	movs	r2, #2
 800405e:	4252      	negs	r2, r2
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f7fd fd1d 	bl	8001aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	4013      	ands	r3, r2
 8004074:	2b80      	cmp	r3, #128	; 0x80
 8004076:	d10f      	bne.n	8004098 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	4013      	ands	r3, r2
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d108      	bne.n	8004098 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2281      	movs	r2, #129	; 0x81
 800408c:	4252      	negs	r2, r2
 800408e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0018      	movs	r0, r3
 8004094:	f000 f8d0 	bl	8004238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2240      	movs	r2, #64	; 0x40
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d10f      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d108      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2241      	movs	r2, #65	; 0x41
 80040ba:	4252      	negs	r2, r2
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 f833 	bl	800412c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2220      	movs	r2, #32
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d10f      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	4013      	ands	r3, r2
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d108      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2221      	movs	r2, #33	; 0x21
 80040e8:	4252      	negs	r2, r2
 80040ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 f89a 	bl	8004228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	b002      	add	sp, #8
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	b002      	add	sp, #8
 800413a:	bd80      	pop	{r7, pc}

0800413c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a2f      	ldr	r2, [pc, #188]	; (800420c <TIM_Base_SetConfig+0xd0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0x20>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a2e      	ldr	r2, [pc, #184]	; (8004210 <TIM_Base_SetConfig+0xd4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2270      	movs	r2, #112	; 0x70
 8004160:	4393      	bics	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a26      	ldr	r2, [pc, #152]	; (800420c <TIM_Base_SetConfig+0xd0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <TIM_Base_SetConfig+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a25      	ldr	r2, [pc, #148]	; (8004210 <TIM_Base_SetConfig+0xd4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_Base_SetConfig+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a24      	ldr	r2, [pc, #144]	; (8004214 <TIM_Base_SetConfig+0xd8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_Base_SetConfig+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a23      	ldr	r2, [pc, #140]	; (8004218 <TIM_Base_SetConfig+0xdc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_Base_SetConfig+0x62>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_Base_SetConfig+0xe0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0x62>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_Base_SetConfig+0xe4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <TIM_Base_SetConfig+0xe8>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	4393      	bics	r3, r2
 80041b6:	001a      	movs	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0c      	ldr	r2, [pc, #48]	; (800420c <TIM_Base_SetConfig+0xd0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0xba>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <TIM_Base_SetConfig+0xdc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0xba>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a0c      	ldr	r2, [pc, #48]	; (800421c <TIM_Base_SetConfig+0xe0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0xba>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <TIM_Base_SetConfig+0xe4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d103      	bne.n	80041fe <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	615a      	str	r2, [r3, #20]
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b004      	add	sp, #16
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40012c00 	.word	0x40012c00
 8004210:	40000400 	.word	0x40000400
 8004214:	40002000 	.word	0x40002000
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800
 8004224:	fffffcff 	.word	0xfffffcff

08004228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e044      	b.n	80042e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d107      	bne.n	8004272 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2278      	movs	r2, #120	; 0x78
 8004266:	2100      	movs	r1, #0
 8004268:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	0018      	movs	r0, r3
 800426e:	f7fe f9cd 	bl	800260c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2224      	movs	r2, #36	; 0x24
 8004276:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2101      	movs	r1, #1
 8004284:	438a      	bics	r2, r1
 8004286:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0018      	movs	r0, r3
 800428c:	f000 fc3a 	bl	8004b04 <UART_SetConfig>
 8004290:	0003      	movs	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e024      	b.n	80042e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f000 fd6d 	bl	8004d84 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	490d      	ldr	r1, [pc, #52]	; (80042ec <HAL_UART_Init+0xa4>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2108      	movs	r1, #8
 80042c6:	438a      	bics	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2101      	movs	r1, #1
 80042d6:	430a      	orrs	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 fe05 	bl	8004eec <UART_CheckIdleState>
 80042e2:	0003      	movs	r3, r0
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	fffff7ff 	.word	0xfffff7ff

080042f0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e030      	b.n	8004364 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2224      	movs	r2, #36	; 0x24
 8004306:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2101      	movs	r1, #1
 8004314:	438a      	bics	r2, r1
 8004316:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2200      	movs	r2, #0
 8004326:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f7fe f9fa 	bl	800272c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2284      	movs	r2, #132	; 0x84
 800433c:	2100      	movs	r1, #0
 800433e:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2280      	movs	r2, #128	; 0x80
 800434a:	2100      	movs	r1, #0
 800434c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2278      	movs	r2, #120	; 0x78
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	1dbb      	adds	r3, r7, #6
 800437a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004380:	2b20      	cmp	r3, #32
 8004382:	d000      	beq.n	8004386 <HAL_UART_Transmit+0x1a>
 8004384:	e08d      	b.n	80044a2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_UART_Transmit+0x28>
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e085      	b.n	80044a4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	015b      	lsls	r3, r3, #5
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d109      	bne.n	80043b8 <HAL_UART_Transmit+0x4c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2201      	movs	r2, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d001      	beq.n	80043b8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e075      	b.n	80044a4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2284      	movs	r2, #132	; 0x84
 80043bc:	2100      	movs	r1, #0
 80043be:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2221      	movs	r2, #33	; 0x21
 80043c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c6:	f7fe fb5d 	bl	8002a84 <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1dba      	adds	r2, r7, #6
 80043d2:	2150      	movs	r1, #80	; 0x50
 80043d4:	8812      	ldrh	r2, [r2, #0]
 80043d6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1dba      	adds	r2, r7, #6
 80043dc:	2152      	movs	r1, #82	; 0x52
 80043de:	8812      	ldrh	r2, [r2, #0]
 80043e0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	015b      	lsls	r3, r3, #5
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d108      	bne.n	8004400 <HAL_UART_Transmit+0x94>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e003      	b.n	8004408 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004408:	e030      	b.n	800446c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	0013      	movs	r3, r2
 8004414:	2200      	movs	r2, #0
 8004416:	2180      	movs	r1, #128	; 0x80
 8004418:	f000 fe10 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 800441c:	1e03      	subs	r3, r0, #0
 800441e:	d004      	beq.n	800442a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e03c      	b.n	80044a4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	05d2      	lsls	r2, r2, #23
 800443a:	0dd2      	lsrs	r2, r2, #23
 800443c:	b292      	uxth	r2, r2
 800443e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	3302      	adds	r3, #2
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e008      	b.n	800445a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	b292      	uxth	r2, r2
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	3301      	adds	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2252      	movs	r2, #82	; 0x52
 800445e:	5a9b      	ldrh	r3, [r3, r2]
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b299      	uxth	r1, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2252      	movs	r2, #82	; 0x52
 800446a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2252      	movs	r2, #82	; 0x52
 8004470:	5a9b      	ldrh	r3, [r3, r2]
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1c8      	bne.n	800440a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	0013      	movs	r3, r2
 8004482:	2200      	movs	r2, #0
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	f000 fdd9 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 800448a:	1e03      	subs	r3, r0, #0
 800448c:	d004      	beq.n	8004498 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e005      	b.n	80044a4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e000      	b.n	80044a4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80044a2:	2302      	movs	r3, #2
  }
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b008      	add	sp, #32
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	1dbb      	adds	r3, r7, #6
 80044b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	589b      	ldr	r3, [r3, r2]
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d145      	bne.n	8004550 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_UART_Receive_IT+0x26>
 80044ca:	1dbb      	adds	r3, r7, #6
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e03d      	b.n	8004552 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	015b      	lsls	r3, r3, #5
 80044de:	429a      	cmp	r2, r3
 80044e0:	d109      	bne.n	80044f6 <HAL_UART_Receive_IT+0x4a>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	d001      	beq.n	80044f6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e02d      	b.n	8004552 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	4013      	ands	r3, r2
 8004508:	d019      	beq.n	800453e <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450a:	f3ef 8310 	mrs	r3, PRIMASK
 800450e:	613b      	str	r3, [r7, #16]
  return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2180      	movs	r1, #128	; 0x80
 800452c:	04c9      	lsls	r1, r1, #19
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f383 8810 	msr	PRIMASK, r3
}
 800453c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	0018      	movs	r0, r3
 8004548:	f000 fde2 	bl	8005110 <UART_Start_Receive_IT>
 800454c:	0003      	movs	r3, r0
 800454e:	e000      	b.n	8004552 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004550:	2302      	movs	r3, #2
  }
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b008      	add	sp, #32
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b0ab      	sub	sp, #172	; 0xac
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	22a4      	movs	r2, #164	; 0xa4
 800456c:	18b9      	adds	r1, r7, r2
 800456e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	20a0      	movs	r0, #160	; 0xa0
 8004578:	1839      	adds	r1, r7, r0
 800457a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	219c      	movs	r1, #156	; 0x9c
 8004584:	1879      	adds	r1, r7, r1
 8004586:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004588:	0011      	movs	r1, r2
 800458a:	18bb      	adds	r3, r7, r2
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a99      	ldr	r2, [pc, #612]	; (80047f4 <HAL_UART_IRQHandler+0x298>)
 8004590:	4013      	ands	r3, r2
 8004592:	2298      	movs	r2, #152	; 0x98
 8004594:	18bc      	adds	r4, r7, r2
 8004596:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004598:	18bb      	adds	r3, r7, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d114      	bne.n	80045ca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045a0:	187b      	adds	r3, r7, r1
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2220      	movs	r2, #32
 80045a6:	4013      	ands	r3, r2
 80045a8:	d00f      	beq.n	80045ca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045aa:	183b      	adds	r3, r7, r0
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2220      	movs	r2, #32
 80045b0:	4013      	ands	r3, r2
 80045b2:	d00a      	beq.n	80045ca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d100      	bne.n	80045be <HAL_UART_IRQHandler+0x62>
 80045bc:	e286      	b.n	8004acc <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	0010      	movs	r0, r2
 80045c6:	4798      	blx	r3
      }
      return;
 80045c8:	e280      	b.n	8004acc <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045ca:	2398      	movs	r3, #152	; 0x98
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d100      	bne.n	80045d6 <HAL_UART_IRQHandler+0x7a>
 80045d4:	e114      	b.n	8004800 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045d6:	239c      	movs	r3, #156	; 0x9c
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045e2:	23a0      	movs	r3, #160	; 0xa0
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a83      	ldr	r2, [pc, #524]	; (80047f8 <HAL_UART_IRQHandler+0x29c>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	d100      	bne.n	80045f0 <HAL_UART_IRQHandler+0x94>
 80045ee:	e107      	b.n	8004800 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045f0:	23a4      	movs	r3, #164	; 0xa4
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d012      	beq.n	8004622 <HAL_UART_IRQHandler+0xc6>
 80045fc:	23a0      	movs	r3, #160	; 0xa0
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4013      	ands	r3, r2
 8004608:	d00b      	beq.n	8004622 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2201      	movs	r2, #1
 8004610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2284      	movs	r2, #132	; 0x84
 8004616:	589b      	ldr	r3, [r3, r2]
 8004618:	2201      	movs	r2, #1
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2184      	movs	r1, #132	; 0x84
 8004620:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004622:	23a4      	movs	r3, #164	; 0xa4
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2202      	movs	r2, #2
 800462a:	4013      	ands	r3, r2
 800462c:	d011      	beq.n	8004652 <HAL_UART_IRQHandler+0xf6>
 800462e:	239c      	movs	r3, #156	; 0x9c
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	d00b      	beq.n	8004652 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2202      	movs	r2, #2
 8004640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2284      	movs	r2, #132	; 0x84
 8004646:	589b      	ldr	r3, [r3, r2]
 8004648:	2204      	movs	r2, #4
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2184      	movs	r1, #132	; 0x84
 8004650:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004652:	23a4      	movs	r3, #164	; 0xa4
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2204      	movs	r2, #4
 800465a:	4013      	ands	r3, r2
 800465c:	d011      	beq.n	8004682 <HAL_UART_IRQHandler+0x126>
 800465e:	239c      	movs	r3, #156	; 0x9c
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2201      	movs	r2, #1
 8004666:	4013      	ands	r3, r2
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2204      	movs	r2, #4
 8004670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2284      	movs	r2, #132	; 0x84
 8004676:	589b      	ldr	r3, [r3, r2]
 8004678:	2202      	movs	r2, #2
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2184      	movs	r1, #132	; 0x84
 8004680:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004682:	23a4      	movs	r3, #164	; 0xa4
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2208      	movs	r2, #8
 800468a:	4013      	ands	r3, r2
 800468c:	d017      	beq.n	80046be <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800468e:	23a0      	movs	r3, #160	; 0xa0
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2220      	movs	r2, #32
 8004696:	4013      	ands	r3, r2
 8004698:	d105      	bne.n	80046a6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800469a:	239c      	movs	r3, #156	; 0x9c
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2201      	movs	r2, #1
 80046a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a4:	d00b      	beq.n	80046be <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2208      	movs	r2, #8
 80046ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2284      	movs	r2, #132	; 0x84
 80046b2:	589b      	ldr	r3, [r3, r2]
 80046b4:	2208      	movs	r2, #8
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2184      	movs	r1, #132	; 0x84
 80046bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046be:	23a4      	movs	r3, #164	; 0xa4
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	4013      	ands	r3, r2
 80046ca:	d013      	beq.n	80046f4 <HAL_UART_IRQHandler+0x198>
 80046cc:	23a0      	movs	r3, #160	; 0xa0
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	04db      	lsls	r3, r3, #19
 80046d6:	4013      	ands	r3, r2
 80046d8:	d00c      	beq.n	80046f4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2280      	movs	r2, #128	; 0x80
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2284      	movs	r2, #132	; 0x84
 80046e8:	589b      	ldr	r3, [r3, r2]
 80046ea:	2220      	movs	r2, #32
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2184      	movs	r1, #132	; 0x84
 80046f2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2284      	movs	r2, #132	; 0x84
 80046f8:	589b      	ldr	r3, [r3, r2]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d100      	bne.n	8004700 <HAL_UART_IRQHandler+0x1a4>
 80046fe:	e1e7      	b.n	8004ad0 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004700:	23a4      	movs	r3, #164	; 0xa4
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2220      	movs	r2, #32
 8004708:	4013      	ands	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800470c:	23a0      	movs	r3, #160	; 0xa0
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2220      	movs	r2, #32
 8004714:	4013      	ands	r3, r2
 8004716:	d008      	beq.n	800472a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	0010      	movs	r0, r2
 8004728:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2284      	movs	r2, #132	; 0x84
 800472e:	589b      	ldr	r3, [r3, r2]
 8004730:	2194      	movs	r1, #148	; 0x94
 8004732:	187a      	adds	r2, r7, r1
 8004734:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2240      	movs	r2, #64	; 0x40
 800473e:	4013      	ands	r3, r2
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d004      	beq.n	800474e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004744:	187b      	adds	r3, r7, r1
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2228      	movs	r2, #40	; 0x28
 800474a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800474c:	d047      	beq.n	80047de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fd93 	bl	800527c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	4013      	ands	r3, r2
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d137      	bne.n	80047d4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004764:	f3ef 8310 	mrs	r3, PRIMASK
 8004768:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800476a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476c:	2090      	movs	r0, #144	; 0x90
 800476e:	183a      	adds	r2, r7, r0
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	2301      	movs	r3, #1
 8004774:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004778:	f383 8810 	msr	PRIMASK, r3
}
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	438a      	bics	r2, r1
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	183b      	adds	r3, r7, r0
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004796:	f383 8810 	msr	PRIMASK, r3
}
 800479a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <HAL_UART_IRQHandler+0x2a0>)
 80047aa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fe fab9 	bl	8002d28 <HAL_DMA_Abort_IT>
 80047b6:	1e03      	subs	r3, r0, #0
 80047b8:	d01a      	beq.n	80047f0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c4:	0018      	movs	r0, r3
 80047c6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	e012      	b.n	80047f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fd fbfd 	bl	8001fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d2:	e00d      	b.n	80047f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7fd fbf8 	bl	8001fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e008      	b.n	80047f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7fd fbf3 	bl	8001fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2284      	movs	r2, #132	; 0x84
 80047ea:	2100      	movs	r1, #0
 80047ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80047ee:	e16f      	b.n	8004ad0 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	46c0      	nop			; (mov r8, r8)
    return;
 80047f2:	e16d      	b.n	8004ad0 <HAL_UART_IRQHandler+0x574>
 80047f4:	0000080f 	.word	0x0000080f
 80047f8:	04000120 	.word	0x04000120
 80047fc:	08005345 	.word	0x08005345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004804:	2b01      	cmp	r3, #1
 8004806:	d000      	beq.n	800480a <HAL_UART_IRQHandler+0x2ae>
 8004808:	e139      	b.n	8004a7e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800480a:	23a4      	movs	r3, #164	; 0xa4
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2210      	movs	r2, #16
 8004812:	4013      	ands	r3, r2
 8004814:	d100      	bne.n	8004818 <HAL_UART_IRQHandler+0x2bc>
 8004816:	e132      	b.n	8004a7e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004818:	23a0      	movs	r3, #160	; 0xa0
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2210      	movs	r2, #16
 8004820:	4013      	ands	r3, r2
 8004822:	d100      	bne.n	8004826 <HAL_UART_IRQHandler+0x2ca>
 8004824:	e12b      	b.n	8004a7e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2210      	movs	r2, #16
 800482c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2240      	movs	r2, #64	; 0x40
 8004836:	4013      	ands	r3, r2
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d000      	beq.n	800483e <HAL_UART_IRQHandler+0x2e2>
 800483c:	e09f      	b.n	800497e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	217e      	movs	r1, #126	; 0x7e
 8004848:	187b      	adds	r3, r7, r1
 800484a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800484c:	187b      	adds	r3, r7, r1
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d100      	bne.n	8004856 <HAL_UART_IRQHandler+0x2fa>
 8004854:	e13e      	b.n	8004ad4 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2258      	movs	r2, #88	; 0x58
 800485a:	5a9b      	ldrh	r3, [r3, r2]
 800485c:	187a      	adds	r2, r7, r1
 800485e:	8812      	ldrh	r2, [r2, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d300      	bcc.n	8004866 <HAL_UART_IRQHandler+0x30a>
 8004864:	e136      	b.n	8004ad4 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	187a      	adds	r2, r7, r1
 800486a:	215a      	movs	r1, #90	; 0x5a
 800486c:	8812      	ldrh	r2, [r2, #0]
 800486e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b20      	cmp	r3, #32
 8004878:	d06f      	beq.n	800495a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487a:	f3ef 8310 	mrs	r3, PRIMASK
 800487e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004882:	67bb      	str	r3, [r7, #120]	; 0x78
 8004884:	2301      	movs	r3, #1
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	f383 8810 	msr	PRIMASK, r3
}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4992      	ldr	r1, [pc, #584]	; (8004ae4 <HAL_UART_IRQHandler+0x588>)
 800489c:	400a      	ands	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ac:	f3ef 8310 	mrs	r3, PRIMASK
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80048b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	677b      	str	r3, [r7, #116]	; 0x74
 80048b6:	2301      	movs	r3, #1
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048bc:	f383 8810 	msr	PRIMASK, r3
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2101      	movs	r1, #1
 80048ce:	438a      	bics	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d8:	f383 8810 	msr	PRIMASK, r3
}
 80048dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048de:	f3ef 8310 	mrs	r3, PRIMASK
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	673b      	str	r3, [r7, #112]	; 0x70
 80048e8:	2301      	movs	r3, #1
 80048ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2140      	movs	r1, #64	; 0x40
 8004900:	438a      	bics	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004906:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2280      	movs	r2, #128	; 0x80
 8004914:	2120      	movs	r1, #32
 8004916:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491e:	f3ef 8310 	mrs	r3, PRIMASK
 8004922:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004924:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004928:	2301      	movs	r3, #1
 800492a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2110      	movs	r1, #16
 8004940:	438a      	bics	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe f9af 	bl	8002cb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2258      	movs	r2, #88	; 0x58
 8004964:	5a9a      	ldrh	r2, [r3, r2]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	215a      	movs	r1, #90	; 0x5a
 800496a:	5a5b      	ldrh	r3, [r3, r1]
 800496c:	b29b      	uxth	r3, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	b29a      	uxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0011      	movs	r1, r2
 8004976:	0018      	movs	r0, r3
 8004978:	f000 f8b8 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800497c:	e0aa      	b.n	8004ad4 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2258      	movs	r2, #88	; 0x58
 8004982:	5a99      	ldrh	r1, [r3, r2]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	225a      	movs	r2, #90	; 0x5a
 8004988:	5a9b      	ldrh	r3, [r3, r2]
 800498a:	b29a      	uxth	r2, r3
 800498c:	208e      	movs	r0, #142	; 0x8e
 800498e:	183b      	adds	r3, r7, r0
 8004990:	1a8a      	subs	r2, r1, r2
 8004992:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	225a      	movs	r2, #90	; 0x5a
 8004998:	5a9b      	ldrh	r3, [r3, r2]
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d100      	bne.n	80049a2 <HAL_UART_IRQHandler+0x446>
 80049a0:	e09a      	b.n	8004ad8 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80049a2:	183b      	adds	r3, r7, r0
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d100      	bne.n	80049ac <HAL_UART_IRQHandler+0x450>
 80049aa:	e095      	b.n	8004ad8 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ac:	f3ef 8310 	mrs	r3, PRIMASK
 80049b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049b2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b4:	2488      	movs	r4, #136	; 0x88
 80049b6:	193a      	adds	r2, r7, r4
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	2301      	movs	r3, #1
 80049bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f383 8810 	msr	PRIMASK, r3
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4945      	ldr	r1, [pc, #276]	; (8004ae8 <HAL_UART_IRQHandler+0x58c>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	193b      	adds	r3, r7, r4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f383 8810 	msr	PRIMASK, r3
}
 80049e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e4:	f3ef 8310 	mrs	r3, PRIMASK
 80049e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	2484      	movs	r4, #132	; 0x84
 80049ee:	193a      	adds	r2, r7, r4
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	2301      	movs	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2101      	movs	r1, #1
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	193b      	adds	r3, r7, r4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	2120      	movs	r1, #32
 8004a22:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a30:	f3ef 8310 	mrs	r3, PRIMASK
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	2480      	movs	r4, #128	; 0x80
 8004a3a:	193a      	adds	r2, r7, r4
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	2301      	movs	r3, #1
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2110      	movs	r1, #16
 8004a56:	438a      	bics	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	193b      	adds	r3, r7, r4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a6e:	183b      	adds	r3, r7, r0
 8004a70:	881a      	ldrh	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0011      	movs	r1, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 f838 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a7c:	e02c      	b.n	8004ad8 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a7e:	23a4      	movs	r3, #164	; 0xa4
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2280      	movs	r2, #128	; 0x80
 8004a86:	4013      	ands	r3, r2
 8004a88:	d00f      	beq.n	8004aaa <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a8a:	23a0      	movs	r3, #160	; 0xa0
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	4013      	ands	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01e      	beq.n	8004adc <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	0010      	movs	r0, r2
 8004aa6:	4798      	blx	r3
    }
    return;
 8004aa8:	e018      	b.n	8004adc <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004aaa:	23a4      	movs	r3, #164	; 0xa4
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2240      	movs	r2, #64	; 0x40
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_UART_IRQHandler+0x582>
 8004ab6:	23a0      	movs	r3, #160	; 0xa0
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d00d      	beq.n	8004ade <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f000 fc54 	bl	8005372 <UART_EndTransmit_IT>
    return;
 8004aca:	e008      	b.n	8004ade <HAL_UART_IRQHandler+0x582>
      return;
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	e006      	b.n	8004ade <HAL_UART_IRQHandler+0x582>
    return;
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	e004      	b.n	8004ade <HAL_UART_IRQHandler+0x582>
      return;
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	e002      	b.n	8004ade <HAL_UART_IRQHandler+0x582>
      return;
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	e000      	b.n	8004ade <HAL_UART_IRQHandler+0x582>
    return;
 8004adc:	46c0      	nop			; (mov r8, r8)
  }

}
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b02b      	add	sp, #172	; 0xac
 8004ae2:	bd90      	pop	{r4, r7, pc}
 8004ae4:	fffffeff 	.word	0xfffffeff
 8004ae8:	fffffedf 	.word	0xfffffedf

08004aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	000a      	movs	r2, r1
 8004af6:	1cbb      	adds	r3, r7, #2
 8004af8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b002      	add	sp, #8
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0c:	231e      	movs	r3, #30
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a8d      	ldr	r2, [pc, #564]	; (8004d68 <UART_SetConfig+0x264>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a88      	ldr	r2, [pc, #544]	; (8004d6c <UART_SetConfig+0x268>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	0019      	movs	r1, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a7f      	ldr	r2, [pc, #508]	; (8004d70 <UART_SetConfig+0x26c>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a7b      	ldr	r2, [pc, #492]	; (8004d74 <UART_SetConfig+0x270>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d127      	bne.n	8004bda <UART_SetConfig+0xd6>
 8004b8a:	4b7b      	ldr	r3, [pc, #492]	; (8004d78 <UART_SetConfig+0x274>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	2203      	movs	r2, #3
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d00d      	beq.n	8004bb2 <UART_SetConfig+0xae>
 8004b96:	d81b      	bhi.n	8004bd0 <UART_SetConfig+0xcc>
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d014      	beq.n	8004bc6 <UART_SetConfig+0xc2>
 8004b9c:	d818      	bhi.n	8004bd0 <UART_SetConfig+0xcc>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <UART_SetConfig+0xa4>
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d00a      	beq.n	8004bbc <UART_SetConfig+0xb8>
 8004ba6:	e013      	b.n	8004bd0 <UART_SetConfig+0xcc>
 8004ba8:	231f      	movs	r3, #31
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e021      	b.n	8004bf6 <UART_SetConfig+0xf2>
 8004bb2:	231f      	movs	r3, #31
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e01c      	b.n	8004bf6 <UART_SetConfig+0xf2>
 8004bbc:	231f      	movs	r3, #31
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	701a      	strb	r2, [r3, #0]
 8004bc4:	e017      	b.n	8004bf6 <UART_SetConfig+0xf2>
 8004bc6:	231f      	movs	r3, #31
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	2208      	movs	r2, #8
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e012      	b.n	8004bf6 <UART_SetConfig+0xf2>
 8004bd0:	231f      	movs	r3, #31
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e00d      	b.n	8004bf6 <UART_SetConfig+0xf2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a67      	ldr	r2, [pc, #412]	; (8004d7c <UART_SetConfig+0x278>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d104      	bne.n	8004bee <UART_SetConfig+0xea>
 8004be4:	231f      	movs	r3, #31
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e003      	b.n	8004bf6 <UART_SetConfig+0xf2>
 8004bee:	231f      	movs	r3, #31
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d15c      	bne.n	8004cbc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004c02:	231f      	movs	r3, #31
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d015      	beq.n	8004c38 <UART_SetConfig+0x134>
 8004c0c:	dc18      	bgt.n	8004c40 <UART_SetConfig+0x13c>
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d00d      	beq.n	8004c2e <UART_SetConfig+0x12a>
 8004c12:	dc15      	bgt.n	8004c40 <UART_SetConfig+0x13c>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <UART_SetConfig+0x11a>
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d005      	beq.n	8004c28 <UART_SetConfig+0x124>
 8004c1c:	e010      	b.n	8004c40 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1e:	f7fe ffa9 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004c22:	0003      	movs	r3, r0
 8004c24:	61bb      	str	r3, [r7, #24]
        break;
 8004c26:	e012      	b.n	8004c4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c28:	4b55      	ldr	r3, [pc, #340]	; (8004d80 <UART_SetConfig+0x27c>)
 8004c2a:	61bb      	str	r3, [r7, #24]
        break;
 8004c2c:	e00f      	b.n	8004c4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7fe ff3f 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8004c32:	0003      	movs	r3, r0
 8004c34:	61bb      	str	r3, [r7, #24]
        break;
 8004c36:	e00a      	b.n	8004c4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	61bb      	str	r3, [r7, #24]
        break;
 8004c3e:	e006      	b.n	8004c4e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c44:	231e      	movs	r3, #30
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
        break;
 8004c4c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d100      	bne.n	8004c56 <UART_SetConfig+0x152>
 8004c54:	e07a      	b.n	8004d4c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	005a      	lsls	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	18d2      	adds	r2, r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	0019      	movs	r1, r3
 8004c68:	0010      	movs	r0, r2
 8004c6a:	f7fb fa4d 	bl	8000108 <__udivsi3>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b0f      	cmp	r3, #15
 8004c76:	d91c      	bls.n	8004cb2 <UART_SetConfig+0x1ae>
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	2380      	movs	r3, #128	; 0x80
 8004c7c:	025b      	lsls	r3, r3, #9
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d217      	bcs.n	8004cb2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	200e      	movs	r0, #14
 8004c88:	183b      	adds	r3, r7, r0
 8004c8a:	210f      	movs	r1, #15
 8004c8c:	438a      	bics	r2, r1
 8004c8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2207      	movs	r2, #7
 8004c98:	4013      	ands	r3, r2
 8004c9a:	b299      	uxth	r1, r3
 8004c9c:	183b      	adds	r3, r7, r0
 8004c9e:	183a      	adds	r2, r7, r0
 8004ca0:	8812      	ldrh	r2, [r2, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	183a      	adds	r2, r7, r0
 8004cac:	8812      	ldrh	r2, [r2, #0]
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	e04c      	b.n	8004d4c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb2:	231e      	movs	r3, #30
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e047      	b.n	8004d4c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cbc:	231f      	movs	r3, #31
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d015      	beq.n	8004cf2 <UART_SetConfig+0x1ee>
 8004cc6:	dc18      	bgt.n	8004cfa <UART_SetConfig+0x1f6>
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d00d      	beq.n	8004ce8 <UART_SetConfig+0x1e4>
 8004ccc:	dc15      	bgt.n	8004cfa <UART_SetConfig+0x1f6>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <UART_SetConfig+0x1d4>
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d005      	beq.n	8004ce2 <UART_SetConfig+0x1de>
 8004cd6:	e010      	b.n	8004cfa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe ff4c 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	61bb      	str	r3, [r7, #24]
        break;
 8004ce0:	e012      	b.n	8004d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce2:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <UART_SetConfig+0x27c>)
 8004ce4:	61bb      	str	r3, [r7, #24]
        break;
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce8:	f7fe fee2 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8004cec:	0003      	movs	r3, r0
 8004cee:	61bb      	str	r3, [r7, #24]
        break;
 8004cf0:	e00a      	b.n	8004d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	61bb      	str	r3, [r7, #24]
        break;
 8004cf8:	e006      	b.n	8004d08 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cfe:	231e      	movs	r3, #30
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
        break;
 8004d06:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01e      	beq.n	8004d4c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085a      	lsrs	r2, r3, #1
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	18d2      	adds	r2, r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	0010      	movs	r0, r2
 8004d20:	f7fb f9f2 	bl	8000108 <__udivsi3>
 8004d24:	0003      	movs	r3, r0
 8004d26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d90a      	bls.n	8004d44 <UART_SetConfig+0x240>
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	025b      	lsls	r3, r3, #9
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d205      	bcs.n	8004d44 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	e003      	b.n	8004d4c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004d44:	231e      	movs	r3, #30
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d58:	231e      	movs	r3, #30
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	781b      	ldrb	r3, [r3, #0]
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b008      	add	sp, #32
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	ffff69f3 	.word	0xffff69f3
 8004d6c:	ffffcfff 	.word	0xffffcfff
 8004d70:	fffff4ff 	.word	0xfffff4ff
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40004400 	.word	0x40004400
 8004d80:	007a1200 	.word	0x007a1200

08004d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2201      	movs	r2, #1
 8004d92:	4013      	ands	r3, r2
 8004d94:	d00b      	beq.n	8004dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a4a      	ldr	r2, [pc, #296]	; (8004ec8 <UART_AdvFeatureConfig+0x144>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2202      	movs	r2, #2
 8004db4:	4013      	ands	r3, r2
 8004db6:	d00b      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4a43      	ldr	r2, [pc, #268]	; (8004ecc <UART_AdvFeatureConfig+0x148>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a3b      	ldr	r2, [pc, #236]	; (8004ed0 <UART_AdvFeatureConfig+0x14c>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2208      	movs	r2, #8
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <UART_AdvFeatureConfig+0x150>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	2210      	movs	r2, #16
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4a2c      	ldr	r2, [pc, #176]	; (8004ed8 <UART_AdvFeatureConfig+0x154>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4a25      	ldr	r2, [pc, #148]	; (8004edc <UART_AdvFeatureConfig+0x158>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2240      	movs	r2, #64	; 0x40
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d01d      	beq.n	8004e9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <UART_AdvFeatureConfig+0x15c>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	035b      	lsls	r3, r3, #13
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d10b      	bne.n	8004e9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <UART_AdvFeatureConfig+0x160>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2280      	movs	r2, #128	; 0x80
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <UART_AdvFeatureConfig+0x164>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]
  }
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	fffdffff 	.word	0xfffdffff
 8004ecc:	fffeffff 	.word	0xfffeffff
 8004ed0:	fffbffff 	.word	0xfffbffff
 8004ed4:	ffff7fff 	.word	0xffff7fff
 8004ed8:	ffffefff 	.word	0xffffefff
 8004edc:	ffffdfff 	.word	0xffffdfff
 8004ee0:	ffefffff 	.word	0xffefffff
 8004ee4:	ff9fffff 	.word	0xff9fffff
 8004ee8:	fff7ffff 	.word	0xfff7ffff

08004eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b092      	sub	sp, #72	; 0x48
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2284      	movs	r2, #132	; 0x84
 8004ef8:	2100      	movs	r1, #0
 8004efa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004efc:	f7fd fdc2 	bl	8002a84 <HAL_GetTick>
 8004f00:	0003      	movs	r3, r0
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d12c      	bne.n	8004f6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	0391      	lsls	r1, r2, #14
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4a46      	ldr	r2, [pc, #280]	; (8005034 <UART_CheckIdleState+0x148>)
 8004f1c:	9200      	str	r2, [sp, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f000 f88c 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004f24:	1e03      	subs	r3, r0, #0
 8004f26:	d021      	beq.n	8004f6c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f28:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f32:	2301      	movs	r3, #1
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	f383 8810 	msr	PRIMASK, r3
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2180      	movs	r1, #128	; 0x80
 8004f4a:	438a      	bics	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2278      	movs	r2, #120	; 0x78
 8004f64:	2100      	movs	r1, #0
 8004f66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e05f      	b.n	800502c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2204      	movs	r2, #4
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d146      	bne.n	8005008 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7c:	2280      	movs	r2, #128	; 0x80
 8004f7e:	03d1      	lsls	r1, r2, #15
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4a2c      	ldr	r2, [pc, #176]	; (8005034 <UART_CheckIdleState+0x148>)
 8004f84:	9200      	str	r2, [sp, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f000 f858 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004f8c:	1e03      	subs	r3, r0, #0
 8004f8e:	d03b      	beq.n	8005008 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f90:	f3ef 8310 	mrs	r3, PRIMASK
 8004f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f383 8810 	msr	PRIMASK, r3
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4921      	ldr	r1, [pc, #132]	; (8005038 <UART_CheckIdleState+0x14c>)
 8004fb2:	400a      	ands	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fca:	633b      	str	r3, [r7, #48]	; 0x30
 8004fcc:	2301      	movs	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f383 8810 	msr	PRIMASK, r3
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	f383 8810 	msr	PRIMASK, r3
}
 8004ff2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2280      	movs	r2, #128	; 0x80
 8004ff8:	2120      	movs	r1, #32
 8004ffa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2278      	movs	r2, #120	; 0x78
 8005000:	2100      	movs	r1, #0
 8005002:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e011      	b.n	800502c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	2120      	movs	r1, #32
 8005014:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2278      	movs	r2, #120	; 0x78
 8005026:	2100      	movs	r1, #0
 8005028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b010      	add	sp, #64	; 0x40
 8005032:	bd80      	pop	{r7, pc}
 8005034:	01ffffff 	.word	0x01ffffff
 8005038:	fffffedf 	.word	0xfffffedf

0800503c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504c:	e04b      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	3301      	adds	r3, #1
 8005052:	d048      	beq.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005054:	f7fd fd16 	bl	8002a84 <HAL_GetTick>
 8005058:	0002      	movs	r2, r0
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	429a      	cmp	r2, r3
 8005062:	d302      	bcc.n	800506a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e04b      	b.n	8005106 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2204      	movs	r2, #4
 8005076:	4013      	ands	r3, r2
 8005078:	d035      	beq.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	2208      	movs	r2, #8
 8005082:	4013      	ands	r3, r2
 8005084:	2b08      	cmp	r3, #8
 8005086:	d111      	bne.n	80050ac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2208      	movs	r2, #8
 800508e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	0018      	movs	r0, r3
 8005094:	f000 f8f2 	bl	800527c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2284      	movs	r2, #132	; 0x84
 800509c:	2108      	movs	r1, #8
 800509e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2278      	movs	r2, #120	; 0x78
 80050a4:	2100      	movs	r1, #0
 80050a6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e02c      	b.n	8005106 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	2380      	movs	r3, #128	; 0x80
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	401a      	ands	r2, r3
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	429a      	cmp	r2, r3
 80050be:	d112      	bne.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2280      	movs	r2, #128	; 0x80
 80050c6:	0112      	lsls	r2, r2, #4
 80050c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f000 f8d5 	bl	800527c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2284      	movs	r2, #132	; 0x84
 80050d6:	2120      	movs	r1, #32
 80050d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2278      	movs	r2, #120	; 0x78
 80050de:	2100      	movs	r1, #0
 80050e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e00f      	b.n	8005106 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	425a      	negs	r2, r3
 80050f6:	4153      	adcs	r3, r2
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	001a      	movs	r2, r3
 80050fc:	1dfb      	adds	r3, r7, #7
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d0a4      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	0018      	movs	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	b004      	add	sp, #16
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b090      	sub	sp, #64	; 0x40
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	1dbb      	adds	r3, r7, #6
 800511c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1dba      	adds	r2, r7, #6
 8005128:	2158      	movs	r1, #88	; 0x58
 800512a:	8812      	ldrh	r2, [r2, #0]
 800512c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1dba      	adds	r2, r7, #6
 8005132:	215a      	movs	r1, #90	; 0x5a
 8005134:	8812      	ldrh	r2, [r2, #0]
 8005136:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	015b      	lsls	r3, r3, #5
 8005146:	429a      	cmp	r2, r3
 8005148:	d10d      	bne.n	8005166 <UART_Start_Receive_IT+0x56>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <UART_Start_Receive_IT+0x4c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	225c      	movs	r2, #92	; 0x5c
 8005156:	4946      	ldr	r1, [pc, #280]	; (8005270 <UART_Start_Receive_IT+0x160>)
 8005158:	5299      	strh	r1, [r3, r2]
 800515a:	e01a      	b.n	8005192 <UART_Start_Receive_IT+0x82>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	225c      	movs	r2, #92	; 0x5c
 8005160:	21ff      	movs	r1, #255	; 0xff
 8005162:	5299      	strh	r1, [r3, r2]
 8005164:	e015      	b.n	8005192 <UART_Start_Receive_IT+0x82>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <UART_Start_Receive_IT+0x7a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <UART_Start_Receive_IT+0x70>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	225c      	movs	r2, #92	; 0x5c
 800517a:	21ff      	movs	r1, #255	; 0xff
 800517c:	5299      	strh	r1, [r3, r2]
 800517e:	e008      	b.n	8005192 <UART_Start_Receive_IT+0x82>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	225c      	movs	r2, #92	; 0x5c
 8005184:	217f      	movs	r1, #127	; 0x7f
 8005186:	5299      	strh	r1, [r3, r2]
 8005188:	e003      	b.n	8005192 <UART_Start_Receive_IT+0x82>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	225c      	movs	r2, #92	; 0x5c
 800518e:	2100      	movs	r1, #0
 8005190:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2284      	movs	r2, #132	; 0x84
 8005196:	2100      	movs	r1, #0
 8005198:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	2122      	movs	r1, #34	; 0x22
 80051a0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a2:	f3ef 8310 	mrs	r3, PRIMASK
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ac:	2301      	movs	r3, #1
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	f383 8810 	msr	PRIMASK, r3
}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2101      	movs	r1, #1
 80051c4:	430a      	orrs	r2, r1
 80051c6:	609a      	str	r2, [r3, #8]
 80051c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	f383 8810 	msr	PRIMASK, r3
}
 80051d2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	015b      	lsls	r3, r3, #5
 80051dc:	429a      	cmp	r2, r3
 80051de:	d107      	bne.n	80051f0 <UART_Start_Receive_IT+0xe0>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a22      	ldr	r2, [pc, #136]	; (8005274 <UART_Start_Receive_IT+0x164>)
 80051ec:	669a      	str	r2, [r3, #104]	; 0x68
 80051ee:	e002      	b.n	80051f6 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a21      	ldr	r2, [pc, #132]	; (8005278 <UART_Start_Receive_IT+0x168>)
 80051f4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d019      	beq.n	8005232 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005202:	61fb      	str	r3, [r7, #28]
  return(result);
 8005204:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
 8005208:	2301      	movs	r3, #1
 800520a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	f383 8810 	msr	PRIMASK, r3
}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2190      	movs	r1, #144	; 0x90
 8005220:	0049      	lsls	r1, r1, #1
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	f383 8810 	msr	PRIMASK, r3
}
 8005230:	e018      	b.n	8005264 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005232:	f3ef 8310 	mrs	r3, PRIMASK
 8005236:	613b      	str	r3, [r7, #16]
  return(result);
 8005238:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
 800523c:	2301      	movs	r3, #1
 800523e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f383 8810 	msr	PRIMASK, r3
}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2120      	movs	r1, #32
 8005254:	430a      	orrs	r2, r1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f383 8810 	msr	PRIMASK, r3
}
 8005262:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b010      	add	sp, #64	; 0x40
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	000001ff 	.word	0x000001ff
 8005274:	08005581 	.word	0x08005581
 8005278:	080053c9 	.word	0x080053c9

0800527c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08e      	sub	sp, #56	; 0x38
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005284:	f3ef 8310 	mrs	r3, PRIMASK
 8005288:	617b      	str	r3, [r7, #20]
  return(result);
 800528a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	2301      	movs	r3, #1
 8005290:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f383 8810 	msr	PRIMASK, r3
}
 8005298:	46c0      	nop			; (mov r8, r8)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4926      	ldr	r1, [pc, #152]	; (8005340 <UART_EndRxTransfer+0xc4>)
 80052a6:	400a      	ands	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f383 8810 	msr	PRIMASK, r3
}
 80052b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ba:	623b      	str	r3, [r7, #32]
  return(result);
 80052bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
 80052c0:	2301      	movs	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	f383 8810 	msr	PRIMASK, r3
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2101      	movs	r1, #1
 80052d8:	438a      	bics	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	f383 8810 	msr	PRIMASK, r3
}
 80052e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d118      	bne.n	8005322 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f0:	f3ef 8310 	mrs	r3, PRIMASK
 80052f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80052f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fa:	2301      	movs	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f383 8810 	msr	PRIMASK, r3
}
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2110      	movs	r1, #16
 8005312:	438a      	bics	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f383 8810 	msr	PRIMASK, r3
}
 8005320:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2280      	movs	r2, #128	; 0x80
 8005326:	2120      	movs	r1, #32
 8005328:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	46bd      	mov	sp, r7
 800533a:	b00e      	add	sp, #56	; 0x38
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	fffffedf 	.word	0xfffffedf

08005344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	225a      	movs	r2, #90	; 0x5a
 8005356:	2100      	movs	r1, #0
 8005358:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2252      	movs	r2, #82	; 0x52
 800535e:	2100      	movs	r1, #0
 8005360:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	0018      	movs	r0, r3
 8005366:	f7fc fe31 	bl	8001fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	46bd      	mov	sp, r7
 800536e:	b004      	add	sp, #16
 8005370:	bd80      	pop	{r7, pc}

08005372 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537a:	f3ef 8310 	mrs	r3, PRIMASK
 800537e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005380:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	2301      	movs	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2140      	movs	r1, #64	; 0x40
 800539c:	438a      	bics	r2, r1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f383 8810 	msr	PRIMASK, r3
}
 80053aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	0018      	movs	r0, r3
 80053bc:	f7fc fc7a 	bl	8001cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b006      	add	sp, #24
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b094      	sub	sp, #80	; 0x50
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053d0:	204e      	movs	r0, #78	; 0x4e
 80053d2:	183b      	adds	r3, r7, r0
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	215c      	movs	r1, #92	; 0x5c
 80053d8:	5a52      	ldrh	r2, [r2, r1]
 80053da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2280      	movs	r2, #128	; 0x80
 80053e0:	589b      	ldr	r3, [r3, r2]
 80053e2:	2b22      	cmp	r3, #34	; 0x22
 80053e4:	d000      	beq.n	80053e8 <UART_RxISR_8BIT+0x20>
 80053e6:	e0ba      	b.n	800555e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	214c      	movs	r1, #76	; 0x4c
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80053f2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053f4:	187b      	adds	r3, r7, r1
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	183b      	adds	r3, r7, r0
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b2d9      	uxtb	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	400a      	ands	r2, r1
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	225a      	movs	r2, #90	; 0x5a
 8005418:	5a9b      	ldrh	r3, [r3, r2]
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b299      	uxth	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	225a      	movs	r2, #90	; 0x5a
 8005424:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	225a      	movs	r2, #90	; 0x5a
 800542a:	5a9b      	ldrh	r3, [r3, r2]
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d000      	beq.n	8005434 <UART_RxISR_8BIT+0x6c>
 8005432:	e09c      	b.n	800556e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005434:	f3ef 8310 	mrs	r3, PRIMASK
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543c:	64bb      	str	r3, [r7, #72]	; 0x48
 800543e:	2301      	movs	r3, #1
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	f383 8810 	msr	PRIMASK, r3
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4948      	ldr	r1, [pc, #288]	; (8005578 <UART_RxISR_8BIT+0x1b0>)
 8005456:	400a      	ands	r2, r1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	f383 8810 	msr	PRIMASK, r3
}
 8005464:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005466:	f3ef 8310 	mrs	r3, PRIMASK
 800546a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	647b      	str	r3, [r7, #68]	; 0x44
 8005470:	2301      	movs	r3, #1
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	f383 8810 	msr	PRIMASK, r3
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2101      	movs	r1, #1
 8005488:	438a      	bics	r2, r1
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	2120      	movs	r1, #32
 800549e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	4013      	ands	r3, r2
 80054b8:	d018      	beq.n	80054ec <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ba:	f3ef 8310 	mrs	r3, PRIMASK
 80054be:	61bb      	str	r3, [r7, #24]
  return(result);
 80054c0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054c2:	643b      	str	r3, [r7, #64]	; 0x40
 80054c4:	2301      	movs	r3, #1
 80054c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f383 8810 	msr	PRIMASK, r3
}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4928      	ldr	r1, [pc, #160]	; (800557c <UART_RxISR_8BIT+0x1b4>)
 80054dc:	400a      	ands	r2, r1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	f383 8810 	msr	PRIMASK, r3
}
 80054ea:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d12f      	bne.n	8005554 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054fa:	f3ef 8310 	mrs	r3, PRIMASK
 80054fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005500:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005504:	2301      	movs	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f383 8810 	msr	PRIMASK, r3
}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2110      	movs	r1, #16
 800551c:	438a      	bics	r2, r1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f383 8810 	msr	PRIMASK, r3
}
 800552a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	2210      	movs	r2, #16
 8005534:	4013      	ands	r3, r2
 8005536:	2b10      	cmp	r3, #16
 8005538:	d103      	bne.n	8005542 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2210      	movs	r2, #16
 8005540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2258      	movs	r2, #88	; 0x58
 8005546:	5a9a      	ldrh	r2, [r3, r2]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	0011      	movs	r1, r2
 800554c:	0018      	movs	r0, r3
 800554e:	f7ff facd 	bl	8004aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005552:	e00c      	b.n	800556e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f7fc fc2c 	bl	8001db4 <HAL_UART_RxCpltCallback>
}
 800555c:	e007      	b.n	800556e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699a      	ldr	r2, [r3, #24]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2108      	movs	r1, #8
 800556a:	430a      	orrs	r2, r1
 800556c:	619a      	str	r2, [r3, #24]
}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b014      	add	sp, #80	; 0x50
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	fffffedf 	.word	0xfffffedf
 800557c:	fbffffff 	.word	0xfbffffff

08005580 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b094      	sub	sp, #80	; 0x50
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005588:	204e      	movs	r0, #78	; 0x4e
 800558a:	183b      	adds	r3, r7, r0
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	215c      	movs	r1, #92	; 0x5c
 8005590:	5a52      	ldrh	r2, [r2, r1]
 8005592:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	589b      	ldr	r3, [r3, r2]
 800559a:	2b22      	cmp	r3, #34	; 0x22
 800559c:	d000      	beq.n	80055a0 <UART_RxISR_16BIT+0x20>
 800559e:	e0ba      	b.n	8005716 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	214c      	movs	r1, #76	; 0x4c
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80055aa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	183a      	adds	r2, r7, r0
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	8812      	ldrh	r2, [r2, #0]
 80055ba:	4013      	ands	r3, r2
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c6:	1c9a      	adds	r2, r3, #2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	225a      	movs	r2, #90	; 0x5a
 80055d0:	5a9b      	ldrh	r3, [r3, r2]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b299      	uxth	r1, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	225a      	movs	r2, #90	; 0x5a
 80055dc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	225a      	movs	r2, #90	; 0x5a
 80055e2:	5a9b      	ldrh	r3, [r3, r2]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d000      	beq.n	80055ec <UART_RxISR_16BIT+0x6c>
 80055ea:	e09c      	b.n	8005726 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ec:	f3ef 8310 	mrs	r3, PRIMASK
 80055f0:	623b      	str	r3, [r7, #32]
  return(result);
 80055f2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f4:	647b      	str	r3, [r7, #68]	; 0x44
 80055f6:	2301      	movs	r3, #1
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	f383 8810 	msr	PRIMASK, r3
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4948      	ldr	r1, [pc, #288]	; (8005730 <UART_RxISR_16BIT+0x1b0>)
 800560e:	400a      	ands	r2, r1
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	f383 8810 	msr	PRIMASK, r3
}
 800561c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561e:	f3ef 8310 	mrs	r3, PRIMASK
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
 8005628:	2301      	movs	r3, #1
 800562a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	f383 8810 	msr	PRIMASK, r3
}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2101      	movs	r1, #1
 8005640:	438a      	bics	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	f383 8810 	msr	PRIMASK, r3
}
 800564e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	2120      	movs	r1, #32
 8005656:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	041b      	lsls	r3, r3, #16
 800566e:	4013      	ands	r3, r2
 8005670:	d018      	beq.n	80056a4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005672:	f3ef 8310 	mrs	r3, PRIMASK
 8005676:	617b      	str	r3, [r7, #20]
  return(result);
 8005678:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567c:	2301      	movs	r3, #1
 800567e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f383 8810 	msr	PRIMASK, r3
}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4928      	ldr	r1, [pc, #160]	; (8005734 <UART_RxISR_16BIT+0x1b4>)
 8005694:	400a      	ands	r2, r1
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d12f      	bne.n	800570c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b2:	f3ef 8310 	mrs	r3, PRIMASK
 80056b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80056bc:	2301      	movs	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f383 8810 	msr	PRIMASK, r3
}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2110      	movs	r1, #16
 80056d4:	438a      	bics	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f383 8810 	msr	PRIMASK, r3
}
 80056e2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	2210      	movs	r2, #16
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d103      	bne.n	80056fa <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2210      	movs	r2, #16
 80056f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2258      	movs	r2, #88	; 0x58
 80056fe:	5a9a      	ldrh	r2, [r3, r2]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	0011      	movs	r1, r2
 8005704:	0018      	movs	r0, r3
 8005706:	f7ff f9f1 	bl	8004aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800570a:	e00c      	b.n	8005726 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0018      	movs	r0, r3
 8005710:	f7fc fb50 	bl	8001db4 <HAL_UART_RxCpltCallback>
}
 8005714:	e007      	b.n	8005726 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2108      	movs	r1, #8
 8005722:	430a      	orrs	r2, r1
 8005724:	619a      	str	r2, [r3, #24]
}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	46bd      	mov	sp, r7
 800572a:	b014      	add	sp, #80	; 0x50
 800572c:	bd80      	pop	{r7, pc}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	fffffedf 	.word	0xfffffedf
 8005734:	fbffffff 	.word	0xfbffffff

08005738 <kfifo_reset>:
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	fifo->in = fifo->out = 0;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b002      	add	sp, #8
 8005754:	bd80      	pop	{r7, pc}

08005756 <kfifo_size>:
/**
 * kfifo_size - returns the size of the fifo in bytes
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_size(struct kfifo *fifo)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
	return fifo->size;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
}
 8005762:	0018      	movs	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	b002      	add	sp, #8
 8005768:	bd80      	pop	{r7, pc}

0800576a <kfifo_len>:
/**
 * kfifo_len - returns the number of used bytes in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_len(struct kfifo *fifo)
{
 800576a:	b590      	push	{r4, r7, lr}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
	register unsigned int	out;

	out = fifo->out;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68dc      	ldr	r4, [r3, #12]

	return fifo->in - out;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	1b1b      	subs	r3, r3, r4
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b003      	add	sp, #12
 8005782:	bd90      	pop	{r4, r7, pc}

08005784 <kfifo_avail>:
/**
 * kfifo_avail - returns the number of bytes available in the FIFO
 * @fifo: the fifo to be used.
 */
static __inline unsigned int kfifo_avail(struct kfifo *fifo)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	return kfifo_size(fifo) - kfifo_len(fifo);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	0018      	movs	r0, r3
 8005790:	f7ff ffe1 	bl	8005756 <kfifo_size>
 8005794:	0004      	movs	r4, r0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0018      	movs	r0, r3
 800579a:	f7ff ffe6 	bl	800576a <kfifo_len>
 800579e:	0003      	movs	r3, r0
 80057a0:	1ae3      	subs	r3, r4, r3
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b003      	add	sp, #12
 80057a8:	bd90      	pop	{r4, r7, pc}

080057aa <__kfifo_add_out>:
/*
 * __kfifo_add_out internal helper function for updating the out offset
 */
static __inline void __kfifo_add_out(struct kfifo *fifo,
				unsigned int off)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
	fifo->out += off;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	18d2      	adds	r2, r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
}
 80057c0:	46c0      	nop			; (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b002      	add	sp, #8
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <__kfifo_add_in>:
/*
 * __kfifo_add_in internal helper function for updating the in offset
 */
static __inline void __kfifo_add_in(struct kfifo *fifo,
				unsigned int off)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	fifo->in += off;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	18d2      	adds	r2, r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b002      	add	sp, #8
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <__kfifo_off>:
/*
 * __kfifo_off internal helper function for calculating the index of a
 * given offeset
 */
static __inline unsigned int __kfifo_off(struct kfifo *fifo, unsigned int off)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
	return off & (fifo->size - 1);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	4013      	ands	r3, r2
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b002      	add	sp, #8
 8005800:	bd80      	pop	{r7, pc}

08005802 <kfifo_init>:
 * @buffer: the preallocated buffer to be used.
 * @size: the size of the internal buffer, this has to be a power of 2.
 *
 */
void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
	fifo->buffer = buffer;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	605a      	str	r2, [r3, #4]

	kfifo_reset(fifo);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	0018      	movs	r0, r3
 800581e:	f7ff ff8b 	bl	8005738 <kfifo_reset>
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b004      	add	sp, #16
 8005828:	bd80      	pop	{r7, pc}

0800582a <__kfifo_in_data>:

static __inline void __kfifo_in_data(struct kfifo *fifo,
		const void *from, unsigned int len, unsigned int off)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->out index -before- we
	 * start putting bytes into the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->in + off);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	18d2      	adds	r2, r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	0011      	movs	r1, r2
 8005844:	0018      	movs	r0, r3
 8005846:	f7ff ffce 	bl	80057e6 <__kfifo_off>
 800584a:	0003      	movs	r3, r0
 800584c:	603b      	str	r3, [r7, #0]

	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - off);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4293      	cmp	r3, r2
 800585a:	d900      	bls.n	800585e <__kfifo_in_data+0x34>
 800585c:	0013      	movs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
	memcpy(fifo->buffer + off, (char*)from, l);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	18d3      	adds	r3, r2, r3
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	0018      	movs	r0, r3
 800586e:	f000 fa81 	bl	8005d74 <memcpy>

	/* then put the rest (if any) at the beginning of the buffer */
	memcpy(fifo->buffer, (char*)(from) + l, len - l);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	18d1      	adds	r1, r2, r3
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	001a      	movs	r2, r3
 8005884:	f000 fa76 	bl	8005d74 <memcpy>
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b006      	add	sp, #24
 800588e:	bd80      	pop	{r7, pc}

08005890 <__kfifo_out_data>:

static __inline void __kfifo_out_data(struct kfifo *fifo,
		void *to, unsigned int len, unsigned int off)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
	/*
	 * Ensure that we sample the fifo->in index -before- we
	 * start removing bytes from the kfifo.
	 */

	off = __kfifo_off(fifo, fifo->out + off);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	18d2      	adds	r2, r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7ff ff9b 	bl	80057e6 <__kfifo_off>
 80058b0:	0003      	movs	r3, r0
 80058b2:	603b      	str	r3, [r7, #0]

	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - off);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	1ad2      	subs	r2, r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4293      	cmp	r3, r2
 80058c0:	d900      	bls.n	80058c4 <__kfifo_out_data+0x34>
 80058c2:	0013      	movs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
	memcpy( (char*)to, fifo->buffer + off, l);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	18d1      	adds	r1, r2, r3
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f000 fa4e 	bl	8005d74 <memcpy>

	/* then get the rest (if any) from the beginning of the buffer */
	memcpy( (char*)to + l, fifo->buffer, len - l);
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	18d0      	adds	r0, r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	001a      	movs	r2, r3
 80058ea:	f000 fa43 	bl	8005d74 <memcpy>
}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b006      	add	sp, #24
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <kfifo_in>:
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_in(struct kfifo *fifo, const void *from,
				unsigned int len)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
	len = min(kfifo_avail(fifo), len);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	0018      	movs	r0, r3
 8005906:	f7ff ff3d 	bl	8005784 <kfifo_avail>
 800590a:	0002      	movs	r2, r0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4293      	cmp	r3, r2
 8005910:	d905      	bls.n	800591e <kfifo_in+0x28>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	0018      	movs	r0, r3
 8005916:	f7ff ff35 	bl	8005784 <kfifo_avail>
 800591a:	0003      	movs	r3, r0
 800591c:	e000      	b.n	8005920 <kfifo_in+0x2a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	607b      	str	r3, [r7, #4]

	__kfifo_in_data(fifo, from, len, 0);
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	2300      	movs	r3, #0
 800592a:	f7ff ff7e 	bl	800582a <__kfifo_in_data>
	__kfifo_add_in(fifo, len);
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	0011      	movs	r1, r2
 8005934:	0018      	movs	r0, r3
 8005936:	f7ff ff47 	bl	80057c8 <__kfifo_add_in>
	return len;
 800593a:	687b      	ldr	r3, [r7, #4]
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b004      	add	sp, #16
 8005942:	bd80      	pop	{r7, pc}

08005944 <kfifo_out>:
 *
 * Note that with only one concurrent reader and one concurrent
 * writer, you don't need extra locking to use these functions.
 */
unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
	len = min(kfifo_len(fifo), len);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	0018      	movs	r0, r3
 8005954:	f7ff ff09 	bl	800576a <kfifo_len>
 8005958:	0002      	movs	r2, r0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4293      	cmp	r3, r2
 800595e:	d905      	bls.n	800596c <kfifo_out+0x28>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	0018      	movs	r0, r3
 8005964:	f7ff ff01 	bl	800576a <kfifo_len>
 8005968:	0003      	movs	r3, r0
 800596a:	e000      	b.n	800596e <kfifo_out+0x2a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	607b      	str	r3, [r7, #4]

	__kfifo_out_data(fifo, to, len, 0);
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	2300      	movs	r3, #0
 8005978:	f7ff ff8a 	bl	8005890 <__kfifo_out_data>
	__kfifo_add_out(fifo, len);
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	0011      	movs	r1, r2
 8005982:	0018      	movs	r0, r3
 8005984:	f7ff ff11 	bl	80057aa <__kfifo_add_out>

	return len;
 8005988:	687b      	ldr	r3, [r7, #4]
}
 800598a:	0018      	movs	r0, r3
 800598c:	46bd      	mov	sp, r7
 800598e:	b004      	add	sp, #16
 8005990:	bd80      	pop	{r7, pc}

08005992 <mq_init>:
 * 
 * @param None
 * @return struct msgQueue   
 */
void mq_init(struct msgQueue *queue)
{
 8005992:	b590      	push	{r4, r7, lr}
 8005994:	b085      	sub	sp, #20
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
    struct msgQueue *mq = (struct msgQueue *)malloc(sizeof(struct msgQueue));
 800599a:	2090      	movs	r0, #144	; 0x90
 800599c:	f000 f9e0 	bl	8005d60 <malloc>
 80059a0:	0003      	movs	r3, r0
 80059a2:	60bb      	str	r3, [r7, #8]
    if (mq == NULL)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <mq_init+0x1c>
    {
    	queue = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	607b      	str	r3, [r7, #4]
    }
    mq->lock = 0;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
    mq->size = MSGQUEUESIZE;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2210      	movs	r2, #16
 80059b8:	605a      	str	r2, [r3, #4]
    mq->head = 0;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2200      	movs	r2, #0
 80059be:	609a      	str	r2, [r3, #8]
    mq->tail = 0;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 80059c6:	230f      	movs	r3, #15
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e010      	b.n	80059f2 <mq_init+0x60>
    {
        memset(&(mq->list[i]), 0, sizeof(struct msgQueue));
 80059d0:	240f      	movs	r4, #15
 80059d2:	193b      	adds	r3, r7, r4
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	3302      	adds	r3, #2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	18d3      	adds	r3, r2, r3
 80059de:	2290      	movs	r2, #144	; 0x90
 80059e0:	2100      	movs	r1, #0
 80059e2:	0018      	movs	r0, r3
 80059e4:	f000 f9cf 	bl	8005d86 <memset>
    for (uint8_t i = 0; i < MSGQUEUESIZE; i++)
 80059e8:	193b      	adds	r3, r7, r4
 80059ea:	781a      	ldrb	r2, [r3, #0]
 80059ec:	193b      	adds	r3, r7, r4
 80059ee:	3201      	adds	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	230f      	movs	r3, #15
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b0f      	cmp	r3, #15
 80059fa:	d9e9      	bls.n	80059d0 <mq_init+0x3e>
    }
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b005      	add	sp, #20
 8005a04:	bd90      	pop	{r4, r7, pc}

08005a06 <mq_push>:
 * @param queue 
 * @param msg 
 * @return uint32_t 
 */
uint32_t mq_push(struct msgQueue *queue, struct msg *msg)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
    if (queue == NULL || msg == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <mq_push+0x16>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <mq_push+0x1a>
    {
        return 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e02a      	b.n	8005a76 <mq_push+0x70>
    }
//    if ((queue->head - queue->tail) == MSGQUEUESIZE - 1)
//    {
//        queue->head -= MSGQUEUESIZE - 1;
//    }
    if (queue->head >= MSGQUEUESIZE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b0f      	cmp	r3, #15
 8005a26:	d905      	bls.n	8005a34 <mq_push+0x2e>
    {
    	queue->head -= MSGQUEUESIZE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	3b10      	subs	r3, #16
 8005a2e:	001a      	movs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	609a      	str	r2, [r3, #8]
    }

    uint8_t index = queue->head & (MSGQUEUESIZE - 1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	200f      	movs	r0, #15
 8005a3c:	183b      	adds	r3, r7, r0
 8005a3e:	210f      	movs	r1, #15
 8005a40:	400a      	ands	r2, r1
 8005a42:	701a      	strb	r2, [r3, #0]
    queue->list[index].type = msg->type;
 8005a44:	183b      	adds	r3, r7, r0
 8005a46:	781a      	ldrb	r2, [r3, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	6819      	ldr	r1, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3202      	adds	r2, #2
 8005a50:	00d2      	lsls	r2, r2, #3
 8005a52:	50d1      	str	r1, [r2, r3]
    queue->list[index].data = msg->data;
 8005a54:	183b      	adds	r3, r7, r0
 8005a56:	7818      	ldrb	r0, [r3, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	1c83      	adds	r3, r0, #2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	18cb      	adds	r3, r1, r3
 8005a64:	3304      	adds	r3, #4
 8005a66:	601a      	str	r2, [r3, #0]
    queue->head++;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	609a      	str	r2, [r3, #8]

    return queue->head;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b004      	add	sp, #16
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <mq_pop>:
 * 
 * @param queue 
 * @return struct msg* 
 */
struct msg *mq_pop(struct msgQueue *queue)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <mq_pop+0x12>
    {
        return NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e022      	b.n	8005ad6 <mq_pop+0x58>
    }

    if (queue->head == queue->tail)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d101      	bne.n	8005aa0 <mq_pop+0x22>
    {
        return NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e01a      	b.n	8005ad6 <mq_pop+0x58>
    }
    
    uint8_t index = queue->tail & (MSGQUEUESIZE - 1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	230f      	movs	r3, #15
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	210f      	movs	r1, #15
 8005aac:	400a      	ands	r2, r1
 8005aae:	701a      	strb	r2, [r3, #0]
    queue->tail++;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60da      	str	r2, [r3, #12]
    if (queue->tail == MSGQUEUESIZE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d102      	bne.n	8005ac8 <mq_pop+0x4a>
	{
		queue->tail = 0;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	60da      	str	r2, [r3, #12]
	}
    return &(queue->list[index]);
 8005ac8:	230f      	movs	r3, #15
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	3302      	adds	r3, #2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	18d3      	adds	r3, r2, r3
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b004      	add	sp, #16
 8005adc:	bd80      	pop	{r7, pc}

08005ade <stateM_init>:
static struct transition *getTransition( struct stateMachine *stateMachine,
      struct state *state, struct event *const event );

void stateM_init( struct stateMachine *fsm,
      struct state *initialState, struct state *errorState )
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
   if ( !fsm )
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <stateM_init+0x26>
      return;

   fsm->currentState = initialState;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	601a      	str	r2, [r3, #0]
   fsm->previousState = NULL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	605a      	str	r2, [r3, #4]
   fsm->errorState = errorState;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	609a      	str	r2, [r3, #8]
 8005b02:	e000      	b.n	8005b06 <stateM_init+0x28>
      return;
 8005b04:	46c0      	nop			; (mov r8, r8)
}
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b004      	add	sp, #16
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <stateM_handleEvent>:

int stateM_handleEvent( struct stateMachine *fsm,
      struct event *event )
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
   if ( !fsm || !event )
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <stateM_handleEvent+0x16>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <stateM_handleEvent+0x1c>
      return stateM_errArg;
 8005b22:	2302      	movs	r3, #2
 8005b24:	425b      	negs	r3, r3
 8005b26:	e093      	b.n	8005c50 <stateM_handleEvent+0x144>

   if ( !fsm->currentState )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d108      	bne.n	8005b42 <stateM_handleEvent+0x36>
   {
      goToErrorState( fsm, event );
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	0011      	movs	r1, r2
 8005b36:	0018      	movs	r0, r3
 8005b38:	f000 f88e 	bl	8005c58 <goToErrorState>
      return stateM_errorStateReached;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	425b      	negs	r3, r3
 8005b40:	e086      	b.n	8005c50 <stateM_handleEvent+0x144>
   }

   if ( !fsm->currentState->numTransitions )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <stateM_handleEvent+0x44>
      return stateM_noStateChange;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e07f      	b.n	8005c50 <stateM_handleEvent+0x144>

   struct state *nextState = fsm->currentState;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60fb      	str	r3, [r7, #12]
   do {
      struct transition *transition = getTransition( fsm, nextState, event );
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	68f9      	ldr	r1, [r7, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f000 f89e 	bl	8005c9e <getTransition>
 8005b62:	0003      	movs	r3, r0
 8005b64:	60bb      	str	r3, [r7, #8]

      /* If there were no transitions for the given event for the current
       * state, check if there are any transitions for any of the parent
       * states (if any): */
      if ( !transition )
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <stateM_handleEvent+0x6e>
      {
         nextState = nextState->parentState;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
       * machine has stopped: */
      if ( !fsm->currentState->numTransitions )
         return stateM_finalStateReached;

      return stateM_stateChanged;
   } while ( nextState );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1ee      	bne.n	8005b56 <stateM_handleEvent+0x4a>
 8005b78:	e069      	b.n	8005c4e <stateM_handleEvent+0x142>
      if ( !transition->nextState )
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d108      	bne.n	8005b94 <stateM_handleEvent+0x88>
         goToErrorState( fsm, event );
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0011      	movs	r1, r2
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 f865 	bl	8005c58 <goToErrorState>
         return stateM_errorStateReached;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	425b      	negs	r3, r3
 8005b92:	e05d      	b.n	8005c50 <stateM_handleEvent+0x144>
      nextState = transition->nextState;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8005b9a:	e002      	b.n	8005ba2 <stateM_handleEvent+0x96>
         nextState = nextState->entryState;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]
      while ( nextState->entryState )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f8      	bne.n	8005b9c <stateM_handleEvent+0x90>
      if ( nextState != fsm->currentState && fsm->currentState->exitAction )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d00d      	beq.n	8005bd0 <stateM_handleEvent+0xc4>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <stateM_handleEvent+0xc4>
         fsm->currentState->exitAction( fsm->currentState->data, event );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699a      	ldr	r2, [r3, #24]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	4790      	blx	r2
      if ( transition->action )
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d009      	beq.n	8005bec <stateM_handleEvent+0xe0>
         transition->action( fsm->currentState->data, event, nextState->
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	68dc      	ldr	r4, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6918      	ldr	r0, [r3, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	0019      	movs	r1, r3
 8005bea:	47a0      	blx	r4
      if ( nextState != fsm->currentState && nextState->entryAction )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d00a      	beq.n	8005c0c <stateM_handleEvent+0x100>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d006      	beq.n	8005c0c <stateM_handleEvent+0x100>
         nextState->entryAction( nextState->data, event );
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	4790      	blx	r2
      fsm->previousState = fsm->currentState;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]
      fsm->currentState = nextState;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	601a      	str	r2, [r3, #0]
      if ( fsm->currentState == fsm->previousState )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d101      	bne.n	8005c2a <stateM_handleEvent+0x11e>
         return stateM_stateLoopSelf;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e012      	b.n	8005c50 <stateM_handleEvent+0x144>
      if ( fsm->currentState == fsm->errorState )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d102      	bne.n	8005c3c <stateM_handleEvent+0x130>
         return stateM_errorStateReached;
 8005c36:	2301      	movs	r3, #1
 8005c38:	425b      	negs	r3, r3
 8005c3a:	e009      	b.n	8005c50 <stateM_handleEvent+0x144>
      if ( !fsm->currentState->numTransitions )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <stateM_handleEvent+0x13e>
         return stateM_finalStateReached;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e002      	b.n	8005c50 <stateM_handleEvent+0x144>
      return stateM_stateChanged;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <stateM_handleEvent+0x144>

   return stateM_noStateChange;
 8005c4e:	2302      	movs	r3, #2
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b005      	add	sp, #20
 8005c56:	bd90      	pop	{r4, r7, pc}

08005c58 <goToErrorState>:
}


static void goToErrorState( struct stateMachine *fsm,
      struct event *const event )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
   fsm->previousState = fsm->currentState;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]
   fsm->currentState = fsm->errorState;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]

   if ( fsm->currentState && fsm->currentState->entryAction )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <goToErrorState+0x3e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <goToErrorState+0x3e>
      fsm->currentState->entryAction( fsm->currentState->data, event );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	0018      	movs	r0, r3
 8005c94:	4790      	blx	r2
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b002      	add	sp, #8
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <getTransition>:

static struct transition *getTransition( struct stateMachine *fsm,
      struct state *state, struct event *const event )
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
   size_t i;

   for ( i = 0; i < state->numTransitions; ++i )
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	e022      	b.n	8005cf6 <getTransition+0x58>
   {
      struct transition *t = &state->transitions[ i ];
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6899      	ldr	r1, [r3, #8]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	0013      	movs	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	189b      	adds	r3, r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	18cb      	adds	r3, r1, r3
 8005cc0:	613b      	str	r3, [r7, #16]

      /* A transition for the given event has been found: */
      if ( t->eventType == event->type )
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d110      	bne.n	8005cf0 <getTransition+0x52>
      {
         if ( !t->guard )
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <getTransition+0x3c>
            return t;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	e013      	b.n	8005d02 <getTransition+0x64>
         /* If transition is guarded, ensure that the condition is held: */
         else if ( t->guard( t->condition, event ) )
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	4790      	blx	r2
 8005ce8:	1e03      	subs	r3, r0, #0
 8005cea:	d001      	beq.n	8005cf0 <getTransition+0x52>
            return t;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	e008      	b.n	8005d02 <getTransition+0x64>
   for ( i = 0; i < state->numTransitions; ++i )
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d3d7      	bcc.n	8005cb0 <getTransition+0x12>
      }
   }

   /* No transitions found for given event for given state: */
   return NULL;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	0018      	movs	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b006      	add	sp, #24
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <__errno>:
 8005d0c:	4b01      	ldr	r3, [pc, #4]	; (8005d14 <__errno+0x8>)
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	4770      	bx	lr
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	20000118 	.word	0x20000118

08005d18 <__libc_init_array>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	4d0c      	ldr	r5, [pc, #48]	; (8005d50 <__libc_init_array+0x38>)
 8005d1e:	4c0d      	ldr	r4, [pc, #52]	; (8005d54 <__libc_init_array+0x3c>)
 8005d20:	1b64      	subs	r4, r4, r5
 8005d22:	10a4      	asrs	r4, r4, #2
 8005d24:	42a6      	cmp	r6, r4
 8005d26:	d109      	bne.n	8005d3c <__libc_init_array+0x24>
 8005d28:	2600      	movs	r6, #0
 8005d2a:	f000 fd7f 	bl	800682c <_init>
 8005d2e:	4d0a      	ldr	r5, [pc, #40]	; (8005d58 <__libc_init_array+0x40>)
 8005d30:	4c0a      	ldr	r4, [pc, #40]	; (8005d5c <__libc_init_array+0x44>)
 8005d32:	1b64      	subs	r4, r4, r5
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	42a6      	cmp	r6, r4
 8005d38:	d105      	bne.n	8005d46 <__libc_init_array+0x2e>
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	00b3      	lsls	r3, r6, #2
 8005d3e:	58eb      	ldr	r3, [r5, r3]
 8005d40:	4798      	blx	r3
 8005d42:	3601      	adds	r6, #1
 8005d44:	e7ee      	b.n	8005d24 <__libc_init_array+0xc>
 8005d46:	00b3      	lsls	r3, r6, #2
 8005d48:	58eb      	ldr	r3, [r5, r3]
 8005d4a:	4798      	blx	r3
 8005d4c:	3601      	adds	r6, #1
 8005d4e:	e7f2      	b.n	8005d36 <__libc_init_array+0x1e>
 8005d50:	08006ac8 	.word	0x08006ac8
 8005d54:	08006ac8 	.word	0x08006ac8
 8005d58:	08006ac8 	.word	0x08006ac8
 8005d5c:	08006acc 	.word	0x08006acc

08005d60 <malloc>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <malloc+0x10>)
 8005d64:	0001      	movs	r1, r0
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	f000 f882 	bl	8005e70 <_malloc_r>
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	20000118 	.word	0x20000118

08005d74 <memcpy>:
 8005d74:	2300      	movs	r3, #0
 8005d76:	b510      	push	{r4, lr}
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d100      	bne.n	8005d7e <memcpy+0xa>
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	5ccc      	ldrb	r4, [r1, r3]
 8005d80:	54c4      	strb	r4, [r0, r3]
 8005d82:	3301      	adds	r3, #1
 8005d84:	e7f8      	b.n	8005d78 <memcpy+0x4>

08005d86 <memset>:
 8005d86:	0003      	movs	r3, r0
 8005d88:	1882      	adds	r2, r0, r2
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d100      	bne.n	8005d90 <memset+0xa>
 8005d8e:	4770      	bx	lr
 8005d90:	7019      	strb	r1, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	e7f9      	b.n	8005d8a <memset+0x4>
	...

08005d98 <_free_r>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	0005      	movs	r5, r0
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	d010      	beq.n	8005dc2 <_free_r+0x2a>
 8005da0:	1f0c      	subs	r4, r1, #4
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	da00      	bge.n	8005daa <_free_r+0x12>
 8005da8:	18e4      	adds	r4, r4, r3
 8005daa:	0028      	movs	r0, r5
 8005dac:	f000 fc70 	bl	8006690 <__malloc_lock>
 8005db0:	4a1d      	ldr	r2, [pc, #116]	; (8005e28 <_free_r+0x90>)
 8005db2:	6813      	ldr	r3, [r2, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <_free_r+0x2c>
 8005db8:	6063      	str	r3, [r4, #4]
 8005dba:	6014      	str	r4, [r2, #0]
 8005dbc:	0028      	movs	r0, r5
 8005dbe:	f000 fc6f 	bl	80066a0 <__malloc_unlock>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	d908      	bls.n	8005dda <_free_r+0x42>
 8005dc8:	6821      	ldr	r1, [r4, #0]
 8005dca:	1860      	adds	r0, r4, r1
 8005dcc:	4283      	cmp	r3, r0
 8005dce:	d1f3      	bne.n	8005db8 <_free_r+0x20>
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	1841      	adds	r1, r0, r1
 8005dd6:	6021      	str	r1, [r4, #0]
 8005dd8:	e7ee      	b.n	8005db8 <_free_r+0x20>
 8005dda:	001a      	movs	r2, r3
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <_free_r+0x4e>
 8005de2:	42a3      	cmp	r3, r4
 8005de4:	d9f9      	bls.n	8005dda <_free_r+0x42>
 8005de6:	6811      	ldr	r1, [r2, #0]
 8005de8:	1850      	adds	r0, r2, r1
 8005dea:	42a0      	cmp	r0, r4
 8005dec:	d10b      	bne.n	8005e06 <_free_r+0x6e>
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	1809      	adds	r1, r1, r0
 8005df2:	1850      	adds	r0, r2, r1
 8005df4:	6011      	str	r1, [r2, #0]
 8005df6:	4283      	cmp	r3, r0
 8005df8:	d1e0      	bne.n	8005dbc <_free_r+0x24>
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	1841      	adds	r1, r0, r1
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	6053      	str	r3, [r2, #4]
 8005e04:	e7da      	b.n	8005dbc <_free_r+0x24>
 8005e06:	42a0      	cmp	r0, r4
 8005e08:	d902      	bls.n	8005e10 <_free_r+0x78>
 8005e0a:	230c      	movs	r3, #12
 8005e0c:	602b      	str	r3, [r5, #0]
 8005e0e:	e7d5      	b.n	8005dbc <_free_r+0x24>
 8005e10:	6821      	ldr	r1, [r4, #0]
 8005e12:	1860      	adds	r0, r4, r1
 8005e14:	4283      	cmp	r3, r0
 8005e16:	d103      	bne.n	8005e20 <_free_r+0x88>
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	1841      	adds	r1, r0, r1
 8005e1e:	6021      	str	r1, [r4, #0]
 8005e20:	6063      	str	r3, [r4, #4]
 8005e22:	6054      	str	r4, [r2, #4]
 8005e24:	e7ca      	b.n	8005dbc <_free_r+0x24>
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	200007a4 	.word	0x200007a4

08005e2c <sbrk_aligned>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4e0f      	ldr	r6, [pc, #60]	; (8005e6c <sbrk_aligned+0x40>)
 8005e30:	000d      	movs	r5, r1
 8005e32:	6831      	ldr	r1, [r6, #0]
 8005e34:	0004      	movs	r4, r0
 8005e36:	2900      	cmp	r1, #0
 8005e38:	d102      	bne.n	8005e40 <sbrk_aligned+0x14>
 8005e3a:	f000 f90b 	bl	8006054 <_sbrk_r>
 8005e3e:	6030      	str	r0, [r6, #0]
 8005e40:	0029      	movs	r1, r5
 8005e42:	0020      	movs	r0, r4
 8005e44:	f000 f906 	bl	8006054 <_sbrk_r>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d00a      	beq.n	8005e62 <sbrk_aligned+0x36>
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	1cc5      	adds	r5, r0, #3
 8005e50:	439d      	bics	r5, r3
 8005e52:	42a8      	cmp	r0, r5
 8005e54:	d007      	beq.n	8005e66 <sbrk_aligned+0x3a>
 8005e56:	1a29      	subs	r1, r5, r0
 8005e58:	0020      	movs	r0, r4
 8005e5a:	f000 f8fb 	bl	8006054 <_sbrk_r>
 8005e5e:	1c43      	adds	r3, r0, #1
 8005e60:	d101      	bne.n	8005e66 <sbrk_aligned+0x3a>
 8005e62:	2501      	movs	r5, #1
 8005e64:	426d      	negs	r5, r5
 8005e66:	0028      	movs	r0, r5
 8005e68:	bd70      	pop	{r4, r5, r6, pc}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	200007a8 	.word	0x200007a8

08005e70 <_malloc_r>:
 8005e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e72:	2203      	movs	r2, #3
 8005e74:	1ccb      	adds	r3, r1, #3
 8005e76:	4393      	bics	r3, r2
 8005e78:	3308      	adds	r3, #8
 8005e7a:	0006      	movs	r6, r0
 8005e7c:	001f      	movs	r7, r3
 8005e7e:	2b0c      	cmp	r3, #12
 8005e80:	d232      	bcs.n	8005ee8 <_malloc_r+0x78>
 8005e82:	270c      	movs	r7, #12
 8005e84:	42b9      	cmp	r1, r7
 8005e86:	d831      	bhi.n	8005eec <_malloc_r+0x7c>
 8005e88:	0030      	movs	r0, r6
 8005e8a:	f000 fc01 	bl	8006690 <__malloc_lock>
 8005e8e:	4d32      	ldr	r5, [pc, #200]	; (8005f58 <_malloc_r+0xe8>)
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	001c      	movs	r4, r3
 8005e94:	2c00      	cmp	r4, #0
 8005e96:	d12e      	bne.n	8005ef6 <_malloc_r+0x86>
 8005e98:	0039      	movs	r1, r7
 8005e9a:	0030      	movs	r0, r6
 8005e9c:	f7ff ffc6 	bl	8005e2c <sbrk_aligned>
 8005ea0:	0004      	movs	r4, r0
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	d11e      	bne.n	8005ee4 <_malloc_r+0x74>
 8005ea6:	682c      	ldr	r4, [r5, #0]
 8005ea8:	0025      	movs	r5, r4
 8005eaa:	2d00      	cmp	r5, #0
 8005eac:	d14a      	bne.n	8005f44 <_malloc_r+0xd4>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	0029      	movs	r1, r5
 8005eb2:	18e3      	adds	r3, r4, r3
 8005eb4:	0030      	movs	r0, r6
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	f000 f8cc 	bl	8006054 <_sbrk_r>
 8005ebc:	9b01      	ldr	r3, [sp, #4]
 8005ebe:	4283      	cmp	r3, r0
 8005ec0:	d143      	bne.n	8005f4a <_malloc_r+0xda>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	3703      	adds	r7, #3
 8005ec6:	1aff      	subs	r7, r7, r3
 8005ec8:	2303      	movs	r3, #3
 8005eca:	439f      	bics	r7, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	2f0c      	cmp	r7, #12
 8005ed0:	d200      	bcs.n	8005ed4 <_malloc_r+0x64>
 8005ed2:	270c      	movs	r7, #12
 8005ed4:	0039      	movs	r1, r7
 8005ed6:	0030      	movs	r0, r6
 8005ed8:	f7ff ffa8 	bl	8005e2c <sbrk_aligned>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d034      	beq.n	8005f4a <_malloc_r+0xda>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	19df      	adds	r7, r3, r7
 8005ee4:	6027      	str	r7, [r4, #0]
 8005ee6:	e013      	b.n	8005f10 <_malloc_r+0xa0>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	dacb      	bge.n	8005e84 <_malloc_r+0x14>
 8005eec:	230c      	movs	r3, #12
 8005eee:	2500      	movs	r5, #0
 8005ef0:	6033      	str	r3, [r6, #0]
 8005ef2:	0028      	movs	r0, r5
 8005ef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	1bd1      	subs	r1, r2, r7
 8005efa:	d420      	bmi.n	8005f3e <_malloc_r+0xce>
 8005efc:	290b      	cmp	r1, #11
 8005efe:	d917      	bls.n	8005f30 <_malloc_r+0xc0>
 8005f00:	19e2      	adds	r2, r4, r7
 8005f02:	6027      	str	r7, [r4, #0]
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d111      	bne.n	8005f2c <_malloc_r+0xbc>
 8005f08:	602a      	str	r2, [r5, #0]
 8005f0a:	6863      	ldr	r3, [r4, #4]
 8005f0c:	6011      	str	r1, [r2, #0]
 8005f0e:	6053      	str	r3, [r2, #4]
 8005f10:	0030      	movs	r0, r6
 8005f12:	0025      	movs	r5, r4
 8005f14:	f000 fbc4 	bl	80066a0 <__malloc_unlock>
 8005f18:	2207      	movs	r2, #7
 8005f1a:	350b      	adds	r5, #11
 8005f1c:	1d23      	adds	r3, r4, #4
 8005f1e:	4395      	bics	r5, r2
 8005f20:	1aea      	subs	r2, r5, r3
 8005f22:	429d      	cmp	r5, r3
 8005f24:	d0e5      	beq.n	8005ef2 <_malloc_r+0x82>
 8005f26:	1b5b      	subs	r3, r3, r5
 8005f28:	50a3      	str	r3, [r4, r2]
 8005f2a:	e7e2      	b.n	8005ef2 <_malloc_r+0x82>
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	e7ec      	b.n	8005f0a <_malloc_r+0x9a>
 8005f30:	6862      	ldr	r2, [r4, #4]
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	d101      	bne.n	8005f3a <_malloc_r+0xca>
 8005f36:	602a      	str	r2, [r5, #0]
 8005f38:	e7ea      	b.n	8005f10 <_malloc_r+0xa0>
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	e7e8      	b.n	8005f10 <_malloc_r+0xa0>
 8005f3e:	0023      	movs	r3, r4
 8005f40:	6864      	ldr	r4, [r4, #4]
 8005f42:	e7a7      	b.n	8005e94 <_malloc_r+0x24>
 8005f44:	002c      	movs	r4, r5
 8005f46:	686d      	ldr	r5, [r5, #4]
 8005f48:	e7af      	b.n	8005eaa <_malloc_r+0x3a>
 8005f4a:	230c      	movs	r3, #12
 8005f4c:	0030      	movs	r0, r6
 8005f4e:	6033      	str	r3, [r6, #0]
 8005f50:	f000 fba6 	bl	80066a0 <__malloc_unlock>
 8005f54:	e7cd      	b.n	8005ef2 <_malloc_r+0x82>
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	200007a4 	.word	0x200007a4

08005f5c <_puts_r>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	0005      	movs	r5, r0
 8005f60:	000e      	movs	r6, r1
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d004      	beq.n	8005f70 <_puts_r+0x14>
 8005f66:	6983      	ldr	r3, [r0, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <_puts_r+0x14>
 8005f6c:	f000 fa80 	bl	8006470 <__sinit>
 8005f70:	69ab      	ldr	r3, [r5, #24]
 8005f72:	68ac      	ldr	r4, [r5, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <_puts_r+0x22>
 8005f78:	0028      	movs	r0, r5
 8005f7a:	f000 fa79 	bl	8006470 <__sinit>
 8005f7e:	4b2d      	ldr	r3, [pc, #180]	; (8006034 <_puts_r+0xd8>)
 8005f80:	429c      	cmp	r4, r3
 8005f82:	d122      	bne.n	8005fca <_puts_r+0x6e>
 8005f84:	686c      	ldr	r4, [r5, #4]
 8005f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f88:	07db      	lsls	r3, r3, #31
 8005f8a:	d405      	bmi.n	8005f98 <_puts_r+0x3c>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	059b      	lsls	r3, r3, #22
 8005f90:	d402      	bmi.n	8005f98 <_puts_r+0x3c>
 8005f92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f94:	f000 fb0d 	bl	80065b2 <__retarget_lock_acquire_recursive>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	071b      	lsls	r3, r3, #28
 8005f9c:	d502      	bpl.n	8005fa4 <_puts_r+0x48>
 8005f9e:	6923      	ldr	r3, [r4, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d129      	bne.n	8005ff8 <_puts_r+0x9c>
 8005fa4:	0021      	movs	r1, r4
 8005fa6:	0028      	movs	r0, r5
 8005fa8:	f000 f8bc 	bl	8006124 <__swsetup_r>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d023      	beq.n	8005ff8 <_puts_r+0x9c>
 8005fb0:	2501      	movs	r5, #1
 8005fb2:	426d      	negs	r5, r5
 8005fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fb6:	07db      	lsls	r3, r3, #31
 8005fb8:	d405      	bmi.n	8005fc6 <_puts_r+0x6a>
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	059b      	lsls	r3, r3, #22
 8005fbe:	d402      	bmi.n	8005fc6 <_puts_r+0x6a>
 8005fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fc2:	f000 faf7 	bl	80065b4 <__retarget_lock_release_recursive>
 8005fc6:	0028      	movs	r0, r5
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <_puts_r+0xdc>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d101      	bne.n	8005fd4 <_puts_r+0x78>
 8005fd0:	68ac      	ldr	r4, [r5, #8]
 8005fd2:	e7d8      	b.n	8005f86 <_puts_r+0x2a>
 8005fd4:	4b19      	ldr	r3, [pc, #100]	; (800603c <_puts_r+0xe0>)
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	d1d5      	bne.n	8005f86 <_puts_r+0x2a>
 8005fda:	68ec      	ldr	r4, [r5, #12]
 8005fdc:	e7d3      	b.n	8005f86 <_puts_r+0x2a>
 8005fde:	3601      	adds	r6, #1
 8005fe0:	60a3      	str	r3, [r4, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	da04      	bge.n	8005ff0 <_puts_r+0x94>
 8005fe6:	69a2      	ldr	r2, [r4, #24]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	dc16      	bgt.n	800601a <_puts_r+0xbe>
 8005fec:	290a      	cmp	r1, #10
 8005fee:	d014      	beq.n	800601a <_puts_r+0xbe>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	6022      	str	r2, [r4, #0]
 8005ff6:	7019      	strb	r1, [r3, #0]
 8005ff8:	68a3      	ldr	r3, [r4, #8]
 8005ffa:	7831      	ldrb	r1, [r6, #0]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	2900      	cmp	r1, #0
 8006000:	d1ed      	bne.n	8005fde <_puts_r+0x82>
 8006002:	60a3      	str	r3, [r4, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	da0f      	bge.n	8006028 <_puts_r+0xcc>
 8006008:	0028      	movs	r0, r5
 800600a:	0022      	movs	r2, r4
 800600c:	310a      	adds	r1, #10
 800600e:	f000 f833 	bl	8006078 <__swbuf_r>
 8006012:	250a      	movs	r5, #10
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d1cd      	bne.n	8005fb4 <_puts_r+0x58>
 8006018:	e7ca      	b.n	8005fb0 <_puts_r+0x54>
 800601a:	0022      	movs	r2, r4
 800601c:	0028      	movs	r0, r5
 800601e:	f000 f82b 	bl	8006078 <__swbuf_r>
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	d1e8      	bne.n	8005ff8 <_puts_r+0x9c>
 8006026:	e7c3      	b.n	8005fb0 <_puts_r+0x54>
 8006028:	250a      	movs	r5, #10
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	6022      	str	r2, [r4, #0]
 8006030:	701d      	strb	r5, [r3, #0]
 8006032:	e7bf      	b.n	8005fb4 <_puts_r+0x58>
 8006034:	08006a88 	.word	0x08006a88
 8006038:	08006aa8 	.word	0x08006aa8
 800603c:	08006a68 	.word	0x08006a68

08006040 <puts>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4b03      	ldr	r3, [pc, #12]	; (8006050 <puts+0x10>)
 8006044:	0001      	movs	r1, r0
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	f7ff ff88 	bl	8005f5c <_puts_r>
 800604c:	bd10      	pop	{r4, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	20000118 	.word	0x20000118

08006054 <_sbrk_r>:
 8006054:	2300      	movs	r3, #0
 8006056:	b570      	push	{r4, r5, r6, lr}
 8006058:	4d06      	ldr	r5, [pc, #24]	; (8006074 <_sbrk_r+0x20>)
 800605a:	0004      	movs	r4, r0
 800605c:	0008      	movs	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fc fc50 	bl	8002904 <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d103      	bne.n	8006070 <_sbrk_r+0x1c>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d000      	beq.n	8006070 <_sbrk_r+0x1c>
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	bd70      	pop	{r4, r5, r6, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	200007b0 	.word	0x200007b0

08006078 <__swbuf_r>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	0005      	movs	r5, r0
 800607c:	000e      	movs	r6, r1
 800607e:	0014      	movs	r4, r2
 8006080:	2800      	cmp	r0, #0
 8006082:	d004      	beq.n	800608e <__swbuf_r+0x16>
 8006084:	6983      	ldr	r3, [r0, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <__swbuf_r+0x16>
 800608a:	f000 f9f1 	bl	8006470 <__sinit>
 800608e:	4b22      	ldr	r3, [pc, #136]	; (8006118 <__swbuf_r+0xa0>)
 8006090:	429c      	cmp	r4, r3
 8006092:	d12e      	bne.n	80060f2 <__swbuf_r+0x7a>
 8006094:	686c      	ldr	r4, [r5, #4]
 8006096:	69a3      	ldr	r3, [r4, #24]
 8006098:	60a3      	str	r3, [r4, #8]
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	071b      	lsls	r3, r3, #28
 800609e:	d532      	bpl.n	8006106 <__swbuf_r+0x8e>
 80060a0:	6923      	ldr	r3, [r4, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d02f      	beq.n	8006106 <__swbuf_r+0x8e>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	6922      	ldr	r2, [r4, #16]
 80060aa:	b2f7      	uxtb	r7, r6
 80060ac:	1a98      	subs	r0, r3, r2
 80060ae:	6963      	ldr	r3, [r4, #20]
 80060b0:	b2f6      	uxtb	r6, r6
 80060b2:	4283      	cmp	r3, r0
 80060b4:	dc05      	bgt.n	80060c2 <__swbuf_r+0x4a>
 80060b6:	0021      	movs	r1, r4
 80060b8:	0028      	movs	r0, r5
 80060ba:	f000 f937 	bl	800632c <_fflush_r>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d127      	bne.n	8006112 <__swbuf_r+0x9a>
 80060c2:	68a3      	ldr	r3, [r4, #8]
 80060c4:	3001      	adds	r0, #1
 80060c6:	3b01      	subs	r3, #1
 80060c8:	60a3      	str	r3, [r4, #8]
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	6022      	str	r2, [r4, #0]
 80060d0:	701f      	strb	r7, [r3, #0]
 80060d2:	6963      	ldr	r3, [r4, #20]
 80060d4:	4283      	cmp	r3, r0
 80060d6:	d004      	beq.n	80060e2 <__swbuf_r+0x6a>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	07db      	lsls	r3, r3, #31
 80060dc:	d507      	bpl.n	80060ee <__swbuf_r+0x76>
 80060de:	2e0a      	cmp	r6, #10
 80060e0:	d105      	bne.n	80060ee <__swbuf_r+0x76>
 80060e2:	0021      	movs	r1, r4
 80060e4:	0028      	movs	r0, r5
 80060e6:	f000 f921 	bl	800632c <_fflush_r>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d111      	bne.n	8006112 <__swbuf_r+0x9a>
 80060ee:	0030      	movs	r0, r6
 80060f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <__swbuf_r+0xa4>)
 80060f4:	429c      	cmp	r4, r3
 80060f6:	d101      	bne.n	80060fc <__swbuf_r+0x84>
 80060f8:	68ac      	ldr	r4, [r5, #8]
 80060fa:	e7cc      	b.n	8006096 <__swbuf_r+0x1e>
 80060fc:	4b08      	ldr	r3, [pc, #32]	; (8006120 <__swbuf_r+0xa8>)
 80060fe:	429c      	cmp	r4, r3
 8006100:	d1c9      	bne.n	8006096 <__swbuf_r+0x1e>
 8006102:	68ec      	ldr	r4, [r5, #12]
 8006104:	e7c7      	b.n	8006096 <__swbuf_r+0x1e>
 8006106:	0021      	movs	r1, r4
 8006108:	0028      	movs	r0, r5
 800610a:	f000 f80b 	bl	8006124 <__swsetup_r>
 800610e:	2800      	cmp	r0, #0
 8006110:	d0c9      	beq.n	80060a6 <__swbuf_r+0x2e>
 8006112:	2601      	movs	r6, #1
 8006114:	4276      	negs	r6, r6
 8006116:	e7ea      	b.n	80060ee <__swbuf_r+0x76>
 8006118:	08006a88 	.word	0x08006a88
 800611c:	08006aa8 	.word	0x08006aa8
 8006120:	08006a68 	.word	0x08006a68

08006124 <__swsetup_r>:
 8006124:	4b37      	ldr	r3, [pc, #220]	; (8006204 <__swsetup_r+0xe0>)
 8006126:	b570      	push	{r4, r5, r6, lr}
 8006128:	681d      	ldr	r5, [r3, #0]
 800612a:	0006      	movs	r6, r0
 800612c:	000c      	movs	r4, r1
 800612e:	2d00      	cmp	r5, #0
 8006130:	d005      	beq.n	800613e <__swsetup_r+0x1a>
 8006132:	69ab      	ldr	r3, [r5, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <__swsetup_r+0x1a>
 8006138:	0028      	movs	r0, r5
 800613a:	f000 f999 	bl	8006470 <__sinit>
 800613e:	4b32      	ldr	r3, [pc, #200]	; (8006208 <__swsetup_r+0xe4>)
 8006140:	429c      	cmp	r4, r3
 8006142:	d10f      	bne.n	8006164 <__swsetup_r+0x40>
 8006144:	686c      	ldr	r4, [r5, #4]
 8006146:	230c      	movs	r3, #12
 8006148:	5ee2      	ldrsh	r2, [r4, r3]
 800614a:	b293      	uxth	r3, r2
 800614c:	0711      	lsls	r1, r2, #28
 800614e:	d42d      	bmi.n	80061ac <__swsetup_r+0x88>
 8006150:	06d9      	lsls	r1, r3, #27
 8006152:	d411      	bmi.n	8006178 <__swsetup_r+0x54>
 8006154:	2309      	movs	r3, #9
 8006156:	2001      	movs	r0, #1
 8006158:	6033      	str	r3, [r6, #0]
 800615a:	3337      	adds	r3, #55	; 0x37
 800615c:	4313      	orrs	r3, r2
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	4240      	negs	r0, r0
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	4b29      	ldr	r3, [pc, #164]	; (800620c <__swsetup_r+0xe8>)
 8006166:	429c      	cmp	r4, r3
 8006168:	d101      	bne.n	800616e <__swsetup_r+0x4a>
 800616a:	68ac      	ldr	r4, [r5, #8]
 800616c:	e7eb      	b.n	8006146 <__swsetup_r+0x22>
 800616e:	4b28      	ldr	r3, [pc, #160]	; (8006210 <__swsetup_r+0xec>)
 8006170:	429c      	cmp	r4, r3
 8006172:	d1e8      	bne.n	8006146 <__swsetup_r+0x22>
 8006174:	68ec      	ldr	r4, [r5, #12]
 8006176:	e7e6      	b.n	8006146 <__swsetup_r+0x22>
 8006178:	075b      	lsls	r3, r3, #29
 800617a:	d513      	bpl.n	80061a4 <__swsetup_r+0x80>
 800617c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800617e:	2900      	cmp	r1, #0
 8006180:	d008      	beq.n	8006194 <__swsetup_r+0x70>
 8006182:	0023      	movs	r3, r4
 8006184:	3344      	adds	r3, #68	; 0x44
 8006186:	4299      	cmp	r1, r3
 8006188:	d002      	beq.n	8006190 <__swsetup_r+0x6c>
 800618a:	0030      	movs	r0, r6
 800618c:	f7ff fe04 	bl	8005d98 <_free_r>
 8006190:	2300      	movs	r3, #0
 8006192:	6363      	str	r3, [r4, #52]	; 0x34
 8006194:	2224      	movs	r2, #36	; 0x24
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	4393      	bics	r3, r2
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	2300      	movs	r3, #0
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	2308      	movs	r3, #8
 80061a6:	89a2      	ldrh	r2, [r4, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <__swsetup_r+0xa6>
 80061b2:	21a0      	movs	r1, #160	; 0xa0
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	0089      	lsls	r1, r1, #2
 80061ba:	0092      	lsls	r2, r2, #2
 80061bc:	400b      	ands	r3, r1
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <__swsetup_r+0xa6>
 80061c2:	0021      	movs	r1, r4
 80061c4:	0030      	movs	r0, r6
 80061c6:	f000 fa1f 	bl	8006608 <__smakebuf_r>
 80061ca:	220c      	movs	r2, #12
 80061cc:	5ea3      	ldrsh	r3, [r4, r2]
 80061ce:	2001      	movs	r0, #1
 80061d0:	001a      	movs	r2, r3
 80061d2:	b299      	uxth	r1, r3
 80061d4:	4002      	ands	r2, r0
 80061d6:	4203      	tst	r3, r0
 80061d8:	d00f      	beq.n	80061fa <__swsetup_r+0xd6>
 80061da:	2200      	movs	r2, #0
 80061dc:	60a2      	str	r2, [r4, #8]
 80061de:	6962      	ldr	r2, [r4, #20]
 80061e0:	4252      	negs	r2, r2
 80061e2:	61a2      	str	r2, [r4, #24]
 80061e4:	2000      	movs	r0, #0
 80061e6:	6922      	ldr	r2, [r4, #16]
 80061e8:	4282      	cmp	r2, r0
 80061ea:	d1ba      	bne.n	8006162 <__swsetup_r+0x3e>
 80061ec:	060a      	lsls	r2, r1, #24
 80061ee:	d5b8      	bpl.n	8006162 <__swsetup_r+0x3e>
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	4313      	orrs	r3, r2
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	3801      	subs	r0, #1
 80061f8:	e7b3      	b.n	8006162 <__swsetup_r+0x3e>
 80061fa:	0788      	lsls	r0, r1, #30
 80061fc:	d400      	bmi.n	8006200 <__swsetup_r+0xdc>
 80061fe:	6962      	ldr	r2, [r4, #20]
 8006200:	60a2      	str	r2, [r4, #8]
 8006202:	e7ef      	b.n	80061e4 <__swsetup_r+0xc0>
 8006204:	20000118 	.word	0x20000118
 8006208:	08006a88 	.word	0x08006a88
 800620c:	08006aa8 	.word	0x08006aa8
 8006210:	08006a68 	.word	0x08006a68

08006214 <__sflush_r>:
 8006214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006216:	898b      	ldrh	r3, [r1, #12]
 8006218:	0005      	movs	r5, r0
 800621a:	000c      	movs	r4, r1
 800621c:	071a      	lsls	r2, r3, #28
 800621e:	d45f      	bmi.n	80062e0 <__sflush_r+0xcc>
 8006220:	684a      	ldr	r2, [r1, #4]
 8006222:	2a00      	cmp	r2, #0
 8006224:	dc04      	bgt.n	8006230 <__sflush_r+0x1c>
 8006226:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006228:	2a00      	cmp	r2, #0
 800622a:	dc01      	bgt.n	8006230 <__sflush_r+0x1c>
 800622c:	2000      	movs	r0, #0
 800622e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006230:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006232:	2f00      	cmp	r7, #0
 8006234:	d0fa      	beq.n	800622c <__sflush_r+0x18>
 8006236:	2200      	movs	r2, #0
 8006238:	2180      	movs	r1, #128	; 0x80
 800623a:	682e      	ldr	r6, [r5, #0]
 800623c:	602a      	str	r2, [r5, #0]
 800623e:	001a      	movs	r2, r3
 8006240:	0149      	lsls	r1, r1, #5
 8006242:	400a      	ands	r2, r1
 8006244:	420b      	tst	r3, r1
 8006246:	d034      	beq.n	80062b2 <__sflush_r+0x9e>
 8006248:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	075b      	lsls	r3, r3, #29
 800624e:	d506      	bpl.n	800625e <__sflush_r+0x4a>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	1ac0      	subs	r0, r0, r3
 8006254:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <__sflush_r+0x4a>
 800625a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800625c:	1ac0      	subs	r0, r0, r3
 800625e:	0002      	movs	r2, r0
 8006260:	6a21      	ldr	r1, [r4, #32]
 8006262:	2300      	movs	r3, #0
 8006264:	0028      	movs	r0, r5
 8006266:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006268:	47b8      	blx	r7
 800626a:	89a1      	ldrh	r1, [r4, #12]
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d106      	bne.n	800627e <__sflush_r+0x6a>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	2b1d      	cmp	r3, #29
 8006274:	d831      	bhi.n	80062da <__sflush_r+0xc6>
 8006276:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <__sflush_r+0x114>)
 8006278:	40da      	lsrs	r2, r3
 800627a:	07d3      	lsls	r3, r2, #31
 800627c:	d52d      	bpl.n	80062da <__sflush_r+0xc6>
 800627e:	2300      	movs	r3, #0
 8006280:	6063      	str	r3, [r4, #4]
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	04cb      	lsls	r3, r1, #19
 8006288:	d505      	bpl.n	8006296 <__sflush_r+0x82>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	d102      	bne.n	8006294 <__sflush_r+0x80>
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d100      	bne.n	8006296 <__sflush_r+0x82>
 8006294:	6560      	str	r0, [r4, #84]	; 0x54
 8006296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006298:	602e      	str	r6, [r5, #0]
 800629a:	2900      	cmp	r1, #0
 800629c:	d0c6      	beq.n	800622c <__sflush_r+0x18>
 800629e:	0023      	movs	r3, r4
 80062a0:	3344      	adds	r3, #68	; 0x44
 80062a2:	4299      	cmp	r1, r3
 80062a4:	d002      	beq.n	80062ac <__sflush_r+0x98>
 80062a6:	0028      	movs	r0, r5
 80062a8:	f7ff fd76 	bl	8005d98 <_free_r>
 80062ac:	2000      	movs	r0, #0
 80062ae:	6360      	str	r0, [r4, #52]	; 0x34
 80062b0:	e7bd      	b.n	800622e <__sflush_r+0x1a>
 80062b2:	2301      	movs	r3, #1
 80062b4:	0028      	movs	r0, r5
 80062b6:	6a21      	ldr	r1, [r4, #32]
 80062b8:	47b8      	blx	r7
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	d1c5      	bne.n	800624a <__sflush_r+0x36>
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0c2      	beq.n	800624a <__sflush_r+0x36>
 80062c4:	2b1d      	cmp	r3, #29
 80062c6:	d001      	beq.n	80062cc <__sflush_r+0xb8>
 80062c8:	2b16      	cmp	r3, #22
 80062ca:	d101      	bne.n	80062d0 <__sflush_r+0xbc>
 80062cc:	602e      	str	r6, [r5, #0]
 80062ce:	e7ad      	b.n	800622c <__sflush_r+0x18>
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	89a2      	ldrh	r2, [r4, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	e7a9      	b.n	800622e <__sflush_r+0x1a>
 80062da:	2340      	movs	r3, #64	; 0x40
 80062dc:	430b      	orrs	r3, r1
 80062de:	e7fa      	b.n	80062d6 <__sflush_r+0xc2>
 80062e0:	690f      	ldr	r7, [r1, #16]
 80062e2:	2f00      	cmp	r7, #0
 80062e4:	d0a2      	beq.n	800622c <__sflush_r+0x18>
 80062e6:	680a      	ldr	r2, [r1, #0]
 80062e8:	600f      	str	r7, [r1, #0]
 80062ea:	1bd2      	subs	r2, r2, r7
 80062ec:	9201      	str	r2, [sp, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	079b      	lsls	r3, r3, #30
 80062f2:	d100      	bne.n	80062f6 <__sflush_r+0xe2>
 80062f4:	694a      	ldr	r2, [r1, #20]
 80062f6:	60a2      	str	r2, [r4, #8]
 80062f8:	9b01      	ldr	r3, [sp, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dc00      	bgt.n	8006300 <__sflush_r+0xec>
 80062fe:	e795      	b.n	800622c <__sflush_r+0x18>
 8006300:	003a      	movs	r2, r7
 8006302:	0028      	movs	r0, r5
 8006304:	9b01      	ldr	r3, [sp, #4]
 8006306:	6a21      	ldr	r1, [r4, #32]
 8006308:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800630a:	47b0      	blx	r6
 800630c:	2800      	cmp	r0, #0
 800630e:	dc06      	bgt.n	800631e <__sflush_r+0x10a>
 8006310:	2340      	movs	r3, #64	; 0x40
 8006312:	2001      	movs	r0, #1
 8006314:	89a2      	ldrh	r2, [r4, #12]
 8006316:	4240      	negs	r0, r0
 8006318:	4313      	orrs	r3, r2
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	e787      	b.n	800622e <__sflush_r+0x1a>
 800631e:	9b01      	ldr	r3, [sp, #4]
 8006320:	183f      	adds	r7, r7, r0
 8006322:	1a1b      	subs	r3, r3, r0
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	e7e7      	b.n	80062f8 <__sflush_r+0xe4>
 8006328:	20400001 	.word	0x20400001

0800632c <_fflush_r>:
 800632c:	690b      	ldr	r3, [r1, #16]
 800632e:	b570      	push	{r4, r5, r6, lr}
 8006330:	0005      	movs	r5, r0
 8006332:	000c      	movs	r4, r1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <_fflush_r+0x12>
 8006338:	2500      	movs	r5, #0
 800633a:	0028      	movs	r0, r5
 800633c:	bd70      	pop	{r4, r5, r6, pc}
 800633e:	2800      	cmp	r0, #0
 8006340:	d004      	beq.n	800634c <_fflush_r+0x20>
 8006342:	6983      	ldr	r3, [r0, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <_fflush_r+0x20>
 8006348:	f000 f892 	bl	8006470 <__sinit>
 800634c:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <_fflush_r+0x74>)
 800634e:	429c      	cmp	r4, r3
 8006350:	d11b      	bne.n	800638a <_fflush_r+0x5e>
 8006352:	686c      	ldr	r4, [r5, #4]
 8006354:	220c      	movs	r2, #12
 8006356:	5ea3      	ldrsh	r3, [r4, r2]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0ed      	beq.n	8006338 <_fflush_r+0xc>
 800635c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800635e:	07d2      	lsls	r2, r2, #31
 8006360:	d404      	bmi.n	800636c <_fflush_r+0x40>
 8006362:	059b      	lsls	r3, r3, #22
 8006364:	d402      	bmi.n	800636c <_fflush_r+0x40>
 8006366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006368:	f000 f923 	bl	80065b2 <__retarget_lock_acquire_recursive>
 800636c:	0028      	movs	r0, r5
 800636e:	0021      	movs	r1, r4
 8006370:	f7ff ff50 	bl	8006214 <__sflush_r>
 8006374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006376:	0005      	movs	r5, r0
 8006378:	07db      	lsls	r3, r3, #31
 800637a:	d4de      	bmi.n	800633a <_fflush_r+0xe>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	059b      	lsls	r3, r3, #22
 8006380:	d4db      	bmi.n	800633a <_fflush_r+0xe>
 8006382:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006384:	f000 f916 	bl	80065b4 <__retarget_lock_release_recursive>
 8006388:	e7d7      	b.n	800633a <_fflush_r+0xe>
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <_fflush_r+0x78>)
 800638c:	429c      	cmp	r4, r3
 800638e:	d101      	bne.n	8006394 <_fflush_r+0x68>
 8006390:	68ac      	ldr	r4, [r5, #8]
 8006392:	e7df      	b.n	8006354 <_fflush_r+0x28>
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <_fflush_r+0x7c>)
 8006396:	429c      	cmp	r4, r3
 8006398:	d1dc      	bne.n	8006354 <_fflush_r+0x28>
 800639a:	68ec      	ldr	r4, [r5, #12]
 800639c:	e7da      	b.n	8006354 <_fflush_r+0x28>
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	08006a88 	.word	0x08006a88
 80063a4:	08006aa8 	.word	0x08006aa8
 80063a8:	08006a68 	.word	0x08006a68

080063ac <std>:
 80063ac:	2300      	movs	r3, #0
 80063ae:	b510      	push	{r4, lr}
 80063b0:	0004      	movs	r4, r0
 80063b2:	6003      	str	r3, [r0, #0]
 80063b4:	6043      	str	r3, [r0, #4]
 80063b6:	6083      	str	r3, [r0, #8]
 80063b8:	8181      	strh	r1, [r0, #12]
 80063ba:	6643      	str	r3, [r0, #100]	; 0x64
 80063bc:	0019      	movs	r1, r3
 80063be:	81c2      	strh	r2, [r0, #14]
 80063c0:	6103      	str	r3, [r0, #16]
 80063c2:	6143      	str	r3, [r0, #20]
 80063c4:	6183      	str	r3, [r0, #24]
 80063c6:	2208      	movs	r2, #8
 80063c8:	305c      	adds	r0, #92	; 0x5c
 80063ca:	f7ff fcdc 	bl	8005d86 <memset>
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <std+0x38>)
 80063d0:	6224      	str	r4, [r4, #32]
 80063d2:	6263      	str	r3, [r4, #36]	; 0x24
 80063d4:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <std+0x3c>)
 80063d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80063d8:	4b04      	ldr	r3, [pc, #16]	; (80063ec <std+0x40>)
 80063da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <std+0x44>)
 80063de:	6323      	str	r3, [r4, #48]	; 0x30
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	080066b1 	.word	0x080066b1
 80063e8:	080066d9 	.word	0x080066d9
 80063ec:	08006711 	.word	0x08006711
 80063f0:	0800673d 	.word	0x0800673d

080063f4 <_cleanup_r>:
 80063f4:	b510      	push	{r4, lr}
 80063f6:	4902      	ldr	r1, [pc, #8]	; (8006400 <_cleanup_r+0xc>)
 80063f8:	f000 f8ba 	bl	8006570 <_fwalk_reent>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	0800632d 	.word	0x0800632d

08006404 <__sfmoreglue>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	2568      	movs	r5, #104	; 0x68
 8006408:	1e4a      	subs	r2, r1, #1
 800640a:	4355      	muls	r5, r2
 800640c:	000e      	movs	r6, r1
 800640e:	0029      	movs	r1, r5
 8006410:	3174      	adds	r1, #116	; 0x74
 8006412:	f7ff fd2d 	bl	8005e70 <_malloc_r>
 8006416:	1e04      	subs	r4, r0, #0
 8006418:	d008      	beq.n	800642c <__sfmoreglue+0x28>
 800641a:	2100      	movs	r1, #0
 800641c:	002a      	movs	r2, r5
 800641e:	6001      	str	r1, [r0, #0]
 8006420:	6046      	str	r6, [r0, #4]
 8006422:	300c      	adds	r0, #12
 8006424:	60a0      	str	r0, [r4, #8]
 8006426:	3268      	adds	r2, #104	; 0x68
 8006428:	f7ff fcad 	bl	8005d86 <memset>
 800642c:	0020      	movs	r0, r4
 800642e:	bd70      	pop	{r4, r5, r6, pc}

08006430 <__sfp_lock_acquire>:
 8006430:	b510      	push	{r4, lr}
 8006432:	4802      	ldr	r0, [pc, #8]	; (800643c <__sfp_lock_acquire+0xc>)
 8006434:	f000 f8bd 	bl	80065b2 <__retarget_lock_acquire_recursive>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	200007ad 	.word	0x200007ad

08006440 <__sfp_lock_release>:
 8006440:	b510      	push	{r4, lr}
 8006442:	4802      	ldr	r0, [pc, #8]	; (800644c <__sfp_lock_release+0xc>)
 8006444:	f000 f8b6 	bl	80065b4 <__retarget_lock_release_recursive>
 8006448:	bd10      	pop	{r4, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	200007ad 	.word	0x200007ad

08006450 <__sinit_lock_acquire>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4802      	ldr	r0, [pc, #8]	; (800645c <__sinit_lock_acquire+0xc>)
 8006454:	f000 f8ad 	bl	80065b2 <__retarget_lock_acquire_recursive>
 8006458:	bd10      	pop	{r4, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	200007ae 	.word	0x200007ae

08006460 <__sinit_lock_release>:
 8006460:	b510      	push	{r4, lr}
 8006462:	4802      	ldr	r0, [pc, #8]	; (800646c <__sinit_lock_release+0xc>)
 8006464:	f000 f8a6 	bl	80065b4 <__retarget_lock_release_recursive>
 8006468:	bd10      	pop	{r4, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	200007ae 	.word	0x200007ae

08006470 <__sinit>:
 8006470:	b513      	push	{r0, r1, r4, lr}
 8006472:	0004      	movs	r4, r0
 8006474:	f7ff ffec 	bl	8006450 <__sinit_lock_acquire>
 8006478:	69a3      	ldr	r3, [r4, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <__sinit+0x14>
 800647e:	f7ff ffef 	bl	8006460 <__sinit_lock_release>
 8006482:	bd13      	pop	{r0, r1, r4, pc}
 8006484:	64a3      	str	r3, [r4, #72]	; 0x48
 8006486:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006488:	6523      	str	r3, [r4, #80]	; 0x50
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <__sinit+0x68>)
 800648c:	4a13      	ldr	r2, [pc, #76]	; (80064dc <__sinit+0x6c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	62a2      	str	r2, [r4, #40]	; 0x28
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	42a3      	cmp	r3, r4
 8006496:	d101      	bne.n	800649c <__sinit+0x2c>
 8006498:	2301      	movs	r3, #1
 800649a:	61a3      	str	r3, [r4, #24]
 800649c:	0020      	movs	r0, r4
 800649e:	f000 f81f 	bl	80064e0 <__sfp>
 80064a2:	6060      	str	r0, [r4, #4]
 80064a4:	0020      	movs	r0, r4
 80064a6:	f000 f81b 	bl	80064e0 <__sfp>
 80064aa:	60a0      	str	r0, [r4, #8]
 80064ac:	0020      	movs	r0, r4
 80064ae:	f000 f817 	bl	80064e0 <__sfp>
 80064b2:	2200      	movs	r2, #0
 80064b4:	2104      	movs	r1, #4
 80064b6:	60e0      	str	r0, [r4, #12]
 80064b8:	6860      	ldr	r0, [r4, #4]
 80064ba:	f7ff ff77 	bl	80063ac <std>
 80064be:	2201      	movs	r2, #1
 80064c0:	2109      	movs	r1, #9
 80064c2:	68a0      	ldr	r0, [r4, #8]
 80064c4:	f7ff ff72 	bl	80063ac <std>
 80064c8:	2202      	movs	r2, #2
 80064ca:	2112      	movs	r1, #18
 80064cc:	68e0      	ldr	r0, [r4, #12]
 80064ce:	f7ff ff6d 	bl	80063ac <std>
 80064d2:	2301      	movs	r3, #1
 80064d4:	61a3      	str	r3, [r4, #24]
 80064d6:	e7d2      	b.n	800647e <__sinit+0xe>
 80064d8:	08006a64 	.word	0x08006a64
 80064dc:	080063f5 	.word	0x080063f5

080064e0 <__sfp>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	0007      	movs	r7, r0
 80064e4:	f7ff ffa4 	bl	8006430 <__sfp_lock_acquire>
 80064e8:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <__sfp+0x88>)
 80064ea:	681e      	ldr	r6, [r3, #0]
 80064ec:	69b3      	ldr	r3, [r6, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <__sfp+0x18>
 80064f2:	0030      	movs	r0, r6
 80064f4:	f7ff ffbc 	bl	8006470 <__sinit>
 80064f8:	3648      	adds	r6, #72	; 0x48
 80064fa:	68b4      	ldr	r4, [r6, #8]
 80064fc:	6873      	ldr	r3, [r6, #4]
 80064fe:	3b01      	subs	r3, #1
 8006500:	d504      	bpl.n	800650c <__sfp+0x2c>
 8006502:	6833      	ldr	r3, [r6, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d022      	beq.n	800654e <__sfp+0x6e>
 8006508:	6836      	ldr	r6, [r6, #0]
 800650a:	e7f6      	b.n	80064fa <__sfp+0x1a>
 800650c:	220c      	movs	r2, #12
 800650e:	5ea5      	ldrsh	r5, [r4, r2]
 8006510:	2d00      	cmp	r5, #0
 8006512:	d11a      	bne.n	800654a <__sfp+0x6a>
 8006514:	0020      	movs	r0, r4
 8006516:	4b15      	ldr	r3, [pc, #84]	; (800656c <__sfp+0x8c>)
 8006518:	3058      	adds	r0, #88	; 0x58
 800651a:	60e3      	str	r3, [r4, #12]
 800651c:	6665      	str	r5, [r4, #100]	; 0x64
 800651e:	f000 f847 	bl	80065b0 <__retarget_lock_init_recursive>
 8006522:	f7ff ff8d 	bl	8006440 <__sfp_lock_release>
 8006526:	0020      	movs	r0, r4
 8006528:	2208      	movs	r2, #8
 800652a:	0029      	movs	r1, r5
 800652c:	6025      	str	r5, [r4, #0]
 800652e:	60a5      	str	r5, [r4, #8]
 8006530:	6065      	str	r5, [r4, #4]
 8006532:	6125      	str	r5, [r4, #16]
 8006534:	6165      	str	r5, [r4, #20]
 8006536:	61a5      	str	r5, [r4, #24]
 8006538:	305c      	adds	r0, #92	; 0x5c
 800653a:	f7ff fc24 	bl	8005d86 <memset>
 800653e:	6365      	str	r5, [r4, #52]	; 0x34
 8006540:	63a5      	str	r5, [r4, #56]	; 0x38
 8006542:	64a5      	str	r5, [r4, #72]	; 0x48
 8006544:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006546:	0020      	movs	r0, r4
 8006548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654a:	3468      	adds	r4, #104	; 0x68
 800654c:	e7d7      	b.n	80064fe <__sfp+0x1e>
 800654e:	2104      	movs	r1, #4
 8006550:	0038      	movs	r0, r7
 8006552:	f7ff ff57 	bl	8006404 <__sfmoreglue>
 8006556:	1e04      	subs	r4, r0, #0
 8006558:	6030      	str	r0, [r6, #0]
 800655a:	d1d5      	bne.n	8006508 <__sfp+0x28>
 800655c:	f7ff ff70 	bl	8006440 <__sfp_lock_release>
 8006560:	230c      	movs	r3, #12
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	e7ef      	b.n	8006546 <__sfp+0x66>
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	08006a64 	.word	0x08006a64
 800656c:	ffff0001 	.word	0xffff0001

08006570 <_fwalk_reent>:
 8006570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006572:	0004      	movs	r4, r0
 8006574:	0006      	movs	r6, r0
 8006576:	2700      	movs	r7, #0
 8006578:	9101      	str	r1, [sp, #4]
 800657a:	3448      	adds	r4, #72	; 0x48
 800657c:	6863      	ldr	r3, [r4, #4]
 800657e:	68a5      	ldr	r5, [r4, #8]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	9b00      	ldr	r3, [sp, #0]
 8006584:	3b01      	subs	r3, #1
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	d504      	bpl.n	8006594 <_fwalk_reent+0x24>
 800658a:	6824      	ldr	r4, [r4, #0]
 800658c:	2c00      	cmp	r4, #0
 800658e:	d1f5      	bne.n	800657c <_fwalk_reent+0xc>
 8006590:	0038      	movs	r0, r7
 8006592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006594:	89ab      	ldrh	r3, [r5, #12]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d908      	bls.n	80065ac <_fwalk_reent+0x3c>
 800659a:	220e      	movs	r2, #14
 800659c:	5eab      	ldrsh	r3, [r5, r2]
 800659e:	3301      	adds	r3, #1
 80065a0:	d004      	beq.n	80065ac <_fwalk_reent+0x3c>
 80065a2:	0029      	movs	r1, r5
 80065a4:	0030      	movs	r0, r6
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	4798      	blx	r3
 80065aa:	4307      	orrs	r7, r0
 80065ac:	3568      	adds	r5, #104	; 0x68
 80065ae:	e7e8      	b.n	8006582 <_fwalk_reent+0x12>

080065b0 <__retarget_lock_init_recursive>:
 80065b0:	4770      	bx	lr

080065b2 <__retarget_lock_acquire_recursive>:
 80065b2:	4770      	bx	lr

080065b4 <__retarget_lock_release_recursive>:
 80065b4:	4770      	bx	lr
	...

080065b8 <__swhatbuf_r>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	000e      	movs	r6, r1
 80065bc:	001d      	movs	r5, r3
 80065be:	230e      	movs	r3, #14
 80065c0:	5ec9      	ldrsh	r1, [r1, r3]
 80065c2:	0014      	movs	r4, r2
 80065c4:	b096      	sub	sp, #88	; 0x58
 80065c6:	2900      	cmp	r1, #0
 80065c8:	da08      	bge.n	80065dc <__swhatbuf_r+0x24>
 80065ca:	220c      	movs	r2, #12
 80065cc:	5eb3      	ldrsh	r3, [r6, r2]
 80065ce:	2200      	movs	r2, #0
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	061b      	lsls	r3, r3, #24
 80065d4:	d411      	bmi.n	80065fa <__swhatbuf_r+0x42>
 80065d6:	2380      	movs	r3, #128	; 0x80
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	e00f      	b.n	80065fc <__swhatbuf_r+0x44>
 80065dc:	466a      	mov	r2, sp
 80065de:	f000 f8d9 	bl	8006794 <_fstat_r>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	dbf1      	blt.n	80065ca <__swhatbuf_r+0x12>
 80065e6:	23f0      	movs	r3, #240	; 0xf0
 80065e8:	9901      	ldr	r1, [sp, #4]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	4019      	ands	r1, r3
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <__swhatbuf_r+0x4c>)
 80065f0:	18c9      	adds	r1, r1, r3
 80065f2:	424b      	negs	r3, r1
 80065f4:	4159      	adcs	r1, r3
 80065f6:	6029      	str	r1, [r5, #0]
 80065f8:	e7ed      	b.n	80065d6 <__swhatbuf_r+0x1e>
 80065fa:	2340      	movs	r3, #64	; 0x40
 80065fc:	2000      	movs	r0, #0
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	b016      	add	sp, #88	; 0x58
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	ffffe000 	.word	0xffffe000

08006608 <__smakebuf_r>:
 8006608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800660a:	2602      	movs	r6, #2
 800660c:	898b      	ldrh	r3, [r1, #12]
 800660e:	0005      	movs	r5, r0
 8006610:	000c      	movs	r4, r1
 8006612:	4233      	tst	r3, r6
 8006614:	d006      	beq.n	8006624 <__smakebuf_r+0x1c>
 8006616:	0023      	movs	r3, r4
 8006618:	3347      	adds	r3, #71	; 0x47
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	6123      	str	r3, [r4, #16]
 800661e:	2301      	movs	r3, #1
 8006620:	6163      	str	r3, [r4, #20]
 8006622:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006624:	466a      	mov	r2, sp
 8006626:	ab01      	add	r3, sp, #4
 8006628:	f7ff ffc6 	bl	80065b8 <__swhatbuf_r>
 800662c:	9900      	ldr	r1, [sp, #0]
 800662e:	0007      	movs	r7, r0
 8006630:	0028      	movs	r0, r5
 8006632:	f7ff fc1d 	bl	8005e70 <_malloc_r>
 8006636:	2800      	cmp	r0, #0
 8006638:	d108      	bne.n	800664c <__smakebuf_r+0x44>
 800663a:	220c      	movs	r2, #12
 800663c:	5ea3      	ldrsh	r3, [r4, r2]
 800663e:	059a      	lsls	r2, r3, #22
 8006640:	d4ef      	bmi.n	8006622 <__smakebuf_r+0x1a>
 8006642:	2203      	movs	r2, #3
 8006644:	4393      	bics	r3, r2
 8006646:	431e      	orrs	r6, r3
 8006648:	81a6      	strh	r6, [r4, #12]
 800664a:	e7e4      	b.n	8006616 <__smakebuf_r+0xe>
 800664c:	4b0f      	ldr	r3, [pc, #60]	; (800668c <__smakebuf_r+0x84>)
 800664e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	89a2      	ldrh	r2, [r4, #12]
 8006654:	6020      	str	r0, [r4, #0]
 8006656:	4313      	orrs	r3, r2
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	9b00      	ldr	r3, [sp, #0]
 800665c:	6120      	str	r0, [r4, #16]
 800665e:	6163      	str	r3, [r4, #20]
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <__smakebuf_r+0x7a>
 8006666:	0028      	movs	r0, r5
 8006668:	230e      	movs	r3, #14
 800666a:	5ee1      	ldrsh	r1, [r4, r3]
 800666c:	f000 f8a4 	bl	80067b8 <_isatty_r>
 8006670:	2800      	cmp	r0, #0
 8006672:	d006      	beq.n	8006682 <__smakebuf_r+0x7a>
 8006674:	2203      	movs	r2, #3
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	4393      	bics	r3, r2
 800667a:	001a      	movs	r2, r3
 800667c:	2301      	movs	r3, #1
 800667e:	4313      	orrs	r3, r2
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	89a0      	ldrh	r0, [r4, #12]
 8006684:	4307      	orrs	r7, r0
 8006686:	81a7      	strh	r7, [r4, #12]
 8006688:	e7cb      	b.n	8006622 <__smakebuf_r+0x1a>
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	080063f5 	.word	0x080063f5

08006690 <__malloc_lock>:
 8006690:	b510      	push	{r4, lr}
 8006692:	4802      	ldr	r0, [pc, #8]	; (800669c <__malloc_lock+0xc>)
 8006694:	f7ff ff8d 	bl	80065b2 <__retarget_lock_acquire_recursive>
 8006698:	bd10      	pop	{r4, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	200007ac 	.word	0x200007ac

080066a0 <__malloc_unlock>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	4802      	ldr	r0, [pc, #8]	; (80066ac <__malloc_unlock+0xc>)
 80066a4:	f7ff ff86 	bl	80065b4 <__retarget_lock_release_recursive>
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	200007ac 	.word	0x200007ac

080066b0 <__sread>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	000c      	movs	r4, r1
 80066b4:	250e      	movs	r5, #14
 80066b6:	5f49      	ldrsh	r1, [r1, r5]
 80066b8:	f000 f8a4 	bl	8006804 <_read_r>
 80066bc:	2800      	cmp	r0, #0
 80066be:	db03      	blt.n	80066c8 <__sread+0x18>
 80066c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80066c2:	181b      	adds	r3, r3, r0
 80066c4:	6563      	str	r3, [r4, #84]	; 0x54
 80066c6:	bd70      	pop	{r4, r5, r6, pc}
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	4a02      	ldr	r2, [pc, #8]	; (80066d4 <__sread+0x24>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	e7f9      	b.n	80066c6 <__sread+0x16>
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	ffffefff 	.word	0xffffefff

080066d8 <__swrite>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	001f      	movs	r7, r3
 80066dc:	898b      	ldrh	r3, [r1, #12]
 80066de:	0005      	movs	r5, r0
 80066e0:	000c      	movs	r4, r1
 80066e2:	0016      	movs	r6, r2
 80066e4:	05db      	lsls	r3, r3, #23
 80066e6:	d505      	bpl.n	80066f4 <__swrite+0x1c>
 80066e8:	230e      	movs	r3, #14
 80066ea:	5ec9      	ldrsh	r1, [r1, r3]
 80066ec:	2200      	movs	r2, #0
 80066ee:	2302      	movs	r3, #2
 80066f0:	f000 f874 	bl	80067dc <_lseek_r>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	4a05      	ldr	r2, [pc, #20]	; (800670c <__swrite+0x34>)
 80066f8:	0028      	movs	r0, r5
 80066fa:	4013      	ands	r3, r2
 80066fc:	81a3      	strh	r3, [r4, #12]
 80066fe:	0032      	movs	r2, r6
 8006700:	230e      	movs	r3, #14
 8006702:	5ee1      	ldrsh	r1, [r4, r3]
 8006704:	003b      	movs	r3, r7
 8006706:	f000 f81f 	bl	8006748 <_write_r>
 800670a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670c:	ffffefff 	.word	0xffffefff

08006710 <__sseek>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	000c      	movs	r4, r1
 8006714:	250e      	movs	r5, #14
 8006716:	5f49      	ldrsh	r1, [r1, r5]
 8006718:	f000 f860 	bl	80067dc <_lseek_r>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	1c42      	adds	r2, r0, #1
 8006720:	d103      	bne.n	800672a <__sseek+0x1a>
 8006722:	4a05      	ldr	r2, [pc, #20]	; (8006738 <__sseek+0x28>)
 8006724:	4013      	ands	r3, r2
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	bd70      	pop	{r4, r5, r6, pc}
 800672a:	2280      	movs	r2, #128	; 0x80
 800672c:	0152      	lsls	r2, r2, #5
 800672e:	4313      	orrs	r3, r2
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	6560      	str	r0, [r4, #84]	; 0x54
 8006734:	e7f8      	b.n	8006728 <__sseek+0x18>
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	ffffefff 	.word	0xffffefff

0800673c <__sclose>:
 800673c:	b510      	push	{r4, lr}
 800673e:	230e      	movs	r3, #14
 8006740:	5ec9      	ldrsh	r1, [r1, r3]
 8006742:	f000 f815 	bl	8006770 <_close_r>
 8006746:	bd10      	pop	{r4, pc}

08006748 <_write_r>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	0004      	movs	r4, r0
 800674c:	0008      	movs	r0, r1
 800674e:	0011      	movs	r1, r2
 8006750:	001a      	movs	r2, r3
 8006752:	2300      	movs	r3, #0
 8006754:	4d05      	ldr	r5, [pc, #20]	; (800676c <_write_r+0x24>)
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	f7fc f88b 	bl	8002872 <_write>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d103      	bne.n	8006768 <_write_r+0x20>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d000      	beq.n	8006768 <_write_r+0x20>
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	200007b0 	.word	0x200007b0

08006770 <_close_r>:
 8006770:	2300      	movs	r3, #0
 8006772:	b570      	push	{r4, r5, r6, lr}
 8006774:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_close_r+0x20>)
 8006776:	0004      	movs	r4, r0
 8006778:	0008      	movs	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fc f895 	bl	80028aa <_close>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d103      	bne.n	800678c <_close_r+0x1c>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d000      	beq.n	800678c <_close_r+0x1c>
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	200007b0 	.word	0x200007b0

08006794 <_fstat_r>:
 8006794:	2300      	movs	r3, #0
 8006796:	b570      	push	{r4, r5, r6, lr}
 8006798:	4d06      	ldr	r5, [pc, #24]	; (80067b4 <_fstat_r+0x20>)
 800679a:	0004      	movs	r4, r0
 800679c:	0008      	movs	r0, r1
 800679e:	0011      	movs	r1, r2
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	f7fc f88c 	bl	80028be <_fstat>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d103      	bne.n	80067b2 <_fstat_r+0x1e>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d000      	beq.n	80067b2 <_fstat_r+0x1e>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	200007b0 	.word	0x200007b0

080067b8 <_isatty_r>:
 80067b8:	2300      	movs	r3, #0
 80067ba:	b570      	push	{r4, r5, r6, lr}
 80067bc:	4d06      	ldr	r5, [pc, #24]	; (80067d8 <_isatty_r+0x20>)
 80067be:	0004      	movs	r4, r0
 80067c0:	0008      	movs	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fc f889 	bl	80028da <_isatty>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d103      	bne.n	80067d4 <_isatty_r+0x1c>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d000      	beq.n	80067d4 <_isatty_r+0x1c>
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	200007b0 	.word	0x200007b0

080067dc <_lseek_r>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	0004      	movs	r4, r0
 80067e0:	0008      	movs	r0, r1
 80067e2:	0011      	movs	r1, r2
 80067e4:	001a      	movs	r2, r3
 80067e6:	2300      	movs	r3, #0
 80067e8:	4d05      	ldr	r5, [pc, #20]	; (8006800 <_lseek_r+0x24>)
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fc f87e 	bl	80028ec <_lseek>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d103      	bne.n	80067fc <_lseek_r+0x20>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d000      	beq.n	80067fc <_lseek_r+0x20>
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	200007b0 	.word	0x200007b0

08006804 <_read_r>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	0004      	movs	r4, r0
 8006808:	0008      	movs	r0, r1
 800680a:	0011      	movs	r1, r2
 800680c:	001a      	movs	r2, r3
 800680e:	2300      	movs	r3, #0
 8006810:	4d05      	ldr	r5, [pc, #20]	; (8006828 <_read_r+0x24>)
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fc f810 	bl	8002838 <_read>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d103      	bne.n	8006824 <_read_r+0x20>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d000      	beq.n	8006824 <_read_r+0x20>
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	bd70      	pop	{r4, r5, r6, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	200007b0 	.word	0x200007b0

0800682c <_init>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr

08006838 <_fini>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr
