<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CMT2300A_EasyDome.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CMT2300A_EasyDome.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Aug 02 16:17:31 2023
<BR><P>
<H3>Maximum Stack Usage =        124 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; OnSlave &rArr; RF_Process &rArr; RF_Config &rArr; Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">DMA1_Channel1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DMA1_Channel1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC1_IRQHandler</a> from stm32f0xx_it.o(i.ADC1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[14]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">EXTI0_1_IRQHandler</a> from stm32f0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[10]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from stm32f0xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from stm32f0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">TIM3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[25]">__main</a> from __main.o(!!!main) referenced from startup_stm32f030.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[28]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[90]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[91]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[29]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[92]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[93]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[94]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[95]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[96]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[97]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[98]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[99]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[27]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ae]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[af]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OnSlave &rArr; RF_Process &rArr; RF_Config &rArr; Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[31]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[33]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f030.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
</UL>

<P><STRONG><a name="[b3]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[37]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRx
</UL>

<P><STRONG><a name="[b4]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_Configration
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[30]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[be]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bf]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>ADC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.ADC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>Cmt2300_ClearFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_ClearFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Cmt2300_ClearFifo &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[42]"></a>Cmt2300_ClearInterruptFlags</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, cmt2300.o(i.Cmt2300_ClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Cmt2300_ClearInterruptFlags &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
</UL>

<P><STRONG><a name="[43]"></a>Cmt2300_ConfigDataMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_ConfigDataMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_ConfigDataMode &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>Cmt2300_ConfigDataRate</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_ConfigDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Cmt2300_ConfigDataRate &rArr; Cmt2300_ConfigRegBank &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigRegBank
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>Cmt2300_ConfigGpio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Cmt2300_ConfigGpio &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[47]"></a>Cmt2300_ConfigInterrupt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_ConfigInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_ConfigInterrupt &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[48]"></a>Cmt2300_ConfigPktLenthType</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_ConfigPktLenthType))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_ConfigPktLenthType &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>Cmt2300_ConfigRegBank</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cmt2300.o(i.Cmt2300_ConfigRegBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Cmt2300_ConfigRegBank &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigDataRate
</UL>

<P><STRONG><a name="[49]"></a>Cmt2300_ConfigTxPower</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_ConfigTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_ConfigTxPower &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>Cmt2300_EnableAntennaSwitch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_EnableAntennaSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_EnableAntennaSwitch &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[4b]"></a>Cmt2300_EnableFifoMerge</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_EnableFifoMerge))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_EnableFifoMerge &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>Cmt2300_EnableInterrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Cmt2300_EnableInterrupt &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[4d]"></a>Cmt2300_EnableLfosc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_EnableLfosc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_EnableLfosc &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
</UL>

<P><STRONG><a name="[4e]"></a>Cmt2300_EnableReadFifo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_EnableReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Cmt2300_EnableReadFifo &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[4f]"></a>Cmt2300_EnableWriteFifo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_EnableWriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Cmt2300_EnableWriteFifo &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[50]"></a>Cmt2300_GetChipStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_GetChipStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WaitChipStatus
</UL>

<P><STRONG><a name="[51]"></a>Cmt2300_GoRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_GoRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Cmt2300_GoRx &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WaitChipStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[53]"></a>Cmt2300_GoSleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_GoSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WaitChipStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[54]"></a>Cmt2300_GoStby</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_GoStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Cmt2300_GoStby &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WaitChipStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
</UL>

<P><STRONG><a name="[55]"></a>Cmt2300_GoTx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_GoTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Cmt2300_GoTx &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WaitChipStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[56]"></a>Cmt2300_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Cmt2300_Init &rArr; Cmt2300_GoStby &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_SoftReset
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoStby
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableLfosc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[59]"></a>Cmt2300_InitGpio</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmt2300_hal.o(i.Cmt2300_InitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Cmt2300_InitGpio &rArr; cmt_spi3_init &rArr; spi_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[5b]"></a>Cmt2300_IsExist</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_IsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_IsExist &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>Cmt2300_ReadFifo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cmt2300_hal.o(i.Cmt2300_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Cmt2300_ReadFifo &rArr; cmt_spi3_read_fifo &rArr; cmt_spi3_sda_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[40]"></a>Cmt2300_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cmt2300_hal.o(i.Cmt2300_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_SetPayloadLength
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_IsExist
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GetChipStatus
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableWriteFifo
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableReadFifo
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableLfosc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableFifoMerge
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableAntennaSwitch
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigTxPower
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigPktLenthType
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigInterrupt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigDataRate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigDataMode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearInterruptFlags
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearFifo
</UL>

<P><STRONG><a name="[5f]"></a>Cmt2300_SetPayloadLength</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_SetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Cmt2300_SetPayloadLength &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[57]"></a>Cmt2300_SoftReset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300.o(i.Cmt2300_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Cmt2300_SoftReset &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
</UL>

<P><STRONG><a name="[52]"></a>Cmt2300_WaitChipStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmt2300.o(i.Cmt2300_WaitChipStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GetChipStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoTx
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoStby
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoSleep
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoRx
</UL>

<P><STRONG><a name="[60]"></a>Cmt2300_WriteFifo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cmt2300_hal.o(i.Cmt2300_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Cmt2300_WriteFifo &rArr; cmt_spi3_write_fifo &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[41]"></a>Cmt2300_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cmt2300_hal.o(i.Cmt2300_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_SoftReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_SetPayloadLength
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_IsExist
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoTx
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoStby
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoSleep
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoRx
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableWriteFifo
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableReadFifo
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableLfosc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableInterrupt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableFifoMerge
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableAntennaSwitch
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigTxPower
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigRegBank
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigPktLenthType
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigInterrupt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigGpio
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigDataRate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigDataMode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearInterruptFlags
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearFifo
</UL>

<P><STRONG><a name="[58]"></a>Delay_Ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, delay.o(i.Delay_Ms))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>

<P><STRONG><a name="[f]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[63]"></a>EXTI_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>EXTI_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[66]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_out
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_in
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pin_Setting
</UL>

<P><STRONG><a name="[65]"></a>GPIO_Pin_Setting</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, gpio.o(i.GPIO_Pin_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Pin_Setting &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>

<P><STRONG><a name="[67]"></a>HW_Int</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.HW_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_Int &rArr; Led_Init &rArr; GPIO_Pin_Setting &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_Configration
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>LedToggle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.LedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[6c]"></a>Led_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Led_Init &rArr; GPIO_Pin_Setting &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pin_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>NVIC_Config</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gpio.o(i.NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Config &rArr; SYSCFG_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[71]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[72]"></a>OnMaster</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.OnMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = OnMaster &rArr; RF_Process &rArr; RF_Config &rArr; Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartTx
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>OnSlave</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, main.o(i.OnSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = OnSlave &rArr; RF_Process &rArr; RF_Config &rArr; Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRx
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[79]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[7a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6a]"></a>RCC_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[7f]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[7d]"></a>RCC_PLLCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[7e]"></a>RCC_PLLConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[80]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[7b]"></a>RF_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, radio.o(i.RF_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RF_Config &rArr; Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoSleep
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableLfosc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableInterrupt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableAntennaSwitch
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigInterrupt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[7c]"></a>RF_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, radio.o(i.RF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RF_Init &rArr; RF_Config &rArr; Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_InitGpio
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigRegBank
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>RF_Process</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, radio.o(i.RF_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RF_Process &rArr; RF_Config &rArr; Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteFifo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadFifo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_SoftReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_SetPayloadLength
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoTx
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoStby
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoRx
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableWriteFifo
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableReadFifo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearInterruptFlags
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[77]"></a>RF_StartRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio.o(i.RF_StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_StartRx
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
</UL>

<P><STRONG><a name="[74]"></a>RF_StartTx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(i.RF_StartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RF_StartTx
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f0xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[68]"></a>SysClock_48</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.SysClock_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysClock_48 &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM14_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>TIM_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>Tick_Configration</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.Tick_Configration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tick_Configration &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, radio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
</UL>

<P><STRONG><a name="[88]"></a>cmt_spi3_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmt_spi3.o(i.cmt_spi3_delay))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>

<P><STRONG><a name="[8e]"></a>cmt_spi3_delay_us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmt_spi3.o(i.cmt_spi3_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
</UL>

<P><STRONG><a name="[5a]"></a>cmt_spi3_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmt_spi3.o(i.cmt_spi3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmt_spi3_init &rArr; spi_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_InitGpio
</UL>

<P><STRONG><a name="[5e]"></a>cmt_spi3_read</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_out
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_in
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>

<P><STRONG><a name="[5d]"></a>cmt_spi3_read_fifo</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmt_spi3_read_fifo &rArr; cmt_spi3_sda_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_in
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_recv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay_us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadFifo
</UL>

<P><STRONG><a name="[8d]"></a>cmt_spi3_recv</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmt_spi3_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[87]"></a>cmt_spi3_sda_in</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gpio.o(i.cmt_spi3_sda_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cmt_spi3_sda_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>

<P><STRONG><a name="[89]"></a>cmt_spi3_sda_out</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gpio.o(i.cmt_spi3_sda_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[8c]"></a>cmt_spi3_send</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmt_spi3_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[62]"></a>cmt_spi3_write</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmt_spi3_write &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_out
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_in
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>

<P><STRONG><a name="[61]"></a>cmt_spi3_write_fifo</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, cmt_spi3.o(i.cmt_spi3_write_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmt_spi3_write_fifo &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_out
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_sda_in
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay_us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteFifo
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = main &rArr; OnSlave &rArr; RF_Process &rArr; RF_Config &rArr; Cmt2300_GoSleep &rArr; Cmt2300_WaitChipStatus &rArr; Cmt2300_GetChipStatus &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; cmt_spi3_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartTx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRx
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_IsExist
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableFifoMerge
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigTxPower
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigPktLenthType
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigDataRate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigDataMode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[86]"></a>spi_gpio_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gpio.o(i.spi_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[81]"></a>SetSysClock</STRONG> (Thumb, 206 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[85]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_Configration
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
